-- MySQL dump 10.13  Distrib 8.0.27, for Win64 (x86_64)
--
-- Host: localhost    Database: myblog
-- ------------------------------------------------------
-- Server version	8.0.27

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `tb_article`
--

DROP TABLE IF EXISTS `tb_article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tb_article` (
  `id` int NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL COMMENT '作者',
  `category_id` int DEFAULT NULL COMMENT '文章分类',
  `article_cover` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '文章缩略图',
  `article_title` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '标题',
  `article_content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '内容',
  `type` tinyint(1) NOT NULL DEFAULT '0' COMMENT '文章类型 1原创 2转载 3翻译',
  `original_url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '原文链接',
  `is_top` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否置顶 0否 1是',
  `is_delete` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否删除  0否 1是',
  `status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '状态值 1公开 2私密 3评论可见',
  `create_time` datetime NOT NULL COMMENT '发表时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=61 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tb_article`
--

LOCK TABLES `tb_article` WRITE;
/*!40000 ALTER TABLE `tb_article` DISABLE KEYS */;
INSERT INTO `tb_article` VALUES (54,1,187,'https://static.talkxj.com/articles/3dffb2fcbd541886616ab54c92570de3.jpg','测试文章','恭喜你成功运行博客，开启你的文章之旅吧。',1,'',0,1,1,'2022-01-24 23:33:56','2022-07-15 09:52:39'),(56,1,189,'http://47.108.219.199:81/articles/38f824b33a076ce0f642d48d4d6aab6b.png','《动手学强化学习》-chap4-交叉熵方法','# chap4-The-Cross-Entroy-Method\n\n大部分的知识参照于这篇[cross-entropy method simple intro](https://people.smp.uq.edu.au/DirkKroese/ps/eormsCE.pdf)\n\n`Cross Entropy Method(CE method)`是一种进化策略算法，它虽然也是基于交叉熵，但并不是我们熟知的监督学习中的交叉熵方法。这个算法的核心是一个参数优化的过程。CE method已经成功应用于不同范围的估计和优化问题，包括缓冲区分配、信号检测、DNA排序、交通控制以及神经网络和强化学习等领域。\n\ncross-entropy方法的基础是重要性采样，有以下公式表示：\n$$\n\\mathbb{E}_{x \\sim p{x}}[H(x)]=\\int_x p(x)H(x)dx=\\int_x q(x)\\frac{p(x)}{q(x)}H(x)dx=\\mathbb{E}_{x \\sim q(x)} \\bigg[\\frac{p(x)}{q(x)}H(x) \\bigg]\n$$\n在强化学习领域，$H(x)$ 是一些策略设定的奖励函数，$x,p(x)$是所有可能的策略的分布。我们不想通过搜索所有可能的策略来最大化奖励，而是希望找到一种方法 $q(x)$ 来近似 $p(x)H(x)$，反复的迭代以最小化两个概率分布之间的距离。两个概率分布之间的距离有Kullback-Leibler(KL)散度计算：\n$$\nKL(p_1(x)||p_2(x))=\\mathbb{E}_{x \\sim p_1(x)} \\log \\frac{p_1(x)}{p_2(x)} =\\mathbb{E}_{x \\sim p_1(x)}[\\log p_1(x)] - \\mathbb{E}_{x \\sim p_1(x)}[\\log p_2(x)]\n$$\nKL散度中的第一项称为熵，它不依赖于 $p_2(x)$，因此在最小化过程中可以忽略它。第二项叫做交叉熵，这是深度学习中是非常常见的优化目标。结合这两个公式，我们可以得到一个迭代算法，它从 $q_0(x)=p(x)$ 开始，每一步都有所改进。这是 $p(x)H(x)$  的近似值，有一个更新公式：\n$$\nq_{i+1}(x) = \\mathop{\\arg\\min}_{q_{i+1}(x)}-\\mathbb{E}_{x \\sim q_i(x)} \\frac{p(x)}{q_i(x)} H(x) \\log q_{i+1}(x)\n$$\n这是一种通用的交叉熵方法，可以在我们的RL案例中大大简化。首先，我们将 $H(x)$ 替换为一个指示函数，当奖励高于阈值时为1，当奖励低于阈值时为0。我们的策略更新如下所示：\n$$\n\\pi_{i+1}(\\alpha|s) = \\mathop{\\arg \\min}_{\\pi_{i+1}} - \\mathbb{E}_{\\mathrm{z} \\sim pi_i(\\alpha | \\mathrm{s})} [R(\\mathrm{z}\\geq \\psi_i)] \\log \\pi_{i+1}(\\alpha|\\mathrm{s})\n$$\n严格地说，上述公式忽略了规范化项，但在没有规范化项的情况下，它在实践中仍然有效。因此，方法非常明确：我们使用当前策略（从一些随机初始策略开始）对事件进行采样，并最小化最成功的样本负对数可能性。\n\n上述代码的运行结果，在tensorboard查看的效果如下：\n\nloss\n\n![](imgs/loss.svg)\n\nreward_bound\n\n![](imgs/reward_bound.svg)\n\nreward_mean\n\n![](imgs/reward_mean.svg)\n\n',1,'',0,0,1,'2022-07-13 17:00:33',NULL),(57,2,190,'http://47.108.219.199:81/articles/5ab52cd9a42fd496bf83f4fe2b5a33f1.png','ResNet学习笔记','# ResNet学习笔记\n\n## 前言\n\n深度残差网络（Deep Residual Network）是cnn机器视觉史上的一件里程碑的事件，在2015年，ResNet在ImageNet和COCO数据集上获得了非常优秀的成绩。如下图所示：\n\n* ImageNet Classification: “Ultra-deep”`152-layer` nets\n* ImageNet Detection: `16%` better than 2nd\n* ImageNet Localization: `27%` better than 2nd\n* COCO Detection: `11%` better than 2nd\n* COCO Segmentation: `12%` better than 2nd\n\nResNet获得了五项第一，再一次的刷新了CNN模型在ImageNet上的历史[<sup>[1]</sup>](#ref-1)，而论文的作者[何凯明](http://kaiminghe.com/)也获得了CVPR2016最佳论文奖[<sup>[2]</sup>](#ref-2)。以下是记录了解ResNet的一些笔记，主要是来自于15年和16年何凯明所在的微软研究院发表的论文。\n\n## 深度网络退化问题（degradation problem of deep network）\n\n从`AlexNet`到`GoogLeNet`，看起来好像是网络越深越好，但是直接秉持着`We need go deeper`的思想构建神经网络，到最后会发现，随着网络越来越深，会出现**梯度消失（vanishing gradients）**和**梯度爆炸（exploding gradients）**以及**网络退化（network degradation）**：\n\n* **梯度消失和爆炸（vanishing/exploding gradients）**：网络层数太深引发的梯度方向传播中的连乘效应引起\n* **网络退化（network degradation）**：较深的模型可以看作是较浅模型的超空间，理论上较深的模型可以看作是较浅模型的恒等映射，但是实际上较深模型后面添加的不是恒等映射，而是一些非线性层[<sup>[3]</sup>](#ref-3)\n\n对于梯度消失和爆炸的应对方法如下：\n\n* **改换激活函数**: 使用`relu`、`LeakyRelu`、`ELU`等激活函数可以改善梯度消散或爆炸问题。`relu`导数的正数部分恒等于1，所以不会产生梯度消失和梯度爆炸\n* **BatchNormalization**: 对每一层的输入做scale和shift方法，将每层神经元的输入分布强行拉回均值为0、方差为1的标准正态分布，这就使得激活层输入值落入在非线性函数对输入值比较敏感的区域，使得输入的小变化会导致损失函数较大的变化，使得梯度变大，训练速度加快，且避免梯度消失问题\n* **梯度剪切**: 该方法主要是针对梯度爆炸提出。其思想是设置一个梯度剪切阈值，更新梯度时，如果梯度超过这个阈值，那么限制其在这个范围之内\n\n但是随着网络的加深，可以看到的是训练误差和测试误差都开始增加，这自然不是过拟合引起的，而是网络出现退化[<sup>[4]</sup>](#ref-4)，如[figure1](#fig-1)所示：\n\n![fig1.png](http://47.108.219.199:81/articles/cc162f1b7ba3267c9f91b33fee48fa18.png)\n\n网络退化表明了并非所有系统都同样容易优化。考虑一个较深的网络和一个较浅的网络，更深的网络对应更浅的网络相当于是增加了更多的层，添加的层可以是恒等映射（identity mapping），而其他的层是相当于是更浅的模型中直接复制的，这种构造容易得到，较深的模型不会产生比较浅的模型更高的训练误差，但是实验表明，简单地加深网络模型会出现网络退化的问题。\n\n## 残差块（Residual block）\n\n![fig2.png](http://47.108.219.199:81/articles/5ab52cd9a42fd496bf83f4fe2b5a33f1.png)\n\n\n网络退化出现的原因就是**现有的网络无法实现恒等映射**，将想要得到的恒等映射函数表示为 $H(x)=x$，残差块网络设计为 $H(x)=F(x)+x$，即直接将恒等映射作为网络的一部分，就可以将问题转化为学习一个残差函数 $F(x)=H(x)-x$，那么只要 $F(x)=0$，就可以构成一个恒等映射 $H(x)=x$，拟合残差比拟合恒等映射容易的多[<sup>[5]</sup>](#ref-5)。从数学上更加详细地描述残差结构，可以是：\n\n<div id=\"eqn-1\"></div>\n\n$$\ny=F(x, W_i)+x\n$$\n\n其中 $x$ 和 $y$ 表示的分别是所考虑的层的输入和输出向量，函数 $F(x, W_i)$ 表示要学习的残差映射，操作 $F(x, W_i)+x$ 是通过跳接实现，在[方程1](#eqn-1)中 $x$ 和 $F$ 的维度必须相同，否则，需要对跳接进行线性投影 $W_s$ 来匹配维度：\n\n<div id=\"eqn-2\"></div>\n\n$$\ny=F(x, W_i)+W_s x\n$$\n\n* $F(x)+x$ 的公式可以通过具有跳接（shortcut connections）的前馈神经网络来实现，跳接可以是跳过一层或者多层的连接，通过跳接在激活函数前，将上一层或几层的输出与本层输出相加，将求和结果输入到激活函数作为本层的输出，残差块示例如[figure2](#fig-2)所示\n\n* 跳接只是执行**恒等映射**，他们的输出被添加到堆叠层的输出中，这不会增加额外的参数，也不会增加计算复杂性\n\n* 添加了残差网络，可以给神经网络一个多的选择，例如**学习到的一层的参数是冗余的，那么就可以直接走跳接路线，跳过这个冗余层**，而不用去拟合参数使得输出 $H(x)=x$\n\n* **学习残差的计算量比学习输出等于输入小**：例如普通网络为A，残差网络为B，输入为2，输出为2，那么普通网络就是$A(2)=2$，而残差网络就是$B(2)=F(2)+2=2$，即残差网络中$F(2)=0$。一般网络会将**权重初始化为0附近的数**，所以让$F(2)$拟合0会比$A(2)=2$容易\n\n* **ReLU能够将负数激活为0**，正数等于输出，这相当于过滤了负数的线性变化，让$F(x)=0$变的更加容易\n\n![ReLU.png](http://47.108.219.199:81/articles/d2a8b07068c5d4edf86077b2a2f6eff0.png)\n\n* 对残差网络$H(x)=F(x)+x$求梯度，即反向传播时，得到$H\'(x)=F\'(x)+1$，**残差结构的这个常数1能够保证求梯度的时候梯度不会消失**\n\n* 这种结构不仅适用于全连接层，还**适用于卷积层，逐通道地对两个特征图执行元素相加**\n\n## 网络架构\n\n<div id=\"fig3\"></div>\n\n![fig3.png](http://47.108.219.199:81/articles/849f0bd1c2e4ce63d30090c3b2fbc253.png)\n\n网络结构如[figure3](#fig3)所示，从左到右分别是VGG-19（196亿次浮点运算）、34层不带残差的plain net（36亿次浮点运算）、34层的残差网络（36亿次浮点运算）\n\n#### plain network\n\n* 主要受到VGGNet的启发，遵循两个简单设计规则：\n  * 对于相同的输出特征图大小，层具有相同数量的滤波器\n  * 如果特征图大小减半，则过滤器的数量加倍\n* 步长为2的卷积层直接执行下采样\n* 网络结尾是一个整体平均池化层和一个1000路的全连接层和softmax函数\n* 总体的带权重的层是34层\n* 该模型比VGGNet相比具有更少的滤波器和更低的复杂度，plain net 有36亿次浮点运算，而VGG-19有196亿次浮点运算，前者是后者的18%\n\n#### Residual Network\n\n* 在plain net网络中引入了**跳接（shortcut conncetions）**，将其转换为了对应的残差版本\n* 跳接引入有两种形式：\n  * 实线：跳接引入的输入和输出维度相同，可以直接相加，如[公式1](#eqn-1)\n  * 虚线：引入的维度增加时，可以有两种方式\n    * 跳接仍然执行恒等映射，**填充零**元素保证维度相同\n    * 利用[公式2](#eqn-2)对跳接进行**投影**来匹配维度\n\n## 实现细节\n\n* 遵循AlexNet数据预处理的方法，对图像进行裁剪和水平翻转得到224 x 224的图像，然后减去每个像素的平均值[<sup>[6]</sup>](#ref-6)\n* 每次卷积之后和激活函数之前采用批处理标准化（batch normalization, BN）\n* 批大小（mini-batch ）为256\n* 学习率（learning rate） 从 0.1 开始，当误差平稳时，学习率除以10，模型训练了 $60 \\times 10^4$ 次迭代\n* 权重衰减（weight decay）0.0001，动量（momentum）为 0.9\n* 网络中没有使用到dropout\n\n## 实验结果\n\n### ImageNet分类结果\n\n对比了18层和34层的plain net以及对应的ResNet，可以看到如[figure4](#fig-4)所示，**残差结果确实解决了退化问题**\n\n![fig4.png](http://47.108.219.199:81/articles/4e81b4c3ae87e50e68e0995b5f71f4b3.png)\n\n![](imgs/fig4.png)\n\n对比了ImageNet数据集的测试结果汇总如[表3](#table-3)所示\n\n<div id=\"table-3\"></div>\n\n![table3.png](http://47.108.219.199:81/articles/8678df35b304c133111aec5685fc75a3.png)\n\n\n\n## 参考文献\n\n<div id=\"ref-1\"></div>\n\n- [1] [知乎文章：你必须要知道CNN模型：ResNet](https://zhuanlan.zhihu.com/p/31852747/)\n\n<div id=\"ref-2\"></div>\n\n- [2] [何凯明个人主页](http://kaiminghe.com/)\n\n<div id=\"ref-3\"></div>\n\n- [3] [csdn博客：网络退化、过拟合、梯度消散/爆炸](https://blog.csdn.net/c2250645962/article/details/102838830)\n\n<div id=\"ref-4\"></div>\n\n- [4] [He K ,  Zhang X ,  Ren S , et al. Deep Residual Learning for Image Recognition[J]. 2016 IEEE Conference on Computer Vision and Pattern Recognition (CVPR), 2016.](https://arxiv.org/pdf/1512.03385.pdf)\n\n<div id=\"ref-5\"></div>\n\n- [5] [知乎文章：CVPR2016:ResNet 从根本上解决深度网络退化问题](https://zhuanlan.zhihu.com/p/106764370)\n\n<div id=\"ref-6\"></div>\n\n- [6] [Krizhevsky A , Sutskever I , Hinton G . ImageNet Classification with Deep Convolutional Neural Networks[J]. Advances in neural information processing systems, 2012, 25(2).](https://proceedings.neurips.cc/paper/2012/file/c399862d3b9d6b76c8436e924a68c45b-Paper.pdf)\n\n',1,'',0,0,1,'2022-07-13 22:43:33','2022-07-15 09:32:14'),(58,2,191,'http://47.108.219.199:81/articles/a2fc5f9fc3d6c835e4e123757f282664.jpg','Java进阶知识精华汇总','# Java进阶简介\n\n主要的知识点来自于黑马程序员的视频：`BV1TE41177mP`\n\n\n\n# day1-复习回顾、静态、继承、引用类型使用\n\n## 定义类\n\n- 类名的首字母应该大写，满足**驼峰写法**\n- 一个Java文件可以定义多个类。但是只有一个类是用`public`修饰，`public`修饰的类名必须称为`Java`文件名。\n\n- 类中有且仅有5大成分（五大金刚）\n\n  - **成员变量Field**：描述类或者对象的属性信息的。\n  - **成员方法Method**：描述类或者对象的行为的。\n  - **构造器（构造方法,Constructor）**: 初始化类的一个对象返回。\n    - 有参构造器\n    - 无参构造器\n  - **代码块**\n\n  - **内部类**\n\n## 封装\n\n- 面向对象的三大**特征**之一：**封装，继承，多态**。 \n- 形成了规范，即使毫无意义还是会这样写代码！\n- 合理隐藏，合理暴露。\n- 封装的规范：成员变量私有，方法一般公开，提供成套的`getter`和`setter`方法暴露成员变量的取值和赋值，`public`修饰符\n- 封装的作用：提高安全性，提高代码的组件化思想。\n- 封装已经成为`Java`代码的规范，即使毫无意义，我们也要这样写代码（成员变量私有，方法公开）\n\n## this关键字\n\n- `this`代表了当前对象的引用。\n- `this`可以出现在构造器和方法中。\n- `this`出现在构造器中代表构造器正在初始化的对象。\n- `this`出现在方法中，哪个对象调用方法，`this`就代表哪个对象。\n- `this`可以访问对象的成员变量，区分成员变量是局部的还是对象中的成员变量。\n\n## static关键字\n\n`Java`是通过成员变量是否有`static`修饰来区分是类的还是属于对象的\n\n* 没有`static`修饰的方法和变量是属于每个对象的\n* 有`static`修饰的方法和成员变量属于类的\n\n按照有无`static`修饰，成员变量和方法可以分为：\n\n**成员变量**：\n\n* **静态成员变量**（类变量）：有`static`修饰的成员变量称为静态成员变量也叫类变量，属于类本身的，**直接用类名访问**即可。\n* **实例成员变量**：无`static`修饰的成员变量称为实例成员变量，属于类的每个对象的，**必须用类的对象来访问**。\n\n> * 同一个类中访问静态成员变量可以省略类名不写\n> * 对象也可以访问静态成员变量，但是不推荐，静态成员变量属于类，如果用对象访问静态成员变量容易混淆\n\n成员变量访问内存\n\n![image-20220427112225577](http://47.108.219.199:81/articles/image-20220427112225577.png)\n\n```java\npublic class Student{\n    // 1.静态成员变量:有static修饰，属于类本身，直接用类名访问即可！\n    public static String schoolName = \"黑马\";\n    // 2.实例成员变量:无static修饰，属于类的对象的，必须用对象访问！\n    private String name;\n    private int age ;\n\n    public static void main(String[] args) {\n        // 1.类名.静态成员变量\n        System.out.println(Student.schoolName);\n        // 注意：同一个类中访问静态成员变量可以省略类名不写\n        System.out.println(schoolName);\n\n        // 2.对象.实例成员变量\n        //System.out.println(Student.name); // 报错！\n        Student swk = new Student();\n        swk.name = \"孙悟空\";\n        System.out.println(swk.name);\n        System.out.println(swk.age);\n\n        // 3.对象.静态成员变量(不推荐)\n        // 静态成员变量属于类，直接用类名访问即可。\n        System.out.println(swk.schoolName);\n    }\n}\n```\n\n**成员方法**：\n\n* **静态方法**：有`static`修饰的成员方法称为静态方法也叫类方法，属于类本身的，**直接用类名访问**即可。\n* **实例方法**：无`static`修饰的成员方法称为实例方法，属于类的每个对象的，**必须用类的对象**来访问。\n\n> * 静态方法属于类，有static修饰，直接用类名访问即可。\n> * 实例方法属于对象，无static修饰，必须先创建对象，然后用对象来访问。\n> * 静态方法也可以被对象共享访问，但是不推荐，因为静态方法直接用类名访问即可。\n\n![image-20220427143750503](http://47.108.219.199:81/articles/image-20220427143750503.png)\n\n```java\npublic class Student {\n    // 0.实例成员变量。\n    private String name;\n    private int age ;\n\n    // 1.静态方法：有static修饰，属于类，直接用类名访问即可！\n    public static void inAddr(){\n        System.out.println(\"我们都在天河区吉山村happy的学习Java!\");\n    }\n\n    // 2.实例方法：无static修饰，属于对象，必须用对象访问！\n    public void eat(){\n        System.out.println(name + \"已经\"+age+\"岁，在吃好吃的！！\");\n    }\n\n    public static void main(String[] args) {\n        // a.类名.静态方法\n        Student.inAddr();\n        // 注意：在同一个类中访问静态成员可以省略类名不写！！\n        inAddr();\n\n        // b.对象.实例方法\n        // Student.eat(); // 报错了！\n        Student zbj = new Student();\n        zbj.name = \"猪刚鬣\";\n        zbj.age = 1000;\n        zbj.eat();\n\n        // c.对象.静态方法(不推荐)\n        zbj.inAddr();\n    }\n}\n```\n\n关于`static`常考的八类题：\n\n* 实例方法是否可以直接访问实例成员变量？可以的，因为它们都属于对象。\n* 实例方法是否可以直接访问静态成员变量？可以的，静态成员变量可以被共享访问。\n* 实例方法是否可以直接访问实例方法? 可以的，实例方法和实例方法都属于对象。\n* 实例方法是否可以直接访问静态方法？可以的，静态方法可以被共享访问！\n* 静态方法是否可以直接访问实例变量？ 不可以的，实例变量必须用对象访问！！\n* 静态方法是否可以直接访问静态变量？ 可以的，静态成员变量可以被共享访问。\n* 静态方法是否可以直接访问实例方法? 不可以的，实例方法必须用对象访问！！\n* 静态方法是否可以直接访问静态方法？可以的，静态方法可以被共享访问！！\n\n> **也就是说实例方法啥都可以访问，静态方法只能访问静态方法或者静态变量**\n\n## 继承\n\n### 继承的概述\n\n面向对象的三大特征：封装、继承和多态\n\n继承是Java中一般到特殊的关系，是一种子类到父类的关系。例如：学生类继承了人类。  猫类继承了动物类。\n\n被继承的类称为：父类/超类。继承父类的类称为：子类\n\n* 继承可以**提高代码的复用性**\n* 子类直接继承父类，就可以直接使用父类的这些代码了（相同代码重复利用）\n\n子类继承了一个父类，子类就可以直接得到父类的属性（成员变量）和行为（方法）了。\n\n### 继承的例子\n\n```java\nclass Animal{\n\n}\n\nclass Cat extends Animal{\n\n}\n```\n\n> - 继承的优势可以把相同的代码定义在父类中，子类可以直接继承使用。\n> - 这样就可以**提高代码的复用性**：相同代码只需要在父类中写一次就可以了。\n\n### 子类不能继承父类的内容\n\n- 子类继承父类，子类就得到了父类的属性和行为。\n- 但是并非所有父类的属性和行为等子类都可以继承。\n\n**子类不能继承父类的东西**：子类不能继承父类的构造器，子类有自己的构造器。（没有争议的）\n\n有争议的观点（拓展）：\n\n**子类是否可以继承父类的私有成员**（私有成员变量，私有成员方法）?\n\n* **子类是可以继承父类的私有成员的，只是不能直接访问而已**。\n* 以后可以暴力去访问继承自父类的私有成员~~~\n\n**子类是否可以继承父类的静态成员？**\n\n* **子类是不能继承父类的静态成员的**\n* **子类只是可以访问父类的静态成员**，父类的静态成员只有一份可以被子类共享访问。\n* **共享并非继承**\n\n### 成员变量的访问特点\n\n**就近原则**：子类有找子类，子类没有找父类，父类没有就报错\n\n```java\nclass Animal{\n    public String name = \"动物名称\";\n}\n\nclass Cat extends Animal{\n    public String name = \"子类名称\";\n    public void show(){\n        String name = \"局部名称\";\n        System.out.println(name); // 局部名称\n        System.out.println(this.name); // 子类名称\n        System.out.println(super.name); // 父类名称\n    }\n}\n```\n\n> - `this`代表了当前对象的引用，可以用于访问当前子类对象的成员变量。\n> - `super`代表了父类对象的引用，可以用于访问父类中的成员变量。\n\n### 成员方法的访问特点\n\n就近原则：子类有找子类，子类没有找父类，父类没有就报错\n\n子类对象优先使用子类已有的方法，也就是说父类的方法被重写\n\n```java\npublic class TestDemo {\n    public static void main(String[] args) {\n        Cat cat = new Cat();\n        cat.run(); // 子类的\n        cat.eat(); // 父类的\n        // cat.go(); // 报错！\n    }\n}\n\nclass Animal{\n    public void run(){\n        System.out.println(\"动物可以跑~~~~\");\n    }\n\n    public void eat(){\n        System.out.println(\"吃东西~~~~\");\n    }\n}\n\nclass Cat extends Animal {\n    public void run(){\n        System.out.println(\"🐱跑的贼溜~~~~\");\n    }\n}\n```\n\n### 方法重写\n\n子类继承了父类，子类就得到了父类的某个方法。但是子类觉得父类的这个方法不好用或者无法满足自己的需求，子类重写一个与父类申明一样的方法来覆盖父类的该方法，子类的这个方法就进行了方法重写。\n\n方法重写的校验注解： `@Override`\n\n- `Java`建议在重写的方法上面加上一个`@Override`注解。\n- 方法一旦加了这个注解，那**就必须是成功重写父类**的方法，否则报错！\n- `Override`优势：**可读性好，安全，优雅**\n\n方法重写的具体要求：\n\n* 子类重写方法的**名称和形参列表必须与父类被重写方法一样**。\n* 子类重写方法的返回值类型申明要么与父类一样，要么比父类方法**返回值类型范围更小**。（以后再了解）\n* 子类重写方法的修饰符权限应该与父类被重写方法的**修饰符权限相同或者更大**。（以后再了解）\n* 子类重写方法申明抛出的异常应该与父类被重写方法申明抛出的**异常一样或者范围更小**！（以后再了解）\n\n```java\nclass Wolf extends Animal{\n    // 进行了方法重写！！\n    // 子类重写方法的名称和形参列表必须与父类被重写方法一样\n    // 子类重写方法的返回值类型申明要么与父类一样，要么比父类方法返回值类型范围更小\n    // 子类重写方法的修饰符权限应该与父类被重写方法的修饰符权限相同或者更大\n    @Override\n    public void run(){\n        System.out.println(\"🐺跑的贼快~~~\");\n    }\n}\n\nclass Animal{\n    public void run(){\n        System.out.println(\"动物可以跑步~~~\");\n    }\n}\n```\n\n> - 方法重写是子类重写一个与父类申明一样的方法覆盖父类的方法。\n> - 方法重写建议加上`@Override`注解。\n> - 方法重写的核心要求：方法名称形参列表必须与被重写方法一致！！\n> - 建议**申明不变，重新实现**。\n\n调用父类被重写的方法使用`super`\n\n```java\nclass SportMan extends People{\n    @Override\n    public void run(){\n        System.out.println(\"运动员跑的贼快~~~~~\");\n    }\n\n    public void go(){\n        super.run(); // 父类被重写的方法\n        run(); // 子类的\n    }\n}\n\nclass People{\n    public void run(){\n        System.out.println(\"人会跑~\");\n    }\n}\n```\n\n> `super`可以用在子类的实例方法中调用父类被重写的方法\n\n静态方法和私有方法**不可以**被重写\n\n```java\nclass Mac extends Computer{\n//    @Override\n    public void go(){\n    }\n\n    // @Override\n    public static void test(){\n    }\n}\n\nclass Computer{\n    public static void test(){\n        System.out.println(\"super test\");\n    }\n\n    private void go(){\n\n    }\n}\n```\n\n### 继承后构造器的特点\n\n子类的全部构造器默认一定会**先访问父类的无参数构造器，再执行子类自己的构造器**，主要的原因是\n\n* 子类的构造器的第一行默认有一个`super()`调用父类的无参数构造器，写不写都存在\n* 子类继承父类，子类就得到了父类的属性和行为\n* 当我们调用子类构造器初始化子类对象数据的时候，必须先调用父类构造器初始化继承自父类的属性和行为\n\n### super调用父类构造器\n\n`super(...)`可以根据参数选择调用父类的某个构造器\n\n```java\nclass Monkey extends Animal{\n\n    public Monkey(String name, int age, char sex) {\n        super(name , age , sex) ; // 根据参数匹配调用父类构造器\n    }\n\n    public void eatBanana(){\n        System.out.println(getName()+\"-->\"+getAge()+\"-->\"+getSex()+\"在吃🍌~~~\");\n    }\n}\n\nclass Animal{\n    private String name;\n    private int age;\n    private char sex;\n\n    public Animal() {\n    }\n\n    public Animal(String name, int age, char sex) {\n        this.name = name;\n        this.age = age;\n        this.sex = sex;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public char getSex() {\n        return sex;\n    }\n\n    public void setSex(char sex) {\n        this.sex = sex;\n    }\n}\n```\n\n`super`调用父类构造器的内存分布图\n\n![image-20220505160400907](http://47.108.219.199:81/articles/image-20220505160400907.png)\n\n### this和super关键字使用总结\n\n`this`代表了当前对象的引用（继承中指代子类对象）：\n\n* `this` 子类成员变量\n* `this`子类成员方法\n* `this(...)` 可以根据参数匹配访问本类其他构造器\n\n`super`代表了父类对象的引用（继承中指代了父类对象空间）\n\n* `super` 父类成员变量\n* `super`父类的成员方法\n* `super(...)`可以根据参数匹配访问父类的构造器\n\n`this(...)`和`super(...)`**必须放在构造器的第一行**，否则报错\n\n所以`this(...)`和`super(...)`**不能同时出现在构造器中**\n\n```java\nclass Student{\n    private String name ;\n    private int age ;\n    private String schoolName ;\n\n    public Student() {\n    }\n\n    public Student(String name , int age){\n        // 借用兄弟构造器的功能！\n        this(name , age , \"黑马\");\n    }\n\n    public Student(String name, int age, String schoolName) {\n        this.name = name;\n        this.age = age;\n        this.schoolName = schoolName;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String getSchoolName() {\n        return schoolName;\n    }\n\n    public void setSchoolName(String schoolName) {\n        this.schoolName = schoolName;\n    }\n}\n```\n\n### 继承的特点\n\n* **单继承**：一个类只能继承一个直接父类\n\n  * 如果是多继承可能会出现类的**二义性**\n\n    ```java\n    class A{\n        public void test(){\n            System.out.println(\"A\");\n        }\n    }\n    class B{\n        public void test(){\n            System.out.println(\"B\");\n        }\n    }\n    class C extends A , B {\n        public static void main(String[] args){\n            C c = new C();\n            c.test(); // 出现了类的二义性！所以Java不能多继承！！\n        }\n    }\n    ```\n\n* **多层继承**：一个类可以间接继承多个父类\n\n* 一个类可以有多个子类\n\n* 一个类要么默认继承了`Object`类，要么间接继承了`Object`类，`Object`类是`Java`的祖宗类\n\n## 引用类型作为方法参数和返回值\n\n* 除了基本数据类型都是引用数据类型\n* 引用类型可以作为方法的参数类型和返回值类型\n* 引用数据类型可以在一切可以使用类型的地方使用\n\n```java\npublic class TestDemo {\n    public static void main(String[] args) {\n        Dog jinMao = new Dog();\n        go(jinMao);\n\n        System.out.println(\"--------------\");\n        Dog dog = createDog();\n        dog.run();\n    }\n\n    // 引用类型作为方法的返回值:创建一个狗对象返回！\n    public static Dog createDog(){\n//        Dog taiDi = new Dog();\n//        return taiDi;\n         return new Dog();\n    }\n\n    // 引用类型作为方法参数: 提供一个方法让狗进入比赛~~~\n    public static void go(Dog a){\n        System.out.println(\"比赛开始。。。\");\n        a.run();\n        System.out.println(\"比赛结束。。。\");\n    }\n}\n\nclass Dog{\n    public void run(){\n        System.out.println(\"🐕跑的贼溜~~~\");\n    }\n}\n```\n\n## 引用类型作为成员变量的类型\n\n`Address.java`\n\n```java\npublic class Address {\n    private String code;\n    private String name;\n    private double x;\n    private double y;\n\n    public Address() {\n    }\n\n    public Address(String code, String name, double x, double y) {\n        this.code = code;\n        this.name = name;\n        this.x = x;\n        this.y = y;\n    }\n}\n```\n\n`Student.java`\n\n```java\npublic class Student {\n    private String name;\n    private int age ;\n    // 地址信息:复合类型。\n    // 引用类型作为成员变量的类型\n    private Address address;\n}\n```\n\n# day2-抽象类、接口、代码块、final、单例、枚举\n\n## 抽象类\n\n### 抽象类的概述\n\n父类指导之类一定要完成某个功能，但是每个之类完成的情况是不一样的。子类以后也只会用自己重写的功能，那么父类的该功能就可以定义成抽象方法，子类重写调用自己的方法。所以父类的该功能就可以定义为抽象的方法。拥有冲向方法的类必须定义为抽象类。\n\n> **抽象方法**：没有方法体，只有方法签名，必须用`abstract`修饰的方法就是抽象方法。\n>\n> **抽象类**：拥有抽象方法的类必须定义成抽象类，必须用`abstract`修饰。\n\n```java\nclass Wolf extends Animal{\n    @Override\n    public void run(){\n        System.out.println(\"🐺跑的贼贼溜~~~\");\n    }\n}\n\n// 抽象类：拥有了抽象方法的类必须定义成抽象类。抽象类必须加上abstract修饰。\nabstract class Animal{\n    // 抽象方法：没有方法体，只有方法签名，必须加上abstract修饰。\n    public abstract void run();\n}\n```\n\n### 抽象类的使用\n\n抽象类是为了被子类继承\n\n```java\nclass Manager extends Employee{\n    @Override\n    public void work() {\n        System.out.println(\"班主任需要管理班级~~~~\");\n    }\n\n     @Override\n     public void run() {\n\n     }\n }\n\nclass Techer extends Employee{\n    @Override\n    public void work() {\n        System.out.println(\"老师需要授课~~~~\");\n    }\n\n    @Override\n    public void run() {\n\n    }\n}\n\n// 员工（老师，班主任 ） 每个员工都要工作，但是工作内容不一样。\nabstract class Employee{\n    public abstract void work();\n    public abstract void run();\n}\n```\n\n> * 一个类继承了抽象类，必须重写完抽象类的全部抽象方法，否则这个类必须定义成抽象类。\n> * 因为拥有抽象方法的类必须定义成抽象类。\n\n### 抽象类的特征\n\n抽象类的特征是：**有得有失**\n\n* 抽象类得到了拥有对象的能力\n* 抽象类失去了创建对象的能力，即抽象类不能创建对象\n\n> **抽象类是否有构造器，是否可以创建对象**，为什么?\n>\n> 抽象类作为类一定**有构造器**，而且必须有构造器。**提供给子类继承后调用父类构造器**使用的。\n>\n> 抽象类虽然有构造器，但是抽象类**绝对不能创建对象**。抽象类中可能存在抽象方法，**抽象方法不能执行**。抽象在学术上本身意味着不能实例化。\n\n### 抽象类的意义\n\n抽象类存在的意义有两点：\n\n* **被继承**：抽象类就是为了被子类继承，否则抽象类将毫无意义\n* 抽象类体现的**模板思想**：部分实现，部分抽象，可以使用抽象类设计一个模板模式\n\n### 抽象类设计模板模式\n\n**设计模式**：就是前人或者软件行业在生产实战中发现的优秀软件设计架构和思想。后来者可以直接用这些架构或者思想就可以设计出优秀的软件，提高开发效率，提高软件可扩展性和可维护性。\n\n模板设计模式就是一种经典的设计模式思想\n\n**模板设计模型的作用**：优化代码架构，提高代码的复用性，相同功能的重复代码无需重复书写。可以做到部分实现，部分抽象，抽象的东西交给使用模板的人重写实现\n\n```java\nclass Teacher extends Template{\n    @Override\n    public String writeMain() {\n        return \"\\t\\t我爸就是好，有多好，做他儿子才能懂~~~\";\n    }\n}\n\nclass Student extends Template{\n    @Override\n    public String writeMain() {\n        return \"\\t\\t我爸爸很牛，我爸爸是马云，就是爽，很有钱~~~~\";\n    }\n}\n// 1.写一个模板类：代表了作文模板。\nabstract class Template{\n    private String title = \"\\t\\t\\t\\t\\t\\t《我的爸爸》\";\n    private String one = \"\\t\\t我的爸爸很牛逼，到底有多牛呢，请看如下说明：\";\n    private String last = \"\\t\\t以上就是我的爸爸，简直太好了，下辈子还要做他儿子！\";\n\n    // 2.提供一个写作文方法\n    public void write(){\n        System.out.println(title);\n        System.out.println(one);\n        // 正文：正文部分模板是不知道怎么写的！应该把正文部分定义成抽象方法\n        // 交给使用模板的子类重写！\n        System.out.println(writeMain());\n        System.out.println(last);\n    }\n\n    // 正文部分定义成抽象方法，交给子类重写！！\n    public abstract String writeMain();\n}\n```\n\n### 抽象类的注意事项\n\n1. 抽象类不能创建对象，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象。\n   理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。\n\n2. 抽象类一定有而且是必须有构造器，是供子类创建对象时，初始化父类成员使用的。\n   理解：子类的构造器中，有默认的super()，需要访问父类构造器。\n\n3. 抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。\n\n4. 抽象类的子类，必须重写抽象父类中所有的抽象方法，否则子类也必须定义成抽象类。\n\n5. 抽象类存在的意义是为了被子类继承，抽象类体现的是模板思想。\n   理解：抽象类中已经实现的是模板中确定的成员，\n   抽象类不确定如何实现的定义成抽象方法，交给具体的子类去实现。\n\n## 接口\n\n### 接口的概述\n\n接口体现的是规范思想，实现接口的子类必须重写完接口的全部抽象方法\n\n接口是更加彻底的抽象，在JDK 1.8之前接口中只能是抽象方法和常量\n\n定义格式\n\n```java\n修饰符 interface 接口名称{\n	// 在JDK 1.8 之前接口中只能是抽象方法和常量\n}\n```\n\n成分研究（JDK 1.8之前）\n\n* 接口中抽象方法默认加上`public abstract`修饰，可以省略不写\n\n* 常量是指有`public static final`修饰的成员变量，**有且仅能被复制一次**，值不能改变\n\n  常量名称规范要求全部大写，多个单词下划线连接\n\n  常量修饰`public static final`可以省略不写，默认会加上\n\n```java\npublic interface InterfaceDemo {\n     // 2.常量\n     // 只有一份，在执行的过程中其值必须有，但是不能改变！\n     // 常量是public static final修饰\n     // 常量的名称建议字母全部大写，多个单词用“_”连接\n     // 在接口中常量可以省略public static final不写，默认会加上该三个修饰符！\n     //public static final String SCHOOL_NAME = \"黑马\";\n     String SCHOOL_NAME = \"黑马\";\n\n\n     // 1.抽象方法\n     // public abstract void run();\n     // 接口中的抽象方法默认会加上public abstract修饰,所以可以省略不写。\n     void run();\n     void work();\n}\n```\n\n### 接口的基本实现\n\n子类和父类是继承，实现类和接口是实现关系。接口是用来被类实现的，实现接口的类是实现类\n\n子类–>继承–>父类\n\n实现类–>实现–>接口\n\n类实现接口的格式：\n\n```java\n修饰符 class 实现类名称 implements 接口1,接口2,接口3,....{\n\n}\n```\n\n例如\n\n```java\n// 实现类 实现 SportMan接口\n// 一个类实现接口必须重写完接口中全部抽象方法，否则这个类必须定义成抽象类！！\nclass PingPongMan implements SportMan{\n    private String name;\n    public PingPongMan(String name){\n        this.name = name;\n    }\n    @Override\n    public void run() {\n        System.out.println(name+\"必须天天运动。正在🏃训练~~~‍\");\n    }\n\n    @Override\n    public void win() {\n        System.out.println(name+\"参加比赛中~~~‍\");\n    }\n}\n\n// 定义一个接口：表示运动员的规范\ninterface SportMan{\n    void run(); // 跑步\n    void win(); // 比赛得奖\n}\n```\n\n> * 接口的使命就是要求实现接口的类必须有`run()`和`win()`方法\n> * 接口可以多实现\n> * 一个类实现接口必须重写完接口中全部抽象方法，否则这个类必须定义成抽象类\n\n### 接口的多实现\n\n* 类与类是单继承\n* 类和接口是多实现\n\n一个类如果实现了多个接口，必须重写完全部接口中的全部抽象方法，否则这个类必须定义为抽象类\n\n```java\nclass PingPongMan implements SportMan , Law{\n\n    @Override\n    public void rule() {\n\n    }\n\n    @Override\n    public void run() {\n\n    }\n\n    @Override\n    public void win() {\n\n    }\n}\n\ninterface Law{\n    void rule();\n    void run();\n}\n\ninterface SportMan{\n    void run();\n    void win();\n}\n```\n\n### 接口与接口的多继承\n\n* 类与类是单继承关系：一个类只能继承一个直接父类\n* 类与接口是多继承关系：一个类可以同时实现多个接口\n* 接口与接口是多继承关系：一个接口可以同时继承多个接口\n\n接口与接口的多继承，用一个接口合并多个接口\n\n```java\nclass PingPongMan implements SportMan{\n\n    @Override\n    public void eat() {\n\n    }\n\n    @Override\n    public void rule() {\n\n    }\n\n    @Override\n    public void run() {\n\n    }\n\n    @Override\n    public void goAbroad() {\n\n    }\n}\n\ninterface Food{\n    void eat();\n}\n\ninterface Law{\n    void rule();\n}\n\n// 接口与接口的多继承！\ninterface SportMan extends Law , Food {\n    void run();\n    void goAbroad();\n}\n```\n\n### JDK1.8之后接口新增的方法\n\nJDK1.8开始之后接口新增的三个方法，了解即可\n\n* **默认方法**	就是之前写的实例方法\n  * 必须用`default`修饰\n  * 默认会加`public`修饰\n  * 只能用接口的实现类的对象来调用\n* **静态方法**\n  * 可以直接加`static`修饰\n  * 默认会加`public`修饰\n  * 接口的静态方法只能用接口的类名称调用\n* **私有方法**    从JDK 1.9开始才支持的\n  * 其实就是私有的实例方法，必须加`private`修饰\n  * 只能在**本接口**被其他的默认方法或者私有方法访问\n\n```java\npublic class InterfaceDemo {\n    public static void main(String[] args) {\n        // 1.默认方法调用：必须用接口的实现类对象调用。\n        PingPongMan zjk = new PingPongMan();\n        zjk.run();\n        zjk.work();\n\n        // 2.接口的静态方法必须用接口的类名本身来调用。\n        InterfaceJDK8.inAddr();\n    }\n}\n\nclass PingPongMan implements InterfaceJDK8{\n    @Override\n    public void work() {\n        System.out.println(\"工作中。。。\");\n    }\n}\n\ninterface InterfaceJDK8{\n    // 之前的抽象方法！！\n    void work();\n\n    // a.默认方法（就是之前写的普通实例方法）\n    // 必须用接口的实现类的对象来调用。\n    default void run(){\n        go();\n        System.out.println(\"开始跑步🏃‍~~~~\");\n    }\n\n    // b.静态方法\n    // 注意：接口的静态方法必须用接口的类名本身来调用\n    static void inAddr(){\n        System.out.println(\"我们在吉山区~~~~\");\n    }\n\n    // c.私有方法（就是私有的实例方法）: JDK 1.9才开始有的。\n    //  -- 只能在本接口中被其他的默认方法或者私有方法访问。\n    private void go(){\n        System.out.println(\"开始。。\");\n    }\n}\n```\n\n### 接口的注意事项\n\n* 如果实现了多个接口，多个接口存在同名的**静态方法**并不会从冲突，原因是只能通过各自接口方法访问各自静态方法\n* 当一个类，即继承一个父类，又实现若干个接口时，父类的成员方法与接口中的默认方法重名时，之类**就近**选择执行父类的成员方法\n* 当一个类实现多个接口时，多个接口存在同名的默认方法，实现类必须重写这个方法\n\n## 代码块\n\n代码块按照有无`static`修饰可以分为：静态代码块、实例代码块\n\n### 静态代码块\n\n静态代码块：必须用`static`修饰，必须放在类下，与类一起优先加载执行\n\n静态代码块可以用于执行类的方法之前进行静态资源的初始化操作\n\n```java\npublic class CodeDemo01 {\n    public static String schoolName ;\n    public static ArrayList<String> lists = new ArrayList<>();\n\n    // 静态代码块,属于类，与类一起加载一次!\n    static {\n        System.out.println(\"静态代码块被触发执行~~~~~~~\");\n        // 在静态代码块中进行静态资源的初始化操作\n        schoolName = \"黑马\";\n        lists.add(\"3\");\n        lists.add(\"4\");\n        lists.add(\"5\");\n    }\n\n    public static void main(String[] args) {\n        System.out.println(schoolName);\n        System.out.println(lists);\n    }\n}\n```\n\n### 实例代码块\n\n* 实例代码块直接用`{}`括起来，无需`static`修饰\n* 会和类的对象一起加载，每次创建对象的时候，实例代码块会被加载且自动执行一次\n* 实例代码块的代码在底层实际上是提取到每个构造器中去执行的，**实例代码块属于对象**\n* 实例代码块可以在创建对象之前进行实例资源的初始化操作\n\n```java\npublic class CodeDemo02 {\n    private String name;\n    private ArrayList<String> lists = new ArrayList<>();\n    // 实例代码块！属于对象！与对象一起加载!\n    {\n        name = \"小手\";\n        lists.add(\"东\");\n        lists.add(\"南\");\n        lists.add(\"西\");\n        lists.add(\"北\");\n        System.out.println(\"实例代码块被触发执行一次~~~~~~~~\");\n    }\n\n    public CodeDemo02(){\n\n    }\n    public CodeDemo02(String name){\n\n    }\n\n    public static void main(String[] args) {\n        CodeDemo02 c = new CodeDemo02();\n        System.out.println(c.name);\n        System.out.println(c.lists);\n        new CodeDemo02();\n        new CodeDemo02();\n    }\n}\n```\n\n## final关键词\n\n`final`可以用于修饰类、方法、变量\n\n* `final`修饰类：类不能被继承了\n* `final`修饰方法：方法不能被重写\n* `final`修饰变量：变量有且仅能被赋值一次\n  * 局部变量-只能赋值一次，不能在更改\n  * 实例成员变量\n    * 显示初始化，在定义成员变量的时候立马赋值\n    * 实例代码块中赋值一次\n    * 构造器初始化，在构造器中赋值一次\n\n`final`和`abstract`的关系\n\n互斥关系，不能同时修饰类或者同时修饰方法\n\n**常量**：有`public static final`修饰，名称字母全部大写，多个单词用下划线连接\n\n## 单例设计模式\n\n**单例**的意思是一个类永远只存在一个对象，不能创建多个对象\n\n* 开发中有很多类的对象我们只需要一个对象，例如虚拟机，任务管理器对象\n* 对象越多越占内存，有时候只需要一个对象就可以实现业务，单例可以节约内存，提高性能\n\n### 饿汉单例设计模式\n\n通过类获取单例对象的时候，对象已经提前准备做好了\n\n设计步骤：\n\n* 定义一个类，把**构造器私有**\n* 定义一个静态变量存储一个对象\n* 提供一个返回单例对象的方法\n\n```java\n// 饿汉单例设计模式\nclass Singleton01{\n    //  b.定义一个静态变量存储一个对象( 在用类获取对象的时候，对象已经提前为你创建好了。)\n    private static final Singleton01 INSTANCE = new Singleton01();\n    //  a.定义一个类，把构造器私有。\n    private Singleton01(){\n    }\n    // c.提供一个返回单例对象的方法。\n    public static Singleton01 getInstance(){\n        return INSTANCE;\n    }\n}\n```\n\n### 懒汉单例设计模式\n\n通过类获取单例对象的时候发现没有对象才会去创建一个对象\n\n设计步骤：\n\n* 定义一个类，把**构造器私有**\n* 定义一个静态成员变量用于存储一个对象\n* 提供一个返回单例对象的方法，判断对象不存在才创建一次，存在直接返回\n\n```java\n// 懒汉单例设计模式\nclass Singleton02{\n    //  b.定义一个静态变量存储一个对象(这里不能创建对象，需要的时候才创建，这里只是一个变量用于存储对象！)\n    public static Singleton02  instance ;\n\n    //   a.定义一个类，把构造器私有。\n    private Singleton02(){\n\n    }\n    //  c.提供一个返回单例对象的方法。\n    public static Singleton02 getInstance(){\n        if(instance == null){\n            // 第一次来拿单例对象！需要创建一次对象，以后直接返回！！\n            instance = new Singleton02();\n        }\n        return instance;\n    }\n}\n```\n\n## 枚举\n\n枚举类的作用：是为了做信息的标志和信息分类\n\n### 枚举类基本语法\n\n```java\n修饰符 enum 枚举名称{\n	// 第一行罗列的必须的枚举类的对象名称\n}\n```\n\n例如\n\n```java\nenum Sex{\n    BOY , GIRL;\n}\n\n// 枚举\nenum Season {\n    SPRING , SUMMER , AUTUMN , WINTER;\n}\n```\n\n枚举类反编译以后的源代码\n\n```Java\npublic final class Season extends java.lang.Enum<Season> {\n    public static final Season SPRING = new Season();\n    public static final Season SUMMER = new Season();\n    public static final Season AUTUMN = new Season();\n    public static final Season WINTER = new Season();\n\n    public static Season[] values();\n    public static Season valueOf(java.lang.String);\n}\n```\n\n### 枚举类的特点\n\n* 枚举类是`final`修饰的，不能被继承\n* 枚举类默认继承了枚举类型`java.lang.Enum`\n* 枚举类的第一行罗列的是枚举类的对象，而且是用常量存储的\n* 所以枚举类的第一行写的都是常量名称，默认存储了枚举对象\n* 枚举类的构造器默认是私有的\n* 枚举类相当于是多例设计模式\n\n> `Java`建议做信息标志和信息分类应该使用**枚举**实现，比较优雅，可以实现可读性，而且入参受限制，不能乱输入\n\n# day3-多态、包、权限修饰符、内部类、object类、Date类\n\n## 多态==重点==\n\n面向对象的三大特征：封装、继承、多态\n\n多态的形式：\n\n```java\n父类类型 变量名 = new 子类/实现类构造器;\n变量名.方法名();\n```\n\n```java\npublic class PolymorphicDemo {\n    public static void main(String[] args) {\n        //  父类类型 对象名称 = new 子类构造器;\n        Animal dlam = new Cat();\n        dlam.run(); // 对于方法的调用：编译看左边，运行看右边。\n        System.out.println(dlam.name); // 对于变量的调用：编译看左边，运行看左边。\n\n        Animal taiDi = new Dog();\n        taiDi.run(); // 对于方法的调用：编译看左边，运行看右边。\n        System.out.println(taiDi.name); // 对于变量的调用：编译看左边，运行看左边。\n    }\n}\n\nclass Dog extends Animal{\n    public String name = \"🐶名称Dog\";\n    @Override\n    public void run(){\n        System.out.println(\"🐕跑的贼快~~~~！\");\n    }\n}\n\nclass Cat extends Animal{\n    public String name = \"🐱名称Cat\";\n    @Override\n    public void run(){\n        System.out.println(\"🐱跑的飞快~~~~！\");\n    }\n}\n\nclass Animal{\n    public String name = \"动物名称Animal\";\n    public void run(){\n        System.out.println(\"动物跑！\");\n    }\n}\n```\n\n**多态的概念：**同一个类型的对象，执行同一个行为，在不同的状态下会表现出不同的行为特征\n\n**多态的识别技巧：**\n\n* 对于方法的调用：编译看左边，运行看右边\n* 对于变量的调用：编译看左边，运行看左边\n\n**多态的使用前提**\n\n* 必须存在继承或者实现关系\n* 必须存在父类类型的变量引用子类类型的对象\n* 需要存在方法重写\n\n### 多态的优劣势\n\n优势：\n\n* 在多态形式下，右边对象可以实现组件化切换，业务功能也随之改变，便于扩展和维护。可以实现类与类之间的解耦\n* 实际开发中，父类类型作为方法形式参数，传递之类对象给方法，可以传递一切子类对象进行方法的调用，更能体现出多态的扩展性与便利\n\n劣势：\n\n* **多态形式下，不能直接调用子类特有的功能**。编译看左边！！左边父类没有子类独有的功能，所以代码在编译阶段就直接报错了\n\n### 引用类型自动类型转换\n\n基本数据类型的转换\n\n* 小范围类型的变量或者值可以**直接赋值**给大范围类型的变量。\n* 大范围类型的变量或者值**必须强制类型转换**给小范围类型的变量。\n\n所以引用类型转换的思想也一样\n\n子类类型的对象或者变量可以自动类型转换赋值给父类类型的变量\n\n> 引用类型的自动类型转换并不能解决多态的劣势\n\n### 引用类型的强制类型转换\n\n父类类型的变量或者对象必须强制类型转换成子类类型的变量，否则报错!\n\n```java\n类型 变量名称 = (类型)(对象或者变量)\n```\n\n注意：有**继承/实现关系**的两个类型就可以进行强制类型转换，编译阶段一定不报错！但是运行阶段可能出现：类型转换**异常** `ClassCastException`\n\nJava建议在进行强制类型转换之前先判断变量的真实类型，再强制类型转换!\n\n`变量 instanceof 类型`： 判断前面的变量是否是后面的类型或者其子类类型才会返回`true`\n\n```java\npublic class PolymorphicDemo {\n    public static void main(String[] args) {\n        Animal a = new Wolf();\n        a.run();\n        // a.catchSheep(); // 报错！\n\n        // 1.把动物类型的变量a 转换成 真实的狼类型\n        Wolf w = (Wolf) a;\n        w.catchSheep();\n\n        // 2.多态下类型转换异常问题研究（重点）\n        Animal a1 = new Cat();\n        //Wolf w1 = (Wolf) a1; // 编译阶段没有报错！在运行阶段出现ClassCastException类型转换成！\n\n        if(a1 instanceof Cat){\n            Cat c1 = (Cat) a1;\n            c1.catchMouse();\n        }else if(a1 instanceof Wolf){\n            Wolf w1 = (Wolf) a1;\n            w1.catchSheep();\n        }\n    }\n}\n\nclass Wolf extends Animal{\n    @Override\n    public void run(){\n        System.out.println(\"狼跑的飞快~~~\");\n    }\n\n    public void catchSheep(){\n        System.out.println(\"🐺抓🐏\");\n    }\n}\n\nclass Cat extends Animal{\n    @Override\n    public void run(){\n        System.out.println(\"猫跑的贼快~~~\");\n    }\n\n    public void catchMouse(){\n        System.out.println(\"🐱抓🐀~~\");\n    }\n}\n\nclass Animal{\n    public void run(){\n        System.out.println(\"动物可以跑~~\");\n    }\n}\n```\n\n### 多态接口的综合案例\n\n```java\npublic class Demo {\n    public static void main(String[] args) {\n        // 1.买一部电脑\n        Computer c = new Computer();\n        // 2.买一个鼠标\n        USB xiaoMi = new Mouse(\"小米鼠标\");\n        c.install(xiaoMi);\n        // 3.买一个键盘\n        KeyBoard sfy = new KeyBoard(\"双飞燕键盘\");\n        c.install(sfy);\n    }\n}\n\nclass Computer{\n    // 提供一个安装USB设备的入口\n    public void install(USB usb){\n        usb.connect();\n\n        // usb.dbclick();\n        // usb可能是鼠标，也可能键盘 .....\n        if(usb instanceof Mouse){\n            Mouse m = (Mouse) usb;\n            m.dbclick();\n        }else if(usb instanceof KeyBoard){\n            KeyBoard k = (KeyBoard) usb;\n            k.keyDown();\n        }\n\n        usb.unconnect();\n    }\n}\n\n// 定义2个USB设备：鼠标，键盘。\nclass Mouse implements USB{\n    private String name;\n\n    public Mouse(String name) {\n        this.name = name;\n    }\n\n    // 双击\n    public void dbclick(){\n        System.out.println(name+\"双击了，老铁，6666666~~~~\");\n    }\n\n    @Override\n    public void connect() {\n        System.out.println(name+\"成功接入了设备~~~~\");\n    }\n\n    @Override\n    public void unconnect() {\n        System.out.println(name+\"成功拔出了设备~~~~\");\n    }\n}\n\nclass KeyBoard implements USB{\n    private String name;\n\n    public KeyBoard(String name) {\n        this.name = name;\n    }\n\n    // 按键\n    public void keyDown(){\n        System.out.println(name+\"写下了，来了，老弟~~记得点亮小💗💗....\");\n    }\n\n    @Override\n    public void connect() {\n        System.out.println(name+\"成功接入了设备~~~~\");\n    }\n\n    @Override\n    public void unconnect() {\n        System.out.println(name+\"成功拔出了设备~~~~\");\n    }\n}\n\n// 定义USB的规范，必须要完成接入和拔出的功能！！\ninterface USB{\n    void connect();    // 接入\n    void unconnect();  // 拔出\n}\n```\n\n## 内部类\n\n内部类是类的五大成分之一：成员变量、方法、构造器、代码块、内部类\n\n内部类是定义在一个类里面的类\n\n内部类有什么用\n\n* 可以提供更好的封装性\n* 内部类有更多的权限修饰符\n* 其封装有更多的控制\n* 可以体现出组件的思想\n\n内部类的分类：\n\n* 静态内部类\n* 实例内部类（成员内部类）\n* 局部内部类\n* **匿名内部类**\n\n### 静态内部类\n\n有`static`修饰，属于外部类本身，会加载一次\n\n成分研究：\n\n* 类有的成分它都有，静态内部类属于外部类本身，只会加载一次\n* 所以它的特点与外部类是完全一样的，只是位置在别人里面而已。\n\n外部类=宿主\n\n内部类=寄生\n\n静态内部类的访问格式：\n\n```\n外部类名称.内部类名称\n```\n\n静态内部类创建对象的格式：\n\n```\n外部类名称.内部类名称 对象名称 = new 外部类名称.内部类构造器;\n```\n\n静态内部类的访问拓展：\n\n* 静态内部类中是否可以直接访问外部类的静态成员?可以的，外部类的静态成员只有一份，可以被共享！\n* 静态内部类中是否可以直接访问外部类的实例成员?不可以的,外部类的是成员必须用外部类对象访问！！\n\n```java\nclass Outter{\n    public static int age1 = 12;\n    private double salary;\n\n    // 静态内部类：有static修饰，属于外部类本身，只会加载一次\n    public static class Inner{\n        private String name;\n        private int age;\n        public static String schoolName = \"黑马\";\n\n        public void show() {\n            System.out.println(name+\"-->\"+age+\"岁~\");\n            System.out.println(age1);\n            //System.out.println(salary);\n        }\n\n        public Inner() {\n        }\n\n        public Inner(String name, int age) {\n            this.name = name;\n            this.age = age;\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public void setName(String name) {\n            this.name = name;\n        }\n\n        public int getAge() {\n            return age;\n        }\n\n        public void setAge(int age) {\n            this.age = age;\n        }\n\n    }\n}\n```\n\n### 实例内部类（成员内部类）\n\n无`static`修饰的内部类，属于外部类的每个对象的，跟着对象一起加载的\n\n实例内部类的成分特点：\n\n* 实例内部类中不能定义静态成员，其他都可以定义\n* 可以定义常量\n\n实例内部类的访问格式：\n\n```\n外部类名称.内部类名称\n```\n\n创建对象的格式：\n\n```\n外部类名称.内部类名称 对象名称 = new 外部类构造器.new 内部构造器;\n```\n\n拓展：\n\n* 实例内部类中是否可以直接访问外部类的静态成员\n\n  可以的，外部类的静态成员可以被共享访问\n\n* 实例内部类中是否可以访问外部类的实例成员\n\n  可以的，实例内部类属于外部类对象，可以直接访问当前外部类对象的实例成员\n\n> 实例内部类属于外部类对象，需要用外部类对象一起加载，**实例内部类可以访问外部类的全部成员**\n\n```java\npublic class InnerClass {\n    public static void main(String[] args) {\n        // 实例内部类属于外部类对象。实例内部类的宿主是外部类对象！！\n        Outter.Inner in = new Outter().new Inner();\n        in.show();\n    }\n}\n// 外部类\nclass Outter{\n    public static int age = 1;\n    private double salary;\n\n    // 实例内部类：无static修饰，属于外部类的对象\n    public class Inner{\n        private String name ;\n\n        public static final String schoolName = \"黑马\";\n        // 不能在实例内部类中定义静态成员！！！\n//      public static String schoolName = \"黑马\";\n//      public static void test(){\n//\n//      }\n\n        // 实例方法\n        public void show(){\n            System.out.println(name+\"名称！\");\n            System.out.println(age);\n            System.out.println(salary);\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public void setName(String name) {\n            this.name = name;\n        }\n    }\n}\n```\n\n### 局部内部类\n\n定义在方法中，在构造器中，代码块中，for循环中定义的内部类，就是局部内部类。\n\n局部内部类中的成分特点：\n\n* 只能定义实例成员，不能定义静态成员\n* 可以定义常量的\n\n```java\npublic class InnerClass {\n\n    static {\n        abstract class A{\n\n        }\n    }\n\n    public static void main(String[] args) {\n        class A{\n            private String name;\n\n            public void test(){\n            }\n            public String getName() {\n                return name;\n            }\n\n            public void setName(String name) {\n                this.name = name;\n            }\n        }\n        A a = new A();\n        a.test();\n    }\n\n    public static void test(){\n       class Animal{\n\n       }\n\n       class Cat extends Animal{\n\n       }\n    }\n}\n```\n\n### 匿名内部类\n\n就是一个没有名字的局部内部类\n\n匿名内部类目的是为了：简化代码，也是开发中常用的形式\n\n匿名内部类的格式：\n\n```java\nnew 类名|抽象类|接口(形参){\n方法重写。\n}\n```\n\n 匿名内部类的特点：\n\n* 匿名内部类是一个没有名字的内部类\n* 匿名内部类一旦写出来，就会立即创建一个匿名内部类的对象返回\n* 匿名内部类的对象的类型相当于是当前`new`的那个的类型的子类类型。\n\n```java\npublic class Anonymity {\n    public static void main(String[] args) {\n        Animal a = new Animal(){\n            @Override\n            public void run() {\n                System.out.println(\"猫跑的贼溜~~\");\n            }\n        };\n        a.run();\n        a.go();\n\n        Animal a1 = new Animal() {\n            @Override\n            public void run() {\n                System.out.println(\"狗跑的贼快~~~\");\n            }\n        };\n        a1.run();\n        a.go();\n\n\n    }\n}\nabstract class Animal{\n    public abstract void run();\n\n    public void go(){\n        System.out.println(\"开始go~~~\");\n    }\n}\n```\n\n匿名内部类的使用形式\n\n```java\npublic class Anonymity02 {\n    public static void main(String[] args) {\n        Swim bozai = new Swim() {\n            @Override\n            public void swimming() {\n                System.out.println(\"老师🏊‍的贼溜~~~~\");\n            }\n        };\n        go(bozai);\n\n        Swim boniu = new Swim() {\n            @Override\n            public void swimming() {\n                System.out.println(\"波妞学生快乐的狗爬式~~~\");\n            }\n        };\n        go(boniu);\n\n        go(new Swim() {\n            @Override\n            public void swimming() {\n                System.out.println(\"波妞2学生快乐的狗爬式~~~\");\n            }\n        });\n    }\n\n    // 提供一个方法让全部角色进入比赛\n    public static void go(Swim s){\n        System.out.println(\"开始。。。。\");\n        s.swimming();\n        System.out.println(\"结束。。。。\");\n    }\n}\n\ninterface Swim{\n    void swimming();\n}\n```\n\n## 包和权限修饰符\n\n## 包\n\n* 分门别类的管理各种不同的技术。\n* 企业的代码必须用包区分。便于管理技术，扩展技术，阅读技术。\n\n定义包的格式：\n\n`package 包名;`\n\n必须放在类名的最上面\n一般工具已经帮我们做好了\n\n包名的命名规范：\n\n* 一般是公司域名的倒写+技术名称：\n* http://www.itheima.com => com.itheima.技术名称\n* 包名建议全部用英文，多个单词用”.“连接，必须是合法标识符，不能用关键字\n\n注意\n\n* 相同包下的类可以直接访问\n* 不同包下的类必须导包,才可以使用\n* 导包格式：`import 包名.类名;`\n\n### 权限修饰符\n\n权限修饰符：有四种（`private `-> `default`-> `protected `- > `public` ）\n\n可以修饰成员变量，修饰方法，修饰构造器，内部类，不同修饰符修饰的成员能够被访问的权限将受到限制!\n\n![image-20220525204748483](http://47.108.219.199:81/articles/image-20220525204748483.png)\n\n## Object类\n\n`Object`类是Java中的祖宗类\n\n* 一个类要么默认继承了`Object`类，要么间接继承了`Object`类\n* `Object`类的方法是一切子类都可以直接使用的，所以我们要学习`Object`类的方法。\n\n`Object`类的常用方法：\n\n* `public String toString():`\n\n  * 默认是返回当前对象在堆内存中的地址信息\n\n    `com.itheima._12Object类的详细使用.Student@735b478`\n\n  * 默认的地址信息格式：类的全限名@内存地址\n\n  * 直接输出对象名称，默认会调用toString()方法，所以直接输出对象可以省略toString()不写。\n\n  * 实际开发中直接输出对象，输出对象的地址其实是没有意义的。\n\n  * 所以`toString`方法存在的意义是为了被子类重写，以便能够返回对象的数据内容输出。因为实际开发中我们输出对象更多的时候是希望看到对象的数据内容信息\n\n> * 开发中如果希望输出对象看到对象的内容，只需要重写`toString()`方法即可\n> * 所以`toString`方法存在的意义是为了被子类重写\n\n* `public boolean equals(Object o)`\n  * 默认是比较两个对象的地址是否相同。相同返回`true`，反之\n  * 直接比较两个对象的地址是否相同完全可以用`==`替代`equals`，所以`equals`存在的意义是为了被子类重写，以便程序员可以自己来定制比较规则\n\n只要两个对象的内容一样，我们就认为他们是相等的。\n\n> `equals`存在的意义是为了被子类重写，以便程序员自己来定制比较规则\n\n```java\n@Override\n    public boolean equals(Object o) {\n        // 1.判断是否自己和自己比较，如果是同一个对象比较直接返回true\n        if (this == o) return true;\n        // 2.判断被比较者是否为null ,以及是否是学生类型。\n        if (o == null || this.getClass() != o.getClass()) return false;\n        // 3.o一定是学生类型，强制转换成学生，开始比较内容！\n        Student student = (Student) o;\n        return age == student.age &&\n                sex == student.sex &&\n                Objects.equals(name, student.name);\n    }\n\n    // 重写Object的toString()以便返回对象的内容数据\n\n    @Override\n    public String toString() {\n        return \"Student{\" +\n                \"name=\'\" + name + \'\\\'\' +\n                \", age=\" + age +\n                \", sex=\" + sex +\n                \'}\';\n    }\n```\n\n> idea可以自动生成`equals()`和`toString()`，直接按下快捷键`ALT+INSERT`，选择`generate`即可\n\n## Objects类\n\n* `Objects`类与`Object`还是继承关系\n* `Objects`类是从JDK 1.7开始之后才有的。\n\n`Objects`的方法：\n\n* `public static boolean equals(Object a, Object b)`\n\n  * 比较两个对象的\n\n  * 底层进行非空判断，从而可以**避免空指针异常**。更安全，推荐使用\n\n    ```java\n    public static boolean equals(Object a, Object b) {\n    	return a == b || a != null && a.equals(b);\n    }\n    ```\n\n  * `public static boolean isNull(Object obj)`\n\n    判断变量是否为`null`,为`null`返回`true`, 反之`false`\n\n## Date类\n\nJava是面向对象的，会用一个类代表一个事物\n\n`Date`类在Java中代表的是系统当前此刻日期时间对象。\n\n`Date`类：\n\n包：`java.util.Date`\n\n* 构造器：\n  `public Date()` 创建当前系统的此刻日期时间对象。\n  `public Date(long time)`\n\n```java\nimport java.util.Date;\n\npublic class DateDemo01 {\n    public static void main(String[] args) {\n        // a.创建一个日期对象代表了系统此刻日期时间对象\n        Date d = new Date();\n        System.out.println(d);\n\n        // b.拿当前日期对象的时间毫秒值\n        long time = d.getTime();\n        System.out.println(time);\n    }\n}\n```\n\n* 方法\n\n  `public long getTime()`: 返回自 1970 年 1 月 1 日 00:00:00 GMT 以来走过的总的毫秒数。\n\n时间记录的两种方式：\n`Date`日期对象。\n时间毫秒值：从1970-01-01 00:00:00开始走到此刻的总的毫秒值。 1s = 1000ms\n\n小结：\n\n* `Date`可以代表系统当前此刻日期时间对象。\n* 时间记录的两种方式：\n  * `Date`日期对象。\n  * 时间毫秒值：从1970-01-01 00:00:00开始走到此刻的总的毫秒值。 1s = 1000ms\n\n```java\nimport java.util.Date;\n\npublic class DateDemo02 {\n    public static void main(String[] args) {\n        // 1.拿到此刻日期时间对象的毫秒值\n        long startTime = new Date().getTime();\n        for(int i = 1; i < 1000000 ; i++ ){\n            System.out.println(\"输出：\"+i);\n        }\n        // 2.拿到此刻日期时间对象的毫秒值\n        long endTime = new Date().getTime();\n        System.out.println( (endTime - startTime) / 1000.0 +\"s\");\n    }\n}\n```\n\n`Date`类的有参数构造器的使用。\n\n构造器：\n\n* `public Date()`:创建当前系统的此刻日期时间对象。\n* `public Date(long time)`:把时间毫秒值转换成日期对象。\n\n流程\n\n* `Date`日期对象 ->` getTime()` -> 时间毫秒值\n* 时间毫秒值 ->` new Date(时间毫秒值)` -> `Date`日期对象\n\n# day4-常用API、正则表达式、泛型、Collection集合API\n\n## 第一章 DateFormat类\n\n简单日期格式化类`SimpleDateFormat`可以把日期对象格式化成我们喜欢的时间形式\n\n```java\n// 1.得到此刻日期对象\nDate d = new Date();\nSystem.out.println(d);\n\n// 2.创建一个简单日期格式化对象负责格式化日期对象\n// 注意：参数是之间的格式。\nSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy年MM月dd日 HH:mm:ss EEE a\");\n\n// 3.开始调用方法格式化时间得到格式化的字符串时间形式\nString rs = sdf.format(d);\nSystem.out.println(rs);\n```\n\n也可以直接格式化时间毫秒值\n\n```java\n// 1.问121s后的时间是多少。格式化输出。\n// a.得到此刻日期对象\nDate date = new Date();\nSystem.out.println(date);\n\n// b.得到当前时间的时间毫秒值\nlong time = date.getTime();\ntime += 121 * 1000;\n\n// c.格式化时间毫秒值\nSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy年MM月dd日 HH:mm:ss EEE a\");\nSystem.out.println(sdf.format(time));\n```\n\n简单日期格式化类`SimpleDateFormat`解析字符串时间成为日期对象\n\n```java\n// a.定义一个字符串时间\nString date = \"2019-11-04 09:30:30\";\n\n// b.把字符串的时间解析成Date日期对象 。（重点）\n// 1.创建一个简单日期格式化对象负责解析字符串的时间成为日期对象\n// 注意：参数必须与被解析的时间的格式完全一致，否则执行报错！！\nSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n// 2.开始解析成日期对象\nDate newDate = sdf.parse(date);\n\n// c.得到日期对象的时间毫秒值 + 往后走 1天15小时，30分29s\nlong time = newDate.getTime() + (24L *60*60 + 15*60*60 + 30*60 + 29) * 1000;\n\n// d.把时间毫秒值格式化成喜欢的字符串的时间形式!\nSystem.out.println(sdf.format(time));\n```\n\n## 第二章 Calendar类\n\n`Calendar`代表了系统此刻日期对应的日历对象。\n\n`Calendar`是一个抽象类，不能直接创建对象。\n\n`Calendar`日历类创建日历对象的语法：\n\n```java\nCalendar rightNow = Calendar.getInstance();\n```\n\n`Calendar`的方法：\n\n* `public static Calendar getInstance()`: 返回一个日历类的对象。\n* `public int get(int field)`：取日期中的某个字段信息。\n* `public void set(int field,int value)`：修改日历的某个字段信息。\n* `public void add(int field,int amount)`：为某个字段增加/减少指定的值\n* `public final Date getTime()`: 拿到此刻日期对象。\n* `public long getTimeInMillis()`: 拿到此刻时间毫秒值\n\n```java\n// 1.通过调用日历类的静态方法getInstance得到一个当前此刻日期对象对应的日历对象。\nCalendar rightNow = Calendar.getInstance();\nSystem.out.println(rightNow);\n\n// 2.获取年：\nint year = rightNow.get(Calendar.YEAR);\nSystem.out.println(year);\n\nint mm = rightNow.get(Calendar.MONTH) + 1;\nSystem.out.println(mm);\n\n// 3.一年中的第几天: 308\nint days = rightNow.get(Calendar.DAY_OF_YEAR);\nSystem.out.println(days);\n\n// 4.修改日历的信息\n//rightNow.set(Calendar.YEAR , 2099);\n//System.out.println(rightNow.get(Calendar.YEAR));\n\n// 5.日历可以得到此刻日期对象。\nDate d = rightNow.getTime();\nSystem.out.println(d);\n\n// 6.此刻时间毫秒值\nlong time = rightNow.getTimeInMillis();\nSystem.out.println(time);\n\n// 7.请问701天  15小时后是哪个日期\n// 让日历的一年中的第几天往后走 701天！\nrightNow.add(Calendar.DAY_OF_YEAR , 701);\nrightNow.add(Calendar.HOUR , 15);\nlong time1 = rightNow.getTimeInMillis();\nSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy年MM月dd日 HH:mm:ss EEE a\");\nSystem.out.println(sdf.format(time1));\n```\n\n## 第三章 Math类\n\n* `Math`用于做数学运算\n* `Math`类中的方法全部是静态方法，直接用类名调用即可。\n\n常用方法\n\n- `public static int abs(int a)`                  获取参数a的绝对值：\n- `public static double ceil(double a) `          向上取整\n- `public static double floor(double a)`     向下取整\n- `public static double pow(double a, double b) ` 获取a的b次幂        \n- `public static long round(double a)`         四舍五入取整\n\n## 第四章 System类\n\n`System`系统类的使用，`System`代表当前系统\n\n静态方法：\n\n* `public static void exit(int status)`:终止JVM虚拟机，非0是异常终止。\n* `public static long currentTimeMillis()`:获取当前系统此刻时间毫秒值。\n* 可以做数组的拷贝。\n  `arraycopy(Object var0, int var1, Object var2, int var3, int var4);`\n     * 参数一：原数组\n     * 参数二：从原数组的哪个位置开始赋值。\n     * 参数三：目标数组\n     * 参数四：赋值到目标数组的哪个位置\n     * 参数五：赋值几个。\n\n## 第五章 BigDecimal类\n\n`BigDecimal`大数据类\n\n* 浮点型运算的时候直接+  * / 可能会出现数据失真（精度问题）\n* `BigDecimal`可以解决浮点型运算数据失真的问题\n\n包：`java.math.`\n创建对象的方式（最好的方式：）\n      `public static BigDecimal valueOf(double val)` :包装浮点数成为大数据对象。\n方法声明\n\n- `public BigDecimal add(BigDecimal value)`       加法运算\n- `public BigDecimal subtract(BigDecimal value)`  减法运算 \n- `public BigDecimal multiply(BigDecimal value) ` 乘法运算 \n- `public BigDecimal divide(BigDecimal value)`    除法运算\n- `public double doubleValue()`     把`BigDecimal`转换成`double`类型。\n\n```java\ndouble a = 0.1 ;\ndouble b = 0.2 ;\n// 1.把浮点数转换成大数据对象运算\nBigDecimal a1 = BigDecimal.valueOf(a);\nBigDecimal b1 = BigDecimal.valueOf(b);\n//BigDecimal c1 = a1.add(b1);  // 加法\nBigDecimal c1 = a1.divide(b1); // 除法\nSystem.out.println(c1);\n\n// 结果可能需要继续使用!!!\n// BigDecimal只是解决精度问题的手段，double数据才是我们的目的！！\ndouble rs = c1.doubleValue();\nSystem.out.println(rs);\n```\n\n## 第六章 包装类\n\n`Java`认为一切皆对象。引用数据类型就是对象了\n\n但是在`Java中8`基本数据类型不是对象，只是表示一种数据的类型形式,这8种数据类型显得很突兀\n\n`Java`为了一切皆对象的思想统一，把8种基本数据类型转换成对应的类，这个类称为基本数据类型的包装类。\n\n基本数据类型                    包装类（引用数据类型）\n     byte                      			Byte\n     short                    			 Short\n     int                    			   Integer(特殊)\n     long                    			  Long\n\n​     float                  	  		 Float\n​     double                   		 Double\n​     char                   		   Character(特殊)\n​     boolean                 			  Boolean\n\n* 自动装箱：可以直接把基本数据类型的值或者变量赋值给包装类\n* 自动拆箱：可以把包装类的变量直接赋值给基本数据类型\n\n```java\nint a = 12 ;\nInteger a1 = 12 ;  // 自动装箱\nInteger a2 = a ;   // 自动装箱\n\ndouble b = 99.9;\nDouble b1 = 99.9; // 自动装箱\nDouble b2 = b ;   // 自动装箱\n\nInteger c = 100 ;\nint c1 = c ;      // 自动拆箱\n\nint d = 12;\nInteger d1 = null; // 引用数据类型的默认值可以为null\nInteger d2 = 0;\n\nSystem.out.println(\"-----------------\");\nInteger it = Integer.valueOf(12);  // 手工装箱！\n// Integer it1 = new Integer(12); // 手工装箱！\nInteger it2 = 12;\n\n\nInteger it3 = 111 ;\nint it33 = it3.intValue(); // 手工拆箱\nint it333 = it3;\n```\n\n* Java为包装类做了一些特殊功能，以便程序员使用\n* 包装类作为类首先拥有了`Object`类的方法\n* 包装类作为引用类型的变量可以存储`null`值\n\n* 可以把基本数据类型的值转换成字符串类型的值。（没啥用）\n  * 调用`toString()`方法\n  * 调用`Integer.toString`(基本数据类型的值)得到字符串\n  * 直接把基本数据类型+空字符串就得到了字符串\n* 把字符串类型的数值转换成对应的基本数据类型的值。（真的很有用）\n  * `Xxx.parseXxx(\"字符串类型的数值\")`\n  * `Xxx.valueOf(\"字符串类型的数值\")` 推荐使用\n\n## 第七章 正则表达式\n\n是一些特殊字符组成的校验规则，可以校验信息的正确性，校验邮箱是否合法，例如电话号码，金额等。\n\n字符类\n     \n\n```\n[abc] a、b 或 c（简单类）\n[^abc] 任何字符，除了 a、b 或 c（否定）\n[a-zA-Z] a 到 z 或 A 到 Z，两头的字母包括在内（范围）\n[a-d[m-p]] a 到 d 或 m 到 p：[a-dm-p]（并集）\n[a-z&&[def23]] d、e 或 f（交集）\n[a-z&&[^bc]] a 到 z，除了 b 和 c：[ad-z]（减去）\n[a-z&&[^m-p]] a 到 z，而非 m 到 p：[a-lq-z]（减去）\n```\n\n 预定义字符类\n\n```\n. 任何字符\n\\d 数字：[0-9]\n\\D 非数字： [^0-9]\n\\s 空白字符：[ \\t\\n\\x0B\\f\\r]\n\\S 非空白字符：[^\\s]\n\\w 单词字符：[a-zA-Z_0-9]\n\\W 非单词字符：[^\\w]\n```\n\n以上正则匹配只能校验单个字符。\n\nGreedy 数量词\n\n```\nX? X，一次或一次也没有\nX* X，零次或多次\nX+ X，一次或多次\nX{n} X，恰好 n 次\nX{n,} X，至少 n 次\nX{n,m} X，至少 n 次，但是不超过 m 次\n```\n\n```java\nprivate static void checkPhone() {\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"请您输入电话号码：\");\n        String phone = sc.nextLine();\n        if(phone.matches(\"0\\\\d{2,5}-?\\\\d{5,15}\")){\n            System.out.println(\"电话号码合法了！\");\n        }else{\n            System.err.println(\"电话号码不正确！\");\n        }\n    }\n\n\n    private static void checkTel() {\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"请您输入手机号码：\");\n        String tel = sc.nextLine();\n        if(tel.matches(\"1[3-9]\\\\d{9}\")){\n            System.out.println(\"手机号码合法了！\");\n        }else{\n            System.err.println(\"手机号码不正确！\");\n        }\n    }\n\n    // 校验邮箱\n    public static void checkEmail(){\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"请您输入邮箱：\");\n        String email = sc.nextLine();\n        // 3232323@qq.com\n        // dlei082@163.com\n        // dlei@pic.com.cn\n        if(email.matches(\"\\\\w{1,}@\\\\w{2,10}(\\\\.\\\\w{2,10}){1,2}\")){\n            System.out.println(\"邮箱合法了！\");\n        }else{\n            System.err.println(\"邮箱格式不正确！\");\n        }\n    }\n```\n\n`split`可以结合正则表达式分割\n\n```java\n// 1.split的基础用法\nString names = \"贾乃亮,王宝强,陈羽凡\";\n// 以“，”分割成字符串数组\nString[] nameArrs = names.split(\",\");\nfor(int i = 0 ; i < nameArrs.length ; i++ ){\n    String name = nameArrs[i];\n    System.out.println(name);\n}\n\nSystem.out.println(\"----------------------\");\n// 2.split集合正则表达式做分割\nString names1 = \"贾乃亮lv434fda324王宝强87632fad2342423陈羽凡\";\n// 以匹配正则表达式的内容为分割点分割成字符串数组\nString[] nameArrs1 = names1.split(\"\\\\w+\");\nfor(int i = 0 ; i < nameArrs1.length ; i++ ){\n    String name = nameArrs1[i];\n    System.out.println(name);\n}\nSystem.out.println(\"----------------------\");\n// 3. public String replaceAll(String regex,String newStr)\nString names2 = \"贾乃亮lv434fda324王宝强87632fad2342423陈羽凡\";\n// 使用正则表达式定位出内容，替换成/\nSystem.out.println(names2.replaceAll(\"\\\\w+\" , \"/\"));\n\nString names3 = \"贾乃亮,王宝强,羽凡\";\nSystem.out.println(names3.replaceAll(\",\",\"-\"));\n```\n\n正则表达式爬取信息中的内容\n\n可以通过`|`将正则表达式连接起来，是**或**的关系\n\n```java\nString rs = \"来黑马程序学习Java,电话020-43422424，或者联系邮箱\" +\n    \"itcast@itcast.cn,电话18762832633，0203232323\" +\n    \"邮箱bozai@itcast.cn，400-100-3233 ，4001003232\";\n// 需求：从上面的内容中爬取出 电话号码和邮箱。\n// 1.定义爬取规则\nString regex = \"(\\\\w{1,}@\\\\w{2,10}(\\\\.\\\\w{2,10}){1,2})|(1[3-9]\\\\d{9})|(0\\\\d{2,5}-?\\\\d{5,15})|400-?\\\\d{3,8}-?\\\\d{3,8}\";\n// 2.编译正则表达式成为一个匹配规则对象\nPattern pattern = Pattern.compile(regex);\n// 3.通过匹配规则对象得到一个匹配数据内容的匹配器对象\nMatcher matcher = pattern.matcher(rs);\n// 4.通过匹配器去内容中爬取出信息\nwhile(matcher.find()){\n    System.out.println(matcher.group());\n}\n```\n\n## 第八章 泛型\n\n### 泛型概念\n\n什么是泛型\n\n* 泛型就是一个标签：`<数据类型>`\n* 泛型可以在编译阶段约束只能操作某种数据类型\n\n> * JDK 1.7开始之后，泛型后面的申明可以省略不写\n> * **泛型和集合都只能支持引用数据类型，不支持基本数据类型**\n\n### 泛型的好处\n\n* 泛型在编译阶段约束了操作的数据类型，从而不会出现类型转换异常\n* 体现的是Java的严谨性和规范性，数据类型,经常需要进行统一\n\n### 自定义泛型\n\n使用了泛型定义的类就是泛型类\n\n```java\nclass MyArrayList<E>{\n\n    private ArrayList lists = new ArrayList();\n\n    public void add(E e){\n        lists.add(e);\n    }\n\n    public void remove(E e){\n        lists.remove(e);\n    }\n    @Override\n    public String toString() {\n        return lists.toString();\n    }\n}\n```\n\n### 自定义泛型方法\n\n定义了泛型的方法就是泛型方法\n\n泛型方法定义格式\n\n```java\n修饰符 <泛型变量> 返回值类型 方法名称(形参列表){\n\n}\n```\n\n一个泛型方法的例子\n\n```java\npublic static <T> String arrToString(T[] nums){\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[\");\n    if(nums!=null && nums.length > 0){\n        for(int i = 0 ; i < nums.length ; i++ ){\n            T ele = nums[i];\n            sb.append(i == nums.length-1 ? ele : ele+\", \");\n        }\n    }\n    sb.append(\"]\");\n    return sb.toString();\n}\n```\n\n> 泛型方法是一个通用技术\n\n### 泛型接口\n\n使用了泛型定义的接口就是泛型接口\n\n定义格式\n\n```java\n修饰符 interface 接口名称<泛型变量>{\n\n}\n```\n\n例如\n\n```java\npublic interface Data<E> {\n    void add(E stu);\n    void delete(E stu);\n    void update(E stu);\n    E query(int id);\n}\n```\n\n> 泛型接口的核心思想，在实现接口的时候传入真实的数据类型\n>\n> 这样重写的方法就是对该数据类型进行操作\n\n### 泛型的通配符\n\n通配符：`?`\n\n* `?`可以用在**使用泛型**的时候代表一切类型\n* `E , T , K , V`是在**定义泛型**的时候使用代表一切类型\n\n泛型的上下限：\n\n* `? extends Car` : 那么`?`必须是`Car`或者其子类。(泛型的上限)\n* `? super  Car` :那么`?`必须是`Car`或者其父类。（泛型的下限。不是很常见）\n\n```java\npublic class GenericDemo {\n    public static void main(String[] args) {\n        ArrayList<BMW> bmws = new ArrayList<>();\n        bmws.add(new BMW());\n        bmws.add(new BMW());\n        bmws.add(new BMW());\n        run(bmws);\n\n        ArrayList<BENZ> benzs = new ArrayList<>();\n        benzs.add(new BENZ());\n        benzs.add(new BENZ());\n        benzs.add(new BENZ());\n        run(benzs);\n\n        ArrayList<Dog> dogs = new ArrayList<>();\n        dogs.add(new Dog());\n        dogs.add(new Dog());\n        dogs.add(new Dog());\n        // run(dogs); // 就进不来了！\n    }\n\n    // 定义一个方法，可以让很多汽车一起进入参加比赛\n    public static void run(ArrayList<? extends Car> cars){\n\n    }\n}\n\nclass Car{\n}\nclass BMW extends Car{\n\n}\nclass BENZ extends Car{\n\n}\nclass Dog{\n\n}\n```\n\n## 第九章 Collection集合\n\n### 集合概述\n\n什么是集合\n\n- 集合是一个大小可变的容器\n- 容器中的每个数据称为一个元素。数据==元素\n- 集合的特点是：类型可以不确定，大小不固定。集合有很多种，不同的集合特点和使用场景不同\n- 数组：类型和长度一旦定义出来就都固定了\n\n集合用处\n\n- 在开发中，很多时候元素的个数是不确定的。\n- 而且经常要进行元素的增删该查操作，集合都是非常合适的。\n- 开发中集合用的更多\n\n> - Java中集合的代表是：`Collection`\n> - `Collection`集合是Java中集合的祖宗类\n> - 学习Collection集合的功能，那么一切集合都可以用这些功能\n\n集合体系\n\n```\n								Collection<E>(接口)\n                      /                                \\\n                 Set<E>(接口)                            List<E>(接口)\n                /               \\                       /                \\\n         HashSet<E>(实现类)  TreeSet<>(实现类)     ArrayList<E>(实现类)  LinekdList<>(实现类)\n             /\n         LinkedHashSet<>(实现类)\n```\n\n集合的特点：\n\n* `Set`系列集合：添加的元素是无序，不重复，无索引的\n  * `HashSet`: 添加的元素是无序，不重复，无索引的\n  * `LinkedHashSet`: 添加的元素是有序，不重复，无索引的\n  * `TreeSet`: 不重复，无索引，按照大小默认升序排序\n* `List`系列集合：添加的元素是有序，可重复，有索引\n  * `ArrayList`：添加的元素是有序，可重复，有索引\n  * `LinekdList`：添加的元素是有序，可重复，有索引\n\n```java\n// 多态写法：\n//  HashSet:添加的元素是无序，不重复，无索引的。\nCollection<String> sets = new HashSet<>();\nsets.add(\"MyBatis\");\nsets.add(\"Java\");\nsets.add(\"Java\");\nsets.add(\"Spring\");\nsets.add(\"MySQL\");\nsets.add(\"MySQL\");\n// [Java, MySQL, MyBatis, Spring]\nSystem.out.println(sets);\n\n// ArrayList:添加的元素是有序，可重复，有索引。\nCollection<String> lists = new ArrayList<>();\nlists.add(\"MyBatis\");\nlists.add(\"Java\");\nlists.add(\"Java\");\nlists.add(\"Spring\");\nlists.add(\"MySQL\");\nlists.add(\"MySQL\");\n// [MyBatis, Java, Java, Spring, MySQL, MySQL]\nSystem.out.println(lists);\n```\n\n### 集合常用API\n\n`Collection`是集合的祖宗类，它的功能是全部集合都可以继承使用的，所以要学习它。\nCollection API如下：\n\n- `public boolean add(E e)`：  把给定的对象添加到当前集合中 。\n- `public void clear()` :清空集合中所有的元素。\n- `public boolean remove(E e)`: 把给定的对象在当前集合中删除。\n- `public boolean contains(Object obj)`: 判断当前集合中是否包含给定的对象。\n- `public boolean isEmpty()`: 判断当前集合是否为空。\n- `public int size()`: 返回集合中元素的个数。\n- `public Object[] toArray()`: 把集合中的元素，存储到数组中\n\n```java\n// HashSet:添加的元素是无序，不重复，无索引。\nCollection<String> sets = new HashSet<>();\n// 1.添加元素，添加成功返回true.\nSystem.out.println(sets.add(\"贾乃亮\")); // true\nSystem.out.println(sets.add(\"贾乃亮\")); // false\nSystem.out.println(sets.add(\"王宝强\")); // true\nsets.add(\"陈羽凡\");\nSystem.out.println(sets); // 集合重写了toString()方法，默认打印出内容信息\n// 2.清空集合的元素。\n//sets.clear();\n//System.out.println(sets);\n\n// 3.判断集合是否为空 是空返回true 反之\nSystem.out.println(sets.isEmpty()); // false\n\n// 4.获取集合的大小\nSystem.out.println(sets.size()); // 3\n\n// 5.判断集合中是否包含某个元素 。\nSystem.out.println(sets.contains(\"贾乃亮\"));\n\n// 6.删除某个元素:如果有多个重复元素默认删除前面的第一个！\nsets.remove(\"陈羽凡\");\nSystem.out.println(sets);\n\n// 7.把集合转换成数组\nObject[] arrs = sets.toArray();\nSystem.out.println(\"数组：\"+ Arrays.toString(arrs));\n\nString[] arrs1 = sets.toArray(String[]::new); // 以后再了解，指定转换的数组类型！\nSystem.out.println(\"数组：\"+ Arrays.toString(arrs1));\n\nSystem.out.println(\"---------------------拓展---------------------------\");\nCollection<String> c1 = new ArrayList<>();\nc1.add(\"李小璐\");\nc1.add(\"马蓉\");\n\nCollection<String> c2 = new ArrayList<>();\nc2.add(\"白百合\");\n\nc1.addAll(c2); // 把c2集合的元素全部倒入到c1\nSystem.out.println(c1);\n```\n\n# day5-迭代器、数据结构、List、Set、TreeSet集合、Collections工具类\n\n## 第一章 Iterator迭代器\n\n`Collection`集合的遍历方式\n\n* 迭代器\n* `for-each`\n* `Lambda`表达式\n\n### 迭代器遍历\n\n* `public Iterator iterator()` 获取集合对应的迭代器，用来遍历集合中的元素\n* `E next()` 获取下一个元素值\n* `boolean hasNext()` 判断是否有下一个元素\n\n```java\nCollection<String> lists = new ArrayList<>();\nlists.add(\"赵敏\");\nlists.add(\"小昭\");\nlists.add(\"殷素素\");\nlists.add(\"周芷若\");\nSystem.out.println(lists);\n// 1.得到集合的迭代器对象。\nIterator<String> it = lists.iterator();\n\n// 2.使用while循环遍历。\nwhile(it.hasNext()){\n    String ele = it.next();\n    System.out.println(ele);\n}\n```\n\n### for-each遍历\n\n`for-each`遍历实际上是迭代器遍历的简化写法\n\n* `for-each`遍历集合或者数组很方便\n* `for-each`遍历无法知道遍历到了哪个元素，因为没有索引\n\n```java\nCollection<String> lists = new ArrayList<>();\nlists.add(\"赵敏\");\nlists.add(\"小昭\");\nlists.add(\"殷素素\");\nlists.add(\"周芷若\");\nSystem.out.println(lists);\n// lists = [赵敏, 小昭, 殷素素, 周芷若]\n//  ele\nfor (String ele : lists) {\n    System.out.println(ele);\n}\n\nint[] ages = new int[]{17 , 18 , 38 , 21};\nfor (int age : ages) {\n    System.out.println(age);\n}\n```\n\n### lambda表达式\n\n```java\nCollection<String> lists = new ArrayList<>();\nlists.add(\"赵敏\");\nlists.add(\"小昭\");\nlists.add(\"殷素素\");\nlists.add(\"周芷若\");\nSystem.out.println(lists);\n//   [赵敏, 小昭, 殷素素, 周芷若]\n//   s\nlists.forEach(s -> {\nSystem.out.println(s);\n});\n//      lists.forEach(s ->  System.out.println(s));\n//      lists.forEach(System.out::println);\n```\n\n## 第二章 Java常见数据结构种类\n\n队列（queue）\n\n- 先进先出，后进后出。\n- 场景：各种排队。叫号系统。\n- 有很多集合可以实现队列。\n\n栈（stack）\n\n- 后进先出，先进后出\n  压栈 == 入栈\n  弹栈 == 出栈\n  场景：手枪的弹夹。\n\n数组\n\n- 数组是内存中的连续存储区域。\n- 分成若干等分的小区域（每个区域大小是一样的）\n- 元素存在索引\n- 特点：查询元素快（根据索引快速计算出元素的地址，然后立即去定位）\n             增删元素慢（创建新数组，迁移元素）\n\n链表\n\n- 元素不是内存中的连续区域存储。\n- 元素是游离存储的。每个元素会记录下个元素的地址。\n- 特点：查询元素慢\n             增删元素快（针对于首尾元素，速度极快，一般是双链表）\n\n红黑树\n\n- 二叉树：binary tree 永远只有一个根节点，是每个结点不超过2个节点的树（tree） 。\n- 查找二叉树,排序二叉树：小的左边，大的右边，但是可能树很高，性能变差。\n- 为了做排序和搜索会进行左旋和右旋实现平衡查找二叉树，让树的高度差不大于1\n- 红黑树（就是基于红黑规则实现了自平衡的排序二叉树）：树尽量的保证到了很矮小，但是又排好序了，性能最高的树。\n- 红黑树的增删查改性能都好！！！\n\n\n这些结构，其实Java早就通过代码实现了，我们要知道有这些结构即可!\n\n## 第三章 List系列集合的使用\n\n### ArrayList集合\n\n![image-20220601213800419](http://47.108.219.199:81/articles/image-20220601213800419.png)\n\n`Collection`集合体系的特点:\n\n`Set`系列集合：添加的元素，是无序，不重复，无索引的。\n\n- `HashSet`：添加的元素，是无序，不重复，无索引的。\n- `LinkedHashSet`：添加的元素，是有序，不重复，无索引的。\n\n`List`系列集合：添加的元素，是有序，可重复，有索引的。\n\n- `LinkedList`： 添加的元素，是有序，可重复，有索引的。\n- `ArrayList`： 添加的元素，是有序，可重复，有索引的。\n- `Vector `：是线程安全的，速度慢，工作中很少使用。\n\n`List`集合继承了`Collection`集合的全部功能，同时因为`List`系列集合有索引，\n\n因为`List`集合多了索引，所以多了很多按照索引操作元素的功能\n\n`ArrayList`实现类集合底层基于数组存储数据的，查询快，增删慢！\n\n- `public void add(int index, E element)`: 将指定的元素，添加到该集合中的指定位置上。\n- `public E get(int index)`:返回集合中指定位置的元素。\n- `public E remove(int index)`: 移除列表中指定位置的元素, 返回的是被移除的元素。\n- `public E set(int index, E element)`:用指定元素替换集合中指定位置的元素,返回更新前的元素值。\n\n> * `List`系列集合有序，可重复，有索引的。\n> * `ArrayList`实现类集合底层基于数组存储数据的，查询快，增删慢！！\n> * 开发中`ArrayList`集合用的最多！！\n\n### List集合的遍历方式\n\n`List`遍历方式有四种：\n\n* `for`循环\n* 迭代器\n* `for-each`\n* lambda表达式\n\n```java\nList<String> lists = new ArrayList<>();\nlists.add(\"java1\");\nlists.add(\"java2\");\nlists.add(\"java3\");\n\n/** （1）for循环。 */\nfor(int i = 0 ; i < lists.size() ; i++ ) {\n    String ele = lists.get(i);\n    System.out.println(ele);\n}\nSystem.out.println(\"-----------------------\");\n\n/** （2）迭代器。 */\nIterator<String> it = lists.iterator();\nwhile(it.hasNext()){\n    System.out.println(it.next());\n}\nSystem.out.println(\"-----------------------\");\n\n/** （3）foreach。 */\nfor(String ele : lists){\n    System.out.println(ele);\n}\nSystem.out.println(\"-----------------------\");\n\n/** （4）JDK 1.8开始之后的Lambda表达式*/\nlists.forEach(s -> {\n    System.out.println(s);\n});\n```\n\n### LinkedList集合\n\n`LinkedList`也是`List`的实现类：底层是基于链表的，增删比较快，查询慢！！\n`LinkedList`是支持双链表，定位前后的元素是非常快的，增删首尾的元素也是最快的\n所以`LinkedList`除了拥有`List`集合的全部功能还多了很多操作首尾元素的特殊功能：\n\n- `public void addFirst(E e)`:将指定元素插入此列表的开头。\n- `void addLast(E e)`:将指定元素添加到此列表的结尾。\n- `public E getFirst()`:返回此列表的第一个元素。\n- `public E getLast()`:返回此列表的最后一个元素。\n- `public E removeFirst()`:移除并返回此列表的第一个元素。\n- `public E removeLast()`:移除并返回此列表的最后一个元素。\n- `public E pop()`:从此列表所表示的堆栈处弹出一个元素。\n- `public void push(E e)`:将元素推入此列表所表示的堆栈。\n\n> * `LinkedList`是支持双链表，定位前后的元素是非常快的，增删首尾的元素也是最快的。\n> * 所以提供了很多操作首尾元素的特殊API可以做栈和队列的实现。\n> * 如果查询多而增删少用`ArrayList`集合。(用的最多的)\n> * 如果查询少而增删首尾较多用`LinkedList`集合。\n\n## 第四章 Set系列集合\n\n研究两个问题==面试热点==\n\n* `Set`集合添加的元素是不重复的，是如何去重复的\n* `Set`集合元素无序的原因是什么\n\n### Set系列集合元素去重复的流程\n\n* 对于有值特性的，`Set`集合可以直接判断进行去重复。\n* 对于引用数据类型的类对象，Set集合是按照如下流程进行是否重复的判断。\n  * `Set`集合会让两两对象，先调用自己的`hashCode()`方法得到彼此的哈希值（所谓的内存地址）\n  * 然后比较两个对象的哈希值是否相同，如果不相同则直接认为两个对象不重复。\n  * 如果哈希值相同，会继续让两个对象进行`equals`比较内容是否相同，如果相同认为真的重复了\n  * 如果不相同认为不重复。\n\n```java\nSet<Integer> sets = new HashSet<>(); // 一行经典代码！！\nsets.add(1);\nsets.add(1);\nsets.add(2);\nsets.add(2);\nSystem.out.println(sets);\n\n// 存储一些自定义类型数据:无序不重复\nSet<Apple> apples = new HashSet<>();\nApple a1 = new Apple(\"红富士\",59.9 ,\"红色\");\nApple a2 = new Apple(\"阿克苏\",39.9 ,\"青红色\");\nApple a3 = new Apple(\"阿克苏\",39.9 ,\"青红色\");\nSystem.out.println(a1.hashCode()); // 哈希值，相当于是内存地址\nSystem.out.println(a2.hashCode()); // 哈希值，相当于是内存地址\nSystem.out.println(a3.hashCode()); // 哈希值，相当于是内存地址\napples.add(a1);\napples.add(a2);\napples.add(a3);\nSystem.out.println(apples);\n```\n\n### Set系列集合元素无序==面试必考==\n\n`Set`系列集合添加元素无序的根本原因是因为底层采用了哈希表存储元素。\n\n* JDK 1.8之前：哈希表 = 数组 + 链表  + （哈希算法）\n* JDK 1.8之后：哈希表 = 数组 + 链表 + 红黑树  + （哈希算法）\n\n​    当链表长度超过阈值（8）时，将链表转换为红黑树，这样大大减少了查找时间。\n\n### LinkedHashSet\n\n是`HashSet`的子类，元素是“有序” 不重复，无索引.\n\n* `LinkedHashSet`底层依然是使用哈希表存储元素的，\n* 但是每个元素都额外带一个链来维护添加顺序！！\n* 不光增删查快，还有序。缺点是多了一个存储顺序的链会占内存空间!!而且不允许重复，无索引。\n\n> * 如果希望元素可以重复，又有索引，查询要快用`ArrayList`集合。（用的最多）\n> * 如果希望元素可以重复，又有索引，增删要快要用`LinkedList`集合。（适合查询元素比较少的情况，经常要首尾操作元素的情况）\n> * 如果希望增删改查都很快，但是元素不重复以及无序无索引，那么用`HashSet`集合。\n> * 如果希望增删改查都很快且有序，但是元素不重复以及无索引，那么用`LinkedHashSet`集合。\n\n### TreeSet集合\n\n`TreeSet`: 不重复，无索引，按照大小默认升序排序!!\n\n`TreeSet`集合称为排序不重复集合，可以对元素进行默认的升序排序。\n\n`TreeSet`集合自自排序的方式：\n\n* 有值特性的元素直接可以升序排序。（浮点型，整型）\n* 字符串类型的元素会按照首字符的编号排序。\n* 对于自定义的引用数据类型，`TreeSet`默认无法排序，执行的时候直接报错，因为人家不知道排序规则。\n\n自定义的引用数据类型的排序实现：\n\n对于自定义的引用数据类型，`TreeSet`默认无法排序\n\n所以我们需要定制排序的大小规则，程序员定义大小规则的方案有2种：\n\n* 直接为对象的类实现比较器规则接口Comparable，重写比较方法（拓展方式）\n           // 如果程序员认为比较者大于被比较者 返回正数！\n           // 如果程序员认为比较者小于被比较者 返回负数！\n           // 如果程序员认为比较者等于被比较者 返回0！\n* 直接为集合设置比较器Comparator对象,重写比较方法\n           // 如果程序员认为比较者大于被比较者 返回正数！\n           // 如果程序员认为比较者小于被比较者 返回负数！\n           // 如果程序员认为比较者等于被比较者 返回0！\n\n> 如果类和集合都带有比较规则，优先使用集合自带的比较规则。\n\n```java\n// TreeSet : 排序不重复集合。\nSet<Double> scores = new TreeSet<>();\nscores.add(100.0);\nscores.add(99.9);\nscores.add(69.5);\nscores.add(0.1);\nscores.add(89.3);\nSystem.out.println(scores);\n\n// 字符串按照首字符的编号进行排序。\nSet<String> names = new TreeSet<>();\nnames.add(\"Jack\");\nnames.add(\"rose\");\nnames.add(\"Dlei\");\nnames.add(\"about\");\nnames.add(\"曹雪芹\");\nnames.add(\"bozai\");\nnames.add(\"caocao\");\nnames.add(\"angel\");\nSystem.out.println(names);\n\n// 引用数据类型定义TreeSet集合。\nSet<Employee> employees = new TreeSet<>();\nemployees.add(new Employee(\"播仔\",6500.0,21));\nemployees.add(new Employee(\"播妞\",7500.0,19));\nemployees.add(new Employee(\"乔治\",4500.0,23));\nSystem.out.println(employees);\n\n\n// public TreeSet(Comparator<? super E> comparator)\n// 集合自带比较器对象\n// 如果类和集合都存在大小规则，默认使用集合自带的规则进行大小排序！！\nSet<Employee> employees1 = new TreeSet<>(new Comparator<Employee>() {\n    @Override\n    public int compare(Employee o1, Employee o2) {\n        // o1比较者   o2被比较者\n        // 如果程序员认为比较者大于被比较者 返回正数！\n        // 如果程序员认为比较者小于被比较者 返回负数！\n        // 如果程序员认为比较者等于被比较者 返回0！\n        return o1.getAge() - o2.getAge();\n    }\n});\nemployees1.add(new Employee(\"播仔\",6500.0,21));\nemployees1.add(new Employee(\"播妞\",7500.0,19));\nemployees1.add(new Employee(\"乔治\",4500.0,23));\nSystem.out.println(employees1);\n```\n\n## 第五章 Collections工具类\n\n`Collections`并不属于集合，而是用来操作集合的工具类\n\n`Collections`有几个常用的API:\n\n- `public static <T> boolean addAll(Collection<? super T> c, T... elements)`\n  \n    给集合对象批量添加元素！\n    \n- `public static void shuffle(List<?> list)`\n\n    打乱集合顺序。\n\n- `public static <T> void sort(List<T> list)`\n\n    将集合中元素按照默认规则排序。\n\n- `public static <T> void sort(List<T> list，Comparator<? super T> )`\n\n    将集合中元素按照指定规则排序。\n\n```java\n// 1.给集合批量添加元素\nCollection<String> names = new ArrayList<>();\n/**\n* 参数一：被添加元素的集合\n* 参数二：可变参数，一批元素\n*/\nCollections.addAll(names,\"曹操\",\"贾乃亮\",\"王宝强\",\"陈羽凡\");\nSystem.out.println(names);\n\n// 2.打乱集合的顺序：public static void shuffle(List<?> list)\n// 注意：只能打乱有序的List集合。\nList<String> newnames = new ArrayList<>();\nCollections.addAll(newnames,\"曹操\",\"贾乃亮\",\"王宝强\",\"陈羽凡\");\nCollections.shuffle(newnames); // 打乱顺序\nSystem.out.println(newnames);\n\n// 3.public static <T> void sort(List<T> list)：给List集合升序排序。\nList<Double> scores = new ArrayList<>();\nCollections.addAll(scores, 98.5, 66.5 , 59.5 , 66.5 , 99.5 );\nCollections.sort(scores); // 默认升序排序！\nSystem.out.println(scores);\n```\n\n引用类型的排序\n\n字符串按照首字符的编号升序排序！\n\n自定义类型的比较方法API:\n- `public static <T> void sort(List<T> list)`\n\n     集合中元素按照默认规则排序。\n\n     对于自定义的引用类型的排序人家根本不知道怎么排，直接报错！\n\n     如果希望自定义的引用类型排序不报错，可以给类提供比较规则:Comparable。\n\n- `public static <T> void sort(List<T> list，Comparator<? super T> c)`\n\n     将集合中元素按照指定规则排序,自带比较器\n\n     注意：如果类有比较规则，而这里有比较器，优先使用比较器。\n\n```java\n// 自定义类型如何排序！\nList<Orange> oranges = new ArrayList<>();\nOrange o1 = new Orange(\"红橘子\",654.0 ,\"贼便宜~\");\nOrange o2 = new Orange(\"黄橘子\",454.0 ,\"贼便宜~\");\nOrange o3 = new Orange(\"黄橘子\",454.0 ,\"贼便宜~\");\nOrange o4 = new Orange(\"青橘子\",456.0 ,\"贼便宜~\");\nCollections.addAll(oranges,o1,o2,o3,o4);\nCollections.sort(oranges); // 排序，按照类实现的比较规则进行排序！！\nSystem.out.println(oranges);\n\n\nList<Orange> oranges1 = new ArrayList<>();\nOrange o11 = new Orange(\"红橘子\",654.0 ,\"贼便宜~\");\nOrange o22 = new Orange(\"黄橘子\",454.0 ,\"贼便宜~\");\nOrange o33 = new Orange(\"黄橘子\",454.0 ,\"贼便宜~\");\nOrange o44 = new Orange(\"青橘子\",456.0 ,\"贼便宜~\");\nCollections.addAll(oranges1,o11,o22,o33,o44);\n// 优先用方法自带的比较器对象Comparator而不会用类的比较规则！！\nCollections.sort(oranges1, new Comparator<Orange>() {\n    @Override\n    public int compare(Orange o1, Orange o2) {\n        if(o1.getWeight() > o2.getWeight()) return -1;\n        if(o1.getWeight() < o2.getWeight()) return 1;\n        return 0;\n    }\n});\nSystem.out.println(oranges1);\n```\n\n## 第六章 可变参数\n\n可变参数用在形参中可以接收多个数据。\n\n可变参数的格式：数据类型... 参数名称\n\n可变参数的作用：\n\n- 传输参数非常灵活，方便。\n- 可以不传输参数。\n- 可以传输一个参数。\n- 可以传输多个参数。\n- 可以传输一个数组。\n\n可变参数在方法内部本质上就是一个数组。\n\n可变参数的注意事项：\n\n* 一个形参列表中可变参数只能有一个！！\n* 可变参数必须放在形参列表的最后面！！\n\n```java\npublic static void main(String[] args) {\n    sum(); // 可以不传输参数。\n    sum(10); // 可以传输一个参数。\n    sum(10,20,30); // 可以传输多个参数。\n    sum(new int[]{10,30,50,70,90}); // 可以传输一个数组。\n}\n\npublic static void sum(int...nums){\n    // 可变参数在方法内部本质上就是一个数组。\n    System.out.println(\"元素个数：\"+nums.length);\n    System.out.println(\"元素内容：\"+ Arrays.toString(nums));\n    System.out.println(\"--------------------------\");\n}\n```\n\n# day6-Map\n\n## 第一章 Map\n\n### Map集合的概述\n\n`Map`集合是另一个集合体系。\n\n`Collection`是单值集合体系。\n\n`Map`集合是一种双列集合，每个元素包含两个值。\n\n`Map`集合的每个元素的格式：`key=value`(键值对元素)。\n\n`Map`集合也被称为“键值对集合”。\n\n`Map`集合的完整格式：`{key1=value1 , key2=value2 , key3=value3 , ...}`\n\n\n\n* `Map`集合的特点都是由键决定的。\n* `Map`集合的键是无序,不重复的，无索引的，`Map`集合后面重复的键对应的元素会覆盖前面的整个元素！\n* `Map`集合的值无要求。\n* `Map`集合的键值对都可以为`null`。\n\n`HashMap`:元素按照键是无序，不重复，无索引，值不做要求。\n`LinkedHashMap`:元素按照键是有序，不重复，无索引，值不做要求。\n\n### Map集合的API\n\n- `public V put(K key, V value)`:  把指定的键与指定的值添加到`Map`集合中。\n- `public V remove(Object key)`: 把指定的键 所对应的键值对元素 在`Map`集合中删除，返回被删除元素的值。\n- `public V get(Object key)` 根据指定的键，在`Map`集合中获取对应的值。\n- `public Set<K> keySet()`: 获取`Map`集合中所有的键，存储到`Set`集合中。\n- `public Set<Map.Entry<K,V>> entrySet()`: 获取到`Map`集合中所有的键值对对象的集合(`Set`集合)。\n- `public boolean containKey(Object key)`:判断该集合中是否有此键。\n\n```java\nMap<String , Integer> maps = new HashMap<>();\n// 1.添加元素: 无序，不重复，无索引。\nmaps.put(\"iphoneX\",10);\nmaps.put(\"娃娃\",30);\nmaps.put(\"iphoneX\",100);//  Map集合后面重复的键对应的元素会覆盖前面重复的整个元素！\nmaps.put(\"huawei\",1000);\nmaps.put(\"生活用品\",10);\nmaps.put(\"手表\",10);\n// {huawei=1000, 手表=10, 生活用品=10, iphoneX=100, 娃娃=30}\nSystem.out.println(maps);\n\n// 2.清空集合\n//maps.clear();\n//System.out.println(maps);\n\n// 3.判断集合是否为空，为空返回true ,反之！\nSystem.out.println(maps.isEmpty());\n\n// 4.根据键获取对应值。\n//Integer value = maps.get(\"娃娃\");\n//System.out.println(value);\nSystem.out.println(maps.get(\"娃娃\"));\n\n// 5.根据键删除整个元素。(删除键会返回键的值)\nmaps.remove(\"iphoneX\");\nSystem.out.println(maps);\n\n// 6.判断是否包含某个键 ，包含返回true ,反之\nSystem.out.println(maps.containsKey(\"手表\")); // true\nSystem.out.println(maps.containsKey(10)); // false\n\n// 7.判断是否包含某个值。\nSystem.out.println(maps.containsValue(1000)); // true\nSystem.out.println(maps.containsValue(10)); // true\nSystem.out.println(maps.containsValue(\"30\")); // false 包含的是整数30不是字符串。\n\n// 8.获取全部键的集合：public Set<K> keySet()\n// Map集合的键是无序不重复的，所以返回的是一个Set集合。\nSet<String> keys = maps.keySet();\nfor (String key : keys) {\n    System.out.println(key);\n}\n\n// 9.获取全部值的集合：Collection<V> values();\n// Map集合的值是不做要求的，可能重复，所以值要用Collection集合接收!\nCollection<Integer> values = maps.values();\nfor (Integer value : values) {\n    System.out.println(value);\n}\n\n// 10.集合的大小\nSystem.out.println(maps.size());\n\n// 11.合并其他Map集合。(拓展)\nMap<String,Integer> maps2 = new HashMap<>();\nmaps2.put(\"xiaoMi\" , 1);\nmaps2.put(\"🔨手机\" , 10);\nmaps2.put(\"手表\" , 10000);\nmaps.putAll(maps2); // 把Map集合maps2的数据全部倒入到maps集合中去\nSystem.out.println(maps);\n```\n\n### Map集合的遍历\n\n`Map`集合的遍历方式有3种：\n\n* **键找值**的方式遍历：先获取`Map`集合全部的键，再根据遍历键找值\n* **键值对**的方式遍历\n* JDK1.8之后支持`Lambda`表达式\n\n首先是**键找值**遍历方式\n\n* 先获取`Map`集合的全部键的`Set`集合\n* 遍历键的`Set`集合，然后通过键找值\n\n```java\nSet<String> keys = maps.keySet();\nfor (String key : keys) {\n    // 过键取对应的值\n    Integer value = maps.get(key);\n    System.out.println(key + \"=\" + value);\n}\n```\n\n然后是**键值对**的方式遍历\n\n* 把`Map`集合转换成一个`Set`集合:`Set<Map.Entry<K, V>> entrySet();`\n* 此时键值对元素的类型就确定了，类型是键值对实体类型：`Map.Entry<K, V>`\n* 接下来就可以用`foreach`遍历这个`Set`集合，类型用`Map.Entry<K, V>`\n\n```java\nSet<Map.Entry<String,Integer>> entries = maps.entrySet();\nfor (Map.Entry<String, Integer> entry : entries) {\n    String key = entry.getKey();\n    Integer value = entry.getValue();\n    System.out.println(key + \"=>\" + value);\n}\n```\n\n最后是简介的`Lambda`表达式\n\n```java\nmaps.forEach((k , v) -> {\n    System.out.println(k+\"==>\"+v);\n});\n```\n\n### Map集合存储自定义类型\n\n`Map`集合的键和值都可以存储自定义类型\n\n如果`Map`集合认为自定义类型的键对象重复了，必须重写对象的`hashCode()`和`equals()`方法\n\n`Orange.java`\n\n```java\npublic class Orange {\n    private String name;\n    private double weight;\n    private String price;\n\n\n    public Orange() {\n    }\n\n    public Orange(String name, double weight, String price) {\n        this.name = name;\n        this.weight = weight;\n        this.price = price;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Orange orange = (Orange) o;\n        return Double.compare(orange.weight, weight) == 0 &&\n                Objects.equals(name, orange.name) &&\n                Objects.equals(price, orange.price);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(name, weight, price);\n    }\n    \n    //...\n}\n```\n\n`Map`使用自定义存储类型\n\n```java\nMap<Orange,String> maps = new HashMap<>();\nOrange o1 = new Orange(\"黄橘子\",20.3 , \"贼便宜！\");\nOrange o2 = new Orange(\"黑橘子\",30.3 , \"坏了\");\nOrange o3 = new Orange(\"青橘子\",34.3 , \"9.9包邮\");\nOrange o4 = new Orange(\"黄橘子\",20.3 , \"贼便宜！\");\n\nmaps.put(o1 , \"江西\\n\");\nmaps.put(o2 , \"赣州\\n\");\nmaps.put(o3 , \"广州\\n\");\nmaps.put(o4 , \"广西\\n\");\n\nSystem.out.println(maps);\n```\n\n### LinkedHashMap的特点\n\n`LinkedHashMap`是`HashMap`的子类，添加的元素按照键有序，不重复的。\n\n`HashSet`集合相当于是`HashMap`集合的键都不带值。\n\n`LinkedHashSet`集合相当于是`LinkedHashMap`集合的键都不带值。\n\n底层原理完全一样，都是基于哈希表按照键存储数据的，\n\n只是`HashMap`或者`LinkedHashMap`的键都多一个附属值。\n\n```java\nMap<String , Integer> maps = new LinkedHashMap<>();\nmaps.put(\"iphoneX\",10);\nmaps.put(\"娃娃\",30);\nmaps.put(\"iphoneX\",100); // 依然是保留前面的位置，只是替换其值！\nmaps.put(\"huawei\",1000);\nmaps.put(\"生活用品\",10);\nmaps.put(\"手表\",10);\nSystem.out.println(maps);\n```\n\n* `HashMap`集合是无序不重复的键值对集合。\n* `LinkedHashMap`集合是有序不重复的键值对集合。\n* 他们都是基于哈希表存储数据,增删改查都很好。\n\n### TreeMap集合应用\n\n* `TreeMap`集合按照键是可排序不重复的键值对集合。(默认升序)\n* `TreeMap`集合按照键排序的特点与`TreeSet`是完全一样的\n\n> `TreeMap`集合和`TreeSet`集合都是排序不重复集合\n>\n> `TreeSet`集合的底层是基于`TreeMap`，只是键没有附属值而已。\n>\n> 所以`TreeMap`集合指定大小规则有2种方式：\n>\n> * 直接为对象的类实现比较器规则接口`Comparable`，重写比较方法（拓展方式）\n> * 直接为集合设置比较器`Comparator`对象,重写比较方法\n\n类实现`Comparable`\n\n```java\n// 比较者： this\n// 被比较者： o\n// 需求：按照价格排序！\n@Override\npublic int compareTo(Object o) {\n    // 浮点型的大小比较建议使用Java自己的API:\n    // public static int compare(double d1, double d2)\n    return  -Double.compare(this.price , ((Pig)o).price);\n}\n```\n\n集合设置`Comparator`\n\n```java\nMap<Pig,String> pigs1 = new TreeMap<>(new Comparator<Pig>() {\n    @Override\n    public int compare(Pig p1, Pig p2) {\n        return Double.compare(p1.getWeight() , p2.getWeight());\n    }\n});\n```\n\n## 第二章 排序算法\n\n### 冒泡排序算法\n\n```java\nint[] arr = new int[] {55, 22, 99, 88};\n// 1.定义一个循环控制总共需要冒泡几轮：数组的长度-1\nfor(int i = 0 ;  i < arr.length - 1 ; i++ ){\n    // i = 0   j = 0 1 2\n    // i = 1   j = 0 1\n    // i = 2   j = 0\n    // 2.控制每轮比较几次。\n    for(int j = 0 ; j < arr.length - i - 1 ; j++ ){\n        // 如果当前元素大于后一个元素\n        if(arr[j] > arr[j+1]){\n            // 交换位置。大的元素必须后移！\n            // 定义一个临时变量存储后一个元素\n            int temp = arr[j+1];\n            arr[j+1] = arr[j];\n            arr[j] = temp;\n        }\n    }\n}\n```\n\n## 选择排序算法\n\n```java\nint[] arr = {5 , 1 , 3 , 2};\n// 1.定义一个循环控制选择几轮\nfor(int i = 0 ; i < arr.length - 1 ; i++ ){\n    // 2.定义一个循环控制每轮比较几次，一定是以当前位置与后面元素比较\n    // i =0  j = 1 2 3\n    // i =1  j = 2 3\n    // i =2  j = 3\n    // 遍历后面的元素\n    for(int j = i+1 ; j < arr.length ; j++ ){\n        // 拿当前位置与j指定的元素进行大小比较，后面的较小就交换位置\n        if(arr[j] < arr[i]){\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n    }\n}\n```\n\n## 第三章 二分查找\n\n**二分查找的前提**：对数组是有要求的,数组必须已经排好序。\n\n每次先与中间的元素进行比较，如果大于往右边找，如果小于往左边找，如果等于就返回该元素索引位置！\n\n如果没有该元素，返回-1。综合性能比较好！！\n\n```java\n/**\n     *\n     * @param arr  被检索的数组\n     * @param number 被检索的元素值\n     * @return  返回元素在数组中的索引值，不存在该元素返回-1\n     */\npublic static int binarySerach(int[] arr , int number){\n    // 3.记录当前区间搜索的开始索引和结束索引。\n    int start = 0 ;\n    int end = arr.length - 1;\n    // 4.定义一个循环，反复去循环元素。\n    while(start <= end){\n        // 5.取中间索引位置\n        int middleIndex = (start + end) / 2 ;\n        // 6.判断当前元素与中间元素的大小\n        if(number < arr[middleIndex]){\n            // 7.往左边继续寻找，结束索引应该-1\n            end = middleIndex - 1;\n        }else if(number > arr[middleIndex]){\n            start = middleIndex + 1;\n        }else if(number == arr[middleIndex]){\n            return middleIndex;\n        }\n    }\n    // 如果上述循环执行完毕还没有返回索引，说明根本不存在该元素值，直接返回-1\n    return -1;\n}\n```\n\n# day7-异常、线程\n\n## 第一章 异常\n\n### 异常的概述和体系\n\n**异常**：指的是程序在执行过程中，出现的非正常的情况，最终会导致JVM的非正常停止\n\n* 在`Java`等面向对象的编程语言中，异常本身是一个类，产生异常就是创建异常对象并抛出了一个异常对象。`Java`处理异常的方式是中断处理。\n* `Java`会为常见的代码异常都设计一个类来代表\n* `Java`中异常继承的根类是：`Throwable`\n\n<img src=\"http://47.108.219.199:81/articles/image-20220603140634079.png\" alt=\"image-20220603140634079\" style=\"zoom: 80%;\" />\n\n`Error `: 错误的意思，严重错误`Error`，无法通过处理的错误，一旦出现，程序员无能为力了，\n\n* 只能重启系统，优化项目。\n* 比如内存奔溃，`JVM`本身的奔溃。这个程序员无需理会。\n\n`Exception`:才是异常类，它才是开发中代码在编译或者执行的过程中可能出现的错误，\n\n* 它是需要提前处理的。以便程序更健壮！\n\n`Exception`异常的分类:\n\n* **编译时异常**：继承自`Exception`的异常或者其子类，编译阶段就会报错，必须程序员处理的。否则代码编译就不能通过\n* **运行时异常**: 继承自`RuntimeException`的异常或者其子类，编译阶段是不会出错的，它是在运行时阶段可能出现，运行时异常可以处理也可以不处理，编译阶段是不会出错的，但是运行阶段可能出现，还是建议提前处理\n\n### 常见的运行时异常==面试热点==\n\n继承自`RuntimeException`的异常或者其子类，编译阶段是不会出错的，它是在运行时阶段可能出现的错误，运行时异常编译阶段可以处理也可以不处理,代码编译都能通过\n\n* 数组索引越界异常: `ArrayIndexOutOfBoundsException`\n* 空指针异常 : `NullPointerException`\n  直接输出没有问题。但是调用空指针的变量的功能就会报错\n* 类型转换异常：`ClassCastException`\n* 迭代器遍历没有此元素异常：`NoSuchElementException`\n* 数学操作异常：`ArithmeticException`\n* 数字转换异常： `NumberFormatException`\n\n### 编译时异常\n\n编译时异常：继承自`Exception`的异常或者其子类，没有继承`RuntimeException`\n\n* \"编译时异常是编译阶段就会报错\"，\n* 必须程序员编译阶段就处理的。否则代码编译就报错\n\n编译时异常的作用是什么：\n\n* 是担心程序员的技术不行，在编译阶段就爆出一个错误, 目的在于提醒\n* 提醒程序员这里很可能出错，请检查并注意不要出bug\n\n## 第二章 异常的处理\n\n### 异常的产生、处理的默认过程\n\n* 默认会在出现异常的代码那里自动的创建一个异常对象：`ArithmeticException`。\n* 异常会从方法中出现的点这里抛出给调用者，调用者最终抛出给`JVM`虚拟机。\n* 虚拟机接收到异常对象后，先在控制台直接输出异常栈信息数据。\n* 直接从当前执行的异常点干掉当前程序。\n* 后续代码没有机会执行了，因为程序已经死亡。\n\n### 编译时异常处理机制\n\n方法一\n\n* 在出现编译时异常的地方层层把异常抛出去给调用者，调用者最终抛出给JVM虚拟机。\n* JVM虚拟机输出异常信息，直接干掉程序，这种方式与默认方式是一样的。\n\n抛出异常格式：\n\n```java\n\n方法 throws 异常1 ,  异常2 , ..{\n\n}\n建议抛出异常的方式：代表可以抛出一切异常，\n方法 throws Exception{\n\n}\n```\n\n虽然可以解决代码编译时的错误，但是一旦运行时真的出现异常，程序还是会立即死亡\n\n方法二\n\n在出现异常的地方自己处理，谁出现谁处理\n\n```java\ntry{\n    // 监视可能出现异常的代码！\n}catch(异常类型1 变量){\n    // 处理异常\n}catch(异常类型2 变量){\n    // 处理异常\n}...\n```\n\n> 第二种方式，可以处理异常，并且出现异常后代码也不会死亡。这种方案还是可以的。但是从理论上来说，这种方式不是最好的，上层调用者不能直接知道底层的执行情况\n\n```java\ntry{\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy/MM-dd HH:mm:ss\");\n    Date d = sdf.parse(time);\n    System.out.println(d);\n\n    InputStream is = new FileInputStream(\"D:/meinv.png\");\n} catch (FileNotFoundException e) {\n    System.err.println(\"文件根本不存在！\");\n} catch (ParseException e) {\n    System.err.println(\"解析有问题，请检查代码！\");\n}\n```\n\n方法三\n\n在出现异常的地方吧异常一层一层的抛出给最外层调用者，最外层调用者集中捕获处理==规范做法==\n\n> 这种方案最外层调用者可以知道底层执行的情况，同时程序在出现异常后也不会立即死亡，这是\n> 理论上最好的方案\n\n\n\n```java\npublic static void main(String[] args) {\n    System.out.println(\"程序开始。。。。\");\n    try {\n        parseDate(\"2013-03-23 10:19:23\");\n        System.out.println(\"功能成功执行！！\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        System.out.println(\"功能执行失败！！\");\n    }\n    System.out.println(\"程序结束。。。。。\");\n}\n\n// 可以拦截所以异常!\npublic static void parseDate(String time) throws Exception {\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n    Date d = sdf.parse(time);\n    System.out.println(d);\n\n    InputStream is = new FileInputStream(\"D:/meinv.png\");\n}\n```\n\n### 运行时异常的处理机制\n\n运行时异常在编译阶段是不会报错，在运行阶段才会出错。运行时异常在编译阶段不处理也不会报错，但是运行时如果出错了程序还是会死亡。所以运行时异常也建议要处理。\n\n运行时异常是自动往外抛出的，不需要我们手工抛出。\n\n运行时异常的处理规范：直接在最外层捕获处理即可，底层会自动抛出\n\n```java\npublic static void main(String[] args) {\n        System.out.println(\"程序开始。。。。\");\n        try{\n            chu(10 , 0);\n            System.out.println(\"操作成功！\");\n        }catch (Exception e){\n            e.printStackTrace();\n            System.out.println(\"操作失败！\");\n        }\n        System.out.println(\"程序结束。。。。\");\n    }\n\n    public static void chu(int a , int b)  {\n        System.out.println( a / b );\n    }\n```\n\n### finally关键字\n\n用在捕获处理的异常格式中的，放在最后面\n\n无论代码是出现异常还是正常执行，最终一定要执行这里的代码\n\n```java\ntry{\n    // 可能出现异常的代码！\n}catch(Exception e){\n    e.printStackTrace();\n}finally{\n    // 无论代码是出现异常还是正常执行，最终一定要执行这里的代码！！\n}\n```\n\n`finally`的作用: 可以在代码执行完毕以后进行资源的释放操作。\n\n```java\ntry{\n    //System.out.println(10/0);\n    is = new FileInputStream(\"D:/cang.png\");\n    System.out.println(10 / 0 );\n\n}catch (Exception e){\n    e.printStackTrace();\n}finally {\n    System.out.println(\"==finally被执行===\");\n    // 回收资源。用于在代码执行完毕以后进行资源的回收操作！\n    try {\n        if(is!=null)is.close();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n```\n\n### 异常的注意事项\n\n- 运行时异常被抛出可以不处理。可以自动抛出,编译时异常必须处理.按照规范都应该处理!\n- 重写方法申明抛出的异常，**应该与父类被重写方法申明抛出的异常一样或者范围更小**\n- 方法默认都可以自动抛出运行时异常！  `throws RuntimeException`可以省略不写!!\n- 当多异常处理时，捕获处理，**前边的异常类不能是后边异常类的父类**。\n- 在`try/catch`后可以追加`finally`代码块，其中的代码一定会被执行，通常用于资源回收操作。\n\n## 第三章 自定义异常\n\n自定义**编译时异常**\n\n- 定义一个异常类继承`Exception`\n- 重写构造器\n- 在出现异常的地方用`throw new `自定义对象抛出\n- 编译时异常是编译阶段就报错，提醒更加强烈，一定需要处理\n\n```java\npublic class ItheimaAgeIllegalException extends Exception {\n    public ItheimaAgeIllegalException() {\n    }\n\n    public ItheimaAgeIllegalException(String message) {\n        super(message);\n    }\n\n    public ItheimaAgeIllegalException(String message, Throwable cause) {\n        super(message, cause);\n    }\n\n    public ItheimaAgeIllegalException(Throwable cause) {\n        super(cause);\n    }\n\n    public ItheimaAgeIllegalException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n        super(message, cause, enableSuppression, writableStackTrace);\n    }\n}\n```\n\n自定义**运行时异常**\n\n- 定义一个异常类继承`RuntimeException`\n- 重写构造器\n- 在出现异常的地方用`throw new`自定义对象抛出\n- 提醒不强烈，编译阶段不报错，运行时才可能出现\n\n```java\npublic class ItheimaAgeIllegalRuntimeException extends RuntimeException {\n    public ItheimaAgeIllegalRuntimeException() {\n    }\n\n    public ItheimaAgeIllegalRuntimeException(String message) {\n        super(message);\n    }\n\n    public ItheimaAgeIllegalRuntimeException(String message, Throwable cause) {\n        super(message, cause);\n    }\n\n    public ItheimaAgeIllegalRuntimeException(Throwable cause) {\n        super(cause);\n    }\n\n    public ItheimaAgeIllegalRuntimeException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n        super(message, cause, enableSuppression, writableStackTrace);\n    }\n}\n```\n\n异常的作用：\n\n* 可以处理代码问题，防止程序出现异常后的死亡\n* 提高了程序的健壮性和安全性\n\n```java\ntry{\n    Scanner sc = new Scanner(System.in);\n    System.out.println(\"请您输入您的年年龄：\");\n    int age = sc.nextInt();\n    System.out.println(\"您是：\"+age);\n    break;\n}catch (Exception e){\n    System.err.println(\"您的年龄是瞎输入的！\");\n}\n```\n\n## 第四章 多线程\n\n### 进程与线程\n\n- **进程**：是指一个内存中运行的应用程序，每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程；进程也是程序的一次执行过程，是系统运行程序的基本单位；系统运行一个程序即是一个进程从创建、运行到消亡的过程。\n- **线程**：是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程。一个进程中是可以有多个线程的，这个应用程序也可以称之为多线程程序。\n\n进程的三个特征：\n\n- 动态性 ： 进程是运行中的程序，要动态的占用内存，CPU和网络等资源。\n\n- 独立性 ： 进程与进程之间是相互独立的，彼此有自己的独立内存区域。\n\n- 并发性 ： 假如`CPU`是单核，同一个时刻其实内存中只有一个进程在被执行。\n\n  `CPU`会分时轮询切换依次为每个进程服务，因为切换的速度非常快，给我们的感觉这些进程在同时执行，这就是并发性。\n\n线程的作用\n\n- 可以提高程序的效率，线程也支持并发性，可以有更多机会得到CPU。\n- 多线程可以解决很多业务模型。\n- 大型高并发技术的核心技术。\n- 设计到多线程的开发可能都比较难理解。\n\n### 线程常用方法\n\n线程开启我们需要用到了`java.lang.Thread`类，API中该类中定义了有关线程的一些方法，具体如下：\n\n**构造方法：**\n\n- `public Thread()`:分配一个新的线程对象。\n- `public Thread(String name)`:分配一个指定名字的新的线程对象。\n- `public Thread(Runnable target)`:分配一个带有指定目标新的线程对象。\n- `public Thread(Runnable target,String name)`:分配一个带有指定目标新的线程对象并指定名字。\n\n**常用方法：**\n\n- `public void setName(String name)`：给当前线程取名字\n- `public String getName()`:获取当前线程名称。\n- `public void start()`:导致此线程开始执行; Java虚拟机调用此线程的run方法。\n- `public void run()`:此线程要执行的任务在此处定义代码。\n- `public static void sleep(long millis)`:使当前正在执行的线程以指定的毫秒数暂停（暂时停止执行）。\n- `public static Thread currentThread()  `:返回对当前正在执行的线程对象的引用。\n\n翻阅API后得知创建线程的方式总共有两种，一种是继承Thread类方式，一种是实现Runnable接口方式，方式一我们上一天已经完成，接下来讲解方式二实现的方式。\n\n### 线程的创建方式一-继承方式\n\nJava使用`java.lang.Thread`类代表**线程**，所有的线程对象都必须是Thread类或其子类的实例。每个线程的作用是完成一定的任务，实际上就是执行一段程序流即一段顺序执行的代码。Java使用线程执行体来代表这段程序流。Java中通过继承Thread类来**创建**并**启动多线程**的步骤如下：\n\n1. 定义Thread类的子类，并重写该类的run()方法，该run()方法的方法体就代表了线程需要完成的任务,因此把run()方法称为线程执行体。\n2. 创建Thread子类的实例，即创建了线程对象\n3. 调用线程对象的start()方法来启动该线程\n\n```java\npublic class ThreadDemo {\n    // 启动后的ThreadDemo当成一个进程。\n    // main方法是由主线程执行的，理解成main方法就是一个主线程\n    public static void main(String[] args) {\n        // 3.创建一个线程对象\n        Thread t = new MyThread();\n        // 4.调用线程对象的start()方法启动线程,最终还是执行run()方法！\n        t.start();\n\n        for(int i = 0 ; i < 100 ; i++ ){\n            System.out.println(\"main线程输出：\"+i);\n        }\n    }\n}\n\n// 1.定义一个线程类继承Thread类。\nclass MyThread extends Thread{\n    // 2.重写run()方法\n    @Override\n    public void run() {\n        // 线程的执行方法。\n        for(int i = 0 ; i < 100 ; i++ ){\n            System.out.println(\"子线程输出：\"+i);\n        }\n    }\n}\n```\n\n> * 线程的启动必须调用`start()`方法，否则当成普通类处理\n>   * 如果线程直接调用`run()`方法，相当于变成了普通类的执行，此时只有主线程在执行他们\n>   * `start()`方法底层其实是给CPU注册当前线程，并且触发`run()`方法执行\n> * 建议线程先创建子线程，主线程的任务放在之后，否则主线程永远是先执行完\n\n### 线程创建方式二-实现方式\n\n采用`java.lang.Runnable`也是非常常见的一种，我们只需要重写run方法即可。\n\n步骤如下：\n\n1. 定义Runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。\n2. 创建Runnable实现类的实例，并以此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。\n3. 调用线程对象的start()方法来启动线程。\n\n```java\npublic class ThreadDemo {\n    public static void main(String[] args) {\n        // 3.创建一个线程任务对象(注意：线程任务对象不是线程对象，只是执行线程的任务的)\n        Runnable target = new MyRunnable();\n        // 4.把线程任务对象包装成线程对象.且可以指定线程名称\n        // Thread t = new Thread(target);\n        Thread t = new Thread(target,\"1号线程\");\n        // 5.调用线程对象的start()方法启动线程\n        t.start();\n\n        Thread t2 = new Thread(target);\n        // 调用线程对象的start()方法启动线程\n        t2.start();\n\n        for(int i = 0 ; i < 10 ; i++ ){\n            System.out.println(Thread.currentThread().getName()+\"==>\"+i);\n        }\n    }\n}\n\n// 1.创建一个线程任务类实现Runnable接口。\nclass MyRunnable implements Runnable{\n    // 2.重写run()方法\n    @Override\n    public void run() {\n        for(int i = 0 ; i < 10 ; i++ ){\n            System.out.println(Thread.currentThread().getName()+\"==>\"+i);\n        }\n    }\n}\n```\n\n### 匿名内部类方式\n\n这种方式是实现方式的匿名内部类写法，代码更加简洁\n\n```java\npublic class NoNameInnerClassThread {\n   	public static void main(String[] args) {	   	\n//		new Runnable(){\n//			public void run(){\n//				for (int i = 0; i < 20; i++) {\n//					System.out.println(\"张宇:\"+i);\n//				}\n//			}  \n//	   	}; //---这个整体  相当于new MyRunnable()\n        Runnable r = new Runnable(){\n            public void run(){\n                for (int i = 0; i < 20; i++) {\n                  	System.out.println(\"张宇:\"+i);\n                }\n            }  \n        };\n        new Thread(r).start();\n\n        for (int i = 0; i < 20; i++) {\n          	System.out.println(\"费玉清:\"+i);\n        }\n   	}\n}\n```\n\n### 线程创建方式三-实现Callable接口\n\n\n\n- 定义一个线程任务类实现Callable接口 ， 申明线程执行的结果类型。\n- 重写线程任务类的call方法，这个方法可以直接返回执行的结果。\n- 创建一个Callable的线程任务对象。\n- 把Callable的线程任务对象包装成一个未来任务对象。\n- 把未来任务对象包装成线程对象。\n- 调用线程的start()方法启动线程\n\n这样做的优点是：\n\n- 线程任务类只是实现了Callable接口，可以继续继承其他类，而且可以继续实现其他接口（避免了单继承的局限性）\n- 同一个线程任务对象可以被包装成多个线程对象\n- 适合多个多个线程去共享同一个资源（后面内容）\n- 实现解耦操作，线程任务代码可以被多个线程共享，线程任务代码和线程独立。\n- 线程池可以放入实现Runable或Callable线程任务对象。(后面了解)\n- 能直接得到线程执行的结果！\n\n```java\npublic class ThreadDemo {\n    public static void main(String[] args) {\n        // 3.创建一个Callable的线程任务对象\n        Callable call = new MyCallable();\n        // 4.把Callable任务对象包装成一个未来任务对象\n        //      -- public FutureTask(Callable<V> callable)\n        // 未来任务对象是啥，有啥用？\n        //      -- 未来任务对象其实就是一个Runnable对象:这样就可以被包装成线程对象！\n        //      -- 未来任务对象可以在线程执行完毕之后去得到线程执行的结果。\n        FutureTask<String> task = new FutureTask<>(call);\n        // 5.把未来任务对象包装成线程对象\n        Thread t = new Thread(task);\n        // 6.启动线程对象\n        t.start();\n\n        for(int i = 1 ; i <= 10 ; i++ ){\n            System.out.println(Thread.currentThread().getName()+\" => \" + i);\n        }\n\n        // 在最后去获取线程执行的结果,如果线程没有结果，让出CPU等线程执行完再来取结果\n        try {\n            String rs = task.get(); // 获取call方法返回的结果（正常/异常结果）\n            System.out.println(rs);\n        }  catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n}\n\n// 1.创建一个线程任务类实现Callable接口，申明线程返回的结果类型\nclass MyCallable implements Callable<String>{\n    // 2.重写线程任务类的call方法！\n    @Override\n    public String call() throws Exception {\n        // 需求：计算1-10的和返回\n        int sum = 0 ;\n        for(int i = 1 ; i <= 10 ; i++ ){\n            System.out.println(Thread.currentThread().getName()+\" => \" + i);\n            sum+=i;\n        }\n        return Thread.currentThread().getName()+\"执行的结果是：\"+sum;\n    }\n}\n```\n\n## 第五章 线程安全\n\n线程安全问题：多个线程同时操作同一个共享资源的时候可能会出现线程安全问题\n\n### 同步代码块\n\n- **同步代码块**：`synchronized`关键字可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。\n\n格式: \n\n```java\nsynchronized(同步锁){\n     需要同步操作的代码\n}\n```\n\n**同步锁**:\n\n对象的同步锁只是一个概念,可以想象为在对象上标记了一个锁.\n\n1. 锁对象 可以是任意类型。\n2. 多个线程对象  要使用同一把锁。\n\n> 注意:在任何时候,最多允许一个线程拥有同步锁,谁拿到锁就进入代码块,其他的线程只能在外等着(BLOCKED)。\n\n使用同步代码块解决代码：\n\n```java\npublic class Ticket implements Runnable{\n	private int ticket = 100;\n	\n	Object lock = new Object();\n	/*\n	 * 执行卖票操作\n	 */\n	@Override\n	public void run() {\n		//每个窗口卖票的操作 \n		//窗口 永远开启 \n		while(true){\n			synchronized (lock) {\n				if(ticket>0){//有票 可以卖\n					//出票操作\n					//使用sleep模拟一下出票时间 \n					try {\n						Thread.sleep(50);\n					} catch (InterruptedException e) {\n						// TODO Auto-generated catch block\n						e.printStackTrace();\n					}\n					//获取当前线程对象的名字 \n					String name = Thread.currentThread().getName();\n					System.out.println(name+\"正在卖:\"+ticket--);\n				}\n			}\n		}\n	}\n}\n```\n\n### 同步方法\n\n- **同步方法**:使用synchronized修饰的方法,就叫做同步方法,保证A线程执行该方法的时候,其他线程只能在方法外等着。\n\n格式：\n\n```java\npublic synchronized void method(){\n   	可能会产生线程安全问题的代码\n}\n```\n\n> 同步锁是谁?\n>\n> ​      对于非static方法,同步锁就是this。  \n>\n> ​      对于static方法,我们使用当前方法所在类的字节码对象(类名.class)。\n\n使用同步方法代码如下：\n\n```java\npublic class Ticket implements Runnable{\n	private int ticket = 100;\n	/*\n	 * 执行卖票操作\n	 */\n	@Override\n	public void run() {\n		//每个窗口卖票的操作 \n		//窗口 永远开启 \n		while(true){\n			sellTicket();\n		}\n	}\n	\n	/*\n	 * 锁对象 是 谁调用这个方法 就是谁 \n	 *   隐含 锁对象 就是  this\n	 *    \n	 */\n	public synchronized void sellTicket(){\n        if(ticket>0){//有票 可以卖	\n            //出票操作\n            //使用sleep模拟一下出票时间 \n            try {\n              	Thread.sleep(100);\n            } catch (InterruptedException e) {\n              	// TODO Auto-generated catch block\n              	e.printStackTrace();\n            }\n            //获取当前线程对象的名字 \n            String name = Thread.currentThread().getName();\n            System.out.println(name+\"正在卖:\"+ticket--);\n        }\n	}\n}\n```\n\n### Lock锁\n\n`java.util.concurrent.locks.Lock`机制提供了比**synchronized**代码块和**synchronized**方法更广泛的锁定操作,同步代码块/同步方法具有的功能Lock都有,除此之外更强大\n\nLock锁也称同步锁，加锁与释放锁方法化了，如下：\n\n- `public void lock() `:加同步锁。\n- `public void unlock()`:释放同步锁。\n\n使用如下：\n\n```java\npublic class Ticket implements Runnable{\n	private int ticket = 100;\n	\n	Lock lock = new ReentrantLock();\n	/*\n	 * 执行卖票操作\n	 */\n	@Override\n	public void run() {\n		//每个窗口卖票的操作 \n		//窗口 永远开启 \n		while(true){\n			lock.lock();\n			if(ticket>0){//有票 可以卖\n				//出票操作 \n				//使用sleep模拟一下出票时间 \n				try {\n					Thread.sleep(50);\n				} catch (InterruptedException e) {\n					// TODO Auto-generated catch block\n					e.printStackTrace();\n				}\n				//获取当前线程对象的名字 \n				String name = Thread.currentThread().getName();\n				System.out.println(name+\"正在卖:\"+ticket--);\n			}\n			lock.unlock();\n		}\n	}\n}\n```\n\n# day8-线程状态、volatile关键字、原子性、并发包、死锁、线程池\n\n## 第一章 线程状态\n\n### 线程状态概述\n\n当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。在线程的生命周期中，有几种状态呢？在API中`java.lang.Thread.State`这个枚举中给出了六种线程状态：\n\n这里先列出各个线程状态发生的条件，下面将会对每种状态进行详细解析\n\n| 线程状态                | 导致状态发生条件                                             |\n| ----------------------- | ------------------------------------------------------------ |\n| NEW(新建)               | 线程刚被创建，但是并未启动。还没调用start方法。MyThread t = new MyThread只有线程对象，没有线程特征。 |\n| Runnable(可运行)        | 线程可以在java虚拟机中运行的状态，可能正在运行自己代码，也可能没有，这取决于操作系统处理器。调用了t.start()方法   ：就绪（经典教法） |\n| Blocked(锁阻塞)         | 当一个线程试图获取一个对象锁，而该对象锁被其他的线程持有，则该线程进入Blocked状态；当该线程持有锁时，该线程将变成Runnable状态。 |\n| Waiting(无限等待)       | 一个线程在等待另一个线程执行一个（唤醒）动作时，该线程进入Waiting状态。进入这个状态后是不能自动唤醒的，必须等待另一个线程调用notify或者notifyAll方法才能够唤醒。 |\n| Timed Waiting(计时等待) | 同waiting状态，有几个方法有超时参数，调用他们将进入Timed Waiting状态。这一状态将一直保持到超时期满或者接收到唤醒通知。带有超时参数的常用方法有Thread.sleep 、Object.wait。 |\n| Teminated(被终止)       | 因为run方法正常退出而死亡，或者因为没有捕获的异常终止了run方法而死亡。 |\n\n### 睡眠方法\n\n我们看到状态中有一个状态叫做计时等待，可以通过Thread类的方法来进行演示.\n\n`public static void  sleep(long time)`  让当前线程进入到睡眠状态，到毫秒后自动醒来继续执行\n\n```java\npublic class Test{\n  public static void main(String[] args){\n    for(int i = 1;i<=5;i++){\n      	Thread.sleep(1000);\n        System.out.println(i)   \n    } \n  }\n}\n```\n\n这时我们发现主线程执行到sleep方法会休眠1秒后再继续执行。\n\n### 等待和唤醒\n\nObject类的方法\n\n`public void wait()` : 让当前线程进入到等待状态 此方法必须锁对象调用.\n\n```java\npublic class Demo1_wait {\n    public static void main(String[] args) throws InterruptedException {\n	   // 步骤1 : 子线程开启,进入无限等待状态, 没有被唤醒,无法继续运行.\n        new Thread(() -> {\n            try {\n\n                System.out.println(\"begin wait ....\");\n                synchronized (\"\") {\n                    \"\".wait();\n                }\n                System.out.println(\"over\");\n            } catch (Exception e) {\n            }\n        }).start();\n    }\n```\n\n`public void notify()` : 唤醒当前锁对象上等待状态的线程  此方法必须锁对象调用.\n\n```java\npublic class Demo2_notify {\n    public static void main(String[] args) throws InterruptedException {\n	   // 步骤1 : 子线程开启,进入无限等待状态, 没有被唤醒,无法继续运行.\n        new Thread(() -> {\n            try {\n\n                System.out.println(\"begin wait ....\");\n                synchronized (\"\") {\n                    \"\".wait();\n                }\n                System.out.println(\"over\");\n            } catch (Exception e) {\n            }\n        }).start();\n\n        //步骤2:  加入如下代码后, 3秒后,会执行notify方法, 唤醒wait中线程.\n        Thread.sleep(3000);\n        new Thread(() -> {\n            try {\n                synchronized (\"\") {\n                    System.out.println(\"唤醒\");\n                    \"\".notify();\n                }\n            } catch (Exception e) {\n            }\n        }).start();\n    }\n}\n```\n\n## 第二章 线程通信\n\n- 多个线程因为在同一个进程中，所以互相通信比较容易\n- 线程通信一定是多个线程在操作同一个资源才需要进行通信\n- 线程通信必须先保证线程安全，否则毫无意义\n\n线程通信的核心方法：\n\n- `public void wait()`: 让当前线程进入到等待状态 此方法必须锁对象调用.\n- `public void notify()` : 唤醒当前锁对象上等待状态的某个线程  此方法必须锁对象调用\n- `public void notifyAll()` : 唤醒当前锁对象上等待状态的全部线程  此方法必须锁对象调用\n\n## 第三章 线程池\n\n线程池:其实就是一个容纳多个线程的容器,其中的线程可以反复的使用，省去了频繁创建和销毁线程对象的操作,无需反复创建线程而消耗过多资源。\n\n合理利用线程池能够带来三个好处\n\n1. 降低资源消耗。\n   减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。\n2. 提高响应速度\n   不需要频繁的创建线程，如果有线程可以直接用，不会出现系统僵死！\n3. 提高线程的可管理性（线程池可以约束系统最多只能有多少个线程，不会因为线程过多而死机）\n\n>  线程池的核心思想：线程复用，同一个线程可以被重复使用，来处理多个任务。\n\n### 创建线程池\n\n线程池在Java中的代表类：ExecutorService(接口)。\n\nJava在Executors类下提供了一个静态方法得到一个线程池的对象：\n`public static ExecutorService newFixedThreadPool(int nThreads)`：创建一个线程池返回。\n\n- ExecutorService提交线程任务对象执行的方法：\n  `Future<?> submit(Runnable task)`:提交一个Runnable的任务对象给线程池执行。\n- `Future<?> submit(Callable task)`:提交一个Callable的任务对象给线程池执行。\n\n> * `pools.shutdown();` // 等待任务执行完毕以后才会关闭线程池\n> * `pools.shutdownNow();` // 立即关闭线程池的代码，无论任务是否执行完毕\n> * 线程池中的线程可以被复用，线程用完以后可以继续去执行其他任务。\n\n`Runnable`任务对象给线程池执行\n\n```java\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class ThreadPoolsDemo02 {\n    public static void main(String[] args) {\n        // a.创建一个线程池，指定线程的固定数量是3.\n        // new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue());\n        ExecutorService pools = Executors.newFixedThreadPool(3);\n        // b.创建线程的任务对象。\n        Runnable target = new MyRunnable();\n        // c.把线程任务放入到线程池中去执行。\n        pools.submit(target); // 提交任务，此时会创建一个新线程,自动启动线程执行！\n        pools.submit(target); // 提交任务，此时会创建一个新线程,自动启动线程执行！\n        pools.submit(target); // 提交任务，此时会创建一个新线程,自动启动线程执行！\n        pools.submit(target); // 不会再创建新线程，会复用之前的线程来处理这个任务\n\n        pools.shutdown(); // 等待任务执行完毕以后才会关闭线程池\n        //pools.shutdownNow(); // 立即关闭线程池的代码，无论任务是否执行完毕！\n    }\n}\n\nclass MyRunnable implements Runnable{\n    @Override\n    public void run() {\n        for(int i  = 0 ; i < 5 ; i++ ){\n            System.out.println(Thread.currentThread().getName()+\" => \"+i);\n        }\n    }\n}\n```\n\n`Callable`任务对象给线程池执行\n\n```java\npublic class ThreadPoolsDemo03 {\n    public static void main(String[] args) {\n        // a.创建一个线程池，指定线程的固定数量是3.\n        // new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue());\n        ExecutorService pools = Executors.newFixedThreadPool(3);\n        Future<String> t1 = pools.submit(new MyCallable(10)); // 提交任务，此时会创建一个新线程,自动启动线程执行！\n        Future<String> t2 = pools.submit(new MyCallable(20)); // 提交任务，此时会创建一个新线程,自动启动线程执行！\n        Future<String> t3 = pools.submit(new MyCallable(30)); // 提交任务，此时会创建一个新线程,自动启动线程执行！\n        Future<String> t4 = pools.submit(new MyCallable(40)); // 复用之前的某个线程\n\n        try{\n            // b.可以得到线程池执行的任务结构\n            String rs1 = t1.get();\n            String rs2 = t2.get();\n            String rs3 = t3.get();\n            String rs4 = t4.get();\n            System.out.println(rs1);\n            System.out.println(rs2);\n            System.out.println(rs3);\n            System.out.println(rs4);\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n}\n\n// 1.定义一个线程任务类实现Callable接口 ， 申明线程执行的结果类型。\nclass MyCallable implements Callable<String>{\n    private int n;\n    public MyCallable(int n){\n        this.n = n;\n    }\n    // 2.重写线程任务类的call方法，这个方法可以直接返回执行的结果。\n    @Override\n    public String call() throws Exception {\n        int sum = 0 ;\n        for(int i = 1 ; i <= n ; i++){\n            System.out.println(Thread.currentThread().getName()+\" => \"+i);\n            sum += i ;\n        }\n        return Thread.currentThread().getName()+\"计算1-\"+n+\"的和：\"+sum;\n    }\n}\n```\n\n## 第四章 死锁\n\n死锁是这样一种情形：多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于线程被无限期地阻塞，因此程序不可能正常终止。\n\njava 死锁产生的四个必要条件：\n\n* **互斥使用**，即当资源被一个线程使用(占有)时，别的线程不能使用\n* **不可抢占**，资源请求者不能强制从资源占有者手中夺取资源，资源只能由资源占有者主动释放\n* **求和保持**，即当资源请求者在请求其他的资源的同时保持对原有资源的占有\n* **循环等待**，即存在一个等待循环队列：p1要p2的资源，p2要p1的资源。这样就形成了一个等待环路\n\n​    当上述四个条件都成立的时候，便形成死锁。当然，死锁的情况下如果打破上述任何一个条件，便可让死锁消失\n\n## 第五章 volatile关键字\n\n**问题**：线程修改了某个成员变量的值，但是在主线程中读取到的还是之前的值修改后的值无法读取到。\n\n**原因**：按照JMM模型，所有的成员变量和静态变量都存在于主内存中，主内存中的变量可以被多个线程共享。每个线程都存在一个专属于自己的工作内存，工作内存一开始存储的是成员变量的副本。所以线程很多时候都是直接访问自己工作内存中的该变量，其他线程对主内存变量值的修改将不可见\n\n![image-20220606111513140](http://47.108.219.199:81/articles/image-20220606111513140.png)\n\n希望所有线程对于主内存的成员变量修改，其他线程是可见的。\n\n* **加锁**：可以实现其他线程对变量修改的可见性\n  某一个线程进入`synchronized`代码块前后，执行过程入如下：\n  * 线程获得锁\n  * 清空工作内存\n  * 从主内存拷贝共享变量最新的值到工作内存成为副本\n* 可以给成员变量加上一个`volatile`关键字，立即就实现了成员变量多线程修改的可见性\n\n> `volatile`与`synchronized`的区别。\n>\n> - `volatile`只能修饰实例变量和静态变量，而`synchronized`可以修饰方法，以及代码块。\n> - `volatile`保证数据的可见性，但是不保证原子性(多线程进行写操作，不保证线程安全);而`synchronized`是一种排他（互斥）的机制，\n\n```java\npublic class VolatileDemo01 {\n    public  static void main(String[] args) {\n        // 1.启动线程，把线程对象中的flag改为true。\n        VolatileThread t = new VolatileThread();\n        t.start();\n\n        // 2.定义一个死循环\n        while(true){\n            // 这里读取到了flag值一直是false,虽然线程已经把它的值改成了true。\n            if(t.isFlag()){\n                System.out.println(\"执行了循环一次~~~~~~~\");\n            }\n        }\n       /* while(true){\n            synchronized (\"ddd\"){\n                // 这里读取到了flag值一直是false,虽然线程已经把它的值改成了true。\n                if(t.isFlag()){\n                    System.out.println(\"执行了循环一次~~~~~~~\");\n                }\n            }\n        }*/\n    }\n}\n// 线程类。\nclass VolatileThread extends Thread {\n    // 定义成员变量\n    // volatile可以实现变量一旦被子线程修改，其他线程可以马上看到它修改后的最新值！\n    private volatile boolean flag = false ;\n    public boolean isFlag() {\n        return flag;\n    }\n\n    @Override\n    public void run() {\n        try {\n            Thread.sleep(1000);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        // 将flag的值更改为true\n        this.flag = true ;\n        System.out.println(\"线程修改了flag=\" + flag);\n    }\n}\n```\n\n## 第六章 原子性\n\n**原子性**是指在一次操作或者多次操作中，所有的操作全部都得到了执行并且不会受到任何因素的干扰。最终结果要保证线程安全。\n\n> 在多线程环境下，`volatile`关键字可以保证共享数据的可见性，但是并不能保证对数据操作的原子性（在多线程环境下volatile修饰的变量也是线程不安全的）。\n>   `volatile`的使用场景\n>\n> - 开关控制\n>      用可见性特点，控制某一段代码执行或者关闭\n>\n> - 多个线程操作共享变量，但是是有一个线程对其进行写操作，其他的线程都是读\n>\n>   此时加上更好，其他线程可以立即读取到最新值。`volatile`不能保证变量操作的原子性（安全性）。\n\n### 解决方法一-加锁\n\n```java\npublic class VolatileAtomicThread implements Runnable {\n    // 定义一个int类型的遍历\n    private volatile int count = 0 ;\n    @Override\n    public void run() {\n        // 对该变量进行++操作，100次\n        for(int x = 0 ; x < 100 ; x++) {\n           synchronized (this){\n               count++ ;\n               System.out.println(Thread.currentThread().getName() + \"count =========>>>> \" + count);\n           }\n        }\n    }\n}\n\nclass VolatileAtomicThreadDemo {\n    public static void main(String[] args) {\n        // 创建VolatileAtomicThread对象\n        Runnable target = new VolatileAtomicThread() ;\n        // 开启100个线程对执行这一个任务。\n        for(int x = 0 ; x < 100 ; x++) {\n            new Thread(target).start();\n        }\n    }\n\n}\n```\n\n> 这种方法虽然安全性得到了保证，但是性能不好\n\n### 解决方法二-基于CAS方式的原子类\n\nJava已经提供了一些本身即可实现原子性（线程安全）的类。\n\n- 概述：java从JDK1.5开始提供了java.util.concurrent.atomic包(简称Atomic包)，这个包中的原子操作类提供了一种用法简单，性能高效，线程安全地更新一个变量的方式。\n- 操作整型的原子类\n  - `public AtomicInteger()`：           初始化一个默认值为0的原子型`Integer`\n  - `public AtomicInteger(int initialValue)`： 初始化一个指定值的原子型`Integer`\n  - `int get()`:                                        获取值\n  - `int getAndIncrement()`:               以原子方式将当前值加1，注意，这里返回的是自增前的值。\n  - `int incrementAndGet()`:               以原子方式将当前值加1，注意，这里返回的是自增后的值。\n  - `int addAndGet(int data)`:            以原子方式将输入的数值与实例中的值（`AtomicInteger`里的value）相加，并返回结果。\n  - `int getAndSet(int value)`:            以原子方式设置为`newValue`的值，并返回旧值。\n\n```java\npublic class VolatileAtomicThread implements Runnable {\n    // 原子类中封装好了整型变量，默认值是0\n    private AtomicInteger atomicInteger = new AtomicInteger();\n    @Override\n    public void run() {\n        // 对该变量进行++操作，100次\n        for(int x = 0 ; x < 100 ; x++) {\n            int count = atomicInteger.incrementAndGet(); // 底层变量+1且返回！\n            System.out.println(\"count =========>>>> \" + count);\n        }\n    }\n}\n\nclass VolatileAtomicThreadDemo {\n    public static void main(String[] args) {\n        // 创建VolatileAtomicThread对象\n        Runnable target = new VolatileAtomicThread() ;\n        // 开启100个线程对执行这一个任务。\n        for(int x = 0 ; x < 100 ; x++) {\n            new Thread(target).start();\n        }\n    }\n\n}\n```\n\n>  **CAS与Synchronized总结**\n>\n> `Synchronized`是从悲观的角度出发：总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁（**共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程**）。因此`Synchronized`我们也将其称之为**悲观锁**。jdk中的`ReentrantLock`也是一种悲观锁。性能较差\n>\n> `CAS`是从乐观的角度出发:总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据。CAS这种机制我们也可以将其称之为**乐观锁**。综合性能较好\n\n## 第七章 并发包\n\n并发包的来历：\n在实际开发中如果不需要考虑线程安全问题，大家不需要做线程安全，因为如果做了反而性能不好！\n但是开发中有很多业务是需要考虑线程安全问题的，此时就必须考虑了。否则业务出现问题。\nJava为很多业务场景提供了性能优异，且线程安全的并发包，程序员可以选择使用！\n\n### ConcurrentHashMap\n\n`Map`集合中的经典集合：`HashMap`它是线程不安全的，性能好，如果在要求线程安全的业务情况下就不能用这个集合做Map集合，否则业务会崩溃\n\n为了保证线程安全，可以使用`Hashtable`。注意：线程中加入了计时，`Hashtable`是线程安全的`Map`集合，但是性能较差！(已经被淘汰了，虽然安全，但是性能差)\n\n为了保证线程安全，再看`ConcurrentHashMap`（不止线程安全，而且效率高，性能好，最新最好用的线程安全的Map集合）`ConcurrentHashMap`保证了线程安全，综合性能较好！\n\n> * `HashMap`是线程不安全的。\n> *  `Hashtable`线程安全基于`synchronized`，综合性能差,被淘汰了。\n> * `ConcurrentHashMap`：线程安全的，分段式锁，综合性能最好，线程安全开发中推荐使用\n\n```java\npublic class ConcurrentHashMapDemo {\n    // 定义一个静态的HashMap集合，只有一个容器。\n    // public static Map<String,String> map = new HashMap<>();\n     public static Map<String,String> map = new Hashtable<>();\n    //public static Map<String,String> map = new ConcurrentHashMap<>();\n\n    public static void main(String[] args) throws InterruptedException {\n        // HashMap线程不安全演示。\n        // 需求：多个线程同时往HashMap容器中存入数据会出现安全问题。\n        // 具体需求：提供2个线程分别给map集合加入50万个数据！\n        new AddMapDataThread().start();\n        new AddMapDataThread().start();\n\n        //休息10秒，确保两个线程执行完毕\n        Thread.sleep(1000 * 4);\n        //打印集合大小\n        System.out.println(\"Map大小：\" + map.size());\n    }\n}\n\nclass AddMapDataThread extends Thread{\n    @Override\n    public void run() {\n        for(int i = 0 ; i < 1000000 ; i++ ){\n            ConcurrentHashMapDemo.map.put(Thread.currentThread().getName()+\"键：\"+i , \"值\"+i);\n        }\n    }\n}\n```\n\n### CountDownLatch\n\n`CountDownLatch`允许一个或多个线程等待其他线程完成操作，再执行自己。\n\n例如：\n\n线程1要执行打印：A和C，线程2要执行打印：B，但线程1在打印A后，要线程2打印B之后才能打印C，所以：线程1在打印A后，必须等待线程2打印完B之后才能继续执行\n\n需求：\n\n提供A线程，打印 A , C\n提供B线程，打印 B\n\n构造器：\n\n`public CountDownLatch(int count)`// 初始化唤醒需要的down几步。\n\n方法：\n`public void await() throws InterruptedException`// 让当前线程等待，必须down完初始化的数字才可以被唤醒，否则进入无限等待\n`public void countDown()`    // 计数器进行减1 （down 1）\n\n```java\npublic class CountDownLatchDemo {\n    public static void main(String[] args) {\n        //创建1个计数器：用来控制 A , B线程的执行流程的。\n        CountDownLatch down = new CountDownLatch(1);\n        new ThreadA(down).start();\n        new ThreadB(down).start();\n    }\n}\n\nclass ThreadA extends Thread{\n    private CountDownLatch down;\n    public ThreadA(CountDownLatch down){\n        this.down = down;\n    }\n    @Override\n    public void run() {\n        System.out.println(\"A\");\n        try {\n            down.await(); // A线程你进入等待，让B线程执行自己！\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"C\");\n    }\n}\n\nclass ThreadB extends Thread{\n    private CountDownLatch down;\n    public ThreadB(CountDownLatch down){\n        this.down = down;\n    }\n    @Override\n    public void run() {\n        System.out.println(\"B\");\n        down.countDown(); // 这里相当于是-1，代表自己执行完毕了。A线程被唤醒！！\n    }\n}\n```\n\n### CyclicBarrier\n\n`CyclicBarrier`作用：某个线程任务必须等待其他线程执行完毕以后才能最终触发自己执行。\n\n例如：公司召集5名员工开会，等5名员工都到了，会议开始。我们创建5个员工线程，1个开会任务，几乎同时启动。使用`CyclicBarrier`保证5名员工线程全部执行后，再执行开会线程。\n\n构造器：\n`public CyclicBarrier(int parties, Runnable barrierAction)`\n     // 用于在线程到达屏障5时，优先执行`barrierAction`，方便处理更复杂的业务场景\n方法：\n   `  public int await()`\n     // 每个线程调用await方法告诉`CyclicBarrier`我已经到达了屏障，然后当前线程被阻塞\n\n> - 可以实现多线程中，某个任务在等待其他线程执行完毕以后触发。\n> - 循环屏障可以实现达到一组屏障就触发一个任务执行！\n\n```java\npublic class CyclicBarrierDemo {\n    public static void main(String[] args) {\n        // 1.创建一个任务循环屏障对象。\n        /**\n         * 参数一：代表多少个线程的执行。\n         * 参数二：到达执行屏障就开始触发的线程任务。\n         */\n        CyclicBarrier cb = new CyclicBarrier(5 , new MeetingRunnable());\n        new PeopleThread(cb).start();\n        new PeopleThread(cb).start();\n        new PeopleThread(cb).start();\n        new PeopleThread(cb).start();\n        new PeopleThread(cb).start();\n\n        new PeopleThread(cb).start();\n        new PeopleThread(cb).start();\n        new PeopleThread(cb).start();\n        new PeopleThread(cb).start();\n        new PeopleThread(cb).start();\n\n    }\n}\n\n// 任务类：开始开会的任务\nclass MeetingRunnable implements Runnable{\n    @Override\n    public void run() {\n        System.out.println(\"人员到齐了开始由\"+Thread.currentThread().getName()+\"主持会议！\");\n    }\n}\n\n// 员工类\nclass PeopleThread extends Thread{\n    private CyclicBarrier cb ;\n    public PeopleThread(CyclicBarrier cb) {\n        this.cb = cb;\n    }\n\n    @Override\n    public void run() {\n        try {\n            Thread.sleep(1000);\n            System.out.println(\"员工：\"+Thread.currentThread().getName()+\"进入会议室\");\n            cb.await(); // 自己做完了，告诉循环屏障我结束了！\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n### Semaphore\n\n- `Semaphore`（发信号）的主要作用是控制线程的并发数量。\n  \n- `synchronized`可以起到\"锁\"的作用，但某个时间段内，只能有一个线程允许执行。\n- `Semaphore`可以设置同时允许几个线程执行。\n- `Semaphore`字面意思是信号量的意思，它的作用是控制访问特定资源的线程数目。\n\n`Semaphore`的构造器：\n\n- `public Semaphore(int permits)`：    permits 表示许可线程的数量\n- `public Semaphore(int permits, boolean fair)`：fair 表示公平性，如果这个设为 true 的话，下次执行的线程会是等待最久的线程\n\n`Semaphore`的方法：\n\n- `public void acquire() throws InterruptedException` 表示获取许可\n- `public void release() release()` 表示释放许可\n\n```java\npublic class SemaphoreDemo {\n    public static void main(String[] args) {\n        Service service = new Service();\n        for(int i = 1 ; i <= 5 ; i++ ){\n            new MyThread(service,\"线程：\"+i).start();\n        }\n    }\n}\n// 执行的任务。\nclass Service{\n    // 可以同时支持多个线程进入共享资源区执行。\n    private Semaphore semaphore = new Semaphore(2);\n    public void showMethod(){\n        try {\n            semaphore.acquire();\n            long startTimer = System.currentTimeMillis();\n            System.out.println(\"进入时间：\"+startTimer);\n            System.out.println(Thread.currentThread().getName()+\"进入资源执行\");\n            Thread.sleep(1000);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        long endTimer = System.currentTimeMillis();\n        System.out.println(\"结束时间：\"+endTimer);\n        semaphore.release();\n        //acquire()和release()方法之间的代码为\"同步代码\"\n    }\n}\n\n// 线程类。\nclass MyThread extends Thread{\n    private Service service;\n    public MyThread(Service service , String name){\n        super(name);\n        this.service = service;\n    }\n    @Override\n    public void run() {\n        service.showMethod();\n    }\n}\n```\n\n### Exchanger\n\nExchanger（交换者）是一个用于线程间协作的工具类。Exchanger用于进行线程间的数据交换。这两个线程通过exchange方法交换数据，如果第一个线程先执行exchange()方法，它会一直等待第二个线程也执行exchange方法，当两个线程都到达同步点时，这两个线程就可以交换数据，将本线程生产出来的数据传递给对方。\n\n Exchanger构造方法：public Exchanger()\n\n Exchanger重要方法：public V exchange(V x)\n\n 分析：\n    （1）需要2个线程\n    （2）需要一个交换对象负责交换两个线程执行的结果。\n\n> - Exchanger可以实现线程间的数据交换。\n> - 一个线程如果等不到对方的数据交换就会一直等待。\n> - 我们也可以控制一个线程等待的时间。\n> - 必须双方都进行交换才可以正常进行数据的交换。\n\n```java\npublic class ExchangerDemo {\n    public static void main(String[] args) {\n        // 创建交换对象（信使）\n        Exchanger<String> exchanger = new Exchanger<>();\n        // 创建2给线程对象。\n        new ThreadA(exchanger).start();\n        new ThreadB(exchanger).start();\n    }\n}\n\nclass ThreadA extends Thread{\n    private Exchanger<String> exchanger;\n    public ThreadA(Exchanger<String> exchanger) {\n        this.exchanger = exchanger;\n    }\n    @Override\n    public void run() {\n        try {\n            // 礼物A\n            System.out.println(\"线程A,做好了礼物A,等待线程B送来的礼物B.....\");\n            // 开始交换礼物。参数是送给其他线程的礼物!\n            // System.out.println(\"线程A收到线程B的礼物：\"+exchanger.exchange(\"礼物A\"));\n            // 如果等待了5s还没有交换它就去死（抛出异常）！\n            System.out.println(\"线程A收到线程B的礼物：\"+exchanger.exchange(\"礼物A\", 5 , TimeUnit.SECONDS));\n        } catch (Exception e) {\n            System.out.println(\"线程A等待了5s，没有收到礼物,最终就执行结束了!\");\n        }\n    }\n}\n\nclass ThreadB extends Thread{\n    private Exchanger<String> exchanger;\n    public ThreadB(Exchanger<String> exchanger) {\n        this.exchanger = exchanger;\n    }\n    @Override\n    public void run() {\n        try {\n            // 礼物B\n             System.out.println(\"线程B,做好了礼物B,等待线程A送来的礼物A.....\");\n            // 开始交换礼物。参数是送给其他线程的礼物!\n             System.out.println(\"线程B收到线程A的礼物：\"+exchanger.exchange(\"礼物B\"));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n# day9-方法引用、Lambda表达式、Stream流\n\n## 第一章 方法引用\n\n### 方法引用概述\n\n方法引用是为了进一步简化Lambda表达式的写法。\n\n方法引用的格式：类型或者对象::引用的方法。\n\n方法引用有四种形式：\n\n- 静态方法的引用\n- 实例方法的引用\n- 特定类型方法的引用\n- 构造器引用\n\n```java\nist<String> lists = new ArrayList<>();\nlists.add(\"java1\");\nlists.add(\"java2\");\nlists.add(\"java3\");\n\nlists.forEach( s -> System.out.println(s));\n// 方法引用！\nlists.forEach(System.out::println);\n```\n\n### 静态方法引用\n\n引用格式：类名::静态方法\n\n简化步骤：定义一个静态方法，把需要简化的代码放到一个静态方法中去。\n\n静态方法引用的注意事项：**被引用的方法的参数列表要和函数式接口中的抽象方法的参数列表一致**\n\n`Student`\n\n```java\npublic class Student {\n    private String name ;\n    private int age ;\n    private char sex ;\n\n    public static int compareByAge(Student o1 , Student o2){\n        return  o1.getAge() - o2.getAge();\n    }\n    // ...\n}\n```\n\n排序\n\n```java\nList<Student> lists = new ArrayList<>();\nStudent s1 = new Student(\"李铭\",18,\'男\');\nStudent s2 = new Student(\"冯龙\",23,\'男\');\nStudent s3 = new Student(\"王乐乐\",21,\'男\');\nCollections.addAll(lists , s1 , s2 , s3);\n\nCollections.sort(lists, ( o1, o2) -> Student.compareByAge(o1 , o2));\n// 如果前后参数是一样的，而且方法是静态方法，既可以使用静态方法引用\nCollections.sort(lists, Student::compareByAge);\n```\n\n### 实例方法引用\n\n格式： 对象::实例方法\n\n简化步骤：定义一个实例方法，把需要的代码放到实例方法中去。\n\n实例方法引用的注意事项：**被引用的方法的参数列表要和函数式接口中的抽象方法的参数列表一致**\n\n```java\nList<String> lists = new ArrayList<>();\nlists.add(\"java1\");\nlists.add(\"java2\");\nlists.add(\"java3\");\n\n// 对象是 System.out = new PrintStream();\n// 实例方法：println()\n// 前后参数正好都是一个\nlists.forEach(s -> System.out.println(s));\nlists.forEach(System.out::println);\n```\n\n### 特定类型方法的引用\n\n特定类型：String ,任何类型\n\n格式：特定类型::方法\n\n注意：如果第一个参数列表中的形参中的第一个参数作为了后面的方法的调用者，并且其余参数作为后面方法的形参，那么就可以用特定类型方法引用了\n\n```java\nString[] strs = new String[]{\"James\", \"AA\", \"John\",\n                             \"Patricia\",\"Dlei\" , \"Robert\",\"Boom\", \"Cao\" ,\"black\" ,\n                             \"Michael\", \"Linda\",\"cao\",\"after\",\"sBBB\"};\n\n// public static <T> void sort(T[] a, Comparator<? super T> c)\n// 需求：按照元素的首字符(忽略大小写)升序排序！！！\nArrays.sort(strs, new Comparator<String>() {\n    @Override\n    public int compare(String s1, String s2) {\n        return s1.compareToIgnoreCase(s2);// 按照元素的首字符(忽略大小写)比较。\n    }\n});\nArrays.sort(strs, (String s1, String s2) -> {\n    return s1.compareToIgnoreCase(s2);// 按照元素的首字符(忽略大小写)比较。\n});\n\nArrays.sort(strs, ( s1,  s2 ) ->  s1.compareToIgnoreCase(s2));\n\n// 特定类型的方法引用：\nArrays.sort(strs,  String::compareToIgnoreCase);\n\nSystem.out.println(Arrays.toString(strs));\n```\n\n### 构造器引用\n\n格式是：类名::new\n\n注意点：前后参数一致的情况下，又在创建对象就可以使用构造器引用`s -> new Student(s) => Student::new`\n\n```java\nList<String> lists = new ArrayList<>();\nlists.add(\"java1\");\nlists.add(\"java2\");\nlists.add(\"java3\");\n\n// 集合默认只能转成Object类型的数组。\nObject[] objs = lists.toArray();\nSystem.out.println(\"Object类型的数组：\"+ Arrays.toString(objs));\n\n// 我们想指定转换成字符串类型的数组！！\n// 最新的写法可以结合构造器引用实现 。\n// default <T> T[] toArray(IntFunction<T[]> generator)\nString[] strs = lists.toArray(new IntFunction<String[]>() {\n    @Override\n    public String[] apply(int value) {\n        return new String[value];\n    }\n});\n\nString[] strs1 = lists.toArray(s -> new String[s] );\n\nString[] strs2 = lists.toArray(String[]::new);\n\nSystem.out.println(\"String类型的数组：\"+ Arrays.toString(strs2));\n```\n\n## 第二章 Lambda表达式\n\nLambda表达式是JDK1.8开始之后的新技术，是一种代码的新语法，作用是为了简化匿名内部类的代码写法\n\nLambda表达式的格式\n\n```java\n(匿名内部类被重写方法的形参列表) -> {\n	// 被重写方法的方法代码\n}\n```\n\nLambda表达式的使用前提：\n\n* Lambda表达式并不能简化所有匿名内部类的写法。\n* Lambda表达式只能简化接口中只有一个抽象方法的匿名内部类形式。\n\nLambda表达式**只能简化函数式接口的匿名内部类写法**：\n\n- 首先必须是接口\n- 接口中只能有一个抽象方法\n\n### Lambda表达式简化Runnable接口匿名内部类\n\n`@FunctionalInterface`函数式接口注解：一旦某个接口加上了这个注解，这个接口只能有且仅有一个抽象方法。\n   这个接口就可以被Lambda表达式简化。\n\n```java\nThread t = new Thread(new Runnable() {\n    @Override\n    public void run() {\n        System.out.println(Thread.currentThread().getName()+\":执行~~~\");\n    }\n});\nt.start();\n\nThread t1 = new Thread(() -> {\n    System.out.println(Thread.currentThread().getName()+\":执行~~~\");\n});\nt1.start();\n\nnew Thread(() -> {\n    System.out.println(Thread.currentThread().getName()+\":执行~~~\");\n}).start();\n\nnew Thread(() -> System.out.println(Thread.currentThread().getName()+\":执行~~~\")).start();\n```\n\n### Lambda表达式简化Comparator接口匿名内部类写法\n\n```java\nList<Student> lists = new ArrayList<>();\nStudent s1 = new Student(\"李铭\",18,\'男\');\nStudent s2 = new Student(\"冯龙\",23,\'男\');\nStudent s3 = new Student(\"王乐乐\",21,\'男\');\nCollections.addAll(lists , s1 , s2 , s3);\n\n// 按照年龄进行升序排序！\nCollections.sort(lists, new Comparator<Student>() {\n    @Override\n    public int compare(Student s1, Student s2) {\n        return s1.getAge() - s2.getAge();\n    }\n});\n\n// 简化写法\nCollections.sort(lists ,(Student t1, Student t2) -> {\n    return t1.getAge() - t2.getAge();\n});\n\nCollections.sort(lists ,(Student t1, Student t2) -> t1.getAge() - t2.getAge());\n\n// 参数类型可以省略\nCollections.sort(lists ,( t1,  t2) -> t1.getAge() - t2.getAge());\n\nSystem.out.println(lists);\n```\n\n### Lambda表达式的省略写法\n\nLambda表达式的省略写法（进一步在Lambda表达式的基础上继续简化）\n\n- 如果Lambda表达式的方法体代码只有一行代码。可以省略大括号不写,同时要省略分号\n- 如果Lambda表达式的方法体代码只有一行代码。可以省略大括号不写。此时，如果这行代码是return语句，必须省略return不写，同时也必须省略\";\"不写\n- 参数类型可以省略不写\n- 如果只有一个参数，参数类型可以省略，同时()也可以省略\n\n```java\nList<String> names = new ArrayList<>();\nnames.add(\"胡伟光\");\nnames.add(\"甘挺\");\nnames.add(\"洪磊\");\n\nnames.forEach(new Consumer<String>() {\n    @Override\n    public void accept(String s) {\n        System.out.println(s);\n    }\n});\n\nnames.forEach((String s) -> {\n    System.out.println(s);\n});\n\nnames.forEach((s) -> {\n    System.out.println(s);\n});\n\nnames.forEach(s -> {\n    System.out.println(s);\n});\n\nnames.forEach(s -> System.out.println(s) );\n\nnames.forEach(System.out::println);\n```\n\n## 第三章 Stream流\n\n### Stream流概述\n\n在Java 8中，得益于Lambda所带来的函数式编程，引入了一个全新的Stream流概念 ，用于解决已有集合/数组类库有的弊端。\n\nStream流能解决什么问题：\n\n- 可以解决已有集合类库或者数组API的弊端。\n- Stream认为集合和数组操作的API很不好用，所以采用了Stream流简化集合和数组的操作\n\n```java\nList<String> list = new ArrayList<>();\nlist.add(\"张无忌\");\nlist.add(\"周芷若\");\nlist.add(\"赵敏\");\nlist.add(\"张强\");\nlist.add(\"张三丰\");\n\nlist.stream().filter(s -> s.startsWith(\"张\")).filter( s -> s.length()== 3 )\n    .forEach(System.out::println);\n```\n\n### Stream流的获取\n\nStream流式思想的核心：\n\n- 是先得到集合或者数组的Stream流（就是一根传送带）\n- 然后就用这个Stream流操作集合或者数组的元素\n- 然后用Stream流简化替代集合操作的API\n\n```java\ndefault Stream<E> stream();\n```\n\n```java\nCollection<String> c = new ArrayList<>();\nStream<String> ss = c.stream();\n\n/** --------------------Map集合获取流-------------------------------   */\nMap<String, Integer> map = new HashMap<>();\n// 先获取键的Stream流。\nStream<String> keyss = map.keySet().stream();\n// 在获取值的Stream流\nStream<Integer> valuess = map.values().stream();\n// 获取键值对的Stream流（key=value： Map.Entry<String,Integer>）\nStream<Map.Entry<String,Integer>> keyAndValues = map.entrySet().stream();\n\n/** ---------------------数组获取流------------------------------   */\n// 数组也有Stream流。\nString[] arrs = new String[]{\"Java\", \"JavaEE\" ,\"Spring Boot\"};\nStream<String> arrsSS1 = Arrays.stream(arrs);\nStream<String> arrsSS2 = Stream.of(arrs);\n```\n\n### Stream流的常用API\n\n- `forEach `: 逐一处理(遍历)\n\n- `count`：统计个数\n\n  `long count();`\n\n- `filter`: 过滤元素\n\n- `Stream<T> filter(Predicate<? super T> predicate)`\n\n- `limit`: 取前几个元素\n\n- `skip`: 跳过前几个\n\n- `map` : 加工方法\n\n  把原来的元素加工以后，重新放上去\n\n  ```java\n  <R> Stream<R> map(Function<? super T, ? extends R> mapper);\n  ```\n\n- `concat `: 合并流\n\n  ```java\n  public static <T> Stream<T> concat(Stream<? extends T> a, Stream<? extends T> b)\n  ```\n\n```java\nList<String> list = new ArrayList<>();\nlist.add(\"张无忌\");\nlist.add(\"周芷若\");\nlist.add(\"赵敏\");\nlist.add(\"张强\");\nlist.add(\"张三丰\");\nlist.add(\"张三丰\");\n\nlist.stream().filter( s -> s.length() == 3 ).filter( s -> s.startsWith(\"张\"))\n    .forEach( System.out::println);\n// 统计数量\nlong count = list.stream().filter( s -> s.length() == 3 )\n    .filter( s -> s.startsWith(\"张\")).count();\nSystem.out.println(count);\n// 取前2个\nlist.stream().filter(s -> s.length() == 3).limit(2)\n    .forEach(System.out::println);\n// 跳过前2个\nlist.stream().filter(s -> s.length() == 3).skip(2)\n    .forEach(System.out::println);\n// 把名称加工成学生对象放入list中\nlist.stream().map(Student::new).forEach(System.out::println);\n```\n\n合并流\n\n```java\nList<String> list = new ArrayList<>();\nlist.add(\"张无忌\");\nlist.add(\"周芷若\");\nlist.add(\"赵敏\");\nlist.add(\"张强\");\nlist.add(\"张三丰\");\nlist.add(\"张三丰\");\n\n// 数组流\nStream<Integer> s1 = Stream.of(10, 20 ,30 ,40);\n// 集合流\nStream<String> s2 = list.stream();\n// 合并流\nStream<Object> s3 = Stream.concat(s1,s2);\ns3.forEach(System.out::println);\n```\n\n### Stream流的综合应用\n\n\n\n```java\nList<String> one = new ArrayList<>();\none.add(\"迪丽热巴\");\none.add(\"宋远桥\");\none.add(\"苏星河\");\none.add(\"老子\");\none.add(\"庄子\");\none.add(\"孙子\");\none.add(\"洪七公\");\n\nList<String> two = new ArrayList<>();\ntwo.add(\"古力娜扎\");\ntwo.add(\"张无忌\");\ntwo.add(\"张三丰\");\ntwo.add(\"赵丽颖\");\ntwo.add(\"张二狗\");\ntwo.add(\"张天爱\");\ntwo.add(\"张三\");\n\n/**\n         * 1. 第一个队伍只要名字为3个字的成员姓名；\n         * 2. 第一个队伍筛选之后只要前3个人；\n         */\nStream<String> oneStream =\n    one.stream().filter(s -> s.length() == 3).limit(3);\n\n/**\n         * 3. 第二个队伍只要姓张的成员姓名；\n         * 4. 第二个队伍筛选之后不要前2个人；\n         * 5. 将两个队伍合并为一个队伍；\n         */\nStream<String> twoStream =\n    two.stream().filter(s -> s.startsWith(\"张\")).skip(2);\n\nStream<String> allStream = Stream.concat(oneStream , twoStream);\n\n/**\n         * 6. 根据姓名创建`Student`对象； (加工)\n         * 7. 打印整个队伍的Student对象信息。\n         */\n//allStream.map(s -> new Student(s)).forEach(System.out::println);\nallStream.map(Student::new).forEach(System.out::println);\n```\n\n### Stream流的终结与非终结方法\n\n一旦Stream调用了终结方法，流的操作就全部终结了，不能继续使用，只能创建新的Stream操作。\n\n终结方法： `foreach `, `count`\n\n非终结方法：每次调用完成以后返回一个新的流对象，可以继续使用，支持链式编程！\n\n```java\nList<String> list = new ArrayList<>();\nlist.add(\"张无忌\");\nlist.add(\"周芷若\");\nlist.add(\"赵敏\");\nlist.add(\"张强\");\nlist.add(\"张三丰\");\nlist.add(\"张三丰\");\n\n// foreach终结方法\nlist.stream().filter(s -> s.startsWith(\"张\"))\n    .filter(s -> s.length() == 3).forEach(System.out::println);\n\nlong count =  list.stream().filter(s -> s.startsWith(\"张\"))\n    .filter(s -> s.length() == 3).count();\nSystem.out.println(count);\n```\n\n### 收集Stream流\n\n收集Stream流:把Stream流的数据转回成集合。\n\nStream的作用是：把集合转换成一根传送带，借用Stream流的强大功能进行的操作。但是实际开发中数据最终的形式还是应该是集合，最终Stream流操作完毕以后还是要转换成集合。这就是收集Stream流。\n\n收集Stream流的含义：就是把Stream流的数据转回到集合中去。\n\n```java\nList<String> list = new ArrayList<>();\nlist.add(\"张无忌\");\nlist.add(\"周芷若\");\nlist.add(\"赵敏\");\nlist.add(\"张强\");\nlist.add(\"张三丰\");\nlist.add(\"张三丰\");\n\nStream<String> zhangLists = list.stream().filter(s -> s.startsWith(\"张\"));\n// 把stream流转换成Set集合。\nSet<String> sets = zhangLists.collect(Collectors.toSet());\nSystem.out.println(sets);\n\n// 把stream流转换成List集合。\nStream<String> zhangLists1 = list.stream().filter(s -> s.startsWith(\"张\"));\nList<String> lists= zhangLists1.collect(Collectors.toList());\nSystem.out.println(lists);\n\n// 把stream流转换成数组。\nStream<String> zhangLists2 = list.stream().filter(s -> s.startsWith(\"张\"));\nObject[] arrs = zhangLists2.toArray();\n// 可以借用构造器引用申明转换成的数组类型！！！\n//String[] arrs1 = zhangLists2.toArray(String[]::new);\n```\n\n## 第四章 File类\n\n### File类的概述\n\nFile类：代表操作系统的文件对象\n\nFile类：是用来操作操作系统的文件对象的，删除文件，获取文件信息，创建文件（文件夹）...\n\n广义来说操作系统认为文件包含（文件和文件夹）\n\nFile类的创建文件对象的API:\n\n* 包：`java.io.File`\n* 构造器：\n  * `public File(String pathname)`:根据路径获取文件对象\n  * `public File(String parent, String child)`:根据父路径和文件名称获取文件对象！\n\nFile类创建文件对象的格式:\n\n* `File f = new File(\"绝对路径/相对路径\");`\n  * **绝对路径**：从磁盘的的盘符一路走到目的位置的路径。\n    * 绝对路径依赖具体的环境，一旦脱离环境，代码可能出错！！\n    * 一般是定位某个操作系统中的某个文件对象。\n  * **相对路径**：不带盘符的。（重点）\n    * 默认是直接相对到工程目录下寻找文件的。\n    * 相对路径只能用于寻找工程下的文件。\n    * 能用相对路径就应该尽量使用，可以跨平台！\n* `File f = new File(\"文件对象/文件夹对象\");`\n  广义来说：文件是包含文件和文件夹的。\n\n> * 创建文件对象可以用绝对路径也可以用相对路径。\n> * 相对路径只能用于寻找工程下的文件。\n> * 文件对象可以表示文件也可以表示文件夹！\n\n```java\nFile f1 = new File(\"D:\\\\itcast\\\\图片资源\\\\beautiful.jpg\");\nSystem.out.println(f1.length()); // 获取文件的大小，字节大小\n\n// 2.创建文件对象：使用相对路径\nFile f2 = new File(\"Day09Demo/src/dlei01.txt\");\nSystem.out.println(f2.length());\n\n// 3.创建文件对象：代表文件夹。\nFile f3 = new File(\"D:\\\\itcast\\\\图片资源\");\nSystem.out.println(f3.exists());// 判断路径是否存在！！\n```\n\n### File类的获取功能的方法\n\n- `public String getAbsolutePath()`  ：返回此File的绝对路径名字符串。\n- `public String getPath()`  ： 获取创建文件对象的时候用的路径\n- `public String getName()`  ： 返回由此File表示的文件或目录的名称。\n- `public long length()`  ：    返回由此File表示的文件的长度。\n\n```java\n// 1.绝对路径创建一个文件对象\nFile f1 = new File(\"D:/itcast/图片资源/meinv.jpg\");\n// a.获取它的绝对路径。\nSystem.out.println(f1.getAbsolutePath());\n// b.获取文件定义的时候使用的路径。\nSystem.out.println(f1.getPath());\n// c.获取文件的名称：带后缀。\nSystem.out.println(f1.getName());\n// d.获取文件的大小：字节个数。\nSystem.out.println(f1.length());\n\nSystem.out.println(\"------------------------\");\n\n// 2.相对路径\nFile f2 = new File(\"Day09Demo/src/dlei01.txt\");\n// a.获取它的绝对路径。\nSystem.out.println(f2.getAbsolutePath());\n// b.获取文件定义的时候使用的路径。\nSystem.out.println(f2.getPath());\n// c.获取文件的名称：带后缀。\nSystem.out.println(f2.getName());\n// d.获取文件的大小：字节个数。\nSystem.out.println(f2.length());\n```\n\n### File类的判断功能的方法\n\n- `public boolean exists()` ：此File表示的文件或目录是否实际存在。\n- `public boolean isDirectory()`：此File表示的是否为目录。\n- `public boolean isFile()` ：此File表示的是否为文件\n\n```java\n// 1.文件对象。\nFile f1 = new File(\"D:\\\\itcast\\\\图片资源\\\\meinv.jpg\");\n// a.判断文件路径是否存在\nSystem.out.println(f1.exists()); // true\n// b.判断文件对象是否是文件,是文件返回true ,反之\nSystem.out.println(f1.isFile()); // true\n// c.判断文件对象是否是文件夹,是文件夹返回true ,反之\nSystem.out.println(f1.isDirectory()); // false\n\n// 1.文件对象。\nFile f2 = new File(\"D:\\\\itcast\\\\图片资源\");\n// a.判断文件路径是否存在\nSystem.out.println(f2.exists()); // true\n// b.判断文件对象是否是文件,是文件返回true ,反之\nSystem.out.println(f2.isFile()); // false\n// c.判断文件对象是否是文件夹,是文件夹返回true ,反之\nSystem.out.println(f2.isDirectory()); // true\n```\n\n### File类的创建和删除方法\n\n- `public boolean createNewFile()` ：当且仅当具有该名称的文件尚不存在时，\n         创建一个新的空文件。 （几乎不用的，因为以后文件都是自动创建的！）\n- `public boolean delete()` ：删除由此File表示的文件或目录。 （只能删除空目录）\n- `public boolean mkdir()` ：创建由此File表示的目录。（只能创建一级目录）\n- `public boolean mkdirs()` ：可以创建多级目录（建议使用的）\n\n```java\nFile f = new File(\"Day09Demo/src/dlei02.txt\");\n// a.创建新文件，创建成功返回true ,反之\nSystem.out.println(f.createNewFile());\n\n// b.删除文件或者空文件夹\nSystem.out.println(f.delete());\n// 不能删除非空文件夹，只能删除空文件夹\nFile f1 = new File(\"D:/itcast/aaaaa\");\nSystem.out.println(f1.delete());\n\n// c.创建一级目录\nFile f2 = new File(\"D:/itcast/bbbb\");\nSystem.out.println(f2.mkdir());\n\n// d.创建多级目录\nFile f3 = new File(\"D:/itcast/e/a/d/ds/fas/fas/fas/fas/fas/fas\");\nSystem.out.println(f3.mkdirs());\n```\n\n### File目录的遍历\n\n- `public String[] list()`\n    获取当前目录下所有的\"一级文件名称\"到一个字符串数组中去返回。\n- `public File[] listFiles()`==常用==\n    获取当前目录下所有的\"一级文件对象\"到一个文件对象数组中去返回（重点）\n\n```java\nFile dir = new File(\"day09/src/com/itheima\");\n// a.获取当前目录对象下的全部一级文件名称到一个字符串数组返回。\nString[] names = dir.list();\nfor (String name : names) {\n    System.out.println(name);\n}\n// b.获取当前目录对象下的全部一级文件对象到一个File类型的数组返回。\nFile[] files = dir.listFiles();\nfor (File file : files) {\n    System.out.println(file.getAbsolutePath());\n}\n\n// ---------拓展------------\nFile f1 = new File(\"C:\\\\Users\\\\Administrator\\\\Documents\\\\codes\\\\notes\\\\java-notes\\\\java补充知识点\\\\codes\\\\seniorJava\\\\day09\\\\src\\\\com\\\\itheima\\\\_20File目录的遍历\\\\FileDemo.java\");\nlong time = f1.lastModified(); // 最后修改时间！\nSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\nSystem.out.println(sdf.format(time));\n```\n\n## 第五章 递归\n\n### 递归的概述\n\n方法在方法中又调用了自己\n\n* 直接递归：自己的方法调用自己\n* 间接递归：自己的方法调用别的方法，别的方法又调用自己\n\n> - 递归是自己调用自己。\n> - 递归如果控制的不恰当，会形成递归的死循环，从而导致栈内存溢出错误！！\n> - 递归应该防止进入递归的死循环！\n\n一个简单的例子，计算\n$$\nf(x) = f(x-1) + 1\n$$\n\n```java\npublic class RecursionDemo02 {\n    public static void main(String[] args) {\n        System.out.println(f(10));\n    }\n\n    public static int f(int x){\n        if(x == 1) {\n            return 1;\n        }else{\n            return f(x - 1) + 1 ;\n        }\n    }\n}\n```\n\n### 递归的核心\n\n递归算法分为三个要素：\n\n* 递归公式\n  $$\n  f(x)=f(x)+1\n  $$\n\n* 递归终结点\n  $$\n  f(1)=1\n  $$\n\n* 递归方向\n\n  必须走向终结点\n\n必须满足三要素，否则递归会出现死亡\n\n### 递归实现文件搜索\n\n这是一个非规律递归，实现步骤是：\n\n* 定义一个方法用于做搜索\n* 进入方法中进行业务搜索分析\n\n```java\n/**\n     * 去某个目录下搜索某个文件\n     * @param dir 搜索文件的目录。\n     * @param fileName 搜索文件的名称。\n     */\npublic static void searchFiles(File dir , String fileName){\n    // 1.判断是否存在该路径，是否是文件夹\n    if(dir.exists() && dir.isDirectory()){\n        // 2.提取当前目录下的全部一级文件对象\n        File[] files = dir.listFiles(); // null/[]\n        // 3.判断是否存在一级文件对象（判断是否不为空目录）\n        if(files!=null && files.length > 0){\n            // 4.判断一级文件对象\n            for (File f : files) {\n                // 5.判断file是文件还是文件夹\n                if(f.isFile()){\n                    // 6.判断该文件是否为我要找的文件对象\n                    if(f.getName().contains(fileName)){\n                        System.out.println(f.getAbsolutePath());\n                        try {\n                            // 启动它（拓展）\n                            Runtime r = Runtime.getRuntime();\n                            r.exec(f.getAbsolutePath());\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                }else{\n                    // 7.该文件是文件夹，文件夹要递归进入继续寻找\n                    searchFiles(f ,fileName);\n                }\n            }\n        }\n    }\n}\n```\n\n## 第六章 字节流\n\n### 字符集\n\n字符集：各个国家为自己国家的字符取的一套编号规则。计算机的底层是不能直接存储字符的。计算机的底层只能存储二进制。010101二进制就是可以转成10进制的。10进制就是整数编号。101 = 1*2^0 + 0*2^1 + 1*2^2 = 5\n\n* 中国用的编码：GBK编码\n* 美国用的编码：ACSII编码\n\n### IO流读写数据\n\nIO输入输出流：输入/输出流。\n\n* Input:输入。\n* Output:输出。\n\n引入：\nFile类只能操作文件对象本身，不能读写文件对象的内容。\n读写数据内容，应该使用IO流。\n\nIO流是一个水流模型：IO理解成水管，把数据理解成水流。\n\nIO流的分类\n\n按照流的方向分为：输入流，输出流。\n\n* 输出流：以内存为基准，把内存中的数据写出到磁盘文件或者网络介质中去的流称为输出流。\n  输出流的作用：写数据到文件，或者写数据发送给别人。\n* 输入流：以内存为基准，把磁盘文件中的数据或者网络中的数据读入到内存中去的流称为输入流。\n  输入流的作用：读取数据到内存。\n\n按照流的内容分为: 字节流，字符流。\n\n* 字节流：流中的数据的最小单位是一个一个的字节，这个流就是字节流。\n* 字符流：流中的数据的最小单位是一个一个的字符，这个流就是字符流。(针对于文本内容)\n\n所以流大体分为四大类:\n\n* 字节输入流：以内存为基准，把磁盘文件中的数据或者网络中的数据以一个一个的字节的形式读入到内存中去的流称为字节输入流。\n* 字节输出流：以内存为基准，把内存中的数据以一个一个的字节写出到磁盘文件或者网络介质中去的流称为字节输出流。\n* 字符输入流：以内存为基准，把磁盘文件中的数据或者网络中的数据以一个一个的字符的形式读入到内存中去的流称为字符输入流。\n* 字符输出流：以内存为基准，把内存中的数据以一个一个的字符写出到磁盘文件或者网络介质中去的流称为字符输出流。\n\n>  IO流是读写传输数据的，IO流有很多种，每种流有自己的功能特点。\n\n### 字节流的使用\n\nIO流的体系\n\n|     字节流      |      字节流      |   字符流   |         字符流         |\n| :-------------: | :--------------: | :--------: | :--------------------: |\n|   字节输入流    |    字节输出流    | 字符输入流 |       字符输出流       |\n|   InputStream   |   OutputStream   |   Reader   |     Writer(抽象类)     |\n| FileInputStream | FileOutputStream | FileReader | FileWriter(子类实现类) |\n\n#### 输入流\n\nFileInputStream文件字节输入流\n\n作用：以内存为基准，把磁盘文件中的数据按照字节的形式读入到内存中的流，简单的来说，就是按照字节读取文件数据到内存\n\n构造器\n\n* `public FileInputStream(File path)`:创建一个字节输入流管道与源文件对象接通\n* `public FileInputStream(String pathName)`:创建一个字节输入流管道与文件路径对接\n\n方法\n\n* `public int read()` 每次读取一个直接返回，读取完毕会返回`-1`\n* `public int read(byte[] buffer)` 从字节输入流中读取字节到字节数组中去，返回读取的字节数量，没有字节可读返回`-1`\n\n> - 一个一个字节读取英文和数字没有问题。\n> - 但是一旦读取中文输出无法避免乱码，因为会截断中文的字节。\n> - 一个一个字节的读取数据，性能也较差，所以禁止使用此方案！\n\n```java\n// 1.创建文件对象定位dlei01.txt\nFile file = new File(\"Day09Demo/src/dlei01.txt\");\n// 2.创建一个字节输入流管道与源文件接通\nInputStream is = new FileInputStream(file);\n// 3.读取一个字节的编号返回，读取完毕返回-1\n//        int code1 = is.read(); // 读取一滴水，一个字节\n//        System.out.println((char)code1);\n//\n//        int code2 = is.read(); // 读取一滴水，一个字节\n//        System.out.println((char)code2);\n//\n//        int code3 = is.read(); // 读取一滴水，一个字节\n//        System.out.println((char)code3);\n//\n//        int code4 = is.read(); // 读取一滴水，一个字节 ,读取没有字节返回-1\n//        System.out.println(code4);\n\n// 4.使用while读取字节数\n// 定义一个整数变量存储字节\nint ch = 0 ;\nwhile((ch = is.read())!= -1){\n    System.out.print((char) ch);\n}\n\n// 读法优化，必须使用循环     // abc xyz i\n// a.定义一个字节数组代表桶   // ooo ooo o\nbyte[] buffer = new byte[3];\nint len ; // 存储每次读取的字节数。\nwhile((len = is.read(buffer)) != -1){\n    // 读取了多少就倒出多少！\n    String rs = new String(buffer , 0 , len);\n    System.out.print(rs);\n}\n```\n\n解决中文乱码\n\n定义一个字节数组与文件的大小刚刚一样大，然后一桶水读取全部字节数据再输出\n\n```java\n// 0.定位文件对象\nFile f = new File(\"C:\\\\Users\\\\Administrator\\\\Documents\\\\codes\\\\notes\\\\java-notes\\\\java补充知识点\\\\codes\\\\seniorJava\\\\day09\\\\src\\\\com\\\\itheima\\\\_25字节流的使用\\\\FileInputStreamDemo03.java\");\n// 1.定义一个字节输入流通向源文件路径，简化写法！\nInputStream is = new FileInputStream(f);\n\n// 2.定义一个字节数组与文件的大小刚刚一样大\n//        System.out.println(\"文件大小：\"+f.length());\n//        byte[] buffer = new byte[(int) f.length()];\n//        int len = is.read(buffer);\n//        System.out.println(\"读取了：\"+len);\n//        String rs = new String(buffer);\n//        System.out.println(rs);\n\nbyte[] buffer = is.readAllBytes();\nString rs = new String(buffer);\nSystem.out.println(rs);\n```\n\n#### 输出流\n\n`FileOutputStream`文件字节输出流\n\n作用：以内存为基准，把内存中的数据，按照字节的形式写出到磁盘文件中去。简单来说，把内存数据按照字节写出到磁盘文件中去。\n\n构造器：\n\n- `public FileOutputStream(File file)`:创建一个字节输出流管道通向目标文件对象。\n- `public FileOutputStream(String file)`:创建一个字节输出流管道通向目标文件路径。\n- `public FileOutputStream(File file , boolean append)`:创建一个追加数据的字节输出流管道通向目标文件对象。\n- `public FileOutputStream(String file , boolean append)`:创建一个追加数据的字节输出流管道通向目标文件路径。\n\n方法：\n\n- `public void write(int a)`:写一个字节出去 。\n\n- `public void write(byte[] buffer)`:写一个字节数组出去。\n\n- `public void write(byte[] buffer , int pos , int len)`:写一个字节数组的一部分出去。\n\n  参数一，字节数组；参数二：起始字节索引位置，参数三：写多少个字节数出去。\n\n> * 字节输出流只能写字节出去\n> * 字节输出流默认是覆盖数据管道\n> * 换行用： `os.write(\"\\r\\n\".getBytes());`\n> * 关闭和刷新：刷新流可以继续使用，关闭包含刷新数据但是流就不能使用了！\n\n`FileOutputStream`字节输出流每次启动写数据的时候都会先清空之前的全部数据\n\n### 字节流做文件复制\n\n字节是计算机中一切文件的组成，所以字节流适合做一切文件的复制。\n\n复制是把源文件的全部字节一字不漏的转移到目标文件，只要文件前后的格式一样，绝对不会有问题。\n\n复制步骤：\n\n- 创建一个字节输入流管道与源文件接通。\n- 创建一个字节输出流与目标文件接通。\n- 创建一个字节数组作为桶\n- 从字节输入流管道中读取数据，写出到字节输出流管道即可。\n- 关闭资源！\n\n```java\nInputStream is = null ;\nOutputStream os = null ;\ntry{\n    /** （1）创建一个字节输入流管道与源文件接通。 */\n    is = new FileInputStream(\"D:\\\\itcast\\\\图片资源\\\\meinv.jpg\");\n    /** （2）创建一个字节输出流与目标文件接通。*/\n    os = new FileOutputStream(\"D:\\\\itcast\\\\meimei.jpg\");\n    /** （3）创建一个字节数组作为桶*/\n    byte[] buffer = new byte[1024];\n    /** （4）从字节输入流管道中读取数据，写出到字节输出流管道即可。*/\n    int len = 0;\n    while((len = is.read(buffer)) != -1){\n        // 读取多少就倒出多少\n        os.write(buffer, 0 , len);\n    }\n    System.out.println(\"复制完成！\");\n}catch (Exception e){\n    e.printStackTrace();\n} finally {\n    /**（5）关闭资源！ */\n    try{\n        if(os!=null)os.close();\n        if(is!=null)is.close();\n    }catch (Exception e){\n        e.printStackTrace();\n    }\n}\n```\n\nJDK1.7 开始之后释放资源的新方式\n\ntry-with-resources:\n\n```java\ntry(\n    // 这里只能放置资源对象，用完会自动调用close()关闭\n){\n\n}catch(Exception e){\n    e.printStackTrace();\n}\n```\n\n什么是资源？\n\n* 资源类一定是实现了Closeable接口，实现这个接口的类就是资源\n* 有close()方法，try-with-resources会自动调用它的close()关闭资源。\n\n```java\ntry(\n    /** （1）创建一个字节输入流管道与源文件接通。 */\n    InputStream is  = new FileInputStream(\"D:\\\\itcast\\\\图片资源\\\\meinv.jpg\");\n    /** （2）创建一个字节输出流与目标文件接通。*/\n    OutputStream os = new FileOutputStream(\"D:\\\\itcast\\\\meimei.jpg\");\n    /** （5）关闭资源！是自动进行的 */\n){\n    /** （3）创建一个字节数组作为桶*/\n    byte[] buffer = new byte[1024];\n    /** （4）从字节输入流管道中读取数据，写出到字节输出流管道即可。*/\n    int len = 0;\n    while((len = is.read(buffer)) != -1){\n        // 读取多少就倒出多少\n        os.write(buffer, 0 , len);\n    }\n    System.out.println(\"复制完成！\");\n}catch (Exception e){\n    e.printStackTrace();\n}\n```\n\n# day10-缓冲流、转换流、序列流\n\n## 第一章 字符流\n\n`FileReader`:文件字符输入流。\n\n作用：以内存为基准，把磁盘文件的数据以字符的形式读入到内存。简单来说，读取文本文件内容到内存中去。\n\n构造器：\n\n* `public FileReader(File file)`:创建一个字符输入流与源文件对象接通。\n* `public FileReader(String filePath)`:创建一个字符输入流与源文件路径接通。\n\n方法：\n\n- `public int read()`: 读取一个字符的编号返回！ 读取完毕返回-1\n- `public int read(char[] buffer)`:读取一个字符数组，读取多少个字符就返回多少个数量，读取完毕返回-1\n\n- \n  字符流一个一个字符的读取文本内容输出，可以解决中文读取输出乱码的问题。\n- 字符流很适合操作文本文件内容。\n- 但是：一个一个字符的读取文本内容性能较差！！\n\n```java\n// 1.创建一个文件对象定位源文件\n// File f = new File(\"Day10Demo/src/dlei01.txt\");\n// 2.创建一个字符输入流管道与源文件接通\n// Reader fr = new FileReader(f);\n// 3.简化写法：创建一个字符输入流管道与源文件路径接通\nReader fr = new FileReader(\"Day10Demo/src/dlei01.txt\");\n// 4.按照字符读取，每次读取一个字符的编号返回。\n//        int code1 = fr.read();\n//        System.out.print((char)code1);\n//        int code2 = fr.read();\n//        System.out.print((char)code2);\n//        int code3 = fr.read();\n//        System.out.print((char)code3);\n//        int code4 = fr.read(); // 读取完毕返回-1\n//        System.out.print(code4);\n\n// 5.while循环一个一个字符读取。\n// 定义一个变量存储一个字符的编号\nint ch ;\nwhile ((ch = fr.read()) != -1){\n    System.out.print((char)ch);\n}\n\n// a.按照字符数组读取数据使用循环\nchar[] buffer = new char[1024]; // 1K\n// b.定义一个整数记录每次桶读取的字符数据量。\nint len;\nwhile((len = fr.read(buffer)) != -1 ) {\n    // 读取多少倒出多少字符\n    System.out.print(new String(buffer, 0 , len));\n}\n```\n\n`FileWriter`文件字符输出流的使用。\n\n作用：以内存为基准，把内存中的数据按照字符的形式写出到磁盘文件中去。简单来说，就是把内存的数据以字符写出到文件中去。\n\n构造器：\n\n- `public FileWriter(File file)`:创建一个字符输出流管道通向目标文件对象。\n- `public FileWriter(String filePath)`:创建一个字符输出流管道通向目标文件路径。\n- `public FileWriter(File file,boolean append`):创建一个追加数据的字符输出流管道通向目标文件对象。\n- `public FileWriter(String filePath,boolean append)`:创建一个追加数据的字符输出流管道通向目标文件路径。\n\n方法：\n\n- `public void write(int c)`:写一个字符出去\n- `public void write(String c)` 写一个字符串出去：\n- `public void write(char[] buffer)`:写一个字符数组出去\n- `public void write(String c ,int pos ,int len)`:写字符串的一部分出去\n- `public void write(char[] buffer ,int pos ,int len)`:写字符数组的一部分出去\n\n小结：\n\n字符输出流可以写字符数据出去，总共有5个方法写字符。\n\n覆盖管道：\n\n`Writer fw = new FileWriter(\"Day10Demo/src/dlei03.txt\"); // 覆盖数据管道`\n\n追加数据管道：\n\n`Writer fw = new FileWriter(\"Day10Demo/src/dlei03.txt\",true); // 追加数据管道`\n\n换行：\n\n`fw.write(\"\\r\\n\"); // 换行` \n\n读写字符文件数据建议使用字符流。\n\n```java\n// 1.创建一个字符输出流管道通向目标文件路径\n//Writer fw = new FileWriter(\"Day10Demo/src/dlei03.txt\"); // 覆盖数据管道\nWriter fw = new FileWriter(\"Day10Demo/src/dlei03.txt\",true); // 追加数据管道\n\n// 2.写一个字符出去：public void write(int c):写一个字符出去\nfw.write(97);   // 字符a\nfw.write(\'b\');  // 字符b\nfw.write(\'磊\'); // 字符磊，此时没有任何问题。\nfw.write(\"\\r\\n\"); // 换行\n\n// 3.写一个字符串出去：public void write(String c)写一个字符串出去：\nfw.write(\"Java是最优美的语言！\");\nfw.write(\"我们在黑马学习它！\");\nfw.write(\"\\r\\n\"); // 换行\n\n// 4.写一个字符数组出去：public void write(char[] buffer):写一个字符数组出去\nfw.write(\"我爱中国\".toCharArray());\nfw.write(\"\\r\\n\"); // 换行\n\n// 5.写字符串的一部分出去: public void write(String c ,int pos ,int len):写字符串的一部分出去\nfw.write(\"Java是最优美的语言！\",0,9);\nfw.write(\"\\r\\n\"); // 换行\n\n// 6.写字符数组的一部分出去：public void write(char[] buffer ,int pos ,int len):写字符数组的一部分出去\nfw.write(\"我爱中国\".toCharArray(),0 ,2);\nfw.write(\"\\r\\n\"); // 换行\n\nfw.close();\n```\n\n## 第二章 IO资源的处理\n\n...\n\n\n\n\n\n## 第三章 属性集\n\n`Properties`：属性集对象。\n\n其实就是一个Map集合。也就是一个键值对集合。但是我们一般不会当集合使用，\n\n因为有HashMap。\n\n`Properties`核心作用：\n\nProperties代表的是一个属性文件，可以把键值对的数据存入到一个属性文件中去。\n\n属性文件：后缀是.properties结尾的文件,里面的内容都是 key=value。\n\n大家在后期学的很多大型框架技术中，属性文件都是很重要的系统配置文件。\n\n```java\nusers.properties\nadmin=123456\ndlei=dlei\n```\n\n 需求：使用Properties对象生成一个属性文件，里面存入用户名和密码信息。\n\nProperties的方法：\n\n- `public Object setProperty(String key, String value)` ： 保存一对属性。\n- `public String getProperty(String key)` ：使用此属性列表中指定的键搜索属性值\n- `public Set<String> stringPropertyNames()` ：所有键的名称的集合\n- `public void store(OutputStream out, String comments)`：保存数据到属性文件中去\n- `public void store(Writer fw, String comments)`：保存数据到属性文件中去\n- `public synchronized void load(InputStream inStream)`:加载属性文件的数据到属性集对象中去\n- `public synchronized void load(Reader fr)`:加载属性文件的数据到属性集对象中去\n\n```java\nProperties properties = new Properties();\nproperties.setProperty(\"admin\" , \"123456\");\nproperties.setProperty(\"dlei\" , \"101333\");\nSystem.out.println(properties);\n\n// b.把属性集对象的数据存入到属性文件中去（重点）\nOutputStream os = new FileOutputStream(\"Day10Demo/src/users.properties\");\n/**\n         * 参数一：被保存数据的输出管道\n         * 参数二：保存心得。就是对象保存的数据进行解释说明！\n         */\nproperties.store(os , \"i am very happy!!我快乐的保存了用户数据!\");\n```\n\n导入属性\n\n```java\n// 1.创建一个属性集对象\nProperties properties = new Properties();\nSystem.out.println(properties);\n\n// 2.字节输入流加载属性文件的数据到属性集对象properties中去。\nproperties.load(new FileInputStream(\"Day10Demo/src/users.properties\"));\nSystem.out.println(properties);\n\nSystem.out.println(properties.getProperty(\"dlei\"));\nSystem.out.println(properties.getProperty(\"admin\"));\n```\n\n## 第四章 缓冲流\n\n### 缓冲流的概述和分类\n\n什么是缓冲流：缓冲流可以提高字节流和字符流的读写数据的性能\n\n缓冲流分为四类：\n\n- `BufferedInputStream`：字节缓冲输入流，可以提高字节输入流读数据的性能。\n- `BufferedOutStream`：  字节缓冲输出流，可以提高字节输出流写数据的性能。\n- `BufferedReader`：  字符缓冲输入流，可以提高字符输入流读数据的性能。\n- `BufferedWriter`：  字符缓冲输出流，可以提高字符输出流写数据的性能。\n\n### 字节缓冲流\n\n字节缓冲输入流：`BufferedInputStream`\n\n作用：可以把低级的字节输入流包装成一个高级的缓冲字节输入流管道，从而提高字节输入流读数据的性能。\n\n构造器: `public BufferedInputStream(InputStream in)`\n\n原理：缓冲字节输入流管道自带了一个8KB的缓冲池，每次可以直接借用操作系统的功能最多提取8KB的数据到缓冲池中去，以后我们直接从缓冲池读取数据，所以性能较好！\n\n> * 字节缓冲输入流：`BufferedInputStream`\n> * 可以把低级的字节输入流包装成一个高级的缓冲字节输入流管道,从而提高字节输入流读数据的性能。\n> * 功能几乎无变化。\n\n```java\n// 1.定义一个低级的字节输入流与源文件接通\nInputStream is = new FileInputStream(\"Day10Demo/src/dlei04.txt\");\n\n// 3.把低级的字节输入流包装成一个高级的缓冲字节输入流。\nBufferedInputStream bis = new BufferedInputStream(is);\n\n// 2.定义一个字节数组按照循环读取。\nbyte[] buffer = new byte[3];\nint len ;\nwhile((len = is.read(buffer)) != -1){\n    String rs = new String(buffer, 0 , len);\n    System.out.print(rs);\n}\n```\n\n字节缓冲输出流：`BufferedOutputStream`\n\n作用：可以把低级的字节输出流包装成一个高级的缓冲字节输出流，从而提高写数据的性能。\n\n构造器：`public BufferedOutputStream(OutputStream os)`\n\n原理：缓冲字节输出流自带了8KB缓冲池,数据就直接写入到缓冲池中去，性能极高了！\n\n> * 字节缓冲输出流可以把低级的字节输出流包装成一个高级的缓冲字节输出流，从而提高写数据的性能。\n> * 功能几乎不变。\n\n```java\n// 1.写一个原始的字节输出流\nOutputStream os = new FileOutputStream(\"Day10Demo/src/dlei05.txt\");\n// 3.把低级的字节输出流包装成一个高级的缓冲字节输出流\nBufferedOutputStream bos =  new BufferedOutputStream(os);\n// 2.写数据出去\nbos.write(\'a\');\nbos.write(100);\nbos.write(\'b\');\nbos.write(\"我爱中国\".getBytes());\nbos.close();\n```\n\n> 高级的字节缓冲流按照一个一个字节数组的形式复制性能极高，建议以后使用\n\n### 字符缓冲流\n\n字符缓冲输入流：`BufferedReader`\n\n作用：字符缓冲输入流可以把字符输入流包装成一个高级的缓冲字符输入流，可以提高字符输入流读数据的性能。\n\n构造器：`public BufferedReader(Reader reader)`\n\n原理：缓冲字符输入流默认会有一个8K的字符缓冲池,可以提高读字符的性能。缓冲字符输入流除了提高了字符输入流的读数据性能，缓冲字符输入流还多了一个按照行读取数据的功能（重点）:`public String readLine()`: 读取一行数据返回，读取完毕返回`null`;\n\n字符缓冲输入流可以把字符输入流包装成一个高级的缓冲字符输入流，\n\n可以提高字符输入流读数据的性能。\n\n除此之外多了一个按照行读取数据的功能：\n\n`public String readLine()`: 读取一行数据返回，读取完毕返回`null`;\n\n```java\n// 1.定义一个原始的字符输入流读取源文件\nReader fr = new FileReader(\"Day10Demo/src/dlei06.txt\");\n\n// 3.把低级的字符输入流管道包装成一个高级的缓冲字符输入流管道\nBufferedReader br = new BufferedReader(fr);\n// 定义一个字符串变量存储每行数据\nString line;\n// 使用一个循环读取数据(经典代码)\nwhile((line = br.readLine())!=null){\n    System.out.println(line);\n}\n\n//        // 2.定义一个字符数组循环读取\n//        char[] buffer = new char[1024];\n//        int len ;\n//        while((len = br.read(buffer))!=-1){\n//            System.out.println(new String(buffer , 0 , len));\n//        }\n\nbr.close();\n```\n\n字符缓冲输出流：`BufferedWriter`\n\n作用：把字符输出流包装成一个高级的缓冲字符输出流，提高写字符数据的性能。\n\n构造器：`public BufferedWriter(Writer writer)`:\n\n原理：高级的字符缓冲输出流多了一个8k的字符缓冲池，写数据性能极大提高了!\n\n字符缓冲输出流除了提高字符输出流写数据的性能，还多了一个换行的特有功能：`public void newLine()`：新建一行。\n\n缓冲字符输出流可以把低级的字符输出流进行包装。提高了写字符的性能。\n\n多了一个换行的功能：public void newLine()：新建一行。\n\n```java\n// 1.定义一个低级的字符输出流写数据出去\nWriter fw = new FileWriter(\"Day10Demo/src/dlei07.txt\",true);\n\n// 3.把低级的字符输出流包装成高级的缓冲字符输出流\nBufferedWriter bw = new BufferedWriter(fw);\n\n// 2.写字符输出\nbw.write(\"我在黑马学IO流~~~~\");\nbw.newLine(); // 换行\nbw.write(\"我在黑马学IO流~~~~\");\nbw.newLine();// 换行\n\nbw.close();\n```\n\n### 不同编码读取乱码问题\n\n- 如果代码编码和读取的文件编码一致。字符流读取的时候不会乱码。\n- 如果代码编码和读取的文件编码不一致。字符流读取的时候会乱码。\n\n```java\n// 1.定义一个原始的字符输入流读取源文件\n//  代码UTF-8  文件UTF-8 不会出现乱码！\n// Reader fr = new FileReader(\"Day10Demo/src/dlei06.txt\");\n//  代码UTF-8  文件GBK   会出现乱码！\nReader fr = new FileReader(\"D:\\\\itcast\\\\网络编程公开课\\\\Netty.txt\");\n// 2.把低级的字符输入流管道包装成一个高级的缓冲字符输入流管道\nBufferedReader br = new BufferedReader(fr);\n// 3.定义一个字符串变量存储每行数据\nString line;\n// 使用一个循环读取数据(经典代码)\nwhile((line = br.readLine())!=null){\n    System.out.println(line);\n}\n```\n\n## 第五章 转换流\n\n字符输入转换流`InputStreamReader`\n\n作用\n\n- 可以解决字符流读取不同编码乱码的问题。\n- 可以把原始的字节流按照当前默认的代码编码转换成字符输入流。\n- 也可以把原始的字节流按照指定编码转换成字符输入流\n\n构造器：\n\n- public InputStreamReader(InputStream is)：可以使用当前代码默认编码转换成字符流，几乎不用！\n- public InputStreamReader(InputStream is,String charset):可以指定编码把字节流转换成字符流\n\n\n字符输入转换流可以把字节输入流按照默认编码转换成字符输入流。\n\nReader isr = new InputStreamReader(is); // 使用当前代码默认编码UTF-8转换成字符流，几乎不用！\n\n字符输入转换流也可以指定编码把字节输入流转换成字符输入流。\n\nReader isr = new InputStreamReader(is,\"GBK\"); // 指定编码把字节流转换成字符流\n\n字符输入转换流可以解决不同编码读取乱码的问题！\n\n```java\n// 代码：UTF-8    文件：GBK(ab我爱你： o o [oo] [oo] [oo])\n// 1.提取GBK文件的原始字节流\nInputStream is = new FileInputStream(\"D:\\\\itcast\\\\网络编程公开课\\\\Netty.txt\");\n// 2.把原始字节输入流通过转换流，转换成 字符输入转换流InputStreamReader\n//Reader isr = new InputStreamReader(is); // 使用当前代码默认编码UTF-8转换成字符流，几乎不用！\nReader isr = new InputStreamReader(is,\"GBK\"); // 指定编码把字节流转换成字符流\n// 3.包装成缓冲流\nBufferedReader br = new BufferedReader(isr);\n// 4.定义一个字符串变量存储每行数据\nString line;\n// 使用一个循环读取数据(经典代码)\nwhile((line = br.readLine())!=null){\n    System.out.println(line);\n}\n```\n\n字符输出转换流：`OutputStreamWriter`\n\n作用：可以指定编码把字节输出流转换成字符输出流。可以指定写出去的字符的编码。\n\n构造器：\n\n- `public OutputStreamWriter(OutputStream os) `:   用当前默认编码UTF-8把字节输出流转换成字符输出流\n- `public OutputStreamWriter(OutputStream os , String charset)`:指定编码把字节输出流转换成字符输出流\n\n```java\n// 1.写一个字节输出流通向文件\nOutputStream os = new FileOutputStream(\"Day10Demo/src/dlei07.txt\");\n\n// 2.把字节输出流转换成字符输出流。\n// Writer fw = new OutputStreamWriter(os); // .把字节输出流按照默认编码UTF-8转换成字符输出流。\nWriter fw = new OutputStreamWriter(os,\"GBK\"); // .  把字节输出流按照指定编码GBK转换成字符输出流。\nfw.write(\"abc我是中国人\");\nfw.close();\n```\n\n## 第六章 序列流\n\n**对象序列化**：就是把Java对象数据直接存储到文件中去。           对象 => 文件中\n\n**对象反序列化**：就是把Java对象的文件数据恢复到Java对象中。     文件中 => 对象\n\n对象序列化流（对象字节输出流）：`ObjectOutputStream`\n\n**作用**：把内存中的Java对象数据保存到文件中去。\n\n构造器：   `public ObjectOutputStream(OutputStream out)`\n\n序列化方法：`public final void writeObject(Object obj)`\n\n> 对象如果想参与序列化，对象必须实现序列化接口 implements Serializable ，否则序列化失败！\n\n```java\n// 1.创建User用户对象\nUser user = new User(\"tsgz\",\"003197\",\"铁扇公主\");\n// 2.创建低级的字节输出流通向目标文件\nOutputStream os = new FileOutputStream(\"Day10Demo/src/obj.dat\");\n// 3.把低级的字节输出流包装成高级的对象字节输出流ObjectOutputStream\nObjectOutputStream oos = new ObjectOutputStream(os);\n// 4.通过对象字节输出流序列化对象：\noos.writeObject(user);\n// 6.释放资源\noos.close();\nSystem.out.println(\"序列化对象成功~~~~\");\n```\n\n对象反序列化（对象字节输入流）：`ObjectInputStream`\n\n作用：读取序列化的对象文件恢复到Java对象中。\n\n构造器：`public ObjectInputStream(InputStream is)`\n\n方法：`public final Object readObject()`\n\n如果一个字段不想参数序列化：`transient`修饰该成员变量，它将不参与序列化！\n\n序列化版本号：\n\nprivate static final long serialVersionUID = 2L;\n\n必须序列化使用的版本号和反序列化使用的版本号一致才可以正常反序列化！否则报错！\n\n```java\n// 1.定义一个低级的字节输入流通向源文件\nInputStream is = new FileInputStream(\"Day10Demo/src/obj.dat\");\n// 2.把字节输入流包装成高的对象字节输入流\nObjectInputStream ois = new ObjectInputStream(is);\n// 3.反序列化\nUser user = (User) ois.readObject();\nSystem.out.println(user);\nSystem.out.println(\"反序列化完成！\");\n```\n\n## 第七章 打印流\n\n打印流 `PrintStream `/ `PrintWriter`\n\n打印流的作用：\n\n可以方便，快速的写数据出去。\n\n可以实现打印啥出去，就是啥出去。\n\n打印流的构造器：\n\n- `public PrintStream(OutputStream os)`\n- `public PrintStream(String filepath)`\n\n```java\n// 1.打印流PrintStream\n//OutputStream os = new FileOutputStream(\"Day10Demo/src/dlei08.txt\");\n//PrintStream ps = new PrintStream(os);\nPrintStream ps = new  PrintStream(\"Day10Demo/src/dlei08.txt\");\n//PrintWriter pw = new  PrintWriter(\"Day10Demo/src/dlei08.txt\");\n\nps.println(97); // 写97\nps.println(110); // 写110\nps.println(\"我在黑马快乐的调皮~~\");\nps.println(99.8);\nps.println(false);\nps.println(\'徐\');\n\n// 写字节数据出去\n// ps.write(\"我爱你\".getBytes());\n\nps.close();\n```\n\n`public static void setOut(PrintStream out)` :让系统的输出流向打印流。\n\n```java\nSystem.out.println(\"==itheima0==\");\nPrintStream ps = new PrintStream(\"Day10Demo/src/log.txt\");\nSystem.setOut(ps); // 让系统的输出流向打印流。\n\nSystem.out.println(\"==itheima1==\");\nSystem.out.println(\"==itheima2==\");\nSystem.out.println(\"==itheima3==\");\nSystem.out.println(\"==itheima4==\");\nSystem.out.println(\"==itheima5==\");\n```\n\n# day11-网络编程和NIO\n\n## 第一章 网络编程\n\n通信一定是基于软件结构实现的\n\n* C/S结构 ：全称为Client/Server结构，是指客户端和服务器结构。常见程序有ＱＱ、迅雷，IDEA等软件\n* B/S结构 ：全称为Browser/Server结构，是指浏览器和服务器结构。常见浏览器有谷歌、火狐等、软件：博学谷、京东、淘宝。（开发中的重点，基于网页设计界面，界面效果可以更丰富: Java Web开发）\n\n两种架构各有优势，但是无论哪种架构，都离不开网络的支持。网络编程，就是在一定的协议下，实现两台计算机的通信的技术\n\n### 网络通信的三要素\n\n1. 协议：计算机网络客户端与服务端通信必须事先约定和彼此遵守的通信规则。\n   HTTP , FTP , TCP , UDP , SSH , SMTP。\n\n2. IP地址：指互联网协议地址（Internet Protocol Address），俗称IP。\n\n   IP地址用来给一个网络中的计算机设备做唯一的编号\n\n   IPv4: **4个字节，32位组成**。  192.168.70.70\n\n   局域网：公司内部用\n\n   城域网\n\n   广域网（公网）：可以在任何地方访问\n\n   IPv6: 可以实现为所有设备分配IP  **128位**\n\n   ipconfig：查看本机的IP\n\n   ping 检查本机与某个IP指定的机器是否联通，或者说是检测对方是否在线。\n\n   ping 空格 IP地址\n\n   ping 220.181.57.216\n\n   ping www.baidu.com\n\n   注意：特殊的IP地址： 本机IP地址.(不受环境的影响，任何时候都存在这两个ip,可以直接找本机！)\n\n   127.0.0.1 == localhost。\n\n3. 端口：端口号就可以唯一标识设备中的进程（应用程序）了\n\n   端口号：用两个字节表示的整数，它的取值范围是0~65535。\n\n   * 0~1023之间的端口号用于一些知名的网络服务和应用。\n   * 普通的应用程序需要使用1024以上的端口号。\n   * 如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败。报出端口被占用异常！！\n\n利用`协议`+`IP地址`+`端口号` 三元组合，就可以标识网络中的进程了，那么进程间的通信就可以利用这个标识与其它进程进行交互。\n\n### 网络通信的分层和协议\n\n网络通信协议：通信协议是对计算机必须遵守的规则，只有遵守这些规则，计算机之间才能进行通信\n\n```\n-------------------------------------------------------------------------------\n应用层  ：应用程序（QQ,微信,浏览器）,可能用到的协议（HTTP,FTP,SMTP）   通常程序员只需要关心这一层\n------------------------------------------------------------------------------\n传输层  ：TCP/IP协议 - UDP协议    计算机网络工程师需要精通的协议，有些技术我们也需要精通这一层协议，\n-----------------------------------------------------------------\n网络层  ：IP协议  封装自己的IP和对方的IP和端口\n-----------------------------------------------------------------\n数据链路层 ： 进入到硬件（网）\n-----------------------------------------------------------------\n```\n\n* TCP/IP协议：传输控制协议 (Transmission Control Protocol)。\n\n  TCP协议是**面向连接**的安全的可靠的传输通信协议。\n\n  1. 在通信之前必须确定对方在线并且连接成功才可以通信。\n  2. 例如下载文件、浏览网页等(要求可靠传输)\n\n* UDP：用户数据报协议(User Datagram Protocol)。\n\n  UDP协议是一个**面向无连接**的不可靠传输的协议。\n\n  1. 直接发消息给对方，不管对方是否在线，发消息后也不需要确认。\n  2. 无线（视频会议，通话），性能好，可能丢失一些数据！！\n\n### InetAddress类概述\n\n`InetAddress`类的对象就代表一个IP地址对象。\n\n`InetAddress`类成员方法：\n\n* 获得本地主机IP地址对象\n\n     `static InetAddress getLocalHost()`\n\n* 根据IP地址字符串或主机名获得对应的IP地址对象\n\n     `static InetAddress getByName(String host)`\n\n* 获得主机名\n\n     `String getHostName()`\n\n* 获得IP地址字符串\n\n     `String getHostAddress()`\n\n```java\n// 1.获取本机地址对象。\nInetAddress ip = InetAddress.getLocalHost();\nSystem.out.println(ip.getHostName());\nSystem.out.println(ip.getHostAddress());\n// 2.获取域名ip对象\nInetAddress ip2 = InetAddress.getByName(\"www.baidu.com\");\nSystem.out.println(ip2.getHostName());\nSystem.out.println(ip2.getHostAddress());\n\n// 3.获取公网IP对象。\nInetAddress ip3 = InetAddress.getByName(\"182.61.200.6\");\nSystem.out.println(ip3.getHostName());\nSystem.out.println(ip3.getHostAddress());\n\n// 4.判断是否能通： ping  5s之前测试是否可通\nSystem.out.println(ip2.isReachable(5000)); // ping\n```\n\n## 第二章 UDP通信\n\nUDP协议的特点\n\n* **面向无连接**的协议\n* 发送端只管发送，不确认对方是否能收到\n* 基于数据包进行数据传输\n* 发送数据的包的大小限制**64KB以内**\n* **因为面向无连接，速度快，但是不可靠。会丢失数据！**\n\nUDP协议的使用场景\n* 在线视频\n* 网络语音电话\n\nUDP协议相关的两个类\n* `DatagramPacket`\n     * 数据包对象\n     * 作用：用来封装要发送或要接收的数据，比如：集装箱\n* `DatagramSocket`\n     * 发送对象\n     * 作用：用来发送或接收数据包，比如：码头\n\n`DatagramPacket`类构造器\n\n发送端用：`new DatagramPacket(byte[] buf, int length, InetAddress address, int port)` 创建发送端数据包对象\n\n* `buf`：要发送的内容，字节数组\n* `length`：要发送内容的长度，单位是字节\n* `address`：接收端的IP地址对象\n* `port`：接收端的端口号\n\n接收端用：`new DatagramPacket(byte[] buf, int length)`\n* 创建接收端的数据包对象\n* `buf`：用来存储接收到内容\n* `length`：能够接收内容的长度\n\n`DatagramPacket`类常用方法\n\n    * `int getLength()` 获得实际接收到的字节个数\n\n`DatagramSocket`类构造方法\n\n* `DatagramSocket()` 创建发送端的Socket对象，系统会随机分配一个端口号。\n* `DatagramSocket(int port)` 创建接收端的Socket对象并指定端口号\n\n`DatagramSocket`类成员方法\n\n* `void send(DatagramPacket dp)` 发送数据包\n* `void receive(DatagramPacket p)` 接收数据包\n\n需求：使用UDP实现客户端发，服务端收。(了解)\n\n客户端\n\n```java\nSystem.out.println(\"===启动客户端===\");\n// 1.创建一个集装箱对象，用于封装需要发送的数据包!\n/**\n         new DatagramPacket(byte[] buf, int length, InetAddress address, int port)\n         参数一：封装数据的字节数组。\n         参数二：发送数据的长度!\n         参数三：服务端的IP地址\n         参数四：服务端程序的端口号码。\n         */\nbyte[] buffer = \"今晚，约吗？\".getBytes();\nDatagramPacket packet = new DatagramPacket(buffer, buffer.length,  InetAddress.getLocalHost(), 6666);\n\n// 2.创建一个码头对象\n// 参数可以申明客户端端口，可以有可以没有，默认会给一个端口。\nDatagramSocket socket = new DatagramSocket();\n\n// 3.开始发送数据包对象\nsocket.send(packet);\n\nsocket.close();\n```\n\n服务端\n\n```java\nSystem.out.println(\"==启动服务端程序==\");\n// 1.创建一个接收客户都端的数据包对象（集装箱）\n/**\n         * new DatagramPacket(byte[] buffer ,int lenght):\n         * 参数一：接收数据的数组。\n         * 参数二：接收数据的数组的长度！\n         */\nbyte[] buffer = new byte[1024*64];\nDatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n\n// 2.创建一个接收端的码头对象\nDatagramSocket socket = new DatagramSocket(6666);\n\n// 3.开始接收\nsocket.receive(packet);\n\n// 4.从集装箱中获取本次读取的数据量\nint len = packet.getLength();\n\n// 5.输出数据\nString rs = new String(buffer , 0 , len);\nSystem.out.println(rs);\n\n// 6.服务端还可以获取发来信息的客户端的IP和端口。\nString ip = packet.getAddress().getHostAddress();\nint port = packet.getPort();\nSystem.out.println(\"对方：\"+ip+\":\"+port);\nsocket.close();\n```\n\n## 第三章 TCP通信\n\nTCP/IP协议 ==> Transfer Control Protocol ==> 传输控制协议\nTCP/IP协议的特点\n\n* **面向连接**的协议\n* 只能由客户端主动发送数据给服务器端，服务器端接收到数据之后，可以给客户端响应数据。\n* 通过**三次握手建立连接**，连接成功形成数据传输通道。\n* 通过**四次挥手断开连接**\n* 基于IO流进行数据传输\n* 传输数据大小没有限制\n* 因为**面向连接的协议，速度慢，但是是可靠的协议**。\n\nTCP协议的使用场景\n* 文件上传和下载\n* 邮件发送和接收\n* 远程登录\n\nTCP协议相关的类\n* `Socket`\n\n     一个该类的对象就代表一个客户端程序\n\n* `ServerSocket`\n\n     一个该类的对象就代表一个服务器端程序\n\nTCP通信也叫`Socket`网络编程，只要代码基于`Socket`开发，底层就是基于了可靠传输的TCP通信。\n\n`Socket`类构造方法\n\n    * `Socket(String host, int port)`\n        \n    根据ip地址字符串和端口号创建客户端Socket对象\n          \n          > 只要执行该方法，就会立即连接指定的服务器程序，如果连接不成功，则会抛出异常。如果连接成功，则表示三次握手通过。\n\n`Socket`类常用方法\n\n* `OutputStream getOutputStream()`; 获得字节输出流对象\n* `InputStream getInputStream()`;获得字节输入流对象\n\n**客户端的开发流程**\n\n1. 客户端要请求于服务端的`socket`管道连接。\n2. 从`socket`通信管道中得到一个字节输出流\n3. 通过字节输出流给服务端写出数据。\n\n**服务端的开发流程**\n\n1. 注册端口。\n2. 接收客户端的`Socket`管道连接。\n3. 从`socket`通信管道中得到一个字节输入流。\n4. 从字节输入流中读取客户端发来的数据。\n\n需求：客户端发送一行数据，服务端接收一行数据！！\n\n> 1. 客户端用`Socket`连接服务端。\n> 2. 服务端用`ServerSocket`注册端口，接收客户端的`Socket`连接。\n> 3. 通信是很严格的，对方怎么发，你就应该怎么收，对方发多少你就只能收多少。\n> 4. 实现的面向连接的`socket`端到端的通信管道，一方如果出现对象，另一方会出现异常！\n\n### TCP通信的第一个入门案例\n\n简单的发送一条信息\n\n客户端\n\n```java\n// 1.客户端要请求于服务端的socket管道连接。\n// Socket(String host, int port)\nSocket socket = new Socket(\"127.0.0.1\" , 9999);\n// 2.从socket通信管道中得到一个字节输出流\nOutputStream os = socket.getOutputStream();\n// 3.把低级的字节输出流包装成高级的打印流。\nPrintStream ps = new PrintStream(os);\n// 4.开始发消息出去\nps.println(\"我是客户端，喜欢你很久了，第一次给你发消息，只想说：约吗？\");\nps.flush();\nSystem.out.println(\"客户端发送完毕~~~~\");\n```\n\n服务端\n\n```java\nSystem.out.println(\"----服务端启动----\");\n// 1.注册端口: public ServerSocket(int port)\nServerSocket serverSocket = new ServerSocket(9999);\n// 2.开始等待接收客户端的Socket管道连接。\nSocket socket = serverSocket.accept();\n// 3.从socket通信管道中得到一个字节输入流。\nInputStream is = socket.getInputStream();\n// 4.把字节输入流转换成字符输入流\nReader isr = new InputStreamReader(is);\n// 5.把字符输入流包装成缓冲字符输入流。\nBufferedReader br = new BufferedReader(isr);\n// 6.按照行读取消息 。\nString line ;\nif((line = br.readLine())!=null){\n    System.out.println(line);\n}\n```\n\n### TCP通信的第二个案例-循环发送\n\n客户端可以反复发送数据，服务端可以反复接受数据\n\n客户端\n\n```java\n// 1.客户端要请求于服务端的socket管道连接。\n// Socket(String host, int port)\nSocket socket = new Socket(\"127.0.0.1\" , 9999);\n// 2.从socket通信管道中得到一个字节输出流\nOutputStream os = socket.getOutputStream();\n// 3.把低级的字节输出流包装成高级的打印流。\nPrintStream ps = new PrintStream(os);\n// 4.开始发消息出去\nwhile(true){\nScanner sc = new Scanner(System.in);\nSystem.out.print(\"请说：\");\nps.println(sc.nextLine());\nps.flush();\n}\n```\n\n服务端\n\n```java\nSystem.out.println(\"----服务端启动----\");\n// 1.注册端口: public ServerSocket(int port)\nServerSocket serverSocket = new ServerSocket(9999);\n// 2.开始等待接收客户端的Socket管道连接。\nSocket socket = serverSocket.accept();\n// 3.从socket通信管道中得到一个字节输入流。\nInputStream is = socket.getInputStream();\n// 4.把字节输入流转换成字符输入流\nReader isr = new InputStreamReader(is);\n// 5.把字符输入流包装成缓冲字符输入流。\nBufferedReader br = new BufferedReader(isr);\n// 6.按照行读取消息 。\nString line ;\nwhile((line = br.readLine())!=null){\n	System.out.println(line);\n}\n```\n\n### TCP通信的第三个案例-一个服务端同时接受多个客户端消息\n\n需要在服务端引入多线程。每接收一个客户端的Socket通道，就为它分配一个独立的线程来处理它的消息。如此便可实现：一个服务端可以同时接收多个客户端的消息。\n\n服务端\n\n```java\npublic class ServerDemo02 {\n    public static void main(String[] args) throws Exception {\n        System.out.println(\"----服务端启动----\");\n        // 1.注册端口: public ServerSocket(int port)\n        ServerSocket serverSocket = new ServerSocket(9999);\n        // 2.定义一个循环不断的接收客户端的连接请求\n        while(true){\n            // 3.开始等待接收客户端的Socket管道连接。\n            Socket socket = serverSocket.accept();\n            // 4.每接收到一个客户端必须为这个客户端管道分配一个独立的线程来处理与之通信。\n            new ServerReaderThread(socket).start();\n        }\n    }\n}\n\nclass ServerReaderThread extends Thread{\n    private Socket socket ;\n    public ServerReaderThread(Socket socket){\n        this.socket = socket;\n    }\n\n    @Override\n    public void run() {\n        try{\n            // 3.从socket通信管道中得到一个字节输入流。\n            InputStream is = socket.getInputStream();\n            // 4.把字节输入流转换成字符输入流\n            Reader isr = new InputStreamReader(is);\n            // 5.把字符输入流包装成缓冲字符输入流。\n            BufferedReader br = new BufferedReader(isr);\n            // 6.按照行读取消息 。\n            String line ;\n            while((line = br.readLine())!=null){\n                System.out.println(socket.getRemoteSocketAddress()+\"说：\"+line);\n            }\n        }catch (Exception e){\n            System.out.println(socket.getRemoteSocketAddress()+\"下线了~~~~~~\");\n        }\n    }\n}\n```\n\n客户端\n\n```java\n// 1.客户端要请求于服务端的socket管道连接。\n// Socket(String host, int port)\nSocket socket = new Socket(\"127.0.0.1\" , 9999);\n// 2.从socket通信管道中得到一个字节输出流\nOutputStream os = socket.getOutputStream();\n// 3.把低级的字节输出流包装成高级的打印流。\nPrintStream ps = new PrintStream(os);\n// 4.开始发消息出去\nwhile(true){\n    Scanner sc = new Scanner(System.in);\n    System.out.print(\"请说：\");\n    ps.println(sc.nextLine());\n    ps.flush();\n}\n```\n\n### TCP通信的第四个案例-线程池\n\n\n\n我们之前引入的线程解决一个服务端可以接收多个客户端消息。客户端与服务端的线程模型是： N-N的关系。 一个客户端要一个线程。这种模型是不行的，并发越高，系统瘫痪的越快\n\n我们可以在服务端引入**线程池**，使用线程池来处理与客户端的消息通信，线程池不会引起出现过多的线程而导致系统死机\n\n客户端\n\n```java\ntry {\n    // 1.客户端要请求于服务端的socket管道连接。\n    // Socket(String host, int port)\n    Socket socket = new Socket(\"127.0.0.1\" , 9999);\n    // 2.从socket通信管道中得到一个字节输出流\n    OutputStream os = socket.getOutputStream();\n    // 3.把低级的字节输出流包装成高级的打印流。\n    PrintStream ps = new PrintStream(os);\n    Scanner sc = new Scanner(System.in);\n    while(true){\n        System.out.print(\"请说：\");\n        String msg = sc.nextLine();\n        ps.println(msg);\n        ps.flush();\n    }\n} catch (Exception e) {\n    e.printStackTrace();\n}\n```\n\n服务端主程序\n\n```java\ntry {\n    System.out.println(\"----------服务端启动成功------------\");\n    ServerSocket ss = new ServerSocket(9999);\n\n    // 一个服务端只需要对应一个线程池\n    HandlerSocketThreadPool handlerSocketThreadPool =\n        new HandlerSocketThreadPool(3, 100);\n\n    // 客户端可能有很多个\n    while(true){\n        Socket socket = ss.accept() ;\n        System.out.println(\"有人上线了！！\");\n        // 每次收到一个客户端的socket请求，都需要为这个客户端分配一个\n        // 独立的线程 专门负责对这个客户端的通信！！\n        handlerSocketThreadPool.execute(new ReaderClientRunnable(socket));\n    }\n\n} catch (Exception e) {\n    e.printStackTrace();\n}\n```\n\n`HandlerSocketThreadPool`\n\n```java\n// 线程池处理类\npublic class HandlerSocketThreadPool {\n	\n	// 线程池 \n	private ExecutorService executor;\n	// 线程池：3个线程  100个\n	public HandlerSocketThreadPool(int maxPoolSize, int queueSize){\n		executor = new ThreadPoolExecutor(\n				maxPoolSize,\n				maxPoolSize,\n				120L, \n				TimeUnit.SECONDS,\n				new ArrayBlockingQueue<Runnable>(queueSize) );\n	}\n	\n	public void execute(Runnable task){\n		this.executor.execute(task);\n	}\n}\n```\n\n`ReaderClientRunnable`\n\n```java\nclass ReaderClientRunnable implements Runnable {\n	private Socket socket ;\n\n	public ReaderClientRunnable(Socket socket) {\n		this.socket = socket;\n	}\n\n	@Override\n	public void run() {\n		try {\n			// 读取一行数据\n			InputStream is = socket.getInputStream() ;\n			// 转成一个缓冲字符流\n			Reader fr = new InputStreamReader(is);\n			BufferedReader br = new BufferedReader(fr);\n			// 一行一行的读取数据\n			String line = null ;\n			while((line = br.readLine())!=null){ // 阻塞式的！！\n				System.out.println(\"服务端收到了数据：\"+line);\n			}\n		} catch (Exception e) {\n			System.out.println(\"有人下线了\");\n		}\n	}\n}\n```\n\n### 即时通信\n\n`ClientChat`\n\n```java\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.net.Socket;\n\n/**\n * @Author xlei(徐磊)\n * 客户端界面\n */\npublic class ClientChat implements ActionListener {\n	/** 1.设计界面  */\n	private JFrame win = new JFrame();\n	/** 2.消息内容框架 */\n	public JTextArea smsContent =new JTextArea(23 , 50);\n	/** 3.发送消息的框  */\n	private JTextArea smsSend = new JTextArea(4,40);\n	/** 4.在线人数的区域  */\n	/** 存放人的数据 */\n	/** 展示在线人数的窗口 */\n	public JList<String> onLineUsers = new JList<>();\n\n	// 是否私聊按钮\n	private JCheckBox isPrivateBn = new JCheckBox(\"私聊\");\n	// 消息按钮\n	private JButton sendBn  = new JButton(\"发送\");\n\n	// 登录界面\n	private JFrame loginView;\n\n	private JTextField ipEt , nameEt , idEt;\n\n	private Socket socket ;\n\n	public static void main(String[] args) {\n		new ClientChat().initView();\n\n	}\n\n	private void initView() {\n		/** 初始化聊天窗口的界面 */\n		win.setSize(650, 600);\n\n		/** 展示登录界面  */\n		displayLoginView();\n\n		/** 展示聊天界面 */\n		//displayChatView();\n\n\n	}\n\n	private void displayChatView() {\n\n		JPanel bottomPanel = new JPanel(new BorderLayout());\n		//-----------------------------------------------\n		// 将消息框和按钮 添加到窗口的底端\n		win.add(bottomPanel, BorderLayout.SOUTH);\n		bottomPanel.add(smsSend);\n		JPanel btns = new JPanel(new FlowLayout(FlowLayout.LEFT));\n		btns.add(sendBn);\n		btns.add(isPrivateBn);\n		bottomPanel.add(btns, BorderLayout.EAST);\n		//-----------------------------------------------\n		// 给发送消息按钮绑定点击事件监听器\n		// 将展示消息区centerPanel添加到窗口的中间\n		smsContent.setBackground(new Color(0xdd,0xdd,0xdd));\n		// 让展示消息区可以滚动。\n		win.add(new JScrollPane(smsContent), BorderLayout.CENTER);\n		smsContent.setEditable(false);\n		//-----------------------------------------------\n		// 用户列表和是否私聊放到窗口的最右边\n		Box rightBox = new Box(BoxLayout.Y_AXIS);\n		onLineUsers.setFixedCellWidth(120);\n		onLineUsers.setVisibleRowCount(13);\n		rightBox.add(new JScrollPane(onLineUsers));\n		win.add(rightBox, BorderLayout.EAST);\n		//-----------------------------------------------\n		// 关闭窗口退出当前程序\n		win.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n		win.pack();  // swing 加上这句 就可以拥有关闭窗口的功能\n		/** 设置窗口居中,显示出来  */\n		setWindowCenter(win,650,600,true);\n		// 发送按钮绑定点击事件\n		sendBn.addActionListener(this);\n	}\n\n	private void displayLoginView(){\n\n		/** 先让用户进行登录\n		 *  服务端ip\n		 *  用户名\n		 *  id\n		 *  */\n		/** 显示一个qq的登录框     */\n		loginView = new JFrame(\"登录\");\n		loginView.setLayout(new GridLayout(3, 1));\n		loginView.setSize(400, 230);\n\n		JPanel ip = new JPanel();\n		JLabel label = new JLabel(\"   IP:\");\n		ip.add(label);\n		ipEt = new JTextField(20);\n		ip.add(ipEt);\n		loginView.add(ip);\n\n		JPanel name = new JPanel();\n		JLabel label1 = new JLabel(\"姓名:\");\n		name.add(label1);\n		nameEt = new JTextField(20);\n		name.add(nameEt);\n		loginView.add(name);\n\n		JPanel btnView = new JPanel();\n		JButton login = new JButton(\"登陆\");\n		btnView.add(login);\n		JButton cancle = new JButton(\"取消\");\n		btnView.add(cancle);\n		loginView.add(btnView);\n		// 关闭窗口退出当前程序\n		loginView.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n		setWindowCenter(loginView,400,260,true);\n\n		/** 给登录和取消绑定点击事件 */\n		login.addActionListener(this);\n		cancle.addActionListener(this);\n\n	}\n\n	private static void setWindowCenter(JFrame frame, int width , int height, boolean flag) {\n		/** 得到所在系统所在屏幕的宽高 */\n		Dimension ds = frame.getToolkit().getScreenSize();\n\n		/** 拿到电脑的宽 */\n		int width1 = ds.width;\n		/** 高 */\n		int height1 = ds.height ;\n\n		System.out.println(width1 +\"*\" + height1);\n		/** 设置窗口的左上角坐标 */\n		frame.setLocation(width1/2 - width/2, height1/2 -height/2);\n		frame.setVisible(flag);\n	}\n\n	@Override\n	public void actionPerformed(ActionEvent e) {\n		/** 得到点击的事件源 */\n		JButton btn = (JButton) e.getSource();\n		switch(btn.getText()){\n			case \"登陆\":\n				String ip = ipEt.getText().toString();\n				String name = nameEt.getText().toString();\n				// 校验参数是否为空\n				// 错误提示\n				String msg = \"\" ;\n				// 12.1.2.0\n				// \\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\\n				if(ip==null || !ip.matches(\"\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\")){\n					msg = \"请输入合法的服务端ip地址\";\n				}else if(name==null || !name.matches(\"\\\\S{1,}\")){\n					msg = \"姓名必须1个字符以上\";\n				}\n\n				if(!msg.equals(\"\")){\n					/** msg有内容说明参数有为空 */\n					// 参数一：弹出放到哪个窗口里面\n					JOptionPane.showMessageDialog(loginView, msg);\n				}else{\n					try {\n						// 参数都合法了\n						// 当前登录的用户,去服务端登陆\n						/** 先把当前用户的名称展示到界面 */\n						win.setTitle(name);\n						// 去服务端登陆连接一个socket管道\n						socket = new Socket(ip, Constants.PORT);\n\n						//为客户端的socket分配一个线程 专门负责收消息\n						new ClientReader(this,socket).start();\n\n						// 带上用户信息过去\n						DataOutputStream dos = new DataOutputStream(socket.getOutputStream());\n						dos.writeInt(1); // 登录消息\n						dos.writeUTF(name.trim());\n						dos.flush();\n\n						// 关系当前窗口 弹出聊天界面\n						loginView.dispose(); // 登录窗口销毁\n						displayChatView(); // 展示了聊天窗口了\n\n\n					} catch (Exception e1) {\n						e1.printStackTrace();\n					}\n				}\n				break;\n			case \"取消\":\n				/** 退出系统 */\n				System.exit(0);\n				break;\n			case \"发送\":\n				// 得到发送消息的内容\n				String msgSend = smsSend.getText().toString();\n				if(!msgSend.trim().equals(\"\")){\n					/** 发消息给服务端 */\n					try {\n						// 判断是否对谁发消息\n						String selectName = onLineUsers.getSelectedValue();\n						int flag = 2 ;// 群发 @消息\n						if(selectName!=null&&!selectName.equals(\"\")){\n							msgSend =(\"@\"+selectName+\",\"+msgSend);\n							/** 判断是否选中了私法 */\n							if(isPrivateBn.isSelected()){\n								/** 私法 */\n								flag = 3 ;//私发消息\n							}\n\n						}\n\n						DataOutputStream dos = new DataOutputStream(socket.getOutputStream());\n						dos.writeInt(flag); // 群发消息  发送给所有人\n						dos.writeUTF(msgSend);\n						if(flag == 3){\n							// 告诉服务端我对谁私发\n							dos.writeUTF(selectName.trim());\n						}\n						dos.flush();\n\n					} catch (Exception e1) {\n						e1.printStackTrace();\n					}\n\n				}\n				smsSend.setText(null);\n				break;\n\n		}\n\n	}\n}\n\nclass ClientReader extends Thread {\n\n	private Socket socket;\n	private ClientChat clientChat ;\n\n	public ClientReader(ClientChat clientChat, Socket socket) {\n		this.clientChat = clientChat;\n		this.socket = socket;\n	}\n\n	@Override\n	public void run() {\n		try {\n			DataInputStream dis = new DataInputStream(socket.getInputStream());\n			/** 循环一直等待客户端的消息 */\n			while(true){\n				/** 读取当前的消息类型 ：登录,群发,私聊 , @消息 */\n				int flag = dis.readInt();\n				if(flag == 1){\n					// 在线人数消息回来了\n					String nameDatas = dis.readUTF();\n					// 展示到在线人数的界面\n					String[] names = nameDatas.split(Constants.SPILIT);\n\n					clientChat.onLineUsers.setListData(names);\n				}else if(flag == 2){\n					// 群发消息\n					String msg = dis.readUTF() ;\n					clientChat.smsContent.append(msg);\n					//滾動到底端\n					clientChat.smsContent.setCaretPosition(clientChat.smsContent.getText().length());\n				}\n			}\n		} catch (Exception e) {\n			e.printStackTrace();\n		}\n\n	}\n}\n```\n\n`User`\n\n```java\npublic class User {\n	private Integer id ;\n	private String name ;\n	\n	public User(Integer id, String name) {\n		this.id = id;\n		this.name = name;\n	}\n	\n	public Integer getId() {\n		return id;\n	}\n	public void setId(Integer id) {\n		this.id = id;\n	}\n	public String getName() {\n		return name;\n	}\n	public void setName(String name) {\n		this.name = name;\n	}\n	@Override\n	public String toString() {\n		return \"User [id=\" + id + \", name=\" + name + \"]\";\n	}\n	\n	\n}\n```\n\n`ServerChat`\n\n```java\n/**\n * @Author\n * @Email dlei0009@163.com\n */\npublic class ServerChat {\n\n	/** 定义一个集合存放所有在线的socket  */\n	public static Map<Socket, String> onLineSockets = new HashMap<>();\n\n	public static void main(String[] args) {\n		try {\n			/** 注册端口   */\n			ServerSocket serverSocket = new ServerSocket(Constants.PORT);\n\n			/** 循环一直等待所有可能的客户端连接 */\n			while(true){\n				Socket socket = serverSocket.accept();\n				/** 把客户端的socket管道单独配置一个线程来处理 */\n				new ServerReader(socket).start();\n			}\n		} catch (Exception e) {\n			e.printStackTrace();\n		}\n	}\n}\n\nclass ServerReader extends Thread {\n\n	private Socket socket;\n\n	public ServerReader(Socket socket) {\n		this.socket = socket;\n	}\n\n	@Override\n	public void run() {\n		DataInputStream dis = null;\n		try {\n			dis = new DataInputStream(socket.getInputStream());\n			/** 循环一直等待客户端的消息 */\n			while(true){\n				/** 读取当前的消息类型 ：登录,群发,私聊 , @消息 */\n				int flag = dis.readInt();\n				if(flag == 1){\n					/** 先将当前登录的客户端socket存到在线人数的socket集合中   */\n					String name = dis.readUTF() ;\n					System.out.println(name+\"---->\"+socket.getRemoteSocketAddress());\n					ServerChat.onLineSockets.put(socket, name);\n				}\n				writeMsg(flag,dis);\n			}\n		} catch (Exception e) {\n			System.out.println(\"--有人下线了--\");\n			// 从在线人数中将当前socket移出去  \n			ServerChat.onLineSockets.remove(socket);\n			try {\n				// 从新更新在线人数并发给所有客户端 \n				writeMsg(1,dis);\n			} catch (Exception e1) {\n				e1.printStackTrace();\n			}\n		}\n\n	}\n\n	private void writeMsg(int flag, DataInputStream dis) throws Exception {\n//		DataOutputStream dos = new DataOutputStream(socket.getOutputStream()); \n		// 定义一个变量存放最终的消息形式 \n		String msg = null ;\n		if(flag == 1){\n			/** 读取所有在线人数发给所有客户端去更新自己的在线人数列表 */\n			/** onlineNames = [徐磊,zhangsan,李刚]*/\n			StringBuilder rs = new StringBuilder();\n			Collection<String> onlineNames = ServerChat.onLineSockets.values();\n			// 判断是否存在在线人数 \n			if(onlineNames != null && onlineNames.size() > 0){\n				for(String name : onlineNames){\n					rs.append(name+ Constants.SPILIT);\n				}\n				// 徐磊003197♣♣㏘♣④④♣zhangsan003197♣♣㏘♣④④♣李刚003197♣♣㏘♣④④♣\n				// 去掉最后的一个分隔符 \n				msg = rs.substring(0, rs.lastIndexOf(Constants.SPILIT));\n\n				/** 将消息发送给所有的客户端 */\n				sendMsgToAll(flag,msg);\n			}\n		}else if(flag == 2 || flag == 3){\n			// 读到消息  群发的 或者 @消息\n			String newMsg = dis.readUTF() ; // 消息\n			// 得到发件人 \n			String sendName = ServerChat.onLineSockets.get(socket);\n\n			// 李刚 时间\n			//    内容--\n			StringBuilder msgFinal = new StringBuilder();\n			// 时间  \n			SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss EEE\");\n			if(flag == 2){\n				msgFinal.append(sendName).append(\"  \").append(sdf.format(System.currentTimeMillis())).append(\"\\r\\n\");\n				msgFinal.append(\"    \").append(newMsg).append(\"\\r\\n\");\n				sendMsgToAll(flag,msgFinal.toString());\n			}else if(flag == 3){\n				msgFinal.append(sendName).append(\"  \").append(sdf.format(System.currentTimeMillis())).append(\"对您私发\\r\\n\");\n				msgFinal.append(\"    \").append(newMsg).append(\"\\r\\n\");\n				// 私发 \n				// 得到给谁私发 \n				String destName = dis.readUTF();\n				sendMsgToOne(destName,msgFinal.toString());\n			}\n		}\n	}\n	/**\n	 * @param destName 对谁私发 \n	 * @param msg 发的消息内容 \n	 * @throws Exception\n	 */\n	private void sendMsgToOne(String destName, String msg) throws Exception {\n		// 拿到所有的在线socket管道 给这些管道写出消息\n		Set<Socket> allOnLineSockets = ServerChat.onLineSockets.keySet();\n		for(Socket sk :  allOnLineSockets){\n			// 得到当前需要私发的socket \n			// 只对这个名字对应的socket私发消息\n			if(ServerChat.onLineSockets.get(sk).trim().equals(destName)){\n				DataOutputStream dos = new DataOutputStream(sk.getOutputStream());\n				dos.writeInt(2); // 消息类型\n				dos.writeUTF(msg);\n				dos.flush();\n			}\n		}\n\n	}\n\n	private void sendMsgToAll(int flag, String msg) throws Exception {\n		// 拿到所有的在线socket管道 给这些管道写出消息\n		Set<Socket> allOnLineSockets = ServerChat.onLineSockets.keySet();\n		for(Socket sk :  allOnLineSockets){\n			DataOutputStream dos = new DataOutputStream(sk.getOutputStream());\n			dos.writeInt(flag); // 消息类型\n			dos.writeUTF(msg);\n			dos.flush();\n		}\n	}\n}\n```\n\n`Constants`\n\n```java\npublic class Constants {\n	/** 常量 */\n	public static final int PORT = 7778 ;\n	\n	/** 协议分隔符 */\n	public static final String SPILIT = \"003197♣♣㏘♣④④♣\";\n}\n```\n\n### 文件上传\n\n实现客户端上传图片给服务端保存起来\n\n服务端实现：\n\n* 接受多个客户端传输来的图片数据存储到服务器路径\n* 响应一个成功的消息给当前客户端\n\n`ClientDemo`\n\n```java\npublic class ClientDemo {\n    // 本地图片路径、\n    public static void main(String[] args) throws Exception {\n        // 1.请求于服务端的Socket管道连接。\n        Socket socket = new Socket(Constants.SERVER_IP , Constants.SERVER_PORT);\n        // 2.从socket管道中得到一个字节输出流包装成缓冲字节输出流\n        BufferedOutputStream bos = new BufferedOutputStream(socket.getOutputStream());\n        // 3.提取本机的图片上传给服务端\n        // 4.得到一个缓冲字节输入流与本地图片接通\n        BufferedInputStream bis =\n                new BufferedInputStream(new FileInputStream(Constants.SRC_IMAGE));\n        // 5.定义一个字节数组\n        byte[] buffer = new byte[1024];\n        int len ;\n        while((len = bis.read(buffer)) != -1) {\n            bos.write(buffer, 0 ,len);\n        }\n        bos.flush(); // 刷新图片数据到服务端！！\n        socket.shutdownOutput(); // 告诉服务端我的数据已经发送完毕，请不要在等我了！\n        bis.close(); // 可以关闭\n\n        // 6.等待着服务端的响应数据！！\n        BufferedReader  br = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n        System.out.println(\"收到服务端响应：\"+br.readLine());\n    }\n}\n```\n\n`Constants`\n\n```java\n/**\n * 客户端常量包\n */\npublic class Constants {\n    public static final String SRC_IMAGE = \"D:\\\\itcast\\\\图片资源\\\\beautiful.jpg\";\n    public static final String SERVER_DIR = \"D:\\\\itcast\\\\约吧图片服务器\\\\\";\n    public static final String SERVER_IP = \"127.0.0.1\";\n    public static final int SERVER_PORT = 8888;\n\n}\n```\n\n`ServerDemo`\n\n```java\n/**\n      功能点：\n      1.接收多个客户端传输来的图片数据存储到服务器路径：\n      2.响应一个成功的消息给当前客户端。\n */\npublic class ServerDemo {\n    public static void main(String[] args) throws Exception {\n        System.out.println(\"----服务端启动----\");\n        // 1.注册端口: public ServerSocket(int port)\n        ServerSocket serverSocket = new ServerSocket(Constants.SERVER_PORT);\n        // 2.定义一个循环不断的接收客户端的连接请求\n        while(true){\n            // 3.开始等待接收客户端的Socket管道连接。\n            Socket socket = serverSocket.accept();\n            // 4.每接收到一个客户端必须为这个客户端管道分配一个独立的线程来处理与之通信。\n            new ServerReaderThread(socket).start();\n        }\n    }\n}\n\nclass ServerReaderThread extends Thread{\n    private Socket socket ;\n    public ServerReaderThread(Socket socket){\n        this.socket = socket;\n    }\n\n    @Override\n    public void run() {\n        try{\n            // 1.从socket通信管道中得到一个字节输入流读取客户端发来的图片数据！\n            InputStream is = socket.getInputStream();\n            // 2.包装成高级的缓冲字节输入流\n            BufferedInputStream bis = new BufferedInputStream(is);\n            // 3.定义一个缓冲字节输出流通向目标路径（服务端路径）\n            BufferedOutputStream bos =\n                    new BufferedOutputStream(new FileOutputStream(Constants.SERVER_DIR+ UUID.randomUUID().toString()+\".jpg\"));\n            byte[] buffer = new byte[1024];\n            int len ;\n            while((len = bis.read(buffer)) != -1) {\n                bos.write(buffer, 0 ,len);\n            }\n            bos.close();\n            System.out.println(\"服务端接收完毕了！\");\n\n            // 4.响应数据给客户端\n            PrintStream ps = new PrintStream(socket.getOutputStream());\n            ps.println(\"您好，已成功接收您上传的图片！\");\n            ps.flush();\n\n            Thread.sleep(100000); // 等消失发送完毕被客户端接收后死亡！\n        }catch (Exception e){\n            System.out.println(socket.getRemoteSocketAddress()+\"下线了~~~~~~\");\n        }\n    }\n}\n```\n\n## 第四章 BS架构 \n\n之前客户端和服务端都需要自己开发。也就是CS架构。接下来模拟一下BS架构。\n\n客户端：浏览器。（无需开发）\n\n服务端：自己开发。\n\n需求：在浏览器中请求本程序，响应一个网页文字给浏览器显示。\n\n```java\nclass ServerReaderThread extends Thread{\n    private Socket socket;\n    public ServerReaderThread(Socket socket) {\n        this.socket = socket;\n    }\n    @Override\n    public void run() {\n        try {\n            // 响应消息数据给浏览器显示。\n            // 浏览器是基于HTTP协议通信！响应格式必须满足HTTP协议数据格式的要求，浏览器\n            // 才能够识别，否则响应消息浏览器根本不认识。\n            PrintStream ps = new PrintStream(socket.getOutputStream());\n            ps.println(\"HTTP/1.1 200 OK\"); // 响应数据的响应头数据！\n            ps.println(\"Content-Type:text/html;charset=UTF-8\");//响应数据的类型。网页或者文本内容！\n            ps.println(); // 必须换一行\n            // 以下开始响应真实的数据！！\n            ps.println(\"<span style=\'color:green;font-size:100px;\'>Hello, world<span>\");\n\n            Thread.sleep(4000);\n            ps.close();\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n## 第五章 基本通信模型\n\n1. BIO通信模式：同步阻塞式通信。（Socket网络编程也就是上面的通信架构）\n\n   同步：当前线程要自己进行数据的读写操作。（自己去银行取钱）\n\n   异步: 当前线程可以去做其他事情，（委托一小弟拿银行卡到银行取钱，然后给你）\n\n   阻塞： 在数据没有的情况下，还是要继续等待着读。（排队等待）\n\n   非阻塞：在数据没有的情况下，会去做其他事情，一旦有了数据再来获取。（柜台取款，取个号，然后坐在椅子上做其它事，等号广播会通知你办理）\n\n   > * BIO表示同步阻塞式IO，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，当然可以通过线程池机制改善。\n   > * 同步阻塞式性能极差：大量线程，大量阻塞。\n\n2. 伪异步通信：引入了线程池。\n\n   不需要一个客户端一个线程，可以实现1个线程复用来处理很多个客户端！\n\n   这种架构，可以避免系统的死机，因为不会出现很多线程，线程可控。\n\n   但是高并发下性能还是很差：a.线程数量少，数据依然是阻塞的。数据没有来线程还是要等待！\n\n3. NIO表示同步非阻塞IO，服务器实现模式为请求对应一个线程，\n\n   即客户端发送的连接请求都会注册到多路复用器上，\n\n   多路复用器轮询到连接有I/O请求时才启动一个线程进行处理。\n\n   > 1个主线程专门负责接收客户端：\n   >\n   > 1个线程[c1 ,s2 ,c3,c4, ,s2 ,c3,c4,,c3,c4, ,s2 ,c3,c4]轮询所有的客户端，发来了数据才会开启线程处理\n   >\n   > 这种架构性能还可以！！\n   >\n   > **同步**：线程还是要不断的接收客户端连接，以及处理数据。\n   >\n   > **非阻塞**：如果一个管道没有数据，不需要等待，可以轮询下一个管道是否有数据！\n\n4. AIO表示异步非阻塞IO，服务器实现模式为一个有效请求一个线程，\n\n   客户端的I/O请求都是由操作系统先完成IO操作后再通知服务器应用来启动线程进行处理。\n\n   异步：服务端线程接收到了客户端管道以后就交给底层处理它的io通信。\n\n   自己可以做其他事情。\n\n   非阻塞：底层也是客户端有数据才会处理，有了数据以后处理好通知服务器应用来启动线程进行处理。\n\n各种模型应用场景：\n\nBIO适用于连接数目比较小且固定的架构，该方式对服务器资源要求比较高，JDK 1.4以前的唯一选择。\n\nNIO适用于连接数目多且连接比较短（轻操作）的架构，如聊天服务器，编程复杂，\n\nJDK 1.4开始支持。\n\nAIO适用于连接数目多且连接比较长（重操作）的架构，如相册服务器，充分调用操作系统参与并发操作，编程复杂，JDK 1.7开始支持。\n\n# day12-JUnit单元测试、反射、注解、动态代理\n\n## 第一章 单元测试\n\n单元测试是指程序员写的测试代码给自己的类中的方法进行预期正确性的验证。\n\n单元测试一旦写好了这些测试代码，就可以一直使用，可以实现一定程度上的自动化测试。\n\n单元测试一般要使用框架进行。\n什么是框架？\n框架是前人或者一些牛逼的技术公司在实战或者研发中设计的一些优良的设计方案或者成型的 代码功能，作为一个完整的技术体系发行出来称为框架。\n\n框架可以让程序员快速拥有一个强大的解决方案，可以快速的开发功能，提高效率并且直接就有了很好的性能。\n\n单元测试的经典框架：`Junit`\n\n`Junit`是什么\n\n*  `Junit`是Java语言编写的第三方单元测试框架\n*  `Junit`框架的方案可以帮助我们方便且快速的测试我们的代码的正确性。\n\n单元测试概念\n* 单元：在Java中，一个类就是一个单元\n* 单元测试：程序猿用`Junit`编写的一小段代码，用来对某个类中的某个方法进行功能测试或业务逻辑测试。\n\n`Junit`单元测试框架的作用\n\n* 用来对类中的方法功能进行有目的的测试，以保证程序的正确性和稳定性。\n* 能够独立的测试某个方法或者所有方法的预期正确性。\n\nJunit框架的使用步骤:\n\n1. 下载这个框架。（别人设计好的技术体系）\n\n   框架一般是jar包的形式，jar包里面都是class文件。（Java工程的最终形式）class文件就是我们调用的核心代码\n\n   现在不需要大家去官网下载，因为很多知名框架其实IDEA工具早就整合好了，程序员可以直接使用。\n\n   Junit已经被IDEA下载好了，可以直接导入到项目使用的。\n\n2. 直接用Junit测试代码即可\n   * 先模拟业务代码\n   * 写测试类\n     * 测试类的命名规范：以Test开头，以业务类类名结尾，使用驼峰命名法\n     * 业务名称是：UserService\n     * 测试这个业务类的测试类：TestUserService/UserServiceTest\n   * 在测试类中写测试方法\n     * 测试方法的命名规则：以test开头，以业务方法名结尾\n     * 比如被测试业务方法名为：login，那么测试方法名就应该叫：testLogin\n   * 测试方法注意事项\n     * 必须是`public`修饰的，没有返回值，没有参数\n     * 必须使注解`@Test`修饰\n\n3. 如何运行测试方法\n\n   * 选中方法名 --> 右键 --> Run \'测试方法名\'  运行选中的测试方法\n   * 选中测试类名 --> 右键 --> Run \'测试类类名\'  运行测试类中所有测试方法\n\n   * 选中模块名 --> 右键 --> Run \'All Tests\'  运行模块中的所有测试类的所有测试方法\n\n\n​    如何查看测试结果\n   * 绿色：表示测试通过\n   * 红色：表示测试失败，有问题\n\n​    `Junit`常用注解(Junit 4.xxxx版本)\n* `@Test` 测试方法！\n* `@Before`：用来修饰实例方法，该方法会在每一个测试方法执行之前执行一次。\n* `@After`：用来修饰实例方法，该方法会在每一个测试方法执行之后执行一次。\n* `@BeforeClass`：用来静态修饰方法，该方法会在所有测试方法之前只执行一次。\n* `@AfterClass`：用来静态修饰方法，该方法会在所有测试方法之后只执行一次。\n\n开始执行的方法:初始化资源。\n\n执行完之后的方法:释放资源。\n\nJunit常用注解(Junit5.xxxx版本)\n* `@Test` 测试方法！\n* `@BeforeEach`：用来修饰实例方法，该方法会在每一个测试方法执行之前执行一次。\n* `@AfterEach`：用来修饰实例方法，该方法会在每一个测试方法执行之后执行一次。\n* `@BeforeAll`：用来静态修饰方法，该方法会在所有测试方法之前只执行一次。\n* `@AfterAll`：用来静态修饰方法，该方法会在所有测试方法之后只执行一次。\n\n```java\npublic class UserServiceTest {\n    // @Before：用来修饰实例方法，该方法会在每一个测试方法执行之前执行一次。\n    @Before\n    public void before(){\n        System.out.println(\"===before===\");\n    }\n    // @After：用来修饰实例方法，该方法会在每一个测试方法执行之后执行一次。\n    @After\n    public void after(){\n        System.out.println(\"===after===\");\n    }\n\n    // @BeforeClass：用来静态修饰方法，该方法会在所有测试方法之前只执行一次。\n    @BeforeClass\n    public static void beforeClass(){\n        System.out.println(\"===beforeClass===\");\n    }\n\n    // @AfterClass：用来静态修饰方法，该方法会在所有测试方法之后只执行一次。\n    @AfterClass\n    public static void afterClass(){\n        System.out.println(\"===afterClass===\");\n    }\n\n\n    /**\n     * 测试方法的要求：\n     *  1.必须public修饰\n     *  2.没有返回值没有参数\n     *  3. 必须使注解@Test修饰\n     */\n    @Test\n    public void testLogin(){\n        UserService userService = new UserService();\n        String rs = userService.login(\"admin\",\"123456\");\n        // 断言预期结果的正确性。\n        /**\n         * 参数一：测试失败的提示信息。\n         * 参数二：期望值。\n         * 参数三：实际值\n         */\n        // public static void assertEquals(String message, Object expected, Object actual)\n        Assert.assertEquals(\"登录业务功能方法有错误，请检查！\",\"success\",rs);\n    }\n\n    @Test\n    public void testChu(){\n        UserService userService = new UserService();\n        userService.chu(10 , 2);\n    }\n}\n```\n\n## 第二章 反射\n\n### 反射的概述\n\n反射，注解，代理，泛型是Java的高级技术，是以后框架的底层原理必须使用到的技术。\n\n反射：是Java独有的技术。是Java技术显著的特点。\n\n反射是指对于任何一个类，在\"运行的时候\"都可以直接得到这个类全部成分。\n\n- 在运行时,可以直接得到这个类的构造器对象。（Constructor）\n- 在运行时,可以直接得到这个类的成员变量对象。（Field）\n- 在运行时,可以直接得到这个类的成员方法对象。（Method）\n\n反射的核心思想和关键就是得到：编译以后的class文件对象。\n\n反射提供了一个Class类型，就是可以得到编译以后的class类对象。\n\n```java\nHelloWorld.java -> javac -> HelloWorld.class\n\nClass c = HelloWorld.class;\n```\n\n> 反射是工作在运行时的技术，因为只有运行之后才会有class类对象\n>\n> 反射的核心思想和关键就是得到：编译以后的class文件对象\n>\n> 反射是在运行时获取类的字节码文件对象：然后可以解析类中的全部成分\n\n### 获取Class类对象\n\n反射是通过先得到编译以后的Class类对象：字节码文件。然后才可以得到类中的全部成分，进行一些功能设计。\n\n反射为一个类的全部成分都设计了一个类型来代表这个对象：\n\n- `Class `: 字节码文件的类型\n- `Constructor `: 构造器的类型\n- `Field` : 成员变量的类型\n- `Method `: 方法的类型\n\n反射技术的第一步永远是先得到Class类对象:有三种方式获取\n\n1. 类名.class\n\n2. 通过类的对象.getClass()方法\n\n3. Class.forName(\"类的全限名\")\n\n   ```java\n   public static Class<?> forName(String className)\n   ```\n\nClass类下的方法：\n\n- String getSimpleName(); 获得类名字符串：类名\n- String getName();  获得类全名：包名+类名\n- T newInstance() ;  创建Class对象关联类的对象,其实底层也是调用无参数构造器，已经被淘汰。\n\nClass类对象的获取有三种方式：\n\n1. 类名.class。\n2. 通过类的对象.getClass()方法。\n3. Class.forName(\"类的全限名\")。\n4. Class类的方法：\n   * `String getSimpleName();` 获得类名字符串：类名\n   * `String getName(); ` 获得类全名：包名+类名\n\n```java\n// 反射的第一步永远是先得到类的Class文件对象: 字节码文件。\n// 1.类名.class\nClass c1 = Student.class;\nSystem.out.println(c1);\n\n// 2.对象.getClass()\nStudent swk = new Student();\nClass c2 = swk.getClass();\nSystem.out.println(c2);\n\n// 3.Class.forName(\"类的全限名\")\n// 直接去加载该类的class文件。\nClass c3 = Class.forName(\"com.itheima._03反射_获取Class类对象.Student\");\nSystem.out.println(c3);\n\nSystem.out.println(c1.getSimpleName()); // 获取类名本身（简名）\nSystem.out.println(c1.getName()); // 获取类的全限名\n// Student s1 = (Student) c1.newInstance(); // 调用无参数构造器得到对象，被淘汰了！\n```\n\n### 获取Constructor构造器对象\n\n反射中Class类型获取构造器提供了很多的API:\n     1. `Constructor getConstructor(Class... parameterTypes)`\n        根据参数匹配获取某个构造器，只能拿public修饰的构造器，几乎不用！\n     2. `Constructor getDeclaredConstructor(Class... parameterTypes)`\n  根据参数匹配获取某个构造器，只要申明就可以定位，不关心权限修饰符，建议使用！\n     3. `Constructor[] getConstructors()`\n  获取所有的构造器，只能拿public修饰的构造器。几乎不用！！太弱了！\n     4. `Constructor[] getDeclaredConstructors()`\n  获取所有声明的构造器，只要你写我就能拿到，无所谓权限。建议使用！！\n\n\n获取类的全部构造器对象：` Constructor[] getDeclaredConstructors()`\n\n获取所有申明的构造器，只要你写我就能拿到，无所谓权限。建议使用！！\n\n获取类的某个构造器对象：`Constructor getDeclaredConstructor(Class... parameterTypes)`\n\n根据参数匹配获取某个构造器，只要申明就可以定位，不关心权限修饰符，建议使用！\n\n对于类`Student`来说\n\n```java\npublic class Student {\n    private String name ;\n    private int age ;\n\n    private Student(){\n        System.out.println(\"无参数构造器被执行~~~~\");\n    }\n\n    public Student(String name, int age) {\n        System.out.println(\"有参数构造器被执行~~~~\");\n        this.name = name;\n        this.age = age;\n    }\n    //...\n}\n```\n\n获取该类运行时的构造器可以用一下代码实现\n\n```java\npublic class TestStudent {\n    // 1. getConstructors:\n    // 获取全部的构造器：只能获取public修饰的构造器。\n    // Constructor[] getConstructors()\n    @Test\n    public void getConstructors(){\n        // a.反射第一步先得到Class类对象\n        Class c = Student.class ;\n        // b.getConstructors()：定位全部构造器，只能拿public修饰的！\n        Constructor[] cons = c.getConstructors();\n        // c.遍历这些构造器\n        for (Constructor con : cons) {\n            System.out.println(con.getName()+\"===>\"+con.getParameterCount());\n        }\n    }\n\n    // 2.getDeclaredConstructors():\n    // 获取全部的构造器：只要你敢写，这里就能拿到，无所谓权限是否可及。\n    @Test\n    public void getDeclaredConstructors(){\n        // a.反射第一步先得到Class类对象\n        Class c = Student.class ;\n        // b.getDeclaredConstructors()：定位全部构造器，只要申明了就可以拿到\n        Constructor[] cons = c.getDeclaredConstructors();\n        // c.遍历这些构造器\n        for (Constructor con : cons) {\n            System.out.println(con.getName()+\"===>\"+con.getParameterCount());\n        }\n    }\n\n    // 3.getConstructor(Class... parameterTypes)\n    // 获取某个构造器：只能拿public修饰的某个构造器\n    @Test\n    public void getConstructor() throws Exception {\n        // a.反射第一步先得到Class类对象\n        Class c = Student.class ;\n        // b.getConstructor()：定位某个构造器，根据参数匹配，只能拿public修饰的！\n        // Constructor con = c.getConstructor(); // 报错!\n        Constructor con = c.getConstructor(String.class  ,int.class); // 有参数的！!\n        // c.构造器名称和参数\n        System.out.println(con.getName()+\"===>\"+con.getParameterCount());\n    }\n\n    // 4.getDeclaredConstructor\n    // 获取某个构造器：只要你敢写，这里就能拿到，无所谓权限是否可及。\n    @Test\n    public void getDeclaredConstructor() throws Exception {\n        // a.反射第一步先得到Class类对象\n        Class c = Student.class ;\n        // b.getDeclaredConstructor()：定位某个构造器，根据参数匹配，只要申明了就可以获取\n        Constructor con = c.getDeclaredConstructor(); // 可以拿到！定位无参数构造器！\n        //Constructor con = c.getDeclaredConstructor(String.class  , int.class); // 有参数的！!\n        // c.构造器名称和参数\n        System.out.println(con.getName()+\"===>\"+con.getParameterCount());\n    }\n}\n```\n\n获取到构造器之后，可以通过该构造器初始化对象\n\n反射获取`Class`中构造器对象`Constructor`的作用，就是用来初始化并得到类的一个对象返回\n\n`Constructor`的API\n\n* `T newInstance(Object... initargs)`\n\n  创建对象，注入构造器需要的数据\n\n* `void setAccessible(true)`\n\n  修改访问权限，`true`代表暴力攻破权限，`false`表示保留不可访问权限\n\n```java\npublic class TestStudent02 {\n    // 1.调用无参数构造器得到一个类的对象返回。\n    @Test\n    public void createObj01() throws Exception {\n        // a.反射第一步是先得到Class类对象\n        Class c = Student.class ;\n        // b.定位无参数构造器对象\n        Constructor constructor = c.getDeclaredConstructor();\n        // c.暴力打开私有构造器的访问权限\n        constructor.setAccessible(true);\n        // d.通过无参数构造器初始化对象返回\n        Student swk = (Student) constructor.newInstance(); // 最终还是调用无参数构造器的！\n        System.out.println(swk);\n    }\n\n    // 2.调用有参数构造器得到一个类的对象返回。\n    @Test\n    public void createObj02() throws Exception {\n        // a.反射第一步是先得到Class类对象\n        Class c = Student.class ;\n        // b.定位有参数构造器对象\n        Constructor constructor = c.getDeclaredConstructor(String.class , int.class);\n        // c.通过无参数构造器初始化对象返回\n        Student swk = (Student) constructor.newInstance(\"孙悟空\",10000); // 最终还是调用有参数构造器的！\n        System.out.println(swk);\n    }\n}\n```\n\n### 获取Field成员变量对象\n\n* `Field getField(String name);`\n  根据成员变量名获得对应Field对象，只能获得public修饰\n* `Field getDeclaredField(String name);`\n  根据成员变量名获得对应Field对象，只要申明了就可以得到\n* `Field[] getFields();`\n  获得所有的成员变量对应的Field对象，只能获得public的\n* `Field[] getDeclaredFields();`\n  获得所有的成员变量对应的Field对象，只要申明了就可以得到\n\n对于`Dog`类\n\n```java\npublic class Dog {\n    private String name;\n    private int age ;\n    private String color ;\n    public static String school;\n    public static final String SCHOOL_1 = \"宠物学校\";\n\n    public Dog() {\n    }\n    // ...\n}\n```\n\n获取其成员变量\n\n```java\npublic class FieldDemo {\n    /**\n     * 1.获取全部的成员变量。\n     */\n    @Test\n    public void getDeclaredFields(){\n        // a.先获取class类对象\n        Class c = Dog.class;\n        // b.获取全部申明的成员变量对象\n        Field[] fields = c.getDeclaredFields();\n        for (Field field : fields) {\n            System.out.println(field.getName()+\"===>\"+field.getType());\n        }\n    }\n\n    /**\n        2.获取某个成员变量对象\n     */\n    @Test\n    public void getDeclaredField() throws Exception {\n        // a.先获取class类对象\n        Class c = Dog.class;\n        // b.定位某个成员变量对象 :根据名称定位！！\n        Field ageF = c.getDeclaredField(\"age\");\n        System.out.println(ageF.getName()+\"--->\"+ageF.getType());\n    }\n\n}\n```\n\n给成员变量取值和复制\n\n- `void set(Object obj, Object value)`：给对象注入某个成员变量数据\n- `Object get(Object obj)` ：获取对象的成员变量的值。\n- `void setAccessible(true)` ：暴力反射，设置为可以直接访问私有类型的属性。\n- `Class getType()`：获取属性的类型，返回Class对象。\n- `String getName()`：获取属性的名称。\n\n```java\npublic class FieldDemo02 {\n    @Test\n    public void setField() throws Exception {\n        // a.反射的第一步获取Class类对象\n        Class c = Dog.class ;\n        // b.定位name成员变量\n        Field nameF = c.getDeclaredField(\"name\");\n        // c.为这个成员变量赋值！\n        Dog taiDi = new Dog();\n        nameF.setAccessible(true); // 暴力反射！\n        /**\n         * 参数一：被赋值的对象。\n         * 参数二：该成员变量的值。\n         */\n        nameF.set(taiDi , \"勇敢的泰迪\");\n        System.out.println(taiDi);\n\n        // d.获取成员变量的值\n        String value = nameF.get(taiDi)+\"\";\n        System.out.println(value);\n    }\n}\n```\n\n### 获取Method方法\n\n反射获取类的Method方法对象：\n\n* `Method getMethod(String name,Class...args)`：根据方法名和参数类型获得对应的方法对象，只能获得public的\n* `Method getDeclaredMethod(String name,Class...args)`：根据方法名和参数类型获得对应的方法对象，包括private的\n* `Method[] getMethods()`：获得类中的所有成员方法对象，返回数组，只能获得public修饰的且包含父类的\n* `Method[] getDeclaredMethods()`：获得类中的所有成员方法对象，返回数组,只获得本类申明的方法\n\nMethod的方法执行：\n`Object invoke(Object obj, Object... args)`\n\n* 参数一：触发的是哪个对象的方法执行\n* 参数二： args：调用方法时传递的实际参数\n\n`Dog`类\n\n```java\npublic class Dog {\n\n    private String name ;\n\n    public Dog(){\n    }\n\n    public Dog(String name) {\n        this.name = name;\n    }\n\n    public void run(){\n        System.out.println(\"狗跑的贼快~~\");\n    }\n\n    private void eat(){\n        System.out.println(\"狗吃骨头\");\n    }\n\n    private void eat(String name){\n        System.out.println(\"狗吃\"+name);\n    }\n\n    public static void inAddr(){\n        System.out.println(\"在吉山区有一只单身狗！\");\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n```\n\n反射获取方法\n\n```java\npublic class MethodDemo01 {\n    /**\n     * 1.获得类中的所有成员方法对象\n     */\n    @Test\n    public void getDeclaredMethods(){\n        // a.先获取class类对象\n        Class c = Dog.class ;\n        // b.获取全部申明的方法!\n        Method[] methods = c.getDeclaredMethods();\n        // c.遍历这些方法\n        for (Method method : methods) {\n            System.out.println(method.getName()+\"====>\"\n                    + method.getParameterCount()+\"===>\" + method.getReturnType());\n        }\n\n    }\n    /**\n     * 2. 获取某个方法对象\n     */\n    @Test\n    public void getDeclardMethod() throws Exception {\n        // a.先获取class类对象\n        Class c = Dog.class;\n        // b.定位它的某个方法\n        Method run = c.getDeclaredMethod(\"run\");\n        // c.触发方法执行!\n        Dog jinMao = new Dog();\n        Object rs = run.invoke(jinMao); // 触发jinMao对象的run()方法执行！\n        System.out.println(rs);// 如果方法没有返回值，结果是null\n\n        /**\n         * 参数一：方法名称\n         * 参数二：方法的参数个数和类型(可变参数！)\n         */\n        Method eat = c.getDeclaredMethod(\"eat\",String.class);\n        eat.setAccessible(true); // 暴力反射！\n        /**\n         * 参数一：被触发方法所在的对象\n         * 参数二：方法需要的入参值\n         */\n        Object rs1 = eat.invoke(jinMao,\"肉\");\n        System.out.println(rs1);// 如果方法没有返回值，结果是null\n    }\n}\n```\n\n### 暴力攻击集合泛型\n\n* 反射可以破坏面向对象的封装性（暴力反射）\n* 同时可以破坏泛型的约束性\n\n```java\n// 泛型只能工作在编译阶段，运行阶段泛型就消失了，\n// 反射工作在运行时阶段。\nList<Double> scores = new ArrayList<>();\nscores.add(99.3);\nscores.add(199.3);\nscores.add(89.5);\n\n// 拓展：通过反射暴力的注入一个其他类型的数据进去。\n// a.先得到集合对象的Class文件对象\nClass c = scores.getClass();\n// b.从ArrayList的Class对象中定位add方法\nMethod add = c.getDeclaredMethod(\"add\", Object.class);\n// c.触发scores集合对象中的add执行（运行阶段，泛型不能约束了）\nadd.invoke(scores,\"波仔\");\n\nSystem.out.println(scores);\n```\n\n### 反射作用\n\n* 可以在运行时得到一个类的全部成分然后操作。\n* 可以破坏封装性。\n* 也可以破坏泛型的约束性。\n\n更重要的用途是适合：做Java高级框架，基本上主流框架都会基于反射设计一些通用技术功能。\n\nMybatis框架：\n\n你给任何一个对象数据我都可以直接帮你解析字段并且把对应数据保存起来。\n\nStudent (注册，把信息字段都存储起来)\n\nTeacher (注册，把信息字段都存储起来)\n\nManager (注册，把信息字段都存储起来)\n\n我现在用反射技术开发一个框架实现：\n\n任何对象只要给我，我就可以把信息和字段都解析并存储起来。\n\n> 反射适合做通用技术框架的底层实现，在框架的底层源码中我们经常看到反射的影子!!\n\n## 第三章 注解\n\n### 注解的概念\n\n- 用在类上，方法上，成员变量，构造器，...上对成分进行编译约束，标记等操作的。\n- 注解是JDK1.5的新特性。\n- 注解相当一种标记，是类的组成部分，可以给类携带一些额外的信息。\n- 注解是给编译器或JVM看的，编译器或JVM可以根据注解来完成对应的功能。\n\n```java\npublic class AnnotationDemo01 {\n\n}\n\n@FunctionalInterface\ninterface A{\n    void test();\n}\n```\n\n### 自定义注解\n\n自定义注解的格式：\n\n```java\n修饰符 @interface 注解名{\n// 注解属性\n}\n```\n\n> * 自定义注解用@interface关键字。\n> * 使用注解的格式：@注解名称。\n> * 注解默认可以标记很多地方。\n\n```java\n@Book\n@MyTest\npublic class MyBook {\n    @Book\n    @MyTest\n    private MyBook(){\n\n    }\n    @Book\n    @MyTest\n    public static void main(@MyTest String[] args) {\n        @MyTest\n        @Book\n        int age = 12;\n    }\n}\n\n@interface Book{\n}\n\n@interface MyTest{\n\n}\n```\n\n### 注解的属性\n\n属性的格式\n   - 格式1：数据类型 属性名();\n   - 格式2：数据类型 属性名() default 默认值;\n\n属性适用的数据类型:\n\n* 八种基本数据类型`(int, short, long, double, byte, char, boolean, float)`\n* `String，Class`\n* 以上类型的数组形式都支持\n\n> * 注解可以有属性，属性名必须带()\n> * 在用注解的时候，属性必须赋值，除非这个属性有默认值\n\n```java\n@MyBook(name=\"《精通Java基础》\",authors = {\"播仔\",\"Dlei\",\"播妞\"} , price = 99.9 )\npublic class AnnotationDemo01 {\n    @MyBook(name=\"《精通MySQL数据库入门到删库跑路》\",authors = {\"小白\",\"小黑\"} ,\n            price = 19.9 , address = \"北京\")\n    public static void main(String[] args) {\n\n    }\n}\n\n// 自定义一个注解\n@interface MyBook{\n    String name();\n    String[] authors(); // 数组\n    double price();\n    String address() default \"广州\";\n}\n```\n\n### 注解的特殊属性-value\n\n* 如果只有一个value属性的情况下，使用value属性的时候可以省略value名称不写\n* 但是如果有多个属性,且多个属性没有默认值，那么value是不能省略的。\n\n```java\n//@Book(value = \"/deleteBook.action\")\n//@Book(\"/deleteBook.action\")\n//@Book(value = \"/deleteBook.action\" , age = 12)\n//@Book(\"/deleteBook.action\")\n\npublic class AnnotationDemo01{\n}\n\n@interface Book{\n    String value();\n    int age() default 10;\n}\n```\n\n### 元注解\n\n- 元注解是sun公司提供的。\n- 元注解是用在自定义注解上的注解。\n- 元注解是用来注解自定义注解的。\n\n元注解有两个：\n\n* `@Target`:约束自定义注解只能在哪些地方使用，但是默认的注解可以在类，方法，构造器，成员变量，... 使用。\n* `@Retention`：声明注解的生命周期\n  申明注解的作用范围：编译时，运行时。\n\n`@Target`\n\n   * 作用：用来标识注解使用的位置，如果没有使用该注解标识，则自定义的注解可以使用在任意位置。\n   * 可使用的值定义在ElementType枚举类中，常用值如下\n        * TYPE，类，接口\n        * FIELD, 成员变量\n        * METHOD, 成员方法\n        * PARAMETER, 方法参数\n        * CONSTRUCTOR, 构造器\n        * LOCAL_VARIABLE, 局部变量\n\n\n`@Retention`\n\n* 作用：用来标识注解的生命周期(有效存活范围)\n* 可使用的值定义在RetentionPolicy枚举类中，常用值如下\n  * SOURCE：注解只作用在源码阶段，生成的字节码文件中不存在\n  * CLASS：注解作用在源码阶段，字节码文件阶段，运行阶段不存在，默认值.\n  * RUNTIME：注解作用在源码阶段，字节码文件阶段，运行阶段（开发常用）\n\n> * `@Target`约束自定义注解可以标记的范围。\n> * `@Retention`用来约束自定义注解的存活范围。\n\n```java\npublic class AnnotationDemo01{\n    // @MyTest\n    private String name;\n\n    @MyTest\n    public static void main( String[] args) {\n    }\n\n    @MyTest\n    public void testRun(){\n\n    }\n}\n\n//@Target({ElementType.METHOD , ElementType.FIELD}) // 申明只能注解方法和成员变量！\n@Target(ElementType.METHOD ) // 申明只能注解方法\n@Retention(RetentionPolicy.RUNTIME) // 申明注解从写代码一直到运行还在，永远存活！！\n@interface MyTest{\n}\n```\n\n### 注解解析\n\n我们会使用注解注释一个类的成分，那么就设计到要解析出这些注解的数据。开发中经常要知道一个类的成分上面到底有哪些注解，注解有哪些属性数据，这都需要进行注解的解析。\n\n与注解解析相关的接口\n        1. `Annotation`: 注解类型，该类是所有注解的父类。注解都是一个`Annotation`的对象\n     1. `AnnotatedElement`:该接口定义了与注解解析相关的方法\n          2所有的类成分Class, Method , Field , Constructor：都实现了`AnnotatedElement`接口，他们都拥有解析注解的能力：\n       * `Annotation[] getDeclaredAnnotations()`\n          获得当前对象上使用的所有注解，返回注解数组。\n        * `T getDeclaredAnnotation(Class<T> annotationClass)`\n          根据注解类型获得对应注解对象\n        * `boolean isAnnotationPresent(Class<Annotation> annotationClass)`\n          判断当前对象是否使用了指定的注解，如果使用了则返回true，否则false\n\n解析注解数据的原理\n* 注解在哪个成分上，我们就先拿哪个成分对象。\n* 比如注解作用成员方法，则要获得该成员方法对应的Method对象，再来拿上面的注解\n* 比如注解作用在类上，则要该类的Class对象，再来拿上面的注解\n* 比如注解作用在成员变量上，则要获得该成员变量对应的Field对象，再来拿上面的注解\n\n```java\npublic class AnnotationDemo01 {\n    @Test\n    public void parseClass(){\n        // 1.定位Class类对象\n        Class c = BookStore.class ;\n        // 2.判断这个类上是否使用了某个注解\n        if(c.isAnnotationPresent(Book.class)){\n            // 3.获取这个注解对象\n            Book book = (Book) c.getDeclaredAnnotation(Book.class);\n            System.out.println(book.value());\n            System.out.println(book.price());\n            System.out.println(Arrays.toString(book.authors()));\n        }\n    }\n\n    @Test\n    public void parseMethod() throws Exception {\n        // 1.定位Class类对象\n        Class c = BookStore.class ;\n        // 2.定位方法对象\n        Method run = c.getDeclaredMethod(\"run\");\n        // 3.判断这个方法上是否使用了某个注解\n        if(run.isAnnotationPresent(Book.class)){\n            // 3.获取这个注解对象\n            Book book = (Book) run.getDeclaredAnnotation(Book.class);\n            System.out.println(book.value());\n            System.out.println(book.price());\n            System.out.println(Arrays.toString(book.authors()));\n        }\n    }\n}\n\n@Book(value = \"《Java基础到精通》\" , price = 99.5 , authors = {\"波仔\",\"波妞\"})\nclass BookStore{\n    @Book(value = \"《Mybatis持久层框架》\" , price = 199.5 , authors = {\"dlei\",\"播客\"})\n    public void run(){\n    }\n}\n\n@Target({ElementType.TYPE,ElementType.METHOD}) // 类和成员方法上使用\n@Retention(RetentionPolicy.RUNTIME) // 注解永久存活\n@interface Book{\n    String value();\n    double price() default 100;\n    String[] authors();\n}\n\n```\n\n### 注解模拟Junit框架\n\n需求：定义若干个方法，只要加了MyTest注解，就可以被自动触发执行。\n\n分析：\n\n1. 定义一个自定义注解MyTest.\n   只能注解方法。\n   存活范围一直都在。\n2. 定义若干个方法，只要有`@MyTest`注解的方法就能被触发执行！！\n   没有这个注解的方法不能执行\n\n> * 注解和反射可以配合解决一些框架思想\n> * 注解可以实现标记的成分做特殊处理!!\n\n```java\npublic class TestDemo{\n    @MyTest\n    public void test01(){\n        System.out.println(\"===test01===\");\n    }\n\n    public void test02(){\n        System.out.println(\"===test02===\");\n    }\n\n    @MyTest\n    public void test03(){\n        System.out.println(\"===test03===\");\n    }\n\n    @MyTest\n    public void test04(){\n        System.out.println(\"===test04===\");\n    }\n    public static void main(String[] args) throws Exception {\n        TestDemo t = new TestDemo();\n        // 模拟测试类的启动按钮，实现有注解标记的方法就要触发执行。\n        // 1.得到类对象\n        Class c = TestDemo.class;\n        // 2.获取类中全部方法对象\n        Method[] methods = c.getDeclaredMethods();\n        // 3.遍历全部方法，有注解就触发执行\n        for (Method method : methods) {\n            if(method.isAnnotationPresent(MyTest.class)){\n                // 触发此方法执行。\n                method.invoke(t);\n            }\n        }\n    }\n}\n\n@Target(ElementType.METHOD) // 只能注解方法！\n@Retention(RetentionPolicy.RUNTIME) // 一直都活着\n@interface MyTest{\n}\n```\n\n## 第四章 动态代理\n\n* 代理就是被代理者没有能力或者不愿意去完成某件事情，需要找个人代替自己去完成这件事。\n* 动态代理只能为实现接口的实现类对象做代理(也可以只为接口做代理对象)\n\n引入：\n\n* 在业务开发中经常存在很多重复的方法代码，他们前后的代码形式是一样的\n* 只有中间部分代码有差别！！这种时候代码冗余读很高\n* 有没有一种方法可以直接省略前后重复的代码就可以完成功能，这时候用动态代理。\n\n开发步骤：\n\n* 必须有接口。\n* 实现类要实现接口，定义自己的业务功能代码。\n* 为业务功能做代理对象（动态代理，难点）\n\n> * 动态代理非常的灵活，可以为任意的接口实现类对象做代理\n> * 动态代理可以为被代理对象的所有接口的所有方法做代理，\n> * 动态代理可以在不改变方法源码的情况下，实现对方法功能的增强，\n> * 动态代理类不仅简化了编程工作，而且提高了软件系统的可扩展性，因为Java 反射机制可以生成任意类型的动态代理类。\n> * 动态代理同时也提高了开发效率。\n> * 缺点：只能针对接口或者接口的实现类对象做代理对象，普通类是不能做代理对象的。\n\n```java\npublic class ProxyUtil {\n    /**\n     * 做一个被代理的业务对象返回!\n     * @param obj\n     * @return\n     */\n    public static <T> T getProxy(Object obj) {\n        /**\n         参数一：类加载器:负责加载到时候做好的业务代理对象！\n         参数二：被代理业务对象的全部实现的接口，以便代理对象可以知道要为哪些方法做代理。\n         参数三：代理真正的执行方法，也就是代理的处理逻辑！\n         */\n        return (T) Proxy.newProxyInstance(obj.getClass().getClassLoader(),\n                obj.getClass().getInterfaces(), new InvocationHandler() {\n                    @Override\n                    public Object invoke(Object proxy, Method method, Object[] params) throws Throwable {\n                        // proxy : 业务代理对象本身。用不到\n                        // method: 代表当前正在被代理执行的方法！！\n                        // params: 代表的是执行方法的参数，数组的形式!\n                        long startTime = System.currentTimeMillis();\n\n                        // 真正触发真实的方法执行\n                        Object rs = method.invoke(obj,params);\n\n                        long endTime = System.currentTimeMillis();\n                        System.out.println(method.getName()+\"方法耗时：\"+(endTime - startTime)/1000.0+\"s\");\n                        return rs; // 返回方法执行的结果！！\n                    }\n                });\n    }\n}\n```\n\n# day13-XML和Dom4j、装饰模式、工厂模式、commons-io工具包\n\n## 第一章 Dom4j\n\n### Dom4j获取Document对象和根元素\n\ndom4j属于第三方技术，必须导入该框架！！\n\ndom4j安装步骤：\n\n- 去dom4j官网下载dom4j的框架：都是一些jar包。\n- 把dom4j的核心jar包导入到当前项目中去。\n- 在项目中创建一个文件夹：lib\n- 将dom4j-2.1.1.jar文件复制到 lib 文件夹\n- 在jar文件上点右键，选择 Add as Library -> 点击OK\n- 在类中导包使用\n\nJava提供了Class下的一个方法：\n\n`public InputStream getResourceAsStream(String path)`\n\n 用于加载文件成为一个字节输入流返回！！\n\nDocument文档：\n`Element getRootElement()`：获取根元素。\n\n> * 先导入dom4j框架\n> * 创建一个dom4j的解析对象：SAXReader\n> * 通过解析对象把xml文件解析成Document文档对象。\n> * 从Document文档对象中获取我们想要的xml信息。\n\n```java\n// 需求：解析books.xml文件成为一个Document文档树对象，得到根元素对象。\n// 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\nSAXReader saxReader = new SAXReader();\n\n// 2.第一种方式（简单）：通过解析器对象去加载xml文件数据，成为一个Document文档树对象。\n//Document document = saxReader.read(new File(\"Day13Demo/src/books.xml\"));\n\n// 3.第二种方式（代码多点）先把xml文件读成一个字节输入流\n// 这里的“/”是直接去src类路径下寻找文件。\nInputStream is = Dom4JDemo01.class.getResourceAsStream(\"/books.xml\");\nDocument document = saxReader.read(is);\n\nSystem.out.println(document);\n\n// 4.从document文档树对象中提取根元素对象\nElement root = document.getRootElement();\nSystem.out.println(root.getName());\n```\n\nElement元素的API:\n\n- `String getName()`:取元素的名称。\n- `List<Element> elements()`:获取当前元素下的全部子元素（一级）\n- `List<Element> elements(String name)`:获取当前元素下的指定名称的全部子元素（一级）\n- `Element element(String name)`:获取当前元素下的指定名称的某个子元素，默认取第一个（一级）\n\n```java\n// 需求：解析books.xml文件成为一个Document文档树对象，得到根元素对象。\n// 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\nSAXReader saxReader = new SAXReader();\n\n// 2.第一种方式（简单）：通过解析器对象去加载xml文件数据，成为一个Document文档树对象。\nDocument document = saxReader.read(new File(\"Day13Demo/src/books.xml\"));\n\n// 3.获取根元素对象\nElement root = document.getRootElement();\nSystem.out.println(root.getName());\n\n// 4.获取根元素下的全部子元素\nList<Element> sonElements = root.elements();\nfor (Element sonElement : sonElements) {\n    System.out.println(sonElement.getName());\n}\n\nSystem.out.println(\"-------------------\");\n// 5.获取根源下的全部book子元素\nList<Element> sonElements1 = root.elements(\"book\");\nfor (Element sonElement : sonElements1) {\n    System.out.println(sonElement.getName());\n}\nSystem.out.println(\"-------------------\");\n// 6.获取根源下的指定的某个元素\nElement son = root.element(\"user\");\nSystem.out.println(son.getName());\n\n// 默认会提取第一个名称一样的子元素对象返回！\nElement son1 = root.element(\"book\");\nSystem.out.println(son1.attributeValue(\"id\"));\n```\n\n### Dom4j获取属性信息\n\nElement元素的API:\n\n- `List<Attribute> attributes()`: 获取元素的全部属性对象。\n- `Attribute attribute(String name)`:根据名称获取某个元素的属性对象。\n- `String attributeValue(String var1)`:直接获取某个元素的某个属性名称的值。\n\nAttribute对象的API:\n\n- `String getName()`:  获取属性名称。\n- `String getValue()`: 获取属性值。\n\n```java\n// 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\nSAXReader saxReader = new SAXReader();\n\n// 2.第一种方式（简单）：通过解析器对象去加载xml文件数据，成为一个Document文档树对象。\nDocument document = saxReader.read(new File(\"day13/src/books.xml\"));\n\n// 3.获取根元素对象。\nElement root = document.getRootElement();\n\n// 4.获取book子元素\nElement bookEle = root.element(\"book\");\n\n// 5.获取book元素的全部属性对象\nList<Attribute> attributes = bookEle.attributes();\nfor (Attribute attribute : attributes) {\n    System.out.println(attribute.getName()+\"=>\"+attribute.getValue());\n}\n\n// 6.获取Book元素的某个属性对象\nAttribute descAttr = bookEle.attribute(\"desc\");\nSystem.out.println(descAttr.getName()+\"--->\"+descAttr.getValue());\n\n// 7.可以直接获取元素的属性值\nSystem.out.println(bookEle.attributeValue(\"id\"));\nSystem.out.println(bookEle.attributeValue(\"desc\"));\n```\n\n### Dom4j获取XML文本\n\n- `String elementText(String name)`: 可以直接获取当前元素的子元素的文本内容\n- `String elementTextTrim(String name)`: 去前后空格,直接获取当前元素的子元素的文本内容\n- `String getText()`:直接获取当前元素的文本内容。\n- `String getTextTrim()`:去前后空格,直接获取当前元素的文本内容。\n\n```java\n// 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\nSAXReader saxReader = new SAXReader();\n\n// 2.第一种方式（简单）：通过解析器对象去加载xml文件数据，成为一个Document文档树对象。\nDocument document = saxReader.read(new File(\"Day13Demo/src/books.xml\"));\n\n// 3.获取根元素对象。\nElement root = document.getRootElement();\n\n// 4.得到第一个子元素book\nElement bookEle = root.element(\"book\");\n\n// 5.直接拿到当前book元素下的子元素文本值\nSystem.out.println(bookEle.elementText(\"name\"));\nSystem.out.println(bookEle.elementTextTrim(\"name\")); // 去前后空格\nSystem.out.println(bookEle.elementText(\"author\"));\nSystem.out.println(bookEle.elementTextTrim(\"author\")); // 去前后空格\nSystem.out.println(bookEle.elementText(\"sale\"));\nSystem.out.println(bookEle.elementTextTrim(\"sale\")); // 去前后空格\n\n// 6.先获取到子元素对象，再获取该文本值\nElement bookNameEle = bookEle.element(\"name\");\nSystem.out.println(bookNameEle.getText());\nSystem.out.println(bookNameEle.getTextTrim());// 去前后空格\n```\n\n### Dom4j解析案例\n\nContacts.xml 解析成===>` List<Contact>`\n\n首先定义一个`Contact`类\n\n```java\n/**\n <contact id=\"1\" vip=\"true\">\n     <name>潘金莲</name>\n     <gender>女</gender>\n     <email>panpan@itcast.cn</email>\n </contact>\n */\npublic class Contact {\n    private int id ;\n    private boolean vip;\n    private String name ;\n    private char sex ;\n    private String email ;\n\n    public Contact() {\n    }\n\n    public Contact(int id, boolean vip, String name, char sex, String email) {\n        this.id = id;\n        this.vip = vip;\n        this.name = name;\n        this.sex = sex;\n        this.email = email;\n    }\n\n    /**\n     * 获取\n     * @return id\n     */\n    public int getId() {\n        return id;\n    }\n\n    /**\n     * 设置\n     * @param id\n     */\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    /**\n     * 获取\n     * @return vip\n     */\n    public boolean isVip() {\n        return vip;\n    }\n\n    /**\n     * 设置\n     * @param vip\n     */\n    public void setVip(boolean vip) {\n        this.vip = vip;\n    }\n\n    /**\n     * 获取\n     * @return name\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * 设置\n     * @param name\n     */\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    /**\n     * 获取\n     * @return sex\n     */\n    public char getSex() {\n        return sex;\n    }\n\n    /**\n     * 设置\n     * @param sex\n     */\n    public void setSex(char sex) {\n        this.sex = sex;\n    }\n\n    /**\n     * 获取\n     * @return email\n     */\n    public String getEmail() {\n        return email;\n    }\n\n    /**\n     * 设置\n     * @param email\n     */\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String toString() {\n        return \"Contact{id = \" + id + \", vip = \" + vip + \", name = \" + name + \", sex = \" + sex + \", email = \" + email + \"}\";\n    }\n}\n```\n\n解析代码\n\n```java\n// 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\nSAXReader saxReader = new SAXReader();\n\n// 2.第一种方式（简单）：通过解析器对象去加载xml文件数据，成为一个Document文档树对象。\nDocument document = saxReader.read(new File(\"day13/src/Contacts.xml\"));\n\n// 3.获取根元素对象。\nElement root = document.getRootElement();\n\n// 4.获取根元素下的全部子元素\nList<Element> sonElements = root.elements();\n\n// 5.遍历子元素 封装成List集合对象\nList<Contact> contactList = new ArrayList<>();\nif(sonElements != null && sonElements.size() > 0) {\n    for (Element sonElement : sonElements) {\n        Contact contact = new Contact();\n        contact.setId(Integer.valueOf(sonElement.attributeValue(\"id\")));\n        contact.setVip(Boolean.valueOf(sonElement.attributeValue(\"vip\")));\n        contact.setName(sonElement.elementText(\"name\"));\n        contact.setSex(sonElement.elementText(\"gender\").charAt(0));\n        contact.setEmail(sonElement.elementText(\"email\"));\n        contactList.add(contact);\n    }\n}\nSystem.out.println(contactList);\n```\n\n### Xpath表达式\n\n用于检索XML中的某些信息\n\nXPath使用步骤：\n\n1. 导入dom4j框架。（XPath依赖于Dom4j技术,必须先倒入dom4j框架！）\n1. 导入XPath独有的框架包。jaxen-1.1.2.jar\n\nXPath常用API:\n\n- `List<Node> selectNodes(String var1)`：检索出一批节点集合。\n- `Node selectSingleNode(String var1)`：检索出一个节点返回。\n\nXPath提供的四种检索数据的写法：\n\n1. 绝对路径\n2. 相对路径\n3. 全文搜索\n4. 属性查找\n\n> 1. 绝对路径： /根元素/子元素/子元素。\n> 2. 相对路径： ./子元素/子元素。 (.代表了当前元素)\n> 3. 全文搜索：\n>    `//元素`  在全文找这个元素\n>    `//元素1/元素2`  在全文找元素1下面的一级元素2\n>    `//元素1//元素2  `在全文找元素1下面的全部元素2\n> 4. 属性查找。\n>    `//@属性名称`  在全文检索属性对象。\n>    `//元素[@属性名称]`  在全文检索包含该属性的元素对象。\n>    `//元素[@属性名称=值]`  在全文检索包含该属性的元素且属性值为该值的元素对象。\n\n```java\npublic class XPathDemo {\n\n    //  1.绝对路径： /根元素/子元素/子元素。\n    @Test\n    public void path01() throws Exception {\n        // 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\n        SAXReader saxReader = new SAXReader();\n\n        // 2.第二种方式（代码多点）先把xml文件读成一个字节输入流\n        // 这里的“/”是直接去src类路径下寻找文件。\n        InputStream is = Dom4JDemo01.class.getResourceAsStream(\"/Contact.xml\");\n        Document document = saxReader.read(is);\n        // 3.使用绝对路径定位全部的name名称\n        List<Node> nameNodes = document.selectNodes(\"/contactList/contact/name\");\n        for (Node nameNode : nameNodes) {\n            System.out.println(nameNode.getText());\n        }\n    }\n\n    // 2.相对路径： ./子元素/子元素。 (.代表了当前元素)\n    @Test\n    public void path02() throws Exception {\n        // 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\n        SAXReader saxReader = new SAXReader();\n\n        // 2.第二种方式（代码多点）先把xml文件读成一个字节输入流\n        // 这里的“/”是直接去src类路径下寻找文件。\n        InputStream is = Dom4JDemo01.class.getResourceAsStream(\"/Contact.xml\");\n        Document document = saxReader.read(is);\n\n        // 3.得到根元素对象\n        Element root = document.getRootElement();\n\n        // 4.从根元素开始检索\n        // .代表当前根元素对象路径！直接找其下的contact下的name\n        List<Node> nameNodes = root.selectNodes(\"./contact/name\");\n        for (Node nameNode : nameNodes) {\n            System.out.println(nameNode.getText());\n        }\n    }\n\n    // 3.全文搜索：\n    //                \"//元素\"  在全文找这个元素\n    //                \"//元素1/元素2\"  在全文找元素1下面的一级元素2\n    //                \"//元素1//元素2\"  在全文找元素1下面的全部元素2\n    @Test\n    public void path03() throws Exception {\n        // 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\n        SAXReader saxReader = new SAXReader();\n\n        // 2.第二种方式（代码多点）先把xml文件读成一个字节输入流\n        // 这里的“/”是直接去src类路径下寻找文件。\n        InputStream is = Dom4JDemo01.class.getResourceAsStream(\"/Contact.xml\");\n        Document document = saxReader.read(is);\n\n        // 3.//name是指在整个xml文件中检索name节点！\n        List<Node> nameNodes = document.selectNodes(\"//name\");\n        for (Node nameNode : nameNodes) {\n            System.out.println(nameNode.getText());\n        }\n        System.out.println(\"-----------------\");\n        // 4.在全文中检索所有contact下的直接name节点\n        List<Node> nameNodes1 = document.selectNodes(\"//contact/name\");\n        for (Node nameNode : nameNodes1) {\n            System.out.println(nameNode.getText());\n        }\n        System.out.println(\"-----------------\");\n        // 5.在全文中检索所有contact下的所有name节点\n        List<Node> nameNodes2 = document.selectNodes(\"//contact//name\");\n        for (Node nameNode : nameNodes2) {\n            System.out.println(nameNode.getText());\n        }\n    }\n\n    //   4.属性查找。\n    //         //@属性名称  在全文检索属性对象。\n    //          //元素[@属性名称]  在全文检索包含该属性的元素对象。\n    //          //元素[@属性名称=值]  在全文检索包含该属性的元素且属性值为该值的元素对象。\n    @Test\n    public void path04() throws Exception {\n        // 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\n        SAXReader saxReader = new SAXReader();\n\n        // 2.第二种方式（代码多点）先把xml文件读成一个字节输入流\n        // 这里的“/”是直接去src类路径下寻找文件。\n        InputStream is = Dom4JDemo01.class.getResourceAsStream(\"/Contact.xml\");\n        Document document = saxReader.read(is);\n\n        // 3.检索全部属性对象\n        List<Node> attributs = document.selectNodes(\"//@id\");\n        for (Node attribut : attributs) {\n            Attribute attr = (Attribute) attribut;\n            System.out.println(attr.getName() + \"--->\"+attr.getValue());\n        }\n        System.out.println(\"---------------\");\n        // 4.//元素[@属性名称]  在全文检索包含该属性的元素对象\n        List<Node> nodeEles = document.selectNodes(\"//contact[@id]\");\n        for (Node nodeEle : nodeEles) {\n            System.out.println(nodeEle.getName());\n        }\n\n        System.out.println(\"---------------\");\n        // 5. //元素[@属性名称=值]  在全文检索包含该属性的元素且属性值为该值的元素对象。\n        Node nodeEle = document.selectSingleNode(\"//contact[@id=2]\");\n        Element ele = (Element) nodeEle;\n        System.out.println(ele.elementTextTrim(\"name\"));\n    }\n}\n```\n\n### 解析Mybatis的核心配置文件信息\n\n```java\npublic class ParseXMLConfig {\n    @Test\n    public void parseXML() throws Exception {\n        // 1.创建一个解析器对象\n        SAXReader saxReader = new SAXReader();\n        // 2.加载类路径下的xml文件成为一个document文档对象。\n        Document document = saxReader.read(ParseXMLConfig.class.getResourceAsStream(\"/sqlMapConfig.xml\"));\n        // 3.得到根元素对象\n        Element root = document.getRootElement();\n        // 4.获取子元素environments\n        Element environments = root.element(\"environments\");\n        // 5.获取子元素environment\n        Element environment = environments.element(\"environment\");\n        // 6.获取子元素dataSource\n        Element dataSource = environment.element(\"dataSource\");\n        // 7.获取 dataSource下的全部子元素\n        List<Element>  properties = dataSource.elements();\n        // 8.遍历他们\n        for (Element property : properties) {\n            System.out.println(property.attributeValue(\"name\")\n                    +\"==>\"+property.attributeValue(\"value\"));\n        }\n    }\n}\n```\n\n## 第二章 设计模式\n\n### 工厂设计模型\n\n什么是工厂设计模式？\n\n- 工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一\n- 这种类型的设计模式属于创建型模式，它提供了一种创建对象的方式\n- 之前我们创建类对象时, 都是使用`new`对象的形式创建, 除`new`对象方式以外，工厂模式也可以创建对象\n\n工厂设计模式的作用：\n\n* 对象通过工厂的方法创建返回，工厂的方法可以为该对象进行加工和数据注入。\n* 可以实现类与类之间的**解耦操作**\n\n> * 优点：工厂模式的存在可以改变创建对象的方式,解决类与类之间的耦合\n> * 缺点：工厂设计模式多了一个工厂类\n\n`FactoryPattern`\n\n```java\npublic class FactoryPattern {\n    // 生产对象的方法：工厂方法\n    public static Animal createAniaml(){\n//        Dog dog = new Dog();\n//        return dog;\n        return new Cat();\n    }\n}\n```\n\n创建对象可以使用\n\n```java\nAnimal a = FactoryPattern.createAniaml();\na.run();\n```\n\n之后如果需要修改创建的对象，可以直接在`FactoryPattern`中修改对象创建\n\n### 装饰设计模式\n\n装饰模式指的是在不改变原类, 动态地扩展一个类的功能。\n\n思想：是创建一个新类，包装原始类，从而在新类中提升原来类的功能！！\n\n> 装饰模式可以在不改变原类的基础上对类中的方法进行扩展增强,实现原则为:\n>\n> 1. 定义父类\n> 2. 定义原始类，继承父类，定义功能。\n> 3. 定义装饰类，继承父类，包装原始类，增强功能！！\n\n`InputStream`\n\n```java\npublic abstract class InputStream {\n    public abstract void read();\n    public abstract void close();\n}\n```\n\n`FileInputStream`\n\n```java\npublic class FileInputStream extends InputStream {\n    @Override\n    public void read() {\n        System.out.println(\"读取数据~~~\");\n    }\n\n    @Override\n    public void close() {\n        System.out.println(\"关闭流~~~\");\n    }\n}\n\n```\n\n`BufferedInputStream`\n\n```java\npublic class BufferedInputStream extends InputStream {\n    private InputStream is ;\n    public BufferedInputStrem(InputStream is){\n        this.is = is;\n    }\n    @Override\n    public void read() {\n        System.out.println(\"开启高效缓冲读取~\");\n        is.read();\n    }\n\n    @Override\n    public void close() {\n        is.close();\n    }\n}\n```\n\n`Demo`\n\n```java\nInputStream is = new BufferedInputStrem(new FileInputStream());\nis.read();\nis.close();\n```\n\n## 第三章 Commons-io包\n\n什么是`Commons-io`包？\n\ncommons-io是apache开源基金组织提供的一组有关IO操作的类库，可以挺提高IO功能开发的效率。commons-io工具包提供了很多有关io操作的类，见下表：\n\n| 包   | 功能描述 |\n| ----------------------------------- | ------------------------------------------- |\n| org.apache.commons.io | 有关Streams、Readers、Writers、Files的工具类 |\n| org.apache.commons.io.input | 输入流相关的实现类，包含Reader和InputStream |\n| org.apache.commons.io.output | 输出流相关的实现类，包含Writer和OutputStream |\n| org.apache.commons.io.serialization | 序列化相关的类 |\n\n步骤：\n\n 1. 下载commons-io相关jar包；http://commons.apache.org/proper/commons-io/\n 2. 把commons-io-2.6.jar包复制到指定的Module的lib目录中\n 3. 将commons-io-2.6.jar加入到classpath中\n\n> `IOUtils`和`FileUtils`可以方便的复制文件和文件夹\n\n```java\n// 1.完成文件复制！\nIOUtils.copy(new FileInputStream(\"Day13Demo/src/books.xml\"), new FileOutputStream(\"Day13Demo/new.xml\"));\n// 2.完成文件复制到某个文件夹下！\nFileUtils.copyFileToDirectory(new File(\"Day13Demo/src/books.xml\"), new File(\"D:/itcast\"));\n// 3.完成文件夹复制到某个文件夹下！\nFileUtils.copyDirectoryToDirectory(new File(\"D:\\\\itcast\\\\约吧图片服务器\") , new File(\"D:\\\\\"));\n\n//  Java从1.7开始提供了一些nio, 自己也有一行代码完成复制的技术。\nFiles.copy(Paths.get(\"Day13Demo/src/books.xml\")\n        , new FileOutputStream(\"Day13Demo/new11.txt\"));\n```\n\n## 第四章 Base64\n\nBase64是网络上最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法。\n\n在Java 8中，Base64编码已经成为Java类库的标准。\n\nJava 8 内置了 Base64 编码的编码器和解码器。\n\nBase64工具类提供了一套静态方法获取下面三种BASE64编解码器：\n\n- **基本：**输出被映射到一组字符A-Za-z0-9+/，编码不添加任何行标，输出的解码仅支持A-Za-z0-9+/。\n- **URL：**输出映射到一组字符A-Za-z0-9+_，输出是URL和文件。\n- **MIME：**输出隐射到MIME友好格式。输出每行不超过76字符，并且使用\'\\r\'并跟随\'\\n\'作为分割。编码输出最后没有行分割。\n\n**内嵌类**\n\n| 序号 | 内嵌类 & 描述                                                |\n| :--- | :----------------------------------------------------------- |\n| 1    | **static class Base64.Decoder**该类实现一个解码器用于，使用 Base64 编码来解码字节数据。 |\n| 2    | **static class Base64.Encoder**该类实现一个编码器，使用 Base64 编码来编码字节数据 |\n\n**方法**\n\n| 序号 | 方法名 & 描述                                                |\n| :--- | :----------------------------------------------------------- |\n| 1    | **static Base64.Decoder getDecoder()**返回一个 Base64.Decoder ，解码使用基本型 base64 编码方案。 |\n| 2    | **static Base64.Encoder getEncoder()**返回一个 Base64.Encoder ，编码使用基本型 base64 编码方案。 |\n| 3    | **static Base64.Decoder getMimeDecoder()**返回一个 Base64.Decoder ，解码使用 MIME 型 base64 编码方案。 |\n| 4    | **static Base64.Encoder getMimeEncoder()**返回一个 Base64.Encoder ，编码使用 MIME 型 base64 编码方案。 |\n| 5    | **static Base64.Encoder getMimeEncoder(int lineLength, byte[] lineSeparator)**返回一个 Base64.Encoder ，编码使用 MIME 型 base64 编码方案，可以通过参数指定每行的长度及行的分隔符。 |\n| 6    | **static Base64.Decoder getUrlDecoder()**返回一个 Base64.Decoder ，解码使用 URL 和文件名安全型 base64 编码方案。 |\n| 7    | **static Base64.Encoder getUrlEncoder()**返回一个 Base64.Encoder ，编码使用 URL 和文件名安全型 base64 编码方案。 |\n\n> **注意：**Base64 类的很多方法从 **java.lang.Object** 类继承\n\n```java\ntry {\n    // 1-1.基本编码后结果。普通文本的编码\n    String rs1 = Base64.getEncoder().encodeToString(\"黑马程序员\".getBytes());\n    System.out.println(rs1); // 6buR6ams56iL5bqP5ZGY\n\n    // 1-2.基本解码后结果。普通文本的解码\n    byte[] buffer = Base64.getDecoder().decode(rs1);\n    System.out.println(new String(buffer));\n\n    // 2-1.URL编码\n    String rs2 = Base64.getUrlEncoder().encodeToString(\"?loginName=黑马&passWord=123456\".getBytes());\n    System.out.println(rs2);\n    // 2-2 URL解码\n    byte[] buffer2 = Base64.getUrlDecoder().decode(rs2);\n    System.out.println(new String(buffer2));\n\n    // 3-1 MIME编码\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < 10; ++i) {\n        sb.append(UUID.randomUUID().toString());\n    }\n\n    String rs3 = Base64.getMimeEncoder().encodeToString(sb.toString().getBytes());\n    System.out.println(rs3);\n\n    // 3-2 MIME解码\n    byte[] buffer3 = Base64.getMimeDecoder().decode(rs3);\n    System.out.println(new String(buffer3));\n}catch(Exception e){\n    System.out.println(\"Error :\" + e.getMessage());\n}\n```\n\n',1,'',0,0,1,'2022-07-14 20:52:14','2022-07-15 13:18:56'),(59,2,192,'http://47.108.219.199:81/articles/7443853ef88159148435496c56b747c8.png','test-latex','行内公式：$a=\\frac{1}{2}$\n\n跨行公式\n\n$$\na=\\frac{1}{2}\\sum_{i=1}^n x_i\n$$',1,'',0,0,1,'2022-07-15 12:17:47','2022-07-15 19:05:18'),(60,2,190,'http://47.108.219.199:81/articles/7cac4683d77feefeb8285f6af47baeb9.png','AlexNet基于MNIST数据集的代码实现','\n鉴于原论文中使用的数据集过于庞大，分类过多，目前手头的设备运行是在过于缓慢，折中考虑尝试使用MNIST的数据集实现AlexNet\n\n\n```python\nimport torch, torchvision\nimport torchvision.transforms as transforms\nimport torch.nn as nn\nfrom torch import optim\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport copy\n```\n\n\n```python\n# 超参数设置\nEPOCH = 10\nBATCH_SIZE = 64\nLR = 0.01\n```\n\n\n```python\ntransform = transforms.ToTensor()\n```\n\n## 数据集\n\n通过torchvision下载数据集\n\n\n```python\ntrainset = torchvision.datasets.MNIST(root=\'../data\', train=True, download=True, transform=transform)\n\ntestset = torchvision.datasets.MNIST(root=\'../data\', train=True, transform=transform)\n```\n\n    C:\\Users\\Administrator\\AppData\\Roaming\\Python\\Python36\\site-packages\\torchvision\\datasets\\mnist.py:498: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ..\\torch\\csrc\\utils\\tensor_numpy.cpp:180.)\n      return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)\n\n```python\ntrainloader = torch.utils.data.DataLoader(trainset, batch_size=BATCH_SIZE, shuffle=True)\n\ntestloader = torch.utils.data.DataLoader(testset, batch_size=BATCH_SIZE, shuffle=False)\n```\n\n绘图查看\n\n\n```python\nplt.imshow(trainset[4][0][0], cmap=\'gray\')\n```\n\n\n    <matplotlib.image.AxesImage at 0x1a3c510cc18>\n\n\n![png](https://www.madao33.com/media/AlexNet基于MNIST数据集的代码实现/AlexNet_MNIST_7_1.png)\n 查看数据格式\n\n```python\ntrainset[0][0].shape\n```\n\n\n    torch.Size([1, 28, 28])\n\n为了通用，设置一个device，如果有显卡并配置好了cuda环境，那么就选择为`cuda`，否则为`cpu`\n\n\n```python\ndevice = torch.device(\'cuda\' if torch.cuda.is_available() else \'cpu\')\ndevice\n```\n\n\n    device(type=\'cpu\')\n\n\n\n## AlexNet\n\n同样地，仿照AlexNet，设置了五个卷积层和三个全连接层构建一个深度卷积神经网络，网络的定义是重写`nn.Module`实现的，卷积层和全连接层之间将数据通过view拉平[<sup>[1]</sup>](#ref-1)\n\n\n```python\nclass AlexNet(nn.Module):\n\n    def __init__(self,width_mult=1):\n\n        super(AlexNet, self).__init__()\n\n        self.layer1 = nn.Sequential(\n            nn.Conv2d(1, 32, kernel_size=3, padding=1), # 32*28*28\n            nn.MaxPool2d(kernel_size=2, stride=2), # 32*14*14\n            nn.ReLU(inplace=True),\n            )\n\n        self.layer2 = nn.Sequential(\n            nn.Conv2d(32, 64, kernel_size=3, padding=1), # 64*14*14\n            nn.MaxPool2d(kernel_size=2, stride=2), # 64*7*7\n            nn.ReLU(inplace=True),\n            )\n\n        self.layer3 = nn.Sequential(\n            nn.Conv2d(64, 128, kernel_size=3, padding=1), # 128*7*7\n            )\n\n        self.layer4 = nn.Sequential(\n            nn.Conv2d(128, 256, kernel_size=3, padding=1), # 256*7*7\n            )\n\n \n		self.layer5 = nn.Sequential(\n\n            nn.Conv2d(256, 256, kernel_size=3, padding=1), # 256*7*7\n            nn.MaxPool2d(kernel_size=3, stride=2), # 256*3*3\n            nn.ReLU(inplace=True),\n            )\n    \n        self.fc1 = nn.Linear(256*3*3, 1024)\n        self.fc2 = nn.Linear(1024, 512)\n        self.fc3 = nn.Linear(512, 10)\n\n\n\n    def forward(self, x):\n\n        x = self.layer1(x)\n        x = self.layer2(x)\n        x = self.layer3(x)\n        x = self.layer4(x)\n        x = self.layer5(x)\n        x = x.view(-1, 256*3*3)\n        x = self.fc1(x)\n        x = self.fc2(x)\n        x = self.fc3(x)\n        return x\n```\n\n设置超参数\n\n\n```python\nEPOCH = 5\nBATCH_SIZE = 128\nLR = 0.01\n```\n\n\n```python\ndef validate(model, data):\n    total = 0\n    correct = 0\n    for i, (images, labels) in enumerate(data):\n        images = images.to(device)\n        x = net(images)\n        value, pred = torch.max(x,1)\n        pred = pred.data.cpu()\n        total += x.size(0)\n        correct += torch.sum(pred == labels)\n\n    return correct*100./total\n```\n\n初始化模型并将模型放到device上，如果有显卡就在`cuda`上，如果没有，那么在`cpu`\n\n如果是纯`cpu`训练，速度十分感人\n\n\n```python\nnet = AlexNet().to(device)\n```\n\n\n```python\n# alexnet训练\ndef train():\n    # 定义损失函数为交叉熵损失，优化方法为SGD\n    criterion = nn.CrossEntropyLoss() \n    optimizer = optim.SGD(net.parameters(), lr=LR, momentum=0.9)\n    max_accuracy=0\n    accuracies=[]\n    for epoch in range(EPOCH):\n        for i, (images,labels) in enumerate(trainloader):\n            images = images.to(device)\n            labels = labels.to(device)\n            optimizer.zero_grad()\n            outputs = net(images)\n            loss = criterion(outputs, labels)\n            loss_item = loss.item()\n            loss.backward()\n            optimizer.step()\n\n        accuracy = float(validate(criterion, testloader))\n        accuracies.append(accuracy)\n        print(\"Epoch %d accuracy: %f loss: %f\" % (epoch, accuracy, loss_item))\n        if accuracy > max_accuracy:\n            best_model = copy.deepcopy(criterion)\n            max_accuracy = accuracy\n            print(\"Saving Best Model with Accuracy: \", accuracy)\n        print(\'Epoch:\', epoch+1, \"Accuracy :\", accuracy, \'%\')\n    plt.plot(accuracies)\n    return best_model\n```\n\n这一行代码是调用之前的train函数训练神经网络，初始化设置的epoch是5，大概也可以训练一个准确度较高的模型\n\n\n```python\nalexnet = train()\n```\n\n为了防止断点或者bug导致jupyter重启之后重新训练模型，这一点经常遇到，本代码是在google的colab上训练的，为了保存训练的结果，还是将模型保存为pkl文件，这样本地就不用训练，直接调用训练之后的模型，之前尝试直接保存整个模型，但是会有莫名其妙的bug，暂时没有解决。这里尝试了另一种保存模型的方式[<sup>[2]</sup>](#ref-2)，直接保存模型的参数，然后将参数传递到初始化的模型架构中，如下所示：\n\n\n```python\n# 保存模型参数\ntorch.save(alexnet, \'../models/alexnet.pkl\')\n```\n\n\n```python\n# 加载模型\nalexnet = AlexNet()\nalexnet.load_state_dict(torch.load(\'../models/alexnet.pkl\'))\n```\n\n\n    AlexNet(\n      (layer1): Sequential(\n        (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n        (2): ReLU(inplace=True)\n      )\n      (layer2): Sequential(\n        (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n        (2): ReLU(inplace=True)\n      )\n      (layer3): Sequential(\n        (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      )\n      (layer4): Sequential(\n        (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      )\n      (layer5): Sequential(\n        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        (1): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)\n        (2): ReLU(inplace=True)\n      )\n      (fc1): Linear(in_features=2304, out_features=1024, bias=True)\n      (fc2): Linear(in_features=1024, out_features=512, bias=True)\n      (fc3): Linear(in_features=512, out_features=10, bias=True)\n    )\n\n为直观的查看效果，选择一组测试集图片查看分类效果\n\n\n```python\nplt.figure(figsize=(14, 14))\nfor i, (image, label) in enumerate(testloader):\n    predict = torch.argmax(alexnet(image), axis=1)\n    print((predict == label).sum()/label.shape[0])\n    for j in range(image.shape[0]):\n        plt.subplot(8, 8, j+1)\n        plt.imshow(image[j, 0], cmap=\'gray\')\n        plt.title(predict[j].item())\n        plt.axis(\'off\')\n    if i==1:\n        break\n```\n\n```shell\ntensor(1.)\n```\n\n![](http://www.madao33.com/media/AlexNet基于MNIST数据集的代码实现/AlexNet_MNIST_25_1.png)\n\n## 参考文献\n\n<div id=\"ref-1\"></div>\n\n- [1] [Sowndharya206/alexnet](https://github.com/Sowndharya206/alexnet)\n\n<div id=\"ref-2\"></div>\n\n- [2] [SAVE AND LOAD THE MODEL](https://pytorch.org/tutorials/beginner/basics/saveloadrun_tutorial.html)',1,'',0,0,1,'2022-07-15 13:32:52',NULL);
/*!40000 ALTER TABLE `tb_article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tb_article_tag`
--

DROP TABLE IF EXISTS `tb_article_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tb_article_tag` (
  `id` int NOT NULL AUTO_INCREMENT,
  `article_id` int NOT NULL COMMENT '文章id',
  `tag_id` int NOT NULL COMMENT '标签id',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `fk_article_tag_1` (`article_id`) USING BTREE,
  KEY `fk_article_tag_2` (`tag_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=874 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tb_article_tag`
--

LOCK TABLES `tb_article_tag` WRITE;
/*!40000 ALTER TABLE `tb_article_tag` DISABLE KEYS */;
INSERT INTO `tb_article_tag` VALUES (857,54,29),(858,56,32),(859,56,33),(865,57,34),(866,57,35),(867,57,36),(869,58,37),(870,60,34),(871,60,35),(872,60,39),(873,59,38);
/*!40000 ALTER TABLE `tb_article_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tb_category`
--

DROP TABLE IF EXISTS `tb_category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tb_category` (
  `id` int NOT NULL AUTO_INCREMENT,
  `category_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '分类名',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=193 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tb_category`
--

LOCK TABLES `tb_category` WRITE;
/*!40000 ALTER TABLE `tb_category` DISABLE KEYS */;
INSERT INTO `tb_category` VALUES (187,'测试分类','2022-01-24 23:33:56',NULL),(189,'强化学习','2022-07-13 17:00:33',NULL),(190,'机器视觉','2022-07-13 22:43:33',NULL),(191,'Java基础','2022-07-14 20:52:14','2022-07-14 20:55:35'),(192,'test','2022-07-15 12:17:47',NULL);
/*!40000 ALTER TABLE `tb_category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tb_chat_record`
--

DROP TABLE IF EXISTS `tb_chat_record`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tb_chat_record` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `user_id` int DEFAULT NULL COMMENT '用户id',
  `nickname` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '昵称',
  `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '头像',
  `content` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '聊天内容',
  `ip_address` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT 'ip地址',
  `ip_source` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT 'ip来源',
  `type` tinyint NOT NULL COMMENT '类型',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2990 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tb_chat_record`
--

LOCK TABLES `tb_chat_record` WRITE;
/*!40000 ALTER TABLE `tb_chat_record` DISABLE KEYS */;
/*!40000 ALTER TABLE `tb_chat_record` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tb_comment`
--

DROP TABLE IF EXISTS `tb_comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tb_comment` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `user_id` int NOT NULL COMMENT '评论用户Id',
  `topic_id` int DEFAULT NULL COMMENT '评论主题id',
  `comment_content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '评论内容',
  `reply_user_id` int DEFAULT NULL COMMENT '回复用户id',
  `parent_id` int DEFAULT NULL COMMENT '父评论id',
  `type` tinyint NOT NULL COMMENT '评论类型 1.文章 2.友链 3.说说',
  `is_delete` tinyint NOT NULL DEFAULT '0' COMMENT '是否删除  0否 1是',
  `is_review` tinyint(1) NOT NULL DEFAULT '1' COMMENT '是否审核',
  `create_time` datetime NOT NULL COMMENT '评论时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `fk_comment_user` (`user_id`) USING BTREE,
  KEY `fk_comment_parent` (`parent_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=733 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tb_comment`
--

LOCK TABLES `tb_comment` WRITE;
/*!40000 ALTER TABLE `tb_comment` DISABLE KEYS */;
INSERT INTO `tb_comment` VALUES (732,2,50,'**数学公式显示还是有一点瑕疵，待修复',NULL,NULL,3,0,1,'2022-07-15 19:43:20',NULL);
/*!40000 ALTER TABLE `tb_comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tb_friend_link`
--

DROP TABLE IF EXISTS `tb_friend_link`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tb_friend_link` (
  `id` int NOT NULL AUTO_INCREMENT,
  `link_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '链接名',
  `link_avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '链接头像',
  `link_address` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '链接地址',
  `link_intro` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '链接介绍',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `fk_friend_link_user` (`link_name`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tb_friend_link`
--

LOCK TABLES `tb_friend_link` WRITE;
/*!40000 ALTER TABLE `tb_friend_link` DISABLE KEYS */;
/*!40000 ALTER TABLE `tb_friend_link` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tb_menu`
--

DROP TABLE IF EXISTS `tb_menu`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tb_menu` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '菜单名',
  `path` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '菜单路径',
  `component` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '组件',
  `icon` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '菜单icon',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `order_num` tinyint(1) NOT NULL COMMENT '排序',
  `parent_id` int DEFAULT NULL COMMENT '父id',
  `is_hidden` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否隐藏  0否1是',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=219 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tb_menu`
--

LOCK TABLES `tb_menu` WRITE;
/*!40000 ALTER TABLE `tb_menu` DISABLE KEYS */;
INSERT INTO `tb_menu` VALUES (1,'首页','/','/home/Home.vue','el-icon-myshouye','2021-01-26 17:06:51','2021-01-26 17:06:53',1,NULL,0),(2,'文章管理','/article-submenu','Layout','el-icon-mywenzhang-copy','2021-01-25 20:43:07','2021-01-25 20:43:09',2,NULL,0),(3,'消息管理','/message-submenu','Layout','el-icon-myxiaoxi','2021-01-25 20:44:17','2021-01-25 20:44:20',3,NULL,0),(4,'系统管理','/system-submenu','Layout','el-icon-myshezhi','2021-01-25 20:45:57','2021-01-25 20:45:59',5,NULL,0),(5,'个人中心','/setting','/setting/Setting.vue','el-icon-myuser','2021-01-26 17:22:38','2021-01-26 17:22:41',7,NULL,0),(6,'发布文章','/articles','/article/Article.vue','el-icon-myfabiaowenzhang','2021-01-26 14:30:48','2021-01-26 14:30:51',1,2,0),(7,'修改文章','/articles/*','/article/Article.vue','el-icon-myfabiaowenzhang','2021-01-26 14:31:32','2021-01-26 14:31:34',2,2,1),(8,'文章列表','/article-list','/article/ArticleList.vue','el-icon-mywenzhangliebiao','2021-01-26 14:32:13','2021-01-26 14:32:16',3,2,0),(9,'分类管理','/categories','/category/Category.vue','el-icon-myfenlei','2021-01-26 14:33:42','2021-01-26 14:33:43',4,2,0),(10,'标签管理','/tags','/tag/Tag.vue','el-icon-myicontag','2021-01-26 14:34:33','2021-01-26 14:34:36',5,2,0),(11,'评论管理','/comments','/comment/Comment.vue','el-icon-mypinglunzu','2021-01-26 14:35:31','2021-01-26 14:35:34',1,3,0),(12,'留言管理','/messages','/message/Message.vue','el-icon-myliuyan','2021-01-26 14:36:09','2021-01-26 14:36:13',2,3,0),(13,'用户列表','/users','/user/User.vue','el-icon-myyonghuliebiao','2021-01-26 14:38:09','2021-01-26 14:38:12',1,202,0),(14,'角色管理','/roles','/role/Role.vue','el-icon-myjiaoseliebiao','2021-01-26 14:39:01','2021-01-26 14:39:03',2,213,0),(15,'接口管理','/resources','/resource/Resource.vue','el-icon-myjiekouguanli','2021-01-26 14:40:14','2021-08-07 20:00:28',2,213,0),(16,'菜单管理','/menus','/menu/Menu.vue','el-icon-mycaidan','2021-01-26 14:40:54','2021-08-07 10:18:49',2,213,0),(17,'友链管理','/links','/friendLink/FriendLink.vue','el-icon-mydashujukeshihuaico-','2021-01-26 14:41:35','2021-01-26 14:41:37',3,4,0),(18,'关于我','/about','/about/About.vue','el-icon-myguanyuwo','2021-01-26 14:42:05','2021-01-26 14:42:10',4,4,0),(19,'日志管理','/log-submenu','Layout','el-icon-myguanyuwo','2021-01-31 21:33:56','2021-01-31 21:33:59',6,NULL,0),(20,'操作日志','/operation/log','/log/Operation.vue','el-icon-myguanyuwo','2021-01-31 15:53:21','2021-01-31 15:53:25',1,19,0),(201,'在线用户','/online/users','/user/Online.vue','el-icon-myyonghuliebiao','2021-02-05 14:59:51','2021-02-05 14:59:53',7,202,0),(202,'用户管理','/users-submenu','Layout','el-icon-myyonghuliebiao','2021-02-06 23:44:59','2021-02-06 23:45:03',4,NULL,0),(205,'相册管理','/album-submenu','Layout','el-icon-myimage-fill','2021-08-03 15:10:54','2021-08-07 20:02:06',5,NULL,0),(206,'相册列表','/albums','/album/Album.vue','el-icon-myzhaopian','2021-08-03 20:29:19','2021-08-04 11:45:47',1,205,0),(208,'照片管理','/albums/:albumId','/album/Photo.vue','el-icon-myzhaopian','2021-08-03 21:37:47','2021-08-05 10:24:08',1,205,1),(209,'页面管理','/pages','/page/Page.vue','el-icon-myyemianpeizhi','2021-08-04 11:36:27','2021-08-07 20:01:26',2,4,0),(210,'照片回收站','/photos/delete','/album/Delete.vue','el-icon-myhuishouzhan','2021-08-05 13:55:19',NULL,3,205,1),(213,'权限管理','/permission-submenu','Layout','el-icon-mydaohanglantubiao_quanxianguanli','2021-08-07 19:56:55','2021-08-07 19:59:40',4,NULL,0),(214,'网站管理','/website','/website/Website.vue','el-icon-myxitong','2021-08-07 20:06:41',NULL,1,4,0),(215,'说说管理','/talk-submenu','Layout','el-icon-mypinglun','2022-01-23 20:17:59','2022-01-23 20:38:06',5,NULL,0),(216,'发布说说','/talks','/talk/Talk.vue','el-icon-myfabusekuai','2022-01-23 20:18:43','2022-01-23 20:38:19',1,215,0),(217,'说说列表','/talk-list','/talk/TalkList.vue','el-icon-myiconfontdongtaidianji','2022-01-23 23:28:24','2022-01-24 00:02:48',2,215,0),(218,'修改说说','/talks/:talkId','/talk/Talk.vue','el-icon-myshouye','2022-01-24 00:10:44',NULL,3,215,1);
/*!40000 ALTER TABLE `tb_menu` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tb_message`
--

DROP TABLE IF EXISTS `tb_message`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tb_message` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键id',
  `nickname` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '昵称',
  `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '头像',
  `message_content` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '留言内容',
  `ip_address` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '用户ip',
  `ip_source` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '用户地址',
  `time` tinyint(1) DEFAULT NULL COMMENT '弹幕速度',
  `is_review` tinyint NOT NULL DEFAULT '1' COMMENT '是否审核',
  `create_time` datetime NOT NULL COMMENT '发布时间',
  `update_time` datetime DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=3940 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tb_message`
--

LOCK TABLES `tb_message` WRITE;
/*!40000 ALTER TABLE `tb_message` DISABLE KEYS */;
/*!40000 ALTER TABLE `tb_message` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tb_operation_log`
--

DROP TABLE IF EXISTS `tb_operation_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tb_operation_log` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键id',
  `opt_module` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作模块',
  `opt_type` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作类型',
  `opt_url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作url',
  `opt_method` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作方法',
  `opt_desc` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作描述',
  `request_param` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '请求参数',
  `request_method` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '请求方式',
  `response_data` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '返回数据',
  `user_id` int NOT NULL COMMENT '用户id',
  `nickname` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '用户昵称',
  `ip_address` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作ip',
  `ip_source` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作地址',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1123 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tb_operation_log`
--

LOCK TABLES `tb_operation_log` WRITE;
/*!40000 ALTER TABLE `tb_operation_log` DISABLE KEYS */;
INSERT INTO `tb_operation_log` VALUES (1083,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"恭喜你成功运行博客，开启你的文章之旅吧。\",\"articleCover\":\"https://static.talkxj.com/articles/3dffb2fcbd541886616ab54c92570de3.jpg\",\"articleTitle\":\"测试文章\",\"categoryName\":\"测试分类\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[\"测试标签\"],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','127.0.0.1','','2022-01-24 23:33:57',NULL),(1084,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"# chap4-The-Cross-Entroy-Method\\n\\n大部分的知识参照于这篇[cross-entropy method simple intro](https://people.smp.uq.edu.au/DirkKroese/ps/eormsCE.pdf)\\n\\n`Cross Entropy Method(CE method)`是一种进化策略算法，它虽然也是基于交叉熵，但并不是我们熟知的监督学习中的交叉熵方法。这个算法的核心是一个参数优化的过程。CE method已经成功应用于不同范围的估计和优化问题，包括缓冲区分配、信号检测、DNA排序、交通控制以及神经网络和强化学习等领域。\\n\\ncross-entropy方法的基础是重要性采样，有以下公式表示：\\n$$\\n\\\\mathbb{E}_{x \\\\sim p{x}}[H(x)]=\\\\int_x p(x)H(x)dx=\\\\int_x q(x)\\\\frac{p(x)}{q(x)}H(x)dx=\\\\mathbb{E}_{x \\\\sim q(x)} \\\\bigg[\\\\frac{p(x)}{q(x)}H(x) \\\\bigg]\\n$$\\n在强化学习领域，$H(x)$ 是一些策略设定的奖励函数，$x,p(x)$是所有可能的策略的分布。我们不想通过搜索所有可能的策略来最大化奖励，而是希望找到一种方法 $q(x)$ 来近似 $p(x)H(x)$，反复的迭代以最小化两个概率分布之间的距离。两个概率分布之间的距离有Kullback-Leibler(KL)散度计算：\\n$$\\nKL(p_1(x)||p_2(x))=\\\\mathbb{E}_{x \\\\sim p_1(x)} \\\\log \\\\frac{p_1(x)}{p_2(x)} =\\\\mathbb{E}_{x \\\\sim p_1(x)}[\\\\log p_1(x)] - \\\\mathbb{E}_{x \\\\sim p_1(x)}[\\\\log p_2(x)]\\n$$\\nKL散度中的第一项称为熵，它不依赖于 $p_2(x)$，因此在最小化过程中可以忽略它。第二项叫做交叉熵，这是深度学习中是非常常见的优化目标。结合这两个公式，我们可以得到一个迭代算法，它从 $q_0(x)=p(x)$ 开始，每一步都有所改进。这是 $p(x)H(x)$  的近似值，有一个更新公式：\\n$$\\nq_{i+1}(x) = \\\\mathop{\\\\arg\\\\min}_{q_{i+1}(x)}-\\\\mathbb{E}_{x \\\\sim q_i(x)} \\\\frac{p(x)}{q_i(x)} H(x) \\\\log q_{i+1}(x)\\n$$\\n这是一种通用的交叉熵方法，可以在我们的RL案例中大大简化。首先，我们将 $H(x)$ 替换为一个指示函数，当奖励高于阈值时为1，当奖励低于阈值时为0。我们的策略更新如下所示：\\n$$\\n\\\\pi_{i+1}(\\\\alpha|s) = \\\\mathop{\\\\arg \\\\min}_{\\\\pi_{i+1}} - \\\\mathbb{E}_{\\\\mathrm{z} \\\\sim pi_i(\\\\alpha | \\\\mathrm{s})} [R(\\\\mathrm{z}\\\\geq \\\\psi_i)] \\\\log \\\\pi_{i+1}(\\\\alpha|\\\\mathrm{s})\\n$$\\n严格地说，上述公式忽略了规范化项，但在没有规范化项的情况下，它在实践中仍然有效。因此，方法非常明确：我们使用当前策略（从一些随机初始策略开始）对事件进行采样，并最小化最成功的样本负对数可能性。\\n\\n上述代码的运行结果，在tensorboard查看的效果如下：\\n\\nloss\\n\\n![](imgs/loss.svg)\\n\\nreward_bound\\n\\n![](imgs/reward_bound.svg)\\n\\nreward_mean\\n\\n![](imgs/reward_mean.svg)\\n\\n\",\"articleCover\":\"http://47.108.219.199:81/articles/38f824b33a076ce0f642d48d4d6aab6b.png\",\"articleTitle\":\"《动手学强化学习》-chap4-交叉熵方法\",\"categoryName\":\"强化学习\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[\"强化学习\",\"交叉熵方法\"],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'madao33','127.0.0.1','','2022-07-13 17:00:33',NULL),(1085,'博客信息模块','修改','/admin/about','com.minzheng.blog.controller.BlogInfoController.updateAbout','修改关于我信息','[{\"aboutContent\":\"Hello, world~~\\n\\n这里是madao33, 一名来自重庆大学的电子信息的硕士生，目前正在寻求一份后端开发的工作\\n这里是madao33的个人博客，基于vue+springboot的前后分离搭建\\n\\n本人熟悉的语言\\n\\n* Java/Python-熟悉\\n* git/linux-掌握\\n* HTML/CSS/JavaScript-掌握\\n\\n其他一些相关的链接：\\n\\n* github [madao33@github](https://github.com/madao33)\\n* csdn [madao10086+](https://blog.csdn.net/qq_36178962?spm=1000.2115.3001.5343)\\n\\n关于本人的联系方式：\\n\\n* email madao33_com@163.com\\n* wechat madao33_com\\n\"}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'madao33','127.0.0.1','','2022-07-13 17:21:18',NULL),(1086,'页面模块','新增或修改','/admin/pages','com.minzheng.blog.controller.PageController.saveOrUpdatePage','保存或更新页面','[{\"id\":1,\"pageCover\":\"http://47.108.219.199:81/config/22c22f495544829ba6c84f7a09f462ad.png\",\"pageLabel\":\"home\",\"pageName\":\"首页\"}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'madao33','127.0.0.1','','2022-07-13 17:28:17',NULL),(1087,'页面模块','新增或修改','/admin/pages','com.minzheng.blog.controller.PageController.saveOrUpdatePage','保存或更新页面','[{\"id\":5,\"pageCover\":\"http://47.108.219.199:81/config/04bd838cf287a62f6773fedd0b1cb9aa.png\",\"pageLabel\":\"album\",\"pageName\":\"相册\"}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'madao33','127.0.0.1','','2022-07-13 17:28:39',NULL),(1088,'页面模块','新增或修改','/admin/pages','com.minzheng.blog.controller.PageController.saveOrUpdatePage','保存或更新页面','[{\"id\":2,\"pageCover\":\"http://47.108.219.199:81/config/9eadc16aef3ba2768f14224484d21970.jpg\",\"pageLabel\":\"archive\",\"pageName\":\"归档\"}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'madao33','127.0.0.1','','2022-07-13 17:28:52',NULL),(1089,'页面模块','新增或修改','/admin/pages','com.minzheng.blog.controller.PageController.saveOrUpdatePage','保存或更新页面','[{\"id\":3,\"pageCover\":\"http://47.108.219.199:81/config/80324cf7430a62008c470689bfe027ed.png\",\"pageLabel\":\"category\",\"pageName\":\"分类\"}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'madao33','127.0.0.1','','2022-07-13 17:29:00',NULL),(1090,'页面模块','新增或修改','/admin/pages','com.minzheng.blog.controller.PageController.saveOrUpdatePage','保存或更新页面','[{\"id\":4,\"pageCover\":\"http://47.108.219.199:81/config/aa8aac375cc5e3c8291e98c5d54f9b6b.jpg\",\"pageLabel\":\"tag\",\"pageName\":\"标签\"}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'madao33','127.0.0.1','','2022-07-13 17:29:12',NULL),(1091,'页面模块','新增或修改','/admin/pages','com.minzheng.blog.controller.PageController.saveOrUpdatePage','保存或更新页面','[{\"id\":7,\"pageCover\":\"http://47.108.219.199:81/config/22c22f495544829ba6c84f7a09f462ad.png\",\"pageLabel\":\"about\",\"pageName\":\"关于\"}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'madao33','127.0.0.1','','2022-07-13 17:29:20',NULL),(1092,'页面模块','新增或修改','/admin/pages','com.minzheng.blog.controller.PageController.saveOrUpdatePage','保存或更新页面','[{\"id\":8,\"pageCover\":\"https://static.talkxj.com/config/acfeab8379508233fa7e4febf90c2f2e.png\",\"pageLabel\":\"message\",\"pageName\":\"留言\"}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'madao33','127.0.0.1','','2022-07-13 17:29:30',NULL),(1093,'页面模块','新增或修改','/admin/pages','com.minzheng.blog.controller.PageController.saveOrUpdatePage','保存或更新页面','[{\"id\":8,\"pageCover\":\"http://47.108.219.199:81/config/2f2f6e06dec5233d504bcca88ac4d372.png\",\"pageLabel\":\"message\",\"pageName\":\"留言\"}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'madao33','127.0.0.1','','2022-07-13 17:29:39',NULL),(1094,'页面模块','新增或修改','/admin/pages','com.minzheng.blog.controller.PageController.saveOrUpdatePage','保存或更新页面','[{\"id\":9,\"pageCover\":\"http://47.108.219.199:81/config/f17c5347dc8e2d26312663a6707dfd6b.png\",\"pageLabel\":\"user\",\"pageName\":\"个人中心\"}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'madao33','127.0.0.1','','2022-07-13 17:29:49',NULL),(1095,'页面模块','新增或修改','/admin/pages','com.minzheng.blog.controller.PageController.saveOrUpdatePage','保存或更新页面','[{\"id\":10,\"pageCover\":\"http://47.108.219.199:81/config/ad81b05dbe5ee177434555b6890b813a.jpg\",\"pageLabel\":\"articleList\",\"pageName\":\"文章列表\"}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'madao33','127.0.0.1','','2022-07-13 17:29:57',NULL),(1096,'页面模块','新增或修改','/admin/pages','com.minzheng.blog.controller.PageController.saveOrUpdatePage','保存或更新页面','[{\"id\":904,\"pageCover\":\"https://static.talkxj.com/config/a741b0656a9a3db2e2ba5c2f4140eb6c.jpg\",\"pageLabel\":\"talk\",\"pageName\":\"说说\"}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'madao33','127.0.0.1','','2022-07-13 17:30:06',NULL),(1097,'页面模块','新增或修改','/admin/pages','com.minzheng.blog.controller.PageController.saveOrUpdatePage','保存或更新页面','[{\"id\":904,\"pageCover\":\"http://47.108.219.199:81/config/1a4521086b3effba26d12c04916aca3d.jpg\",\"pageLabel\":\"talk\",\"pageName\":\"说说\"}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'madao33','127.0.0.1','','2022-07-13 17:30:15',NULL),(1098,'页面模块','新增或修改','/admin/pages','com.minzheng.blog.controller.PageController.saveOrUpdatePage','保存或更新页面','[{\"id\":6,\"pageCover\":\"http://47.108.219.199:81/config/b6b705b3cddde30b078b1aad11dbe74d.png\",\"pageLabel\":\"link\",\"pageName\":\"友链\"}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'madao33','127.0.0.1','','2022-07-13 17:30:30',NULL),(1099,'友链模块','删除','/admin/links','com.minzheng.blog.controller.FriendLinkController.deleteFriendLink','删除友链','[[26]]','DELETE','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'madao33','127.0.0.1','','2022-07-13 17:30:42',NULL),(1100,'用户信息模块','修改','/admin/users/disable','com.minzheng.blog.controller.UserInfoController.updateUserDisable','修改用户禁用状态','[{\"id\":1005,\"isDisable\":1}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'madao33','127.0.0.1','','2022-07-13 22:16:25',NULL),(1101,'用户信息模块','修改','/admin/users/role','com.minzheng.blog.controller.UserInfoController.updateUserRole','修改用户角色','[{\"nickname\":\"madao\",\"roleIdList\":[2,1],\"userInfoId\":1006}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'madao33','127.0.0.1','','2022-07-13 22:16:33',NULL),(1102,'用户信息模块','修改','/admin/users/disable','com.minzheng.blog.controller.UserInfoController.updateUserDisable','修改用户禁用状态','[{\"id\":1,\"isDisable\":1}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'madao33','127.0.0.1','','2022-07-13 22:16:40',NULL),(1103,'相册模块','新增或修改','/admin/photos/albums','com.minzheng.blog.controller.PhotoAlbumController.saveOrUpdatePhotoAlbum','保存或更新相册','[{\"albumCover\":\"http://47.108.219.199:81/photos/38f824b33a076ce0f642d48d4d6aab6b.png\",\"albumDesc\":\"壁纸分享\",\"albumName\":\"wallpaper\",\"status\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'madao33','127.0.0.1','','2022-07-13 22:17:23',NULL),(1104,'照片模块','新增','/admin/photos','com.minzheng.blog.controller.PhotoController.savePhotos','保存照片','[{\"albumId\":8,\"photoUrlList\":[\"http://47.108.219.199:81/photos/38f824b33a076ce0f642d48d4d6aab6b.png\",\"http://47.108.219.199:81/photos/0b57db789d41153c67d0436c64f38615.jpg\",\"http://47.108.219.199:81/photos/22c22f495544829ba6c84f7a09f462ad.png\",\"http://47.108.219.199:81/photos/47c0efaea0bf3f8b82210ed4bd3451e0.jpg\",\"http://47.108.219.199:81/photos/9eadc16aef3ba2768f14224484d21970.jpg\"]}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'madao33','127.0.0.1','','2022-07-13 22:18:02',NULL),(1105,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"# ResNet学习笔记\\n\\n## 前言\\n\\n深度残差网络（Deep Residual Network）是cnn机器视觉史上的一件里程碑的事件，在2015年，ResNet在ImageNet和COCO数据集上获得了非常优秀的成绩。如下图所示：\\n\\n* ImageNet Classification: “Ultra-deep”`152-layer` nets\\n* ImageNet Detection: `16%` better than 2nd\\n* ImageNet Localization: `27%` better than 2nd\\n* COCO Detection: `11%` better than 2nd\\n* COCO Segmentation: `12%` better than 2nd\\n\\nResNet获得了五项第一，再一次的刷新了CNN模型在ImageNet上的历史[<sup>[1]</sup>](#ref-1)，而论文的作者[何凯明](http://kaiminghe.com/)也获得了CVPR2016最佳论文奖[<sup>[2]</sup>](#ref-2)。以下是记录了解ResNet的一些笔记，主要是来自于15年和16年何凯明所在的微软研究院发表的论文。\\n\\n## 深度网络退化问题（degradation problem of deep network）\\n\\n从`AlexNet`到`GoogLeNet`，看起来好像是网络越深越好，但是直接秉持着`We need go deeper`的思想构建神经网络，到最后会发现，随着网络越来越深，会出现**梯度消失（vanishing gradients）**和**梯度爆炸（exploding gradients）**以及**网络退化（network degradation）**：\\n\\n* **梯度消失和爆炸（vanishing/exploding gradients）**：网络层数太深引发的梯度方向传播中的连乘效应引起\\n* **网络退化（network degradation）**：较深的模型可以看作是较浅模型的超空间，理论上较深的模型可以看作是较浅模型的恒等映射，但是实际上较深模型后面添加的不是恒等映射，而是一些非线性层[<sup>[3]</sup>](#ref-3)\\n\\n对于梯度消失和爆炸的应对方法如下：\\n\\n* **改换激活函数**: 使用`relu`、`LeakyRelu`、`ELU`等激活函数可以改善梯度消散或爆炸问题。`relu`导数的正数部分恒等于1，所以不会产生梯度消失和梯度爆炸\\n* **BatchNormalization**: 对每一层的输入做scale和shift方法，将每层神经元的输入分布强行拉回均值为0、方差为1的标准正态分布，这就使得激活层输入值落入在非线性函数对输入值比较敏感的区域，使得输入的小变化会导致损失函数较大的变化，使得梯度变大，训练速度加快，且避免梯度消失问题\\n* **梯度剪切**: 该方法主要是针对梯度爆炸提出。其思想是设置一个梯度剪切阈值，更新梯度时，如果梯度超过这个阈值，那么限制其在这个范围之内\\n\\n但是随着网络的加深，可以看到的是训练误差和测试误差都开始增加，这自然不是过拟合引起的，而是网络出现退化[<sup>[4]</sup>](#ref-4)，如[figure1](#fig-1)所示：\\n\\n![fig1.png](http://47.108.219.199:81/articles/cc162f1b7ba3267c9f91b33fee48fa18.png)\\n\\n网络退化表明了并非所有系统都同样容易优化。考虑一个较深的网络和一个较浅的网络，更深的网络对应更浅的网络相当于是增加了更多的层，添加的层可以是恒等映射（identity mapping），而其他的层是相当于是更浅的模型中直接复制的，这种构造容易得到，较深的模型不会产生比较浅的模型更高的训练误差，但是实验表明，简单地加深网络模型会出现网络退化的问题。\\n\\n## 残差块（Residual block）\\n\\n![fig2.png](http://47.108.219.199:81/articles/5ab52cd9a42fd496bf83f4fe2b5a33f1.png)\\n\\n\\n网络退化出现的原因就是**现有的网络无法实现恒等映射**，将想要得到的恒等映射函数表示为 $H(x)=x$，残差块网络设计为 $H(x)=F(x)+x$，即直接将恒等映射作为网络的一部分，就可以将问题转化为学习一个残差函数 $F(x)=H(x)-x$，那么只要 $F(x)=0$，就可以构成一个恒等映射 $H(x)=x$，拟合残差比拟合恒等映射容易的多[<sup>[5]</sup>](#ref-5)。从数学上更加详细地描述残差结构，可以是：\\n\\n<div id=\\\"eqn-1\\\"></div>\\n\\n$$\\ny=F(x, W_i)+x\\n$$\\n\\n其中 $x$ 和 $y$ 表示的分别是所考虑的层的输入和输出向量，函数 $F(x, W_i)$ 表示要学习的残差映射，操作 $F(x, W_i)+x$ 是通过跳接实现，在[方程1](#eqn-1)中 $x$ 和 $F$ 的维度必须相同，否则，需要对跳接进行线性投影 $W_s$ 来匹配维度：\\n\\n<div id=\\\"eqn-2\\\"></div>\\n\\n$$\\ny=F(x, W_i)+W_s x\\n$$\\n\\n* $F(x)+x$ 的公式可以通过具有跳接（shortcut connections）的前馈神经网络来实现，跳接可以是跳过一层或者多层的连接，通过跳接在激活函数前，将上一层或几层的输出与本层输出相加，将求和结果输入到激活函数作为本层的输出，残差块示例如[figure2](#fig-2)所示\\n\\n* 跳接只是执行**恒等映射**，他们的输出被添加到堆叠层的输出中，这不会增加额外的参数，也不会增加计算复杂性\\n\\n* 添加了残差网络，可以给神经网络一个多的选择，例如**学习到的一层的参数是冗余的，那么就可以直接走跳接路线，跳过这个冗余层**，而不用去拟合参数使得输出 $H(x)=x$\\n\\n* **学习残差的计算量比学习输出等于输入小**：例如普通网络为A，残差网络为B，输入为2，输出为2，那么普通网络就是$A(2)=2$，而残差网络就是$B(2)=F(2)+2=2$，即残差网络中$F(2)=0$。一般网络会将**权重初始化为0附近的数**，所以让$F(2)$拟合0会比$A(2)=2$容易\\n\\n* **ReLU能够将负数激活为0**，正数等于输出，这相当于过滤了负数的线性变化，让$F(x)=0$变的更加容易\\n\\n![ReLU.png](http://47.108.219.199:81/articles/d2a8b07068c5d4edf86077b2a2f6eff0.png)\\n\\n* 对残差网络$H(x)=F(x)+x$求梯度，即反向传播时，得到$H\'(x)=F\'(x)+1$，**残差结构的这个常数1能够保证求梯度的时候梯度不会消失**\\n\\n* 这种结构不仅适用于全连接层，还**适用于卷积层，逐通道地对两个特征图执行元素相加**\\n\\n## 网络架构\\n\\n<div id=\\\"fig3\\\"></div>\\n\\n![fig3.png](http://47.108.219.199:81/articles/849f0bd1c2e4ce63d30090c3b2fbc253.png)\\n\\n网络结构如[figure3](#fig3)所示，从左到右分别是VGG-19（196亿次浮点运算）、34层不带残差的plain net（36亿次浮点运算）、34层的残差网络（36亿次浮点运算）\\n\\n#### plain network\\n\\n* 主要受到VGGNet的启发，遵循两个简单设计规则：\\n  * 对于相同的输出特征图大小，层具有相同数量的滤波器\\n  * 如果特征图大小减半，则过滤器的数量加倍\\n* 步长为2的卷积层直接执行下采样\\n* 网络结尾是一个整体平均池化层和一个1000路的全连接层和softmax函数\\n* 总体的带权重的层是34层\\n* 该模型比VGGNet相比具有更少的滤波器和更低的复杂度，plain net 有36亿次浮点运算，而VGG-19有196亿次浮点运算，前者是后者的18%\\n\\n#### Residual Network\\n\\n* 在plain net网络中引入了**跳接（shortcut conncetions）**，将其转换为了对应的残差版本\\n* 跳接引入有两种形式：\\n  * 实线：跳接引入的输入和输出维度相同，可以直接相加，如[公式1](#eqn-1)\\n  * 虚线：引入的维度增加时，可以有两种方式\\n    * 跳接仍然执行恒等映射，**填充零**元素保证维度相同\\n    * 利用[公式2](#eqn-2)对跳接进行**投影**来匹配维度\\n\\n## 实现细节\\n\\n* 遵循AlexNet数据预处理的方法，对图像进行裁剪和水平翻转得到224 x 224的图像，然后减去每个像素的平均值[<sup>[6]</sup>](#ref-6)\\n* 每次卷积之后和激活函数之前采用批处理标准化（batch normalization, BN）\\n* 批大小（mini-batch ）为256\\n* 学习率（learning rate） 从 0.1 开始，当误差平稳时，学习率除以10，模型训练了 $60 \\\\times 10^4$ 次迭代\\n* 权重衰减（weight decay）0.0001，动量（momentum）为 0.9\\n* 网络中没有使用到dropout\\n\\n## 实验结果\\n\\n### ImageNet分类结果\\n\\n对比了18层和34层的plain net以及对应的ResNet，可以看到如[figure4](#fig-4)所示，**残差结果确实解决了退化问题**\\n\\n![fig4.png](http://47.108.219.199:81/articles/4e81b4c3ae87e50e68e0995b5f71f4b3.png)\\n\\n![](imgs/fig4.png)\\n\\n对比了ImageNet数据集的测试结果汇总如[表3](#table-3)所示\\n\\n<div id=\\\"table-3\\\"></div>\\n\\n![table3.png](http://47.108.219.199:81/articles/8678df35b304c133111aec5685fc75a3.png)\\n\\n\\n\\n## 参考文献\\n\\n<div id=\\\"ref-1\\\"></div>\\n\\n- [1] [知乎文章：你必须要知道CNN模型：ResNet](https://zhuanlan.zhihu.com/p/31852747/)\\n\\n<div id=\\\"ref-2\\\"></div>\\n\\n- [2] [何凯明个人主页](http://kaiminghe.com/)\\n\\n<div id=\\\"ref-3\\\"></div>\\n\\n- [3] [csdn博客：网络退化、过拟合、梯度消散/爆炸](https://blog.csdn.net/c2250645962/article/details/102838830)\\n\\n<div id=\\\"ref-4\\\"></div>\\n\\n- [4] [He K ,  Zhang X ,  Ren S , et al. Deep Residual Learning for Image Recognition[J]. 2016 IEEE Conference on Computer Vision and Pattern Recognition (CVPR), 2016.](https://arxiv.org/pdf/1512.03385.pdf)\\n\\n<div id=\\\"ref-5\\\"></div>\\n\\n- [5] [知乎文章：CVPR2016:ResNet 从根本上解决深度网络退化问题](https://zhuanlan.zhihu.com/p/106764370)\\n\\n<div id=\\\"ref-6\\\"></div>\\n\\n- [6] [Krizhevsky A , Sutskever I , Hinton G . ImageNet Classification with Deep Convolutional Neural Networks[J]. Advances in neural information processing systems, 2012, 25(2).](https://proceedings.neurips.cc/paper/2012/file/c399862d3b9d6b76c8436e924a68c45b-Paper.pdf)\\n\\n\",\"articleCover\":\"http://47.108.219.199:81/articles/5ab52cd9a42fd496bf83f4fe2b5a33f1.png\",\"articleTitle\":\"ResNet学习笔记\",\"categoryName\":\"机器视觉\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[\"深度学习\",\"机器视觉\",\"图像识别\"],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',996,'madao','127.0.0.1','','2022-07-13 22:43:33',NULL),(1106,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"# Java进阶简介\\n\\n主要的知识点来自于黑马程序员的视频：`BV1TE41177mP`\\n\\n\\n\\n# day1-复习回顾、静态、继承、引用类型使用\\n\\n## 定义类\\n\\n- 类名的首字母应该大写，满足**驼峰写法**\\n- 一个Java文件可以定义多个类。但是只有一个类是用`public`修饰，`public`修饰的类名必须称为`Java`文件名。\\n\\n- 类中有且仅有5大成分（五大金刚）\\n\\n  - **成员变量Field**：描述类或者对象的属性信息的。\\n  - **成员方法Method**：描述类或者对象的行为的。\\n  - **构造器（构造方法,Constructor）**: 初始化类的一个对象返回。\\n    - 有参构造器\\n    - 无参构造器\\n  - **代码块**\\n\\n  - **内部类**\\n\\n## 封装\\n\\n- 面向对象的三大**特征**之一：**封装，继承，多态**。 \\n- 形成了规范，即使毫无意义还是会这样写代码！\\n- 合理隐藏，合理暴露。\\n- 封装的规范：成员变量私有，方法一般公开，提供成套的`getter`和`setter`方法暴露成员变量的取值和赋值，`public`修饰符\\n- 封装的作用：提高安全性，提高代码的组件化思想。\\n- 封装已经成为`Java`代码的规范，即使毫无意义，我们也要这样写代码（成员变量私有，方法公开）\\n\\n## this关键字\\n\\n- `this`代表了当前对象的引用。\\n- `this`可以出现在构造器和方法中。\\n- `this`出现在构造器中代表构造器正在初始化的对象。\\n- `this`出现在方法中，哪个对象调用方法，`this`就代表哪个对象。\\n- `this`可以访问对象的成员变量，区分成员变量是局部的还是对象中的成员变量。\\n\\n## static关键字\\n\\n`Java`是通过成员变量是否有`static`修饰来区分是类的还是属于对象的\\n\\n* 没有`static`修饰的方法和变量是属于每个对象的\\n* 有`static`修饰的方法和成员变量属于类的\\n\\n按照有无`static`修饰，成员变量和方法可以分为：\\n\\n**成员变量**：\\n\\n* **静态成员变量**（类变量）：有`static`修饰的成员变量称为静态成员变量也叫类变量，属于类本身的，**直接用类名访问**即可。\\n* **实例成员变量**：无`static`修饰的成员变量称为实例成员变量，属于类的每个对象的，**必须用类的对象来访问**。\\n\\n> * 同一个类中访问静态成员变量可以省略类名不写\\n> * 对象也可以访问静态成员变量，但是不推荐，静态成员变量属于类，如果用对象访问静态成员变量容易混淆\\n\\n成员变量访问内存\\n\\n![image-20220427112225577](http://47.108.219.199:81/articles/image-20220427112225577.png)\\n\\n```java\\npublic class Student{\\n    // 1.静态成员变量:有static修饰，属于类本身，直接用类名访问即可！\\n    public static String schoolName = \\\"黑马\\\";\\n    // 2.实例成员变量:无static修饰，属于类的对象的，必须用对象访问！\\n    private String name;\\n    private int age ;\\n\\n    public static void main(String[] args) {\\n        // 1.类名.静态成员变量\\n        System.out.println(Student.schoolName);\\n        // 注意：同一个类中访问静态成员变量可以省略类名不写\\n        System.out.println(schoolName);\\n\\n        // 2.对象.实例成员变量\\n        //System.out.println(Student.name); // 报错！\\n        Student swk = new Student();\\n        swk.name = \\\"孙悟空\\\";\\n        System.out.println(swk.name);\\n        System.out.println(swk.age);\\n\\n        // 3.对象.静态成员变量(不推荐)\\n        // 静态成员变量属于类，直接用类名访问即可。\\n        System.out.println(swk.schoolName);\\n    }\\n}\\n```\\n\\n**成员方法**：\\n\\n* **静态方法**：有`static`修饰的成员方法称为静态方法也叫类方法，属于类本身的，**直接用类名访问**即可。\\n* **实例方法**：无`static`修饰的成员方法称为实例方法，属于类的每个对象的，**必须用类的对象**来访问。\\n\\n> * 静态方法属于类，有static修饰，直接用类名访问即可。\\n> * 实例方法属于对象，无static修饰，必须先创建对象，然后用对象来访问。\\n> * 静态方法也可以被对象共享访问，但是不推荐，因为静态方法直接用类名访问即可。\\n\\n![image-20220427143750503](http://47.108.219.199:81/articles/image-20220427143750503.png)\\n\\n```java\\npublic class Student {\\n    // 0.实例成员变量。\\n    private String name;\\n    private int age ;\\n\\n    // 1.静态方法：有static修饰，属于类，直接用类名访问即可！\\n    public static void inAddr(){\\n        System.out.println(\\\"我们都在天河区吉山村happy的学习Java!\\\");\\n    }\\n\\n    // 2.实例方法：无static修饰，属于对象，必须用对象访问！\\n    public void eat(){\\n        System.out.println(name + \\\"已经\\\"+age+\\\"岁，在吃好吃的！！\\\");\\n    }\\n\\n    public static void main(String[] args) {\\n        // a.类名.静态方法\\n        Student.inAddr();\\n        // 注意：在同一个类中访问静态成员可以省略类名不写！！\\n        inAddr();\\n\\n        // b.对象.实例方法\\n        // Student.eat(); // 报错了！\\n        Student zbj = new Student();\\n        zbj.name = \\\"猪刚鬣\\\";\\n        zbj.age = 1000;\\n        zbj.eat();\\n\\n        // c.对象.静态方法(不推荐)\\n        zbj.inAddr();\\n    }\\n}\\n```\\n\\n关于`static`常考的八类题：\\n\\n* 实例方法是否可以直接访问实例成员变量？可以的，因为它们都属于对象。\\n* 实例方法是否可以直接访问静态成员变量？可以的，静态成员变量可以被共享访问。\\n* 实例方法是否可以直接访问实例方法? 可以的，实例方法和实例方法都属于对象。\\n* 实例方法是否可以直接访问静态方法？可以的，静态方法可以被共享访问！\\n* 静态方法是否可以直接访问实例变量？ 不可以的，实例变量必须用对象访问！！\\n* 静态方法是否可以直接访问静态变量？ 可以的，静态成员变量可以被共享访问。\\n* 静态方法是否可以直接访问实例方法? 不可以的，实例方法必须用对象访问！！\\n* 静态方法是否可以直接访问静态方法？可以的，静态方法可以被共享访问！！\\n\\n> **也就是说实例方法啥都可以访问，静态方法只能访问静态方法或者静态变量**\\n\\n## 继承\\n\\n### 继承的概述\\n\\n面向对象的三大特征：封装、继承和多态\\n\\n继承是Java中一般到特殊的关系，是一种子类到父类的关系。例如：学生类继承了人类。  猫类继承了动物类。\\n\\n被继承的类称为：父类/超类。继承父类的类称为：子类\\n\\n* 继承可以**提高代码的复用性**\\n* 子类直接继承父类，就可以直接使用父类的这些代码了（相同代码重复利用）\\n\\n子类继承了一个父类，子类就可以直接得到父类的属性（成员变量）和行为（方法）了。\\n\\n### 继承的例子\\n\\n```java\\nclass Animal{\\n\\n}\\n\\nclass Cat extends Animal{\\n\\n}\\n```\\n\\n> - 继承的优势可以把相同的代码定义在父类中，子类可以直接继承使用。\\n> - 这样就可以**提高代码的复用性**：相同代码只需要在父类中写一次就可以了。\\n\\n### 子类不能继承父类的内容\\n\\n- 子类继承父类，子类就得到了父类的属性和行为。\\n- 但是并非所有父类的属性和行为等子类都可以继承。\\n\\n**子类不能继承父类的东西**：子类不能继承父类的构造器，子类有自己的构造器。（没有争议的）\\n\\n有争议的观点（拓展）：\\n\\n**子类是否可以继承父类的私有成员**（私有成员变量，私有成员方法）?\\n\\n* **子类是可以继承父类的私有成员的，只是不能直接访问而已**。\\n* 以后可以暴力去访问继承自父类的私有成员~~~\\n\\n**子类是否可以继承父类的静态成员？**\\n\\n* **子类是不能继承父类的静态成员的**\\n* **子类只是可以访问父类的静态成员**，父类的静态成员只有一份可以被子类共享访问。\\n* **共享并非继承**\\n\\n### 成员变量的访问特点\\n\\n**就近原则**：子类有找子类，子类没有找父类，父类没有就报错\\n\\n```java\\nclass Animal{\\n    public String name = \\\"动物名称\\\";\\n}\\n\\nclass Cat extends Animal{\\n    public String name = \\\"子类名称\\\";\\n    public void show(){\\n        String name = \\\"局部名称\\\";\\n        System.out.println(name); // 局部名称\\n        System.out.println(this.name); // 子类名称\\n        System.out.println(super.name); // 父类名称\\n    }\\n}\\n```\\n\\n> - `this`代表了当前对象的引用，可以用于访问当前子类对象的成员变量。\\n> - `super`代表了父类对象的引用，可以用于访问父类中的成员变量。\\n\\n### 成员方法的访问特点\\n\\n就近原则：子类有找子类，子类没有找父类，父类没有就报错\\n\\n子类对象优先使用子类已有的方法，也就是说父类的方法被重写\\n\\n```java\\npublic class TestDemo {\\n    public static void main(String[] args) {\\n        Cat cat = new Cat();\\n        cat.run(); // 子类的\\n        cat.eat(); // 父类的\\n        // cat.go(); // 报错！\\n    }\\n}\\n\\nclass Animal{\\n    public void run(){\\n        System.out.println(\\\"动物可以跑~~~~\\\");\\n    }\\n\\n    public void eat(){\\n        System.out.println(\\\"吃东西~~~~\\\");\\n    }\\n}\\n\\nclass Cat extends Animal {\\n    public void run(){\\n        System.out.println(\\\"🐱跑的贼溜~~~~\\\");\\n    }\\n}\\n```\\n\\n### 方法重写\\n\\n子类继承了父类，子类就得到了父类的某个方法。但是子类觉得父类的这个方法不好用或者无法满足自己的需求，子类重写一个与父类申明一样的方法来覆盖父类的该方法，子类的这个方法就进行了方法重写。\\n\\n方法重写的校验注解： `@Override`\\n\\n- `Java`建议在重写的方法上面加上一个`@Override`注解。\\n- 方法一旦加了这个注解，那**就必须是成功重写父类**的方法，否则报错！\\n- `Override`优势：**可读性好，安全，优雅**\\n\\n方法重写的具体要求：\\n\\n* 子类重写方法的**名称和形参列表必须与父类被重写方法一样**。\\n* 子类重写方法的返回值类型申明要么与父类一样，要么比父类方法**返回值类型范围更小**。（以后再了解）\\n* 子类重写方法的修饰符权限应该与父类被重写方法的**修饰符权限相同或者更大**。（以后再了解）\\n* 子类重写方法申明抛出的异常应该与父类被重写方法申明抛出的**异常一样或者范围更小**！（以后再了解）\\n\\n```java\\nclass Wolf extends Animal{\\n    // 进行了方法重写！！\\n    // 子类重写方法的名称和形参列表必须与父类被重写方法一样\\n    // 子类重写方法的返回值类型申明要么与父类一样，要么比父类方法返回值类型范围更小\\n    // 子类重写方法的修饰符权限应该与父类被重写方法的修饰符权限相同或者更大\\n    @Override\\n    public void run(){\\n        System.out.println(\\\"🐺跑的贼快~~~\\\");\\n    }\\n}\\n\\nclass Animal{\\n    public void run(){\\n        System.out.println(\\\"动物可以跑步~~~\\\");\\n    }\\n}\\n```\\n\\n> - 方法重写是子类重写一个与父类申明一样的方法覆盖父类的方法。\\n> - 方法重写建议加上`@Override`注解。\\n> - 方法重写的核心要求：方法名称形参列表必须与被重写方法一致！！\\n> - 建议**申明不变，重新实现**。\\n\\n调用父类被重写的方法使用`super`\\n\\n```java\\nclass SportMan extends People{\\n    @Override\\n    public void run(){\\n        System.out.println(\\\"运动员跑的贼快~~~~~\\\");\\n    }\\n\\n    public void go(){\\n        super.run(); // 父类被重写的方法\\n        run(); // 子类的\\n    }\\n}\\n\\nclass People{\\n    public void run(){\\n        System.out.println(\\\"人会跑~\\\");\\n    }\\n}\\n```\\n\\n> `super`可以用在子类的实例方法中调用父类被重写的方法\\n\\n静态方法和私有方法**不可以**被重写\\n\\n```java\\nclass Mac extends Computer{\\n//    @Override\\n    public void go(){\\n    }\\n\\n    // @Override\\n    public static void test(){\\n    }\\n}\\n\\nclass Computer{\\n    public static void test(){\\n        System.out.println(\\\"super test\\\");\\n    }\\n\\n    private void go(){\\n\\n    }\\n}\\n```\\n\\n### 继承后构造器的特点\\n\\n子类的全部构造器默认一定会**先访问父类的无参数构造器，再执行子类自己的构造器**，主要的原因是\\n\\n* 子类的构造器的第一行默认有一个`super()`调用父类的无参数构造器，写不写都存在\\n* 子类继承父类，子类就得到了父类的属性和行为\\n* 当我们调用子类构造器初始化子类对象数据的时候，必须先调用父类构造器初始化继承自父类的属性和行为\\n\\n### super调用父类构造器\\n\\n`super(...)`可以根据参数选择调用父类的某个构造器\\n\\n```java\\nclass Monkey extends Animal{\\n\\n    public Monkey(String name, int age, char sex) {\\n        super(name , age , sex) ; // 根据参数匹配调用父类构造器\\n    }\\n\\n    public void eatBanana(){\\n        System.out.println(getName()+\\\"-->\\\"+getAge()+\\\"-->\\\"+getSex()+\\\"在吃🍌~~~\\\");\\n    }\\n}\\n\\nclass Animal{\\n    private String name;\\n    private int age;\\n    private char sex;\\n\\n    public Animal() {\\n    }\\n\\n    public Animal(String name, int age, char sex) {\\n        this.name = name;\\n        this.age = age;\\n        this.sex = sex;\\n    }\\n\\n    public String getName() {\\n        return name;\\n    }\\n\\n    public void setName(String name) {\\n        this.name = name;\\n    }\\n\\n    public int getAge() {\\n        return age;\\n    }\\n\\n    public void setAge(int age) {\\n        this.age = age;\\n    }\\n\\n    public char getSex() {\\n        return sex;\\n    }\\n\\n    public void setSex(char sex) {\\n        this.sex = sex;\\n    }\\n}\\n```\\n\\n`super`调用父类构造器的内存分布图\\n\\n![image-20220505160400907](http://47.108.219.199:81/articles/image-20220505160400907.png)\\n\\n### this和super关键字使用总结\\n\\n`this`代表了当前对象的引用（继承中指代子类对象）：\\n\\n* `this` 子类成员变量\\n* `this`子类成员方法\\n* `this(...)` 可以根据参数匹配访问本类其他构造器\\n\\n`super`代表了父类对象的引用（继承中指代了父类对象空间）\\n\\n* `super` 父类成员变量\\n* `super`父类的成员方法\\n* `super(...)`可以根据参数匹配访问父类的构造器\\n\\n`this(...)`和`super(...)`**必须放在构造器的第一行**，否则报错\\n\\n所以`this(...)`和`super(...)`**不能同时出现在构造器中**\\n\\n```java\\nclass Student{\\n    private String name ;\\n    private int age ;\\n    private String schoolName ;\\n\\n    public Student() {\\n    }\\n\\n    public Student(String name , int age){\\n        // 借用兄弟构造器的功能！\\n        this(name , age , \\\"黑马\\\");\\n    }\\n\\n    public Student(String name, int age, String schoolName) {\\n        this.name = name;\\n        this.age = age;\\n        this.schoolName = schoolName;\\n    }\\n\\n    public String getName() {\\n        return name;\\n    }\\n\\n    public void setName(String name) {\\n        this.name = name;\\n    }\\n\\n    public int getAge() {\\n        return age;\\n    }\\n\\n    public void setAge(int age) {\\n        this.age = age;\\n    }\\n\\n    public String getSchoolName() {\\n        return schoolName;\\n    }\\n\\n    public void setSchoolName(String schoolName) {\\n        this.schoolName = schoolName;\\n    }\\n}\\n```\\n\\n### 继承的特点\\n\\n* **单继承**：一个类只能继承一个直接父类\\n\\n  * 如果是多继承可能会出现类的**二义性**\\n\\n    ```java\\n    class A{\\n        public void test(){\\n            System.out.println(\\\"A\\\");\\n        }\\n    }\\n    class B{\\n        public void test(){\\n            System.out.println(\\\"B\\\");\\n        }\\n    }\\n    class C extends A , B {\\n        public static void main(String[] args){\\n            C c = new C();\\n            c.test(); // 出现了类的二义性！所以Java不能多继承！！\\n        }\\n    }\\n    ```\\n\\n* **多层继承**：一个类可以间接继承多个父类\\n\\n* 一个类可以有多个子类\\n\\n* 一个类要么默认继承了`Object`类，要么间接继承了`Object`类，`Object`类是`Java`的祖宗类\\n\\n## 引用类型作为方法参数和返回值\\n\\n* 除了基本数据类型都是引用数据类型\\n* 引用类型可以作为方法的参数类型和返回值类型\\n* 引用数据类型可以在一切可以使用类型的地方使用\\n\\n```java\\npublic class TestDemo {\\n    public static void main(String[] args) {\\n        Dog jinMao = new Dog();\\n        go(jinMao);\\n\\n        System.out.println(\\\"--------------\\\");\\n        Dog dog = createDog();\\n        dog.run();\\n    }\\n\\n    // 引用类型作为方法的返回值:创建一个狗对象返回！\\n    public static Dog createDog(){\\n//        Dog taiDi = new Dog();\\n//        return taiDi;\\n         return new Dog();\\n    }\\n\\n    // 引用类型作为方法参数: 提供一个方法让狗进入比赛~~~\\n    public static void go(Dog a){\\n        System.out.println(\\\"比赛开始。。。\\\");\\n        a.run();\\n        System.out.println(\\\"比赛结束。。。\\\");\\n    }\\n}\\n\\nclass Dog{\\n    public void run(){\\n        System.out.println(\\\"🐕跑的贼溜~~~\\\");\\n    }\\n}\\n```\\n\\n## 引用类型作为成员变量的类型\\n\\n`Address.java`\\n\\n```java\\npublic class Address {\\n    private String code;\\n    private String name;\\n    private double x;\\n    private double y;\\n\\n    public Address() {\\n    }\\n\\n    public Address(String code, String name, double x, double y) {\\n        this.code = code;\\n        this.name = name;\\n        this.x = x;\\n        this.y = y;\\n    }\\n}\\n```\\n\\n`Student.java`\\n\\n```java\\npublic class Student {\\n    private String name;\\n    private int age ;\\n    // 地址信息:复合类型。\\n    // 引用类型作为成员变量的类型\\n    private Address address;\\n}\\n```\\n\\n# day2-抽象类、接口、代码块、final、单例、枚举\\n\\n## 抽象类\\n\\n### 抽象类的概述\\n\\n父类指导之类一定要完成某个功能，但是每个之类完成的情况是不一样的。子类以后也只会用自己重写的功能，那么父类的该功能就可以定义成抽象方法，子类重写调用自己的方法。所以父类的该功能就可以定义为抽象的方法。拥有冲向方法的类必须定义为抽象类。\\n\\n> **抽象方法**：没有方法体，只有方法签名，必须用`abstract`修饰的方法就是抽象方法。\\n>\\n> **抽象类**：拥有抽象方法的类必须定义成抽象类，必须用`abstract`修饰。\\n\\n```java\\nclass Wolf extends Animal{\\n    @Override\\n    public void run(){\\n        System.out.println(\\\"🐺跑的贼贼溜~~~\\\");\\n    }\\n}\\n\\n// 抽象类：拥有了抽象方法的类必须定义成抽象类。抽象类必须加上abstract修饰。\\nabstract class Animal{\\n    // 抽象方法：没有方法体，只有方法签名，必须加上abstract修饰。\\n    public abstract void run();\\n}\\n```\\n\\n### 抽象类的使用\\n\\n抽象类是为了被子类继承\\n\\n```java\\nclass Manager extends Employee{\\n    @Override\\n    public void work() {\\n        System.out.println(\\\"班主任需要管理班级~~~~\\\");\\n    }\\n\\n     @Override\\n     public void run() {\\n\\n     }\\n }\\n\\nclass Techer extends Employee{\\n    @Override\\n    public void work() {\\n        System.out.println(\\\"老师需要授课~~~~\\\");\\n    }\\n\\n    @Override\\n    public void run() {\\n\\n    }\\n}\\n\\n// 员工（老师，班主任 ） 每个员工都要工作，但是工作内容不一样。\\nabstract class Employee{\\n    public abstract void work();\\n    public abstract void run();\\n}\\n```\\n\\n> * 一个类继承了抽象类，必须重写完抽象类的全部抽象方法，否则这个类必须定义成抽象类。\\n> * 因为拥有抽象方法的类必须定义成抽象类。\\n\\n### 抽象类的特征\\n\\n抽象类的特征是：**有得有失**\\n\\n* 抽象类得到了拥有对象的能力\\n* 抽象类失去了创建对象的能力，即抽象类不能创建对象\\n\\n> **抽象类是否有构造器，是否可以创建对象**，为什么?\\n>\\n> 抽象类作为类一定**有构造器**，而且必须有构造器。**提供给子类继承后调用父类构造器**使用的。\\n>\\n> 抽象类虽然有构造器，但是抽象类**绝对不能创建对象**。抽象类中可能存在抽象方法，**抽象方法不能执行**。抽象在学术上本身意味着不能实例化。\\n\\n### 抽象类的意义\\n\\n抽象类存在的意义有两点：\\n\\n* **被继承**：抽象类就是为了被子类继承，否则抽象类将毫无意义\\n* 抽象类体现的**模板思想**：部分实现，部分抽象，可以使用抽象类设计一个模板模式\\n\\n### 抽象类设计模板模式\\n\\n**设计模式**：就是前人或者软件行业在生产实战中发现的优秀软件设计架构和思想。后来者可以直接用这些架构或者思想就可以设计出优秀的软件，提高开发效率，提高软件可扩展性和可维护性。\\n\\n模板设计模式就是一种经典的设计模式思想\\n\\n**模板设计模型的作用**：优化代码架构，提高代码的复用性，相同功能的重复代码无需重复书写。可以做到部分实现，部分抽象，抽象的东西交给使用模板的人重写实现\\n\\n```java\\nclass Teacher extends Template{\\n    @Override\\n    public String writeMain() {\\n        return \\\"\\\\t\\\\t我爸就是好，有多好，做他儿子才能懂~~~\\\";\\n    }\\n}\\n\\nclass Student extends Template{\\n    @Override\\n    public String writeMain() {\\n        return \\\"\\\\t\\\\t我爸爸很牛，我爸爸是马云，就是爽，很有钱~~~~\\\";\\n    }\\n}\\n// 1.写一个模板类：代表了作文模板。\\nabstract class Template{\\n    private String title = \\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t《我的爸爸》\\\";\\n    private String one = \\\"\\\\t\\\\t我的爸爸很牛逼，到底有多牛呢，请看如下说明：\\\";\\n    private String last = \\\"\\\\t\\\\t以上就是我的爸爸，简直太好了，下辈子还要做他儿子！\\\";\\n\\n    // 2.提供一个写作文方法\\n    public void write(){\\n        System.out.println(title);\\n        System.out.println(one);\\n        // 正文：正文部分模板是不知道怎么写的！应该把正文部分定义成抽象方法\\n        // 交给使用模板的子类重写！\\n        System.out.println(writeMain());\\n        System.out.println(last);\\n    }\\n\\n    // 正文部分定义成抽象方法，交给子类重写！！\\n    public abstract String writeMain();\\n}\\n```\\n\\n### 抽象类的注意事项\\n\\n1. 抽象类不能创建对象，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象。\\n   理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。\\n\\n2. 抽象类一定有而且是必须有构造器，是供子类创建对象时，初始化父类成员使用的。\\n   理解：子类的构造器中，有默认的super()，需要访问父类构造器。\\n\\n3. 抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。\\n\\n4. 抽象类的子类，必须重写抽象父类中所有的抽象方法，否则子类也必须定义成抽象类。\\n\\n5. 抽象类存在的意义是为了被子类继承，抽象类体现的是模板思想。\\n   理解：抽象类中已经实现的是模板中确定的成员，\\n   抽象类不确定如何实现的定义成抽象方法，交给具体的子类去实现。\\n\\n## 接口\\n\\n### 接口的概述\\n\\n接口体现的是规范思想，实现接口的子类必须重写完接口的全部抽象方法\\n\\n接口是更加彻底的抽象，在JDK 1.8之前接口中只能是抽象方法和常量\\n\\n定义格式\\n\\n```java\\n修饰符 interface 接口名称{\\n\\t// 在JDK 1.8 之前接口中只能是抽象方法和常量\\n}\\n```\\n\\n成分研究（JDK 1.8之前）\\n\\n* 接口中抽象方法默认加上`public abstract`修饰，可以省略不写\\n\\n* 常量是指有`public static final`修饰的成员变量，**有且仅能被复制一次**，值不能改变\\n\\n  常量名称规范要求全部大写，多个单词下划线连接\\n\\n  常量修饰`public static final`可以省略不写，默认会加上\\n\\n```java\\npublic interface InterfaceDemo {\\n     // 2.常量\\n     // 只有一份，在执行的过程中其值必须有，但是不能改变！\\n     // 常量是public static final修饰\\n     // 常量的名称建议字母全部大写，多个单词用“_”连接\\n     // 在接口中常量可以省略public static final不写，默认会加上该三个修饰符！\\n     //public static final String SCHOOL_NAME = \\\"黑马\\\";\\n     String SCHOOL_NAME = \\\"黑马\\\";\\n\\n\\n     // 1.抽象方法\\n     // public abstract void run();\\n     // 接口中的抽象方法默认会加上public abstract修饰,所以可以省略不写。\\n     void run();\\n     void work();\\n}\\n```\\n\\n### 接口的基本实现\\n\\n子类和父类是继承，实现类和接口是实现关系。接口是用来被类实现的，实现接口的类是实现类\\n\\n子类–>继承–>父类\\n\\n实现类–>实现–>接口\\n\\n类实现接口的格式：\\n\\n```java\\n修饰符 class 实现类名称 implements 接口1,接口2,接口3,....{\\n\\n}\\n```\\n\\n例如\\n\\n```java\\n// 实现类 实现 SportMan接口\\n// 一个类实现接口必须重写完接口中全部抽象方法，否则这个类必须定义成抽象类！！\\nclass PingPongMan implements SportMan{\\n    private String name;\\n    public PingPongMan(String name){\\n        this.name = name;\\n    }\\n    @Override\\n    public void run() {\\n        System.out.println(name+\\\"必须天天运动。正在🏃训练~~~‍\\\");\\n    }\\n\\n    @Override\\n    public void win() {\\n        System.out.println(name+\\\"参加比赛中~~~‍\\\");\\n    }\\n}\\n\\n// 定义一个接口：表示运动员的规范\\ninterface SportMan{\\n    void run(); // 跑步\\n    void win(); // 比赛得奖\\n}\\n```\\n\\n> * 接口的使命就是要求实现接口的类必须有`run()`和`win()`方法\\n> * 接口可以多实现\\n> * 一个类实现接口必须重写完接口中全部抽象方法，否则这个类必须定义成抽象类\\n\\n### 接口的多实现\\n\\n* 类与类是单继承\\n* 类和接口是多实现\\n\\n一个类如果实现了多个接口，必须重写完全部接口中的全部抽象方法，否则这个类必须定义为抽象类\\n\\n```java\\nclass PingPongMan implements SportMan , Law{\\n\\n    @Override\\n    public void rule() {\\n\\n    }\\n\\n    @Override\\n    public void run() {\\n\\n    }\\n\\n    @Override\\n    public void win() {\\n\\n    }\\n}\\n\\ninterface Law{\\n    void rule();\\n    void run();\\n}\\n\\ninterface SportMan{\\n    void run();\\n    void win();\\n}\\n```\\n\\n### 接口与接口的多继承\\n\\n* 类与类是单继承关系：一个类只能继承一个直接父类\\n* 类与接口是多继承关系：一个类可以同时实现多个接口\\n* 接口与接口是多继承关系：一个接口可以同时继承多个接口\\n\\n接口与接口的多继承，用一个接口合并多个接口\\n\\n```java\\nclass PingPongMan implements SportMan{\\n\\n    @Override\\n    public void eat() {\\n\\n    }\\n\\n    @Override\\n    public void rule() {\\n\\n    }\\n\\n    @Override\\n    public void run() {\\n\\n    }\\n\\n    @Override\\n    public void goAbroad() {\\n\\n    }\\n}\\n\\ninterface Food{\\n    void eat();\\n}\\n\\ninterface Law{\\n    void rule();\\n}\\n\\n// 接口与接口的多继承！\\ninterface SportMan extends Law , Food {\\n    void run();\\n    void goAbroad();\\n}\\n```\\n\\n### JDK1.8之后接口新增的方法\\n\\nJDK1.8开始之后接口新增的三个方法，了解即可\\n\\n* **默认方法**\\t就是之前写的实例方法\\n  * 必须用`default`修饰\\n  * 默认会加`public`修饰\\n  * 只能用接口的实现类的对象来调用\\n* **静态方法**\\n  * 可以直接加`static`修饰\\n  * 默认会加`public`修饰\\n  * 接口的静态方法只能用接口的类名称调用\\n* **私有方法**    从JDK 1.9开始才支持的\\n  * 其实就是私有的实例方法，必须加`private`修饰\\n  * 只能在**本接口**被其他的默认方法或者私有方法访问\\n\\n```java\\npublic class InterfaceDemo {\\n    public static void main(String[] args) {\\n        // 1.默认方法调用：必须用接口的实现类对象调用。\\n        PingPongMan zjk = new PingPongMan();\\n        zjk.run();\\n        zjk.work();\\n\\n        // 2.接口的静态方法必须用接口的类名本身来调用。\\n        InterfaceJDK8.inAddr();\\n    }\\n}\\n\\nclass PingPongMan implements InterfaceJDK8{\\n    @Override\\n    public void work() {\\n        System.out.println(\\\"工作中。。。\\\");\\n    }\\n}\\n\\ninterface InterfaceJDK8{\\n    // 之前的抽象方法！！\\n    void work();\\n\\n    // a.默认方法（就是之前写的普通实例方法）\\n    // 必须用接口的实现类的对象来调用。\\n    default void run(){\\n        go();\\n        System.out.println(\\\"开始跑步🏃‍~~~~\\\");\\n    }\\n\\n    // b.静态方法\\n    // 注意：接口的静态方法必须用接口的类名本身来调用\\n    static void inAddr(){\\n        System.out.println(\\\"我们在吉山区~~~~\\\");\\n    }\\n\\n    // c.私有方法（就是私有的实例方法）: JDK 1.9才开始有的。\\n    //  -- 只能在本接口中被其他的默认方法或者私有方法访问。\\n    private void go(){\\n        System.out.println(\\\"开始。。\\\");\\n    }\\n}\\n```\\n\\n### 接口的注意事项\\n\\n* 如果实现了多个接口，多个接口存在同名的**静态方法**并不会从冲突，原因是只能通过各自接口方法访问各自静态方法\\n* 当一个类，即继承一个父类，又实现若干个接口时，父类的成员方法与接口中的默认方法重名时，之类**就近**选择执行父类的成员方法\\n* 当一个类实现多个接口时，多个接口存在同名的默认方法，实现类必须重写这个方法\\n\\n## 代码块\\n\\n代码块按照有无`static`修饰可以分为：静态代码块、实例代码块\\n\\n### 静态代码块\\n\\n静态代码块：必须用`static`修饰，必须放在类下，与类一起优先加载执行\\n\\n静态代码块可以用于执行类的方法之前进行静态资源的初始化操作\\n\\n```java\\npublic class CodeDemo01 {\\n    public static String schoolName ;\\n    public static ArrayList<String> lists = new ArrayList<>();\\n\\n    // 静态代码块,属于类，与类一起加载一次!\\n    static {\\n        System.out.println(\\\"静态代码块被触发执行~~~~~~~\\\");\\n        // 在静态代码块中进行静态资源的初始化操作\\n        schoolName = \\\"黑马\\\";\\n        lists.add(\\\"3\\\");\\n        lists.add(\\\"4\\\");\\n        lists.add(\\\"5\\\");\\n    }\\n\\n    public static void main(String[] args) {\\n        System.out.println(schoolName);\\n        System.out.println(lists);\\n    }\\n}\\n```\\n\\n### 实例代码块\\n\\n* 实例代码块直接用`{}`括起来，无需`static`修饰\\n* 会和类的对象一起加载，每次创建对象的时候，实例代码块会被加载且自动执行一次\\n* 实例代码块的代码在底层实际上是提取到每个构造器中去执行的，**实例代码块属于对象**\\n* 实例代码块可以在创建对象之前进行实例资源的初始化操作\\n\\n```java\\npublic class CodeDemo02 {\\n    private String name;\\n    private ArrayList<String> lists = new ArrayList<>();\\n    // 实例代码块！属于对象！与对象一起加载!\\n    {\\n        name = \\\"小手\\\";\\n        lists.add(\\\"东\\\");\\n        lists.add(\\\"南\\\");\\n        lists.add(\\\"西\\\");\\n        lists.add(\\\"北\\\");\\n        System.out.println(\\\"实例代码块被触发执行一次~~~~~~~~\\\");\\n    }\\n\\n    public CodeDemo02(){\\n\\n    }\\n    public CodeDemo02(String name){\\n\\n    }\\n\\n    public static void main(String[] args) {\\n        CodeDemo02 c = new CodeDemo02();\\n        System.out.println(c.name);\\n        System.out.println(c.lists);\\n        new CodeDemo02();\\n        new CodeDemo02();\\n    }\\n}\\n```\\n\\n## final关键词\\n\\n`final`可以用于修饰类、方法、变量\\n\\n* `final`修饰类：类不能被继承了\\n* `final`修饰方法：方法不能被重写\\n* `final`修饰变量：变量有且仅能被赋值一次\\n  * 局部变量-只能赋值一次，不能在更改\\n  * 实例成员变量\\n    * 显示初始化，在定义成员变量的时候立马赋值\\n    * 实例代码块中赋值一次\\n    * 构造器初始化，在构造器中赋值一次\\n\\n`final`和`abstract`的关系\\n\\n互斥关系，不能同时修饰类或者同时修饰方法\\n\\n**常量**：有`public static final`修饰，名称字母全部大写，多个单词用下划线连接\\n\\n## 单例设计模式\\n\\n**单例**的意思是一个类永远只存在一个对象，不能创建多个对象\\n\\n* 开发中有很多类的对象我们只需要一个对象，例如虚拟机，任务管理器对象\\n* 对象越多越占内存，有时候只需要一个对象就可以实现业务，单例可以节约内存，提高性能\\n\\n### 饿汉单例设计模式\\n\\n通过类获取单例对象的时候，对象已经提前准备做好了\\n\\n设计步骤：\\n\\n* 定义一个类，把**构造器私有**\\n* 定义一个静态变量存储一个对象\\n* 提供一个返回单例对象的方法\\n\\n```java\\n// 饿汉单例设计模式\\nclass Singleton01{\\n    //  b.定义一个静态变量存储一个对象( 在用类获取对象的时候，对象已经提前为你创建好了。)\\n    private static final Singleton01 INSTANCE = new Singleton01();\\n    //  a.定义一个类，把构造器私有。\\n    private Singleton01(){\\n    }\\n    // c.提供一个返回单例对象的方法。\\n    public static Singleton01 getInstance(){\\n        return INSTANCE;\\n    }\\n}\\n```\\n\\n### 懒汉单例设计模式\\n\\n通过类获取单例对象的时候发现没有对象才会去创建一个对象\\n\\n设计步骤：\\n\\n* 定义一个类，把**构造器私有**\\n* 定义一个静态成员变量用于存储一个对象\\n* 提供一个返回单例对象的方法，判断对象不存在才创建一次，存在直接返回\\n\\n```java\\n// 懒汉单例设计模式\\nclass Singleton02{\\n    //  b.定义一个静态变量存储一个对象(这里不能创建对象，需要的时候才创建，这里只是一个变量用于存储对象！)\\n    public static Singleton02  instance ;\\n\\n    //   a.定义一个类，把构造器私有。\\n    private Singleton02(){\\n\\n    }\\n    //  c.提供一个返回单例对象的方法。\\n    public static Singleton02 getInstance(){\\n        if(instance == null){\\n            // 第一次来拿单例对象！需要创建一次对象，以后直接返回！！\\n            instance = new Singleton02();\\n        }\\n        return instance;\\n    }\\n}\\n```\\n\\n## 枚举\\n\\n枚举类的作用：是为了做信息的标志和信息分类\\n\\n### 枚举类基本语法\\n\\n```java\\n修饰符 enum 枚举名称{\\n\\t// 第一行罗列的必须的枚举类的对象名称\\n}\\n```\\n\\n例如\\n\\n```java\\nenum Sex{\\n    BOY , GIRL;\\n}\\n\\n// 枚举\\nenum Season {\\n    SPRING , SUMMER , AUTUMN , WINTER;\\n}\\n```\\n\\n枚举类反编译以后的源代码\\n\\n```Java\\npublic final class Season extends java.lang.Enum<Season> {\\n    public static final Season SPRING = new Season();\\n    public static final Season SUMMER = new Season();\\n    public static final Season AUTUMN = new Season();\\n    public static final Season WINTER = new Season();\\n\\n    public static Season[] values();\\n    public static Season valueOf(java.lang.String);\\n}\\n```\\n\\n### 枚举类的特点\\n\\n* 枚举类是`final`修饰的，不能被继承\\n* 枚举类默认继承了枚举类型`java.lang.Enum`\\n* 枚举类的第一行罗列的是枚举类的对象，而且是用常量存储的\\n* 所以枚举类的第一行写的都是常量名称，默认存储了枚举对象\\n* 枚举类的构造器默认是私有的\\n* 枚举类相当于是多例设计模式\\n\\n> `Java`建议做信息标志和信息分类应该使用**枚举**实现，比较优雅，可以实现可读性，而且入参受限制，不能乱输入\\n\\n# day3-多态、包、权限修饰符、内部类、object类、Date类\\n\\n## 多态==重点==\\n\\n面向对象的三大特征：封装、继承、多态\\n\\n多态的形式：\\n\\n```java\\n父类类型 变量名 = new 子类/实现类构造器;\\n变量名.方法名();\\n```\\n\\n```java\\npublic class PolymorphicDemo {\\n    public static void main(String[] args) {\\n        //  父类类型 对象名称 = new 子类构造器;\\n        Animal dlam = new Cat();\\n        dlam.run(); // 对于方法的调用：编译看左边，运行看右边。\\n        System.out.println(dlam.name); // 对于变量的调用：编译看左边，运行看左边。\\n\\n        Animal taiDi = new Dog();\\n        taiDi.run(); // 对于方法的调用：编译看左边，运行看右边。\\n        System.out.println(taiDi.name); // 对于变量的调用：编译看左边，运行看左边。\\n    }\\n}\\n\\nclass Dog extends Animal{\\n    public String name = \\\"🐶名称Dog\\\";\\n    @Override\\n    public void run(){\\n        System.out.println(\\\"🐕跑的贼快~~~~！\\\");\\n    }\\n}\\n\\nclass Cat extends Animal{\\n    public String name = \\\"🐱名称Cat\\\";\\n    @Override\\n    public void run(){\\n        System.out.println(\\\"🐱跑的飞快~~~~！\\\");\\n    }\\n}\\n\\nclass Animal{\\n    public String name = \\\"动物名称Animal\\\";\\n    public void run(){\\n        System.out.println(\\\"动物跑！\\\");\\n    }\\n}\\n```\\n\\n**多态的概念：**同一个类型的对象，执行同一个行为，在不同的状态下会表现出不同的行为特征\\n\\n**多态的识别技巧：**\\n\\n* 对于方法的调用：编译看左边，运行看右边\\n* 对于变量的调用：编译看左边，运行看左边\\n\\n**多态的使用前提**\\n\\n* 必须存在继承或者实现关系\\n* 必须存在父类类型的变量引用子类类型的对象\\n* 需要存在方法重写\\n\\n### 多态的优劣势\\n\\n优势：\\n\\n* 在多态形式下，右边对象可以实现组件化切换，业务功能也随之改变，便于扩展和维护。可以实现类与类之间的解耦\\n* 实际开发中，父类类型作为方法形式参数，传递之类对象给方法，可以传递一切子类对象进行方法的调用，更能体现出多态的扩展性与便利\\n\\n劣势：\\n\\n* **多态形式下，不能直接调用子类特有的功能**。编译看左边！！左边父类没有子类独有的功能，所以代码在编译阶段就直接报错了\\n\\n### 引用类型自动类型转换\\n\\n基本数据类型的转换\\n\\n* 小范围类型的变量或者值可以**直接赋值**给大范围类型的变量。\\n* 大范围类型的变量或者值**必须强制类型转换**给小范围类型的变量。\\n\\n所以引用类型转换的思想也一样\\n\\n子类类型的对象或者变量可以自动类型转换赋值给父类类型的变量\\n\\n> 引用类型的自动类型转换并不能解决多态的劣势\\n\\n### 引用类型的强制类型转换\\n\\n父类类型的变量或者对象必须强制类型转换成子类类型的变量，否则报错!\\n\\n```java\\n类型 变量名称 = (类型)(对象或者变量)\\n```\\n\\n注意：有**继承/实现关系**的两个类型就可以进行强制类型转换，编译阶段一定不报错！但是运行阶段可能出现：类型转换**异常** `ClassCastException`\\n\\nJava建议在进行强制类型转换之前先判断变量的真实类型，再强制类型转换!\\n\\n`变量 instanceof 类型`： 判断前面的变量是否是后面的类型或者其子类类型才会返回`true`\\n\\n```java\\npublic class PolymorphicDemo {\\n    public static void main(String[] args) {\\n        Animal a = new Wolf();\\n        a.run();\\n        // a.catchSheep(); // 报错！\\n\\n        // 1.把动物类型的变量a 转换成 真实的狼类型\\n        Wolf w = (Wolf) a;\\n        w.catchSheep();\\n\\n        // 2.多态下类型转换异常问题研究（重点）\\n        Animal a1 = new Cat();\\n        //Wolf w1 = (Wolf) a1; // 编译阶段没有报错！在运行阶段出现ClassCastException类型转换成！\\n\\n        if(a1 instanceof Cat){\\n            Cat c1 = (Cat) a1;\\n            c1.catchMouse();\\n        }else if(a1 instanceof Wolf){\\n            Wolf w1 = (Wolf) a1;\\n            w1.catchSheep();\\n        }\\n    }\\n}\\n\\nclass Wolf extends Animal{\\n    @Override\\n    public void run(){\\n        System.out.println(\\\"狼跑的飞快~~~\\\");\\n    }\\n\\n    public void catchSheep(){\\n        System.out.println(\\\"🐺抓🐏\\\");\\n    }\\n}\\n\\nclass Cat extends Animal{\\n    @Override\\n    public void run(){\\n        System.out.println(\\\"猫跑的贼快~~~\\\");\\n    }\\n\\n    public void catchMouse(){\\n        System.out.println(\\\"🐱抓🐀~~\\\");\\n    }\\n}\\n\\nclass Animal{\\n    public void run(){\\n        System.out.println(\\\"动物可以跑~~\\\");\\n    }\\n}\\n```\\n\\n### 多态接口的综合案例\\n\\n```java\\npublic class Demo {\\n    public static void main(String[] args) {\\n        // 1.买一部电脑\\n        Computer c = new Computer();\\n        // 2.买一个鼠标\\n        USB xiaoMi = new Mouse(\\\"小米鼠标\\\");\\n        c.install(xiaoMi);\\n        // 3.买一个键盘\\n        KeyBoard sfy = new KeyBoard(\\\"双飞燕键盘\\\");\\n        c.install(sfy);\\n    }\\n}\\n\\nclass Computer{\\n    // 提供一个安装USB设备的入口\\n    public void install(USB usb){\\n        usb.connect();\\n\\n        // usb.dbclick();\\n        // usb可能是鼠标，也可能键盘 .....\\n        if(usb instanceof Mouse){\\n            Mouse m = (Mouse) usb;\\n            m.dbclick();\\n        }else if(usb instanceof KeyBoard){\\n            KeyBoard k = (KeyBoard) usb;\\n            k.keyDown();\\n        }\\n\\n        usb.unconnect();\\n    }\\n}\\n\\n// 定义2个USB设备：鼠标，键盘。\\nclass Mouse implements USB{\\n    private String name;\\n\\n    public Mouse(String name) {\\n        this.name = name;\\n    }\\n\\n    // 双击\\n    public void dbclick(){\\n        System.out.println(name+\\\"双击了，老铁，6666666~~~~\\\");\\n    }\\n\\n    @Override\\n    public void connect() {\\n        System.out.println(name+\\\"成功接入了设备~~~~\\\");\\n    }\\n\\n    @Override\\n    public void unconnect() {\\n        System.out.println(name+\\\"成功拔出了设备~~~~\\\");\\n    }\\n}\\n\\nclass KeyBoard implements USB{\\n    private String name;\\n\\n    public KeyBoard(String name) {\\n        this.name = name;\\n    }\\n\\n    // 按键\\n    public void keyDown(){\\n        System.out.println(name+\\\"写下了，来了，老弟~~记得点亮小💗💗....\\\");\\n    }\\n\\n    @Override\\n    public void connect() {\\n        System.out.println(name+\\\"成功接入了设备~~~~\\\");\\n    }\\n\\n    @Override\\n    public void unconnect() {\\n        System.out.println(name+\\\"成功拔出了设备~~~~\\\");\\n    }\\n}\\n\\n// 定义USB的规范，必须要完成接入和拔出的功能！！\\ninterface USB{\\n    void connect();    // 接入\\n    void unconnect();  // 拔出\\n}\\n```\\n\\n## 内部类\\n\\n内部类是类的五大成分之一：成员变量、方法、构造器、代码块、内部类\\n\\n内部类是定义在一个类里面的类\\n\\n内部类有什么用\\n\\n* 可以提供更好的封装性\\n* 内部类有更多的权限修饰符\\n* 其封装有更多的控制\\n* 可以体现出组件的思想\\n\\n内部类的分类：\\n\\n* 静态内部类\\n* 实例内部类（成员内部类）\\n* 局部内部类\\n* **匿名内部类**\\n\\n### 静态内部类\\n\\n有`static`修饰，属于外部类本身，会加载一次\\n\\n成分研究：\\n\\n* 类有的成分它都有，静态内部类属于外部类本身，只会加载一次\\n* 所以它的特点与外部类是完全一样的，只是位置在别人里面而已。\\n\\n外部类=宿主\\n\\n内部类=寄生\\n\\n静态内部类的访问格式：\\n\\n```\\n外部类名称.内部类名称\\n```\\n\\n静态内部类创建对象的格式：\\n\\n```\\n外部类名称.内部类名称 对象名称 = new 外部类名称.内部类构造器;\\n```\\n\\n静态内部类的访问拓展：\\n\\n* 静态内部类中是否可以直接访问外部类的静态成员?可以的，外部类的静态成员只有一份，可以被共享！\\n* 静态内部类中是否可以直接访问外部类的实例成员?不可以的,外部类的是成员必须用外部类对象访问！！\\n\\n```java\\nclass Outter{\\n    public static int age1 = 12;\\n    private double salary;\\n\\n    // 静态内部类：有static修饰，属于外部类本身，只会加载一次\\n    public static class Inner{\\n        private String name;\\n        private int age;\\n        public static String schoolName = \\\"黑马\\\";\\n\\n        public void show() {\\n            System.out.println(name+\\\"-->\\\"+age+\\\"岁~\\\");\\n            System.out.println(age1);\\n            //System.out.println(salary);\\n        }\\n\\n        public Inner() {\\n        }\\n\\n        public Inner(String name, int age) {\\n            this.name = name;\\n            this.age = age;\\n        }\\n\\n        public String getName() {\\n            return name;\\n        }\\n\\n        public void setName(String name) {\\n            this.name = name;\\n        }\\n\\n        public int getAge() {\\n            return age;\\n        }\\n\\n        public void setAge(int age) {\\n            this.age = age;\\n        }\\n\\n    }\\n}\\n```\\n\\n### 实例内部类（成员内部类）\\n\\n无`static`修饰的内部类，属于外部类的每个对象的，跟着对象一起加载的\\n\\n实例内部类的成分特点：\\n\\n* 实例内部类中不能定义静态成员，其他都可以定义\\n* 可以定义常量\\n\\n实例内部类的访问格式：\\n\\n```\\n外部类名称.内部类名称\\n```\\n\\n创建对象的格式：\\n\\n```\\n外部类名称.内部类名称 对象名称 = new 外部类构造器.new 内部构造器;\\n```\\n\\n拓展：\\n\\n* 实例内部类中是否可以直接访问外部类的静态成员\\n\\n  可以的，外部类的静态成员可以被共享访问\\n\\n* 实例内部类中是否可以访问外部类的实例成员\\n\\n  可以的，实例内部类属于外部类对象，可以直接访问当前外部类对象的实例成员\\n\\n> 实例内部类属于外部类对象，需要用外部类对象一起加载，**实例内部类可以访问外部类的全部成员**\\n\\n```java\\npublic class InnerClass {\\n    public static void main(String[] args) {\\n        // 实例内部类属于外部类对象。实例内部类的宿主是外部类对象！！\\n        Outter.Inner in = new Outter().new Inner();\\n        in.show();\\n    }\\n}\\n// 外部类\\nclass Outter{\\n    public static int age = 1;\\n    private double salary;\\n\\n    // 实例内部类：无static修饰，属于外部类的对象\\n    public class Inner{\\n        private String name ;\\n\\n        public static final String schoolName = \\\"黑马\\\";\\n        // 不能在实例内部类中定义静态成员！！！\\n//      public static String schoolName = \\\"黑马\\\";\\n//      public static void test(){\\n//\\n//      }\\n\\n        // 实例方法\\n        public void show(){\\n            System.out.println(name+\\\"名称！\\\");\\n            System.out.println(age);\\n            System.out.println(salary);\\n        }\\n\\n        public String getName() {\\n            return name;\\n        }\\n\\n        public void setName(String name) {\\n            this.name = name;\\n        }\\n    }\\n}\\n```\\n\\n### 局部内部类\\n\\n定义在方法中，在构造器中，代码块中，for循环中定义的内部类，就是局部内部类。\\n\\n局部内部类中的成分特点：\\n\\n* 只能定义实例成员，不能定义静态成员\\n* 可以定义常量的\\n\\n```java\\npublic class InnerClass {\\n\\n    static {\\n        abstract class A{\\n\\n        }\\n    }\\n\\n    public static void main(String[] args) {\\n        class A{\\n            private String name;\\n\\n            public void test(){\\n            }\\n            public String getName() {\\n                return name;\\n            }\\n\\n            public void setName(String name) {\\n                this.name = name;\\n            }\\n        }\\n        A a = new A();\\n        a.test();\\n    }\\n\\n    public static void test(){\\n       class Animal{\\n\\n       }\\n\\n       class Cat extends Animal{\\n\\n       }\\n    }\\n}\\n```\\n\\n### 匿名内部类\\n\\n就是一个没有名字的局部内部类\\n\\n匿名内部类目的是为了：简化代码，也是开发中常用的形式\\n\\n匿名内部类的格式：\\n\\n```java\\nnew 类名|抽象类|接口(形参){\\n方法重写。\\n}\\n```\\n\\n 匿名内部类的特点：\\n\\n* 匿名内部类是一个没有名字的内部类\\n* 匿名内部类一旦写出来，就会立即创建一个匿名内部类的对象返回\\n* 匿名内部类的对象的类型相当于是当前`new`的那个的类型的子类类型。\\n\\n```java\\npublic class Anonymity {\\n    public static void main(String[] args) {\\n        Animal a = new Animal(){\\n            @Override\\n            public void run() {\\n                System.out.println(\\\"猫跑的贼溜~~\\\");\\n            }\\n        };\\n        a.run();\\n        a.go();\\n\\n        Animal a1 = new Animal() {\\n            @Override\\n            public void run() {\\n                System.out.println(\\\"狗跑的贼快~~~\\\");\\n            }\\n        };\\n        a1.run();\\n        a.go();\\n\\n\\n    }\\n}\\nabstract class Animal{\\n    public abstract void run();\\n\\n    public void go(){\\n        System.out.println(\\\"开始go~~~\\\");\\n    }\\n}\\n```\\n\\n匿名内部类的使用形式\\n\\n```java\\npublic class Anonymity02 {\\n    public static void main(String[] args) {\\n        Swim bozai = new Swim() {\\n            @Override\\n            public void swimming() {\\n                System.out.println(\\\"老师🏊‍的贼溜~~~~\\\");\\n            }\\n        };\\n        go(bozai);\\n\\n        Swim boniu = new Swim() {\\n            @Override\\n            public void swimming() {\\n                System.out.println(\\\"波妞学生快乐的狗爬式~~~\\\");\\n            }\\n        };\\n        go(boniu);\\n\\n        go(new Swim() {\\n            @Override\\n            public void swimming() {\\n                System.out.println(\\\"波妞2学生快乐的狗爬式~~~\\\");\\n            }\\n        });\\n    }\\n\\n    // 提供一个方法让全部角色进入比赛\\n    public static void go(Swim s){\\n        System.out.println(\\\"开始。。。。\\\");\\n        s.swimming();\\n        System.out.println(\\\"结束。。。。\\\");\\n    }\\n}\\n\\ninterface Swim{\\n    void swimming();\\n}\\n```\\n\\n## 包和权限修饰符\\n\\n## 包\\n\\n* 分门别类的管理各种不同的技术。\\n* 企业的代码必须用包区分。便于管理技术，扩展技术，阅读技术。\\n\\n定义包的格式：\\n\\n`package 包名;`\\n\\n必须放在类名的最上面\\n一般工具已经帮我们做好了\\n\\n包名的命名规范：\\n\\n* 一般是公司域名的倒写+技术名称：\\n* http://www.itheima.com => com.itheima.技术名称\\n* 包名建议全部用英文，多个单词用”.“连接，必须是合法标识符，不能用关键字\\n\\n注意\\n\\n* 相同包下的类可以直接访问\\n* 不同包下的类必须导包,才可以使用\\n* 导包格式：`import 包名.类名;`\\n\\n### 权限修饰符\\n\\n权限修饰符：有四种（`private `-> `default`-> `protected `- > `public` ）\\n\\n可以修饰成员变量，修饰方法，修饰构造器，内部类，不同修饰符修饰的成员能够被访问的权限将受到限制!\\n\\n![image-20220525204748483](http://47.108.219.199:81/articles/image-20220525204748483.png)\\n\\n## Object类\\n\\n`Object`类是Java中的祖宗类\\n\\n* 一个类要么默认继承了`Object`类，要么间接继承了`Object`类\\n* `Object`类的方法是一切子类都可以直接使用的，所以我们要学习`Object`类的方法。\\n\\n`Object`类的常用方法：\\n\\n* `public String toString():`\\n\\n  * 默认是返回当前对象在堆内存中的地址信息\\n\\n    `com.itheima._12Object类的详细使用.Student@735b478`\\n\\n  * 默认的地址信息格式：类的全限名@内存地址\\n\\n  * 直接输出对象名称，默认会调用toString()方法，所以直接输出对象可以省略toString()不写。\\n\\n  * 实际开发中直接输出对象，输出对象的地址其实是没有意义的。\\n\\n  * 所以`toString`方法存在的意义是为了被子类重写，以便能够返回对象的数据内容输出。因为实际开发中我们输出对象更多的时候是希望看到对象的数据内容信息\\n\\n> * 开发中如果希望输出对象看到对象的内容，只需要重写`toString()`方法即可\\n> * 所以`toString`方法存在的意义是为了被子类重写\\n\\n* `public boolean equals(Object o)`\\n  * 默认是比较两个对象的地址是否相同。相同返回`true`，反之\\n  * 直接比较两个对象的地址是否相同完全可以用`==`替代`equals`，所以`equals`存在的意义是为了被子类重写，以便程序员可以自己来定制比较规则\\n\\n只要两个对象的内容一样，我们就认为他们是相等的。\\n\\n> `equals`存在的意义是为了被子类重写，以便程序员自己来定制比较规则\\n\\n```java\\n@Override\\n    public boolean equals(Object o) {\\n        // 1.判断是否自己和自己比较，如果是同一个对象比较直接返回true\\n        if (this == o) return true;\\n        // 2.判断被比较者是否为null ,以及是否是学生类型。\\n        if (o == null || this.getClass() != o.getClass()) return false;\\n        // 3.o一定是学生类型，强制转换成学生，开始比较内容！\\n        Student student = (Student) o;\\n        return age == student.age &&\\n                sex == student.sex &&\\n                Objects.equals(name, student.name);\\n    }\\n\\n    // 重写Object的toString()以便返回对象的内容数据\\n\\n    @Override\\n    public String toString() {\\n        return \\\"Student{\\\" +\\n                \\\"name=\'\\\" + name + \'\\\\\'\' +\\n                \\\", age=\\\" + age +\\n                \\\", sex=\\\" + sex +\\n                \'}\';\\n    }\\n```\\n\\n> idea可以自动生成`equals()`和`toString()`，直接按下快捷键`ALT+INSERT`，选择`generate`即可\\n\\n## Objects类\\n\\n* `Objects`类与`Object`还是继承关系\\n* `Objects`类是从JDK 1.7开始之后才有的。\\n\\n`Objects`的方法：\\n\\n* `public static boolean equals(Object a, Object b)`\\n\\n  * 比较两个对象的\\n\\n  * 底层进行非空判断，从而可以**避免空指针异常**。更安全，推荐使用\\n\\n    ```java\\n    public static boolean equals(Object a, Object b) {\\n    \\treturn a == b || a != null && a.equals(b);\\n    }\\n    ```\\n\\n  * `public static boolean isNull(Object obj)`\\n\\n    判断变量是否为`null`,为`null`返回`true`, 反之`false`\\n\\n## Date类\\n\\nJava是面向对象的，会用一个类代表一个事物\\n\\n`Date`类在Java中代表的是系统当前此刻日期时间对象。\\n\\n`Date`类：\\n\\n包：`java.util.Date`\\n\\n* 构造器：\\n  `public Date()` 创建当前系统的此刻日期时间对象。\\n  `public Date(long time)`\\n\\n```java\\nimport java.util.Date;\\n\\npublic class DateDemo01 {\\n    public static void main(String[] args) {\\n        // a.创建一个日期对象代表了系统此刻日期时间对象\\n        Date d = new Date();\\n        System.out.println(d);\\n\\n        // b.拿当前日期对象的时间毫秒值\\n        long time = d.getTime();\\n        System.out.println(time);\\n    }\\n}\\n```\\n\\n* 方法\\n\\n  `public long getTime()`: 返回自 1970 年 1 月 1 日 00:00:00 GMT 以来走过的总的毫秒数。\\n\\n时间记录的两种方式：\\n`Date`日期对象。\\n时间毫秒值：从1970-01-01 00:00:00开始走到此刻的总的毫秒值。 1s = 1000ms\\n\\n小结：\\n\\n* `Date`可以代表系统当前此刻日期时间对象。\\n* 时间记录的两种方式：\\n  * `Date`日期对象。\\n  * 时间毫秒值：从1970-01-01 00:00:00开始走到此刻的总的毫秒值。 1s = 1000ms\\n\\n```java\\nimport java.util.Date;\\n\\npublic class DateDemo02 {\\n    public static void main(String[] args) {\\n        // 1.拿到此刻日期时间对象的毫秒值\\n        long startTime = new Date().getTime();\\n        for(int i = 1; i < 1000000 ; i++ ){\\n            System.out.println(\\\"输出：\\\"+i);\\n        }\\n        // 2.拿到此刻日期时间对象的毫秒值\\n        long endTime = new Date().getTime();\\n        System.out.println( (endTime - startTime) / 1000.0 +\\\"s\\\");\\n    }\\n}\\n```\\n\\n`Date`类的有参数构造器的使用。\\n\\n构造器：\\n\\n* `public Date()`:创建当前系统的此刻日期时间对象。\\n* `public Date(long time)`:把时间毫秒值转换成日期对象。\\n\\n流程\\n\\n* `Date`日期对象 ->` getTime()` -> 时间毫秒值\\n* 时间毫秒值 ->` new Date(时间毫秒值)` -> `Date`日期对象\\n\\n# day4-常用API、正则表达式、泛型、Collection集合API\\n\\n## 第一章 DateFormat类\\n\\n简单日期格式化类`SimpleDateFormat`可以把日期对象格式化成我们喜欢的时间形式\\n\\n```java\\n// 1.得到此刻日期对象\\nDate d = new Date();\\nSystem.out.println(d);\\n\\n// 2.创建一个简单日期格式化对象负责格式化日期对象\\n// 注意：参数是之间的格式。\\nSimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy年MM月dd日 HH:mm:ss EEE a\\\");\\n\\n// 3.开始调用方法格式化时间得到格式化的字符串时间形式\\nString rs = sdf.format(d);\\nSystem.out.println(rs);\\n```\\n\\n也可以直接格式化时间毫秒值\\n\\n```java\\n// 1.问121s后的时间是多少。格式化输出。\\n// a.得到此刻日期对象\\nDate date = new Date();\\nSystem.out.println(date);\\n\\n// b.得到当前时间的时间毫秒值\\nlong time = date.getTime();\\ntime += 121 * 1000;\\n\\n// c.格式化时间毫秒值\\nSimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy年MM月dd日 HH:mm:ss EEE a\\\");\\nSystem.out.println(sdf.format(time));\\n```\\n\\n简单日期格式化类`SimpleDateFormat`解析字符串时间成为日期对象\\n\\n```java\\n// a.定义一个字符串时间\\nString date = \\\"2019-11-04 09:30:30\\\";\\n\\n// b.把字符串的时间解析成Date日期对象 。（重点）\\n// 1.创建一个简单日期格式化对象负责解析字符串的时间成为日期对象\\n// 注意：参数必须与被解析的时间的格式完全一致，否则执行报错！！\\nSimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\");\\n// 2.开始解析成日期对象\\nDate newDate = sdf.parse(date);\\n\\n// c.得到日期对象的时间毫秒值 + 往后走 1天15小时，30分29s\\nlong time = newDate.getTime() + (24L *60*60 + 15*60*60 + 30*60 + 29) * 1000;\\n\\n// d.把时间毫秒值格式化成喜欢的字符串的时间形式!\\nSystem.out.println(sdf.format(time));\\n```\\n\\n## 第二章 Calendar类\\n\\n`Calendar`代表了系统此刻日期对应的日历对象。\\n\\n`Calendar`是一个抽象类，不能直接创建对象。\\n\\n`Calendar`日历类创建日历对象的语法：\\n\\n```java\\nCalendar rightNow = Calendar.getInstance();\\n```\\n\\n`Calendar`的方法：\\n\\n* `public static Calendar getInstance()`: 返回一个日历类的对象。\\n* `public int get(int field)`：取日期中的某个字段信息。\\n* `public void set(int field,int value)`：修改日历的某个字段信息。\\n* `public void add(int field,int amount)`：为某个字段增加/减少指定的值\\n* `public final Date getTime()`: 拿到此刻日期对象。\\n* `public long getTimeInMillis()`: 拿到此刻时间毫秒值\\n\\n```java\\n// 1.通过调用日历类的静态方法getInstance得到一个当前此刻日期对象对应的日历对象。\\nCalendar rightNow = Calendar.getInstance();\\nSystem.out.println(rightNow);\\n\\n// 2.获取年：\\nint year = rightNow.get(Calendar.YEAR);\\nSystem.out.println(year);\\n\\nint mm = rightNow.get(Calendar.MONTH) + 1;\\nSystem.out.println(mm);\\n\\n// 3.一年中的第几天: 308\\nint days = rightNow.get(Calendar.DAY_OF_YEAR);\\nSystem.out.println(days);\\n\\n// 4.修改日历的信息\\n//rightNow.set(Calendar.YEAR , 2099);\\n//System.out.println(rightNow.get(Calendar.YEAR));\\n\\n// 5.日历可以得到此刻日期对象。\\nDate d = rightNow.getTime();\\nSystem.out.println(d);\\n\\n// 6.此刻时间毫秒值\\nlong time = rightNow.getTimeInMillis();\\nSystem.out.println(time);\\n\\n// 7.请问701天  15小时后是哪个日期\\n// 让日历的一年中的第几天往后走 701天！\\nrightNow.add(Calendar.DAY_OF_YEAR , 701);\\nrightNow.add(Calendar.HOUR , 15);\\nlong time1 = rightNow.getTimeInMillis();\\nSimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy年MM月dd日 HH:mm:ss EEE a\\\");\\nSystem.out.println(sdf.format(time1));\\n```\\n\\n## 第三章 Math类\\n\\n* `Math`用于做数学运算\\n* `Math`类中的方法全部是静态方法，直接用类名调用即可。\\n\\n常用方法\\n\\n- `public static int abs(int a)`                  获取参数a的绝对值：\\n- `public static double ceil(double a) `          向上取整\\n- `public static double floor(double a)`     向下取整\\n- `public static double pow(double a, double b) ` 获取a的b次幂        \\n- `public static long round(double a)`         四舍五入取整\\n\\n## 第四章 System类\\n\\n`System`系统类的使用，`System`代表当前系统\\n\\n静态方法：\\n\\n* `public static void exit(int status)`:终止JVM虚拟机，非0是异常终止。\\n* `public static long currentTimeMillis()`:获取当前系统此刻时间毫秒值。\\n* 可以做数组的拷贝。\\n  `arraycopy(Object var0, int var1, Object var2, int var3, int var4);`\\n     * 参数一：原数组\\n     * 参数二：从原数组的哪个位置开始赋值。\\n     * 参数三：目标数组\\n     * 参数四：赋值到目标数组的哪个位置\\n     * 参数五：赋值几个。\\n\\n## 第五章 BigDecimal类\\n\\n`BigDecimal`大数据类\\n\\n* 浮点型运算的时候直接+  * / 可能会出现数据失真（精度问题）\\n* `BigDecimal`可以解决浮点型运算数据失真的问题\\n\\n包：`java.math.`\\n创建对象的方式（最好的方式：）\\n      `public static BigDecimal valueOf(double val)` :包装浮点数成为大数据对象。\\n方法声明\\n\\n- `public BigDecimal add(BigDecimal value)`       加法运算\\n- `public BigDecimal subtract(BigDecimal value)`  减法运算 \\n- `public BigDecimal multiply(BigDecimal value) ` 乘法运算 \\n- `public BigDecimal divide(BigDecimal value)`    除法运算\\n- `public double doubleValue()`     把`BigDecimal`转换成`double`类型。\\n\\n```java\\ndouble a = 0.1 ;\\ndouble b = 0.2 ;\\n// 1.把浮点数转换成大数据对象运算\\nBigDecimal a1 = BigDecimal.valueOf(a);\\nBigDecimal b1 = BigDecimal.valueOf(b);\\n//BigDecimal c1 = a1.add(b1);  // 加法\\nBigDecimal c1 = a1.divide(b1); // 除法\\nSystem.out.println(c1);\\n\\n// 结果可能需要继续使用!!!\\n// BigDecimal只是解决精度问题的手段，double数据才是我们的目的！！\\ndouble rs = c1.doubleValue();\\nSystem.out.println(rs);\\n```\\n\\n## 第六章 包装类\\n\\n`Java`认为一切皆对象。引用数据类型就是对象了\\n\\n但是在`Java中8`基本数据类型不是对象，只是表示一种数据的类型形式,这8种数据类型显得很突兀\\n\\n`Java`为了一切皆对象的思想统一，把8种基本数据类型转换成对应的类，这个类称为基本数据类型的包装类。\\n\\n基本数据类型                    包装类（引用数据类型）\\n     byte                      \\t\\t\\tByte\\n     short                    \\t\\t\\t Short\\n     int                    \\t\\t\\t   Integer(特殊)\\n     long                    \\t\\t\\t  Long\\n\\n​     float                  \\t  \\t\\t Float\\n​     double                   \\t\\t Double\\n​     char                   \\t\\t   Character(特殊)\\n​     boolean                 \\t\\t\\t  Boolean\\n\\n* 自动装箱：可以直接把基本数据类型的值或者变量赋值给包装类\\n* 自动拆箱：可以把包装类的变量直接赋值给基本数据类型\\n\\n```java\\nint a = 12 ;\\nInteger a1 = 12 ;  // 自动装箱\\nInteger a2 = a ;   // 自动装箱\\n\\ndouble b = 99.9;\\nDouble b1 = 99.9; // 自动装箱\\nDouble b2 = b ;   // 自动装箱\\n\\nInteger c = 100 ;\\nint c1 = c ;      // 自动拆箱\\n\\nint d = 12;\\nInteger d1 = null; // 引用数据类型的默认值可以为null\\nInteger d2 = 0;\\n\\nSystem.out.println(\\\"-----------------\\\");\\nInteger it = Integer.valueOf(12);  // 手工装箱！\\n// Integer it1 = new Integer(12); // 手工装箱！\\nInteger it2 = 12;\\n\\n\\nInteger it3 = 111 ;\\nint it33 = it3.intValue(); // 手工拆箱\\nint it333 = it3;\\n```\\n\\n* Java为包装类做了一些特殊功能，以便程序员使用\\n* 包装类作为类首先拥有了`Object`类的方法\\n* 包装类作为引用类型的变量可以存储`null`值\\n\\n* 可以把基本数据类型的值转换成字符串类型的值。（没啥用）\\n  * 调用`toString()`方法\\n  * 调用`Integer.toString`(基本数据类型的值)得到字符串\\n  * 直接把基本数据类型+空字符串就得到了字符串\\n* 把字符串类型的数值转换成对应的基本数据类型的值。（真的很有用）\\n  * `Xxx.parseXxx(\\\"字符串类型的数值\\\")`\\n  * `Xxx.valueOf(\\\"字符串类型的数值\\\")` 推荐使用\\n\\n## 第七章 正则表达式\\n\\n是一些特殊字符组成的校验规则，可以校验信息的正确性，校验邮箱是否合法，例如电话号码，金额等。\\n\\n字符类\\n     \\n\\n```\\n[abc] a、b 或 c（简单类）\\n[^abc] 任何字符，除了 a、b 或 c（否定）\\n[a-zA-Z] a 到 z 或 A 到 Z，两头的字母包括在内（范围）\\n[a-d[m-p]] a 到 d 或 m 到 p：[a-dm-p]（并集）\\n[a-z&&[def23]] d、e 或 f（交集）\\n[a-z&&[^bc]] a 到 z，除了 b 和 c：[ad-z]（减去）\\n[a-z&&[^m-p]] a 到 z，而非 m 到 p：[a-lq-z]（减去）\\n```\\n\\n 预定义字符类\\n\\n```\\n. 任何字符\\n\\\\d 数字：[0-9]\\n\\\\D 非数字： [^0-9]\\n\\\\s 空白字符：[ \\\\t\\\\n\\\\x0B\\\\f\\\\r]\\n\\\\S 非空白字符：[^\\\\s]\\n\\\\w 单词字符：[a-zA-Z_0-9]\\n\\\\W 非单词字符：[^\\\\w]\\n```\\n\\n以上正则匹配只能校验单个字符。\\n\\nGreedy 数量词\\n\\n```\\nX? X，一次或一次也没有\\nX* X，零次或多次\\nX+ X，一次或多次\\nX{n} X，恰好 n 次\\nX{n,} X，至少 n 次\\nX{n,m} X，至少 n 次，但是不超过 m 次\\n```\\n\\n```java\\nprivate static void checkPhone() {\\n        Scanner sc = new Scanner(System.in);\\n        System.out.print(\\\"请您输入电话号码：\\\");\\n        String phone = sc.nextLine();\\n        if(phone.matches(\\\"0\\\\\\\\d{2,5}-?\\\\\\\\d{5,15}\\\")){\\n            System.out.println(\\\"电话号码合法了！\\\");\\n        }else{\\n            System.err.println(\\\"电话号码不正确！\\\");\\n        }\\n    }\\n\\n\\n    private static void checkTel() {\\n        Scanner sc = new Scanner(System.in);\\n        System.out.print(\\\"请您输入手机号码：\\\");\\n        String tel = sc.nextLine();\\n        if(tel.matches(\\\"1[3-9]\\\\\\\\d{9}\\\")){\\n            System.out.println(\\\"手机号码合法了！\\\");\\n        }else{\\n            System.err.println(\\\"手机号码不正确！\\\");\\n        }\\n    }\\n\\n    // 校验邮箱\\n    public static void checkEmail(){\\n        Scanner sc = new Scanner(System.in);\\n        System.out.print(\\\"请您输入邮箱：\\\");\\n        String email = sc.nextLine();\\n        // 3232323@qq.com\\n        // dlei082@163.com\\n        // dlei@pic.com.cn\\n        if(email.matches(\\\"\\\\\\\\w{1,}@\\\\\\\\w{2,10}(\\\\\\\\.\\\\\\\\w{2,10}){1,2}\\\")){\\n            System.out.println(\\\"邮箱合法了！\\\");\\n        }else{\\n            System.err.println(\\\"邮箱格式不正确！\\\");\\n        }\\n    }\\n```\\n\\n`split`可以结合正则表达式分割\\n\\n```java\\n// 1.split的基础用法\\nString names = \\\"贾乃亮,王宝强,陈羽凡\\\";\\n// 以“，”分割成字符串数组\\nString[] nameArrs = names.split(\\\",\\\");\\nfor(int i = 0 ; i < nameArrs.length ; i++ ){\\n    String name = nameArrs[i];\\n    System.out.println(name);\\n}\\n\\nSystem.out.println(\\\"----------------------\\\");\\n// 2.split集合正则表达式做分割\\nString names1 = \\\"贾乃亮lv434fda324王宝强87632fad2342423陈羽凡\\\";\\n// 以匹配正则表达式的内容为分割点分割成字符串数组\\nString[] nameArrs1 = names1.split(\\\"\\\\\\\\w+\\\");\\nfor(int i = 0 ; i < nameArrs1.length ; i++ ){\\n    String name = nameArrs1[i];\\n    System.out.println(name);\\n}\\nSystem.out.println(\\\"----------------------\\\");\\n// 3. public String replaceAll(String regex,String newStr)\\nString names2 = \\\"贾乃亮lv434fda324王宝强87632fad2342423陈羽凡\\\";\\n// 使用正则表达式定位出内容，替换成/\\nSystem.out.println(names2.replaceAll(\\\"\\\\\\\\w+\\\" , \\\"/\\\"));\\n\\nString names3 = \\\"贾乃亮,王宝强,羽凡\\\";\\nSystem.out.println(names3.replaceAll(\\\",\\\",\\\"-\\\"));\\n```\\n\\n正则表达式爬取信息中的内容\\n\\n可以通过`|`将正则表达式连接起来，是**或**的关系\\n\\n```java\\nString rs = \\\"来黑马程序学习Java,电话020-43422424，或者联系邮箱\\\" +\\n    \\\"itcast@itcast.cn,电话18762832633，0203232323\\\" +\\n    \\\"邮箱bozai@itcast.cn，400-100-3233 ，4001003232\\\";\\n// 需求：从上面的内容中爬取出 电话号码和邮箱。\\n// 1.定义爬取规则\\nString regex = \\\"(\\\\\\\\w{1,}@\\\\\\\\w{2,10}(\\\\\\\\.\\\\\\\\w{2,10}){1,2})|(1[3-9]\\\\\\\\d{9})|(0\\\\\\\\d{2,5}-?\\\\\\\\d{5,15})|400-?\\\\\\\\d{3,8}-?\\\\\\\\d{3,8}\\\";\\n// 2.编译正则表达式成为一个匹配规则对象\\nPattern pattern = Pattern.compile(regex);\\n// 3.通过匹配规则对象得到一个匹配数据内容的匹配器对象\\nMatcher matcher = pattern.matcher(rs);\\n// 4.通过匹配器去内容中爬取出信息\\nwhile(matcher.find()){\\n    System.out.println(matcher.group());\\n}\\n```\\n\\n## 第八章 泛型\\n\\n### 泛型概念\\n\\n什么是泛型\\n\\n* 泛型就是一个标签：`<数据类型>`\\n* 泛型可以在编译阶段约束只能操作某种数据类型\\n\\n> * JDK 1.7开始之后，泛型后面的申明可以省略不写\\n> * **泛型和集合都只能支持引用数据类型，不支持基本数据类型**\\n\\n### 泛型的好处\\n\\n* 泛型在编译阶段约束了操作的数据类型，从而不会出现类型转换异常\\n* 体现的是Java的严谨性和规范性，数据类型,经常需要进行统一\\n\\n### 自定义泛型\\n\\n使用了泛型定义的类就是泛型类\\n\\n```java\\nclass MyArrayList<E>{\\n\\n    private ArrayList lists = new ArrayList();\\n\\n    public void add(E e){\\n        lists.add(e);\\n    }\\n\\n    public void remove(E e){\\n        lists.remove(e);\\n    }\\n    @Override\\n    public String toString() {\\n        return lists.toString();\\n    }\\n}\\n```\\n\\n### 自定义泛型方法\\n\\n定义了泛型的方法就是泛型方法\\n\\n泛型方法定义格式\\n\\n```java\\n修饰符 <泛型变量> 返回值类型 方法名称(形参列表){\\n\\n}\\n```\\n\\n一个泛型方法的例子\\n\\n```java\\npublic static <T> String arrToString(T[] nums){\\n    StringBuilder sb = new StringBuilder();\\n    sb.append(\\\"[\\\");\\n    if(nums!=null && nums.length > 0){\\n        for(int i = 0 ; i < nums.length ; i++ ){\\n            T ele = nums[i];\\n            sb.append(i == nums.length-1 ? ele : ele+\\\", \\\");\\n        }\\n    }\\n    sb.append(\\\"]\\\");\\n    return sb.toString();\\n}\\n```\\n\\n> 泛型方法是一个通用技术\\n\\n### 泛型接口\\n\\n使用了泛型定义的接口就是泛型接口\\n\\n定义格式\\n\\n```java\\n修饰符 interface 接口名称<泛型变量>{\\n\\n}\\n```\\n\\n例如\\n\\n```java\\npublic interface Data<E> {\\n    void add(E stu);\\n    void delete(E stu);\\n    void update(E stu);\\n    E query(int id);\\n}\\n```\\n\\n> 泛型接口的核心思想，在实现接口的时候传入真实的数据类型\\n>\\n> 这样重写的方法就是对该数据类型进行操作\\n\\n### 泛型的通配符\\n\\n通配符：`?`\\n\\n* `?`可以用在**使用泛型**的时候代表一切类型\\n* `E , T , K , V`是在**定义泛型**的时候使用代表一切类型\\n\\n泛型的上下限：\\n\\n* `? extends Car` : 那么`?`必须是`Car`或者其子类。(泛型的上限)\\n* `? super  Car` :那么`?`必须是`Car`或者其父类。（泛型的下限。不是很常见）\\n\\n```java\\npublic class GenericDemo {\\n    public static void main(String[] args) {\\n        ArrayList<BMW> bmws = new ArrayList<>();\\n        bmws.add(new BMW());\\n        bmws.add(new BMW());\\n        bmws.add(new BMW());\\n        run(bmws);\\n\\n        ArrayList<BENZ> benzs = new ArrayList<>();\\n        benzs.add(new BENZ());\\n        benzs.add(new BENZ());\\n        benzs.add(new BENZ());\\n        run(benzs);\\n\\n        ArrayList<Dog> dogs = new ArrayList<>();\\n        dogs.add(new Dog());\\n        dogs.add(new Dog());\\n        dogs.add(new Dog());\\n        // run(dogs); // 就进不来了！\\n    }\\n\\n    // 定义一个方法，可以让很多汽车一起进入参加比赛\\n    public static void run(ArrayList<? extends Car> cars){\\n\\n    }\\n}\\n\\nclass Car{\\n}\\nclass BMW extends Car{\\n\\n}\\nclass BENZ extends Car{\\n\\n}\\nclass Dog{\\n\\n}\\n```\\n\\n## 第九章 Collection集合\\n\\n### 集合概述\\n\\n什么是集合\\n\\n- 集合是一个大小可变的容器\\n- 容器中的每个数据称为一个元素。数据==元素\\n- 集合的特点是：类型可以不确定，大小不固定。集合有很多种，不同的集合特点和使用场景不同\\n- 数组：类型和长度一旦定义出来就都固定了\\n\\n集合用处\\n\\n- 在开发中，很多时候元素的个数是不确定的。\\n- 而且经常要进行元素的增删该查操作，集合都是非常合适的。\\n- 开发中集合用的更多\\n\\n> - Java中集合的代表是：`Collection`\\n> - `Collection`集合是Java中集合的祖宗类\\n> - 学习Collection集合的功能，那么一切集合都可以用这些功能\\n\\n集合体系\\n\\n```\\n\\t\\t\\t\\t\\t\\t\\t\\tCollection<E>(接口)\\n                      /                                \\\\\\n                 Set<E>(接口)                            List<E>(接口)\\n                /               \\\\                       /                \\\\\\n         HashSet<E>(实现类)  TreeSet<>(实现类)     ArrayList<E>(实现类)  LinekdList<>(实现类)\\n             /\\n         LinkedHashSet<>(实现类)\\n```\\n\\n集合的特点：\\n\\n* `Set`系列集合：添加的元素是无序，不重复，无索引的\\n  * `HashSet`: 添加的元素是无序，不重复，无索引的\\n  * `LinkedHashSet`: 添加的元素是有序，不重复，无索引的\\n  * `TreeSet`: 不重复，无索引，按照大小默认升序排序\\n* `List`系列集合：添加的元素是有序，可重复，有索引\\n  * `ArrayList`：添加的元素是有序，可重复，有索引\\n  * `LinekdList`：添加的元素是有序，可重复，有索引\\n\\n```java\\n// 多态写法：\\n//  HashSet:添加的元素是无序，不重复，无索引的。\\nCollection<String> sets = new HashSet<>();\\nsets.add(\\\"MyBatis\\\");\\nsets.add(\\\"Java\\\");\\nsets.add(\\\"Java\\\");\\nsets.add(\\\"Spring\\\");\\nsets.add(\\\"MySQL\\\");\\nsets.add(\\\"MySQL\\\");\\n// [Java, MySQL, MyBatis, Spring]\\nSystem.out.println(sets);\\n\\n// ArrayList:添加的元素是有序，可重复，有索引。\\nCollection<String> lists = new ArrayList<>();\\nlists.add(\\\"MyBatis\\\");\\nlists.add(\\\"Java\\\");\\nlists.add(\\\"Java\\\");\\nlists.add(\\\"Spring\\\");\\nlists.add(\\\"MySQL\\\");\\nlists.add(\\\"MySQL\\\");\\n// [MyBatis, Java, Java, Spring, MySQL, MySQL]\\nSystem.out.println(lists);\\n```\\n\\n### 集合常用API\\n\\n`Collection`是集合的祖宗类，它的功能是全部集合都可以继承使用的，所以要学习它。\\nCollection API如下：\\n\\n- `public boolean add(E e)`：  把给定的对象添加到当前集合中 。\\n- `public void clear()` :清空集合中所有的元素。\\n- `public boolean remove(E e)`: 把给定的对象在当前集合中删除。\\n- `public boolean contains(Object obj)`: 判断当前集合中是否包含给定的对象。\\n- `public boolean isEmpty()`: 判断当前集合是否为空。\\n- `public int size()`: 返回集合中元素的个数。\\n- `public Object[] toArray()`: 把集合中的元素，存储到数组中\\n\\n```java\\n// HashSet:添加的元素是无序，不重复，无索引。\\nCollection<String> sets = new HashSet<>();\\n// 1.添加元素，添加成功返回true.\\nSystem.out.println(sets.add(\\\"贾乃亮\\\")); // true\\nSystem.out.println(sets.add(\\\"贾乃亮\\\")); // false\\nSystem.out.println(sets.add(\\\"王宝强\\\")); // true\\nsets.add(\\\"陈羽凡\\\");\\nSystem.out.println(sets); // 集合重写了toString()方法，默认打印出内容信息\\n// 2.清空集合的元素。\\n//sets.clear();\\n//System.out.println(sets);\\n\\n// 3.判断集合是否为空 是空返回true 反之\\nSystem.out.println(sets.isEmpty()); // false\\n\\n// 4.获取集合的大小\\nSystem.out.println(sets.size()); // 3\\n\\n// 5.判断集合中是否包含某个元素 。\\nSystem.out.println(sets.contains(\\\"贾乃亮\\\"));\\n\\n// 6.删除某个元素:如果有多个重复元素默认删除前面的第一个！\\nsets.remove(\\\"陈羽凡\\\");\\nSystem.out.println(sets);\\n\\n// 7.把集合转换成数组\\nObject[] arrs = sets.toArray();\\nSystem.out.println(\\\"数组：\\\"+ Arrays.toString(arrs));\\n\\nString[] arrs1 = sets.toArray(String[]::new); // 以后再了解，指定转换的数组类型！\\nSystem.out.println(\\\"数组：\\\"+ Arrays.toString(arrs1));\\n\\nSystem.out.println(\\\"---------------------拓展---------------------------\\\");\\nCollection<String> c1 = new ArrayList<>();\\nc1.add(\\\"李小璐\\\");\\nc1.add(\\\"马蓉\\\");\\n\\nCollection<String> c2 = new ArrayList<>();\\nc2.add(\\\"白百合\\\");\\n\\nc1.addAll(c2); // 把c2集合的元素全部倒入到c1\\nSystem.out.println(c1);\\n```\\n\\n# day5-迭代器、数据结构、List、Set、TreeSet集合、Collections工具类\\n\\n## 第一章 Iterator迭代器\\n\\n`Collection`集合的遍历方式\\n\\n* 迭代器\\n* `for-each`\\n* `Lambda`表达式\\n\\n### 迭代器遍历\\n\\n* `public Iterator iterator()` 获取集合对应的迭代器，用来遍历集合中的元素\\n* `E next()` 获取下一个元素值\\n* `boolean hasNext()` 判断是否有下一个元素\\n\\n```java\\nCollection<String> lists = new ArrayList<>();\\nlists.add(\\\"赵敏\\\");\\nlists.add(\\\"小昭\\\");\\nlists.add(\\\"殷素素\\\");\\nlists.add(\\\"周芷若\\\");\\nSystem.out.println(lists);\\n// 1.得到集合的迭代器对象。\\nIterator<String> it = lists.iterator();\\n\\n// 2.使用while循环遍历。\\nwhile(it.hasNext()){\\n    String ele = it.next();\\n    System.out.println(ele);\\n}\\n```\\n\\n### for-each遍历\\n\\n`for-each`遍历实际上是迭代器遍历的简化写法\\n\\n* `for-each`遍历集合或者数组很方便\\n* `for-each`遍历无法知道遍历到了哪个元素，因为没有索引\\n\\n```java\\nCollection<String> lists = new ArrayList<>();\\nlists.add(\\\"赵敏\\\");\\nlists.add(\\\"小昭\\\");\\nlists.add(\\\"殷素素\\\");\\nlists.add(\\\"周芷若\\\");\\nSystem.out.println(lists);\\n// lists = [赵敏, 小昭, 殷素素, 周芷若]\\n//  ele\\nfor (String ele : lists) {\\n    System.out.println(ele);\\n}\\n\\nint[] ages = new int[]{17 , 18 , 38 , 21};\\nfor (int age : ages) {\\n    System.out.println(age);\\n}\\n```\\n\\n### lambda表达式\\n\\n```java\\nCollection<String> lists = new ArrayList<>();\\nlists.add(\\\"赵敏\\\");\\nlists.add(\\\"小昭\\\");\\nlists.add(\\\"殷素素\\\");\\nlists.add(\\\"周芷若\\\");\\nSystem.out.println(lists);\\n//   [赵敏, 小昭, 殷素素, 周芷若]\\n//   s\\nlists.forEach(s -> {\\nSystem.out.println(s);\\n});\\n//      lists.forEach(s ->  System.out.println(s));\\n//      lists.forEach(System.out::println);\\n```\\n\\n## 第二章 Java常见数据结构种类\\n\\n队列（queue）\\n\\n- 先进先出，后进后出。\\n- 场景：各种排队。叫号系统。\\n- 有很多集合可以实现队列。\\n\\n栈（stack）\\n\\n- 后进先出，先进后出\\n  压栈 == 入栈\\n  弹栈 == 出栈\\n  场景：手枪的弹夹。\\n\\n数组\\n\\n- 数组是内存中的连续存储区域。\\n- 分成若干等分的小区域（每个区域大小是一样的）\\n- 元素存在索引\\n- 特点：查询元素快（根据索引快速计算出元素的地址，然后立即去定位）\\n             增删元素慢（创建新数组，迁移元素）\\n\\n链表\\n\\n- 元素不是内存中的连续区域存储。\\n- 元素是游离存储的。每个元素会记录下个元素的地址。\\n- 特点：查询元素慢\\n             增删元素快（针对于首尾元素，速度极快，一般是双链表）\\n\\n红黑树\\n\\n- 二叉树：binary tree 永远只有一个根节点，是每个结点不超过2个节点的树（tree） 。\\n- 查找二叉树,排序二叉树：小的左边，大的右边，但是可能树很高，性能变差。\\n- 为了做排序和搜索会进行左旋和右旋实现平衡查找二叉树，让树的高度差不大于1\\n- 红黑树（就是基于红黑规则实现了自平衡的排序二叉树）：树尽量的保证到了很矮小，但是又排好序了，性能最高的树。\\n- 红黑树的增删查改性能都好！！！\\n\\n\\n这些结构，其实Java早就通过代码实现了，我们要知道有这些结构即可!\\n\\n## 第三章 List系列集合的使用\\n\\n### ArrayList集合\\n\\n![image-20220601213800419](http://47.108.219.199:81/articles/image-20220601213800419.png)\\n\\n`Collection`集合体系的特点:\\n\\n`Set`系列集合：添加的元素，是无序，不重复，无索引的。\\n\\n- `HashSet`：添加的元素，是无序，不重复，无索引的。\\n- `LinkedHashSet`：添加的元素，是有序，不重复，无索引的。\\n\\n`List`系列集合：添加的元素，是有序，可重复，有索引的。\\n\\n- `LinkedList`： 添加的元素，是有序，可重复，有索引的。\\n- `ArrayList`： 添加的元素，是有序，可重复，有索引的。\\n- `Vector `：是线程安全的，速度慢，工作中很少使用。\\n\\n`List`集合继承了`Collection`集合的全部功能，同时因为`List`系列集合有索引，\\n\\n因为`List`集合多了索引，所以多了很多按照索引操作元素的功能\\n\\n`ArrayList`实现类集合底层基于数组存储数据的，查询快，增删慢！\\n\\n- `public void add(int index, E element)`: 将指定的元素，添加到该集合中的指定位置上。\\n- `public E get(int index)`:返回集合中指定位置的元素。\\n- `public E remove(int index)`: 移除列表中指定位置的元素, 返回的是被移除的元素。\\n- `public E set(int index, E element)`:用指定元素替换集合中指定位置的元素,返回更新前的元素值。\\n\\n> * `List`系列集合有序，可重复，有索引的。\\n> * `ArrayList`实现类集合底层基于数组存储数据的，查询快，增删慢！！\\n> * 开发中`ArrayList`集合用的最多！！\\n\\n### List集合的遍历方式\\n\\n`List`遍历方式有四种：\\n\\n* `for`循环\\n* 迭代器\\n* `for-each`\\n* lambda表达式\\n\\n```java\\nList<String> lists = new ArrayList<>();\\nlists.add(\\\"java1\\\");\\nlists.add(\\\"java2\\\");\\nlists.add(\\\"java3\\\");\\n\\n/** （1）for循环。 */\\nfor(int i = 0 ; i < lists.size() ; i++ ) {\\n    String ele = lists.get(i);\\n    System.out.println(ele);\\n}\\nSystem.out.println(\\\"-----------------------\\\");\\n\\n/** （2）迭代器。 */\\nIterator<String> it = lists.iterator();\\nwhile(it.hasNext()){\\n    System.out.println(it.next());\\n}\\nSystem.out.println(\\\"-----------------------\\\");\\n\\n/** （3）foreach。 */\\nfor(String ele : lists){\\n    System.out.println(ele);\\n}\\nSystem.out.println(\\\"-----------------------\\\");\\n\\n/** （4）JDK 1.8开始之后的Lambda表达式*/\\nlists.forEach(s -> {\\n    System.out.println(s);\\n});\\n```\\n\\n### LinkedList集合\\n\\n`LinkedList`也是`List`的实现类：底层是基于链表的，增删比较快，查询慢！！\\n`LinkedList`是支持双链表，定位前后的元素是非常快的，增删首尾的元素也是最快的\\n所以`LinkedList`除了拥有`List`集合的全部功能还多了很多操作首尾元素的特殊功能：\\n\\n- `public void addFirst(E e)`:将指定元素插入此列表的开头。\\n- `void addLast(E e)`:将指定元素添加到此列表的结尾。\\n- `public E getFirst()`:返回此列表的第一个元素。\\n- `public E getLast()`:返回此列表的最后一个元素。\\n- `public E removeFirst()`:移除并返回此列表的第一个元素。\\n- `public E removeLast()`:移除并返回此列表的最后一个元素。\\n- `public E pop()`:从此列表所表示的堆栈处弹出一个元素。\\n- `public void push(E e)`:将元素推入此列表所表示的堆栈。\\n\\n> * `LinkedList`是支持双链表，定位前后的元素是非常快的，增删首尾的元素也是最快的。\\n> * 所以提供了很多操作首尾元素的特殊API可以做栈和队列的实现。\\n> * 如果查询多而增删少用`ArrayList`集合。(用的最多的)\\n> * 如果查询少而增删首尾较多用`LinkedList`集合。\\n\\n## 第四章 Set系列集合\\n\\n研究两个问题==面试热点==\\n\\n* `Set`集合添加的元素是不重复的，是如何去重复的\\n* `Set`集合元素无序的原因是什么\\n\\n### Set系列集合元素去重复的流程\\n\\n* 对于有值特性的，`Set`集合可以直接判断进行去重复。\\n* 对于引用数据类型的类对象，Set集合是按照如下流程进行是否重复的判断。\\n  * `Set`集合会让两两对象，先调用自己的`hashCode()`方法得到彼此的哈希值（所谓的内存地址）\\n  * 然后比较两个对象的哈希值是否相同，如果不相同则直接认为两个对象不重复。\\n  * 如果哈希值相同，会继续让两个对象进行`equals`比较内容是否相同，如果相同认为真的重复了\\n  * 如果不相同认为不重复。\\n\\n```java\\nSet<Integer> sets = new HashSet<>(); // 一行经典代码！！\\nsets.add(1);\\nsets.add(1);\\nsets.add(2);\\nsets.add(2);\\nSystem.out.println(sets);\\n\\n// 存储一些自定义类型数据:无序不重复\\nSet<Apple> apples = new HashSet<>();\\nApple a1 = new Apple(\\\"红富士\\\",59.9 ,\\\"红色\\\");\\nApple a2 = new Apple(\\\"阿克苏\\\",39.9 ,\\\"青红色\\\");\\nApple a3 = new Apple(\\\"阿克苏\\\",39.9 ,\\\"青红色\\\");\\nSystem.out.println(a1.hashCode()); // 哈希值，相当于是内存地址\\nSystem.out.println(a2.hashCode()); // 哈希值，相当于是内存地址\\nSystem.out.println(a3.hashCode()); // 哈希值，相当于是内存地址\\napples.add(a1);\\napples.add(a2);\\napples.add(a3);\\nSystem.out.println(apples);\\n```\\n\\n### Set系列集合元素无序==面试必考==\\n\\n`Set`系列集合添加元素无序的根本原因是因为底层采用了哈希表存储元素。\\n\\n* JDK 1.8之前：哈希表 = 数组 + 链表  + （哈希算法）\\n* JDK 1.8之后：哈希表 = 数组 + 链表 + 红黑树  + （哈希算法）\\n\\n​    当链表长度超过阈值（8）时，将链表转换为红黑树，这样大大减少了查找时间。\\n\\n### LinkedHashSet\\n\\n是`HashSet`的子类，元素是“有序” 不重复，无索引.\\n\\n* `LinkedHashSet`底层依然是使用哈希表存储元素的，\\n* 但是每个元素都额外带一个链来维护添加顺序！！\\n* 不光增删查快，还有序。缺点是多了一个存储顺序的链会占内存空间!!而且不允许重复，无索引。\\n\\n> * 如果希望元素可以重复，又有索引，查询要快用`ArrayList`集合。（用的最多）\\n> * 如果希望元素可以重复，又有索引，增删要快要用`LinkedList`集合。（适合查询元素比较少的情况，经常要首尾操作元素的情况）\\n> * 如果希望增删改查都很快，但是元素不重复以及无序无索引，那么用`HashSet`集合。\\n> * 如果希望增删改查都很快且有序，但是元素不重复以及无索引，那么用`LinkedHashSet`集合。\\n\\n### TreeSet集合\\n\\n`TreeSet`: 不重复，无索引，按照大小默认升序排序!!\\n\\n`TreeSet`集合称为排序不重复集合，可以对元素进行默认的升序排序。\\n\\n`TreeSet`集合自自排序的方式：\\n\\n* 有值特性的元素直接可以升序排序。（浮点型，整型）\\n* 字符串类型的元素会按照首字符的编号排序。\\n* 对于自定义的引用数据类型，`TreeSet`默认无法排序，执行的时候直接报错，因为人家不知道排序规则。\\n\\n自定义的引用数据类型的排序实现：\\n\\n对于自定义的引用数据类型，`TreeSet`默认无法排序\\n\\n所以我们需要定制排序的大小规则，程序员定义大小规则的方案有2种：\\n\\n* 直接为对象的类实现比较器规则接口Comparable，重写比较方法（拓展方式）\\n           // 如果程序员认为比较者大于被比较者 返回正数！\\n           // 如果程序员认为比较者小于被比较者 返回负数！\\n           // 如果程序员认为比较者等于被比较者 返回0！\\n* 直接为集合设置比较器Comparator对象,重写比较方法\\n           // 如果程序员认为比较者大于被比较者 返回正数！\\n           // 如果程序员认为比较者小于被比较者 返回负数！\\n           // 如果程序员认为比较者等于被比较者 返回0！\\n\\n> 如果类和集合都带有比较规则，优先使用集合自带的比较规则。\\n\\n```java\\n// TreeSet : 排序不重复集合。\\nSet<Double> scores = new TreeSet<>();\\nscores.add(100.0);\\nscores.add(99.9);\\nscores.add(69.5);\\nscores.add(0.1);\\nscores.add(89.3);\\nSystem.out.println(scores);\\n\\n// 字符串按照首字符的编号进行排序。\\nSet<String> names = new TreeSet<>();\\nnames.add(\\\"Jack\\\");\\nnames.add(\\\"rose\\\");\\nnames.add(\\\"Dlei\\\");\\nnames.add(\\\"about\\\");\\nnames.add(\\\"曹雪芹\\\");\\nnames.add(\\\"bozai\\\");\\nnames.add(\\\"caocao\\\");\\nnames.add(\\\"angel\\\");\\nSystem.out.println(names);\\n\\n// 引用数据类型定义TreeSet集合。\\nSet<Employee> employees = new TreeSet<>();\\nemployees.add(new Employee(\\\"播仔\\\",6500.0,21));\\nemployees.add(new Employee(\\\"播妞\\\",7500.0,19));\\nemployees.add(new Employee(\\\"乔治\\\",4500.0,23));\\nSystem.out.println(employees);\\n\\n\\n// public TreeSet(Comparator<? super E> comparator)\\n// 集合自带比较器对象\\n// 如果类和集合都存在大小规则，默认使用集合自带的规则进行大小排序！！\\nSet<Employee> employees1 = new TreeSet<>(new Comparator<Employee>() {\\n    @Override\\n    public int compare(Employee o1, Employee o2) {\\n        // o1比较者   o2被比较者\\n        // 如果程序员认为比较者大于被比较者 返回正数！\\n        // 如果程序员认为比较者小于被比较者 返回负数！\\n        // 如果程序员认为比较者等于被比较者 返回0！\\n        return o1.getAge() - o2.getAge();\\n    }\\n});\\nemployees1.add(new Employee(\\\"播仔\\\",6500.0,21));\\nemployees1.add(new Employee(\\\"播妞\\\",7500.0,19));\\nemployees1.add(new Employee(\\\"乔治\\\",4500.0,23));\\nSystem.out.println(employees1);\\n```\\n\\n## 第五章 Collections工具类\\n\\n`Collections`并不属于集合，而是用来操作集合的工具类\\n\\n`Collections`有几个常用的API:\\n\\n- `public static <T> boolean addAll(Collection<? super T> c, T... elements)`\\n  \\n    给集合对象批量添加元素！\\n    \\n- `public static void shuffle(List<?> list)`\\n\\n    打乱集合顺序。\\n\\n- `public static <T> void sort(List<T> list)`\\n\\n    将集合中元素按照默认规则排序。\\n\\n- `public static <T> void sort(List<T> list，Comparator<? super T> )`\\n\\n    将集合中元素按照指定规则排序。\\n\\n```java\\n// 1.给集合批量添加元素\\nCollection<String> names = new ArrayList<>();\\n/**\\n* 参数一：被添加元素的集合\\n* 参数二：可变参数，一批元素\\n*/\\nCollections.addAll(names,\\\"曹操\\\",\\\"贾乃亮\\\",\\\"王宝强\\\",\\\"陈羽凡\\\");\\nSystem.out.println(names);\\n\\n// 2.打乱集合的顺序：public static void shuffle(List<?> list)\\n// 注意：只能打乱有序的List集合。\\nList<String> newnames = new ArrayList<>();\\nCollections.addAll(newnames,\\\"曹操\\\",\\\"贾乃亮\\\",\\\"王宝强\\\",\\\"陈羽凡\\\");\\nCollections.shuffle(newnames); // 打乱顺序\\nSystem.out.println(newnames);\\n\\n// 3.public static <T> void sort(List<T> list)：给List集合升序排序。\\nList<Double> scores = new ArrayList<>();\\nCollections.addAll(scores, 98.5, 66.5 , 59.5 , 66.5 , 99.5 );\\nCollections.sort(scores); // 默认升序排序！\\nSystem.out.println(scores);\\n```\\n\\n引用类型的排序\\n\\n字符串按照首字符的编号升序排序！\\n\\n自定义类型的比较方法API:\\n- `public static <T> void sort(List<T> list)`\\n\\n     集合中元素按照默认规则排序。\\n\\n     对于自定义的引用类型的排序人家根本不知道怎么排，直接报错！\\n\\n     如果希望自定义的引用类型排序不报错，可以给类提供比较规则:Comparable。\\n\\n- `public static <T> void sort(List<T> list，Comparator<? super T> c)`\\n\\n     将集合中元素按照指定规则排序,自带比较器\\n\\n     注意：如果类有比较规则，而这里有比较器，优先使用比较器。\\n\\n```java\\n// 自定义类型如何排序！\\nList<Orange> oranges = new ArrayList<>();\\nOrange o1 = new Orange(\\\"红橘子\\\",654.0 ,\\\"贼便宜~\\\");\\nOrange o2 = new Orange(\\\"黄橘子\\\",454.0 ,\\\"贼便宜~\\\");\\nOrange o3 = new Orange(\\\"黄橘子\\\",454.0 ,\\\"贼便宜~\\\");\\nOrange o4 = new Orange(\\\"青橘子\\\",456.0 ,\\\"贼便宜~\\\");\\nCollections.addAll(oranges,o1,o2,o3,o4);\\nCollections.sort(oranges); // 排序，按照类实现的比较规则进行排序！！\\nSystem.out.println(oranges);\\n\\n\\nList<Orange> oranges1 = new ArrayList<>();\\nOrange o11 = new Orange(\\\"红橘子\\\",654.0 ,\\\"贼便宜~\\\");\\nOrange o22 = new Orange(\\\"黄橘子\\\",454.0 ,\\\"贼便宜~\\\");\\nOrange o33 = new Orange(\\\"黄橘子\\\",454.0 ,\\\"贼便宜~\\\");\\nOrange o44 = new Orange(\\\"青橘子\\\",456.0 ,\\\"贼便宜~\\\");\\nCollections.addAll(oranges1,o11,o22,o33,o44);\\n// 优先用方法自带的比较器对象Comparator而不会用类的比较规则！！\\nCollections.sort(oranges1, new Comparator<Orange>() {\\n    @Override\\n    public int compare(Orange o1, Orange o2) {\\n        if(o1.getWeight() > o2.getWeight()) return -1;\\n        if(o1.getWeight() < o2.getWeight()) return 1;\\n        return 0;\\n    }\\n});\\nSystem.out.println(oranges1);\\n```\\n\\n## 第六章 可变参数\\n\\n可变参数用在形参中可以接收多个数据。\\n\\n可变参数的格式：数据类型... 参数名称\\n\\n可变参数的作用：\\n\\n- 传输参数非常灵活，方便。\\n- 可以不传输参数。\\n- 可以传输一个参数。\\n- 可以传输多个参数。\\n- 可以传输一个数组。\\n\\n可变参数在方法内部本质上就是一个数组。\\n\\n可变参数的注意事项：\\n\\n* 一个形参列表中可变参数只能有一个！！\\n* 可变参数必须放在形参列表的最后面！！\\n\\n```java\\npublic static void main(String[] args) {\\n    sum(); // 可以不传输参数。\\n    sum(10); // 可以传输一个参数。\\n    sum(10,20,30); // 可以传输多个参数。\\n    sum(new int[]{10,30,50,70,90}); // 可以传输一个数组。\\n}\\n\\npublic static void sum(int...nums){\\n    // 可变参数在方法内部本质上就是一个数组。\\n    System.out.println(\\\"元素个数：\\\"+nums.length);\\n    System.out.println(\\\"元素内容：\\\"+ Arrays.toString(nums));\\n    System.out.println(\\\"--------------------------\\\");\\n}\\n```\\n\\n# day6-Map\\n\\n## 第一章 Map\\n\\n### Map集合的概述\\n\\n`Map`集合是另一个集合体系。\\n\\n`Collection`是单值集合体系。\\n\\n`Map`集合是一种双列集合，每个元素包含两个值。\\n\\n`Map`集合的每个元素的格式：`key=value`(键值对元素)。\\n\\n`Map`集合也被称为“键值对集合”。\\n\\n`Map`集合的完整格式：`{key1=value1 , key2=value2 , key3=value3 , ...}`\\n\\n\\n\\n* `Map`集合的特点都是由键决定的。\\n* `Map`集合的键是无序,不重复的，无索引的，`Map`集合后面重复的键对应的元素会覆盖前面的整个元素！\\n* `Map`集合的值无要求。\\n* `Map`集合的键值对都可以为`null`。\\n\\n`HashMap`:元素按照键是无序，不重复，无索引，值不做要求。\\n`LinkedHashMap`:元素按照键是有序，不重复，无索引，值不做要求。\\n\\n### Map集合的API\\n\\n- `public V put(K key, V value)`:  把指定的键与指定的值添加到`Map`集合中。\\n- `public V remove(Object key)`: 把指定的键 所对应的键值对元素 在`Map`集合中删除，返回被删除元素的值。\\n- `public V get(Object key)` 根据指定的键，在`Map`集合中获取对应的值。\\n- `public Set<K> keySet()`: 获取`Map`集合中所有的键，存储到`Set`集合中。\\n- `public Set<Map.Entry<K,V>> entrySet()`: 获取到`Map`集合中所有的键值对对象的集合(`Set`集合)。\\n- `public boolean containKey(Object key)`:判断该集合中是否有此键。\\n\\n```java\\nMap<String , Integer> maps = new HashMap<>();\\n// 1.添加元素: 无序，不重复，无索引。\\nmaps.put(\\\"iphoneX\\\",10);\\nmaps.put(\\\"娃娃\\\",30);\\nmaps.put(\\\"iphoneX\\\",100);//  Map集合后面重复的键对应的元素会覆盖前面重复的整个元素！\\nmaps.put(\\\"huawei\\\",1000);\\nmaps.put(\\\"生活用品\\\",10);\\nmaps.put(\\\"手表\\\",10);\\n// {huawei=1000, 手表=10, 生活用品=10, iphoneX=100, 娃娃=30}\\nSystem.out.println(maps);\\n\\n// 2.清空集合\\n//maps.clear();\\n//System.out.println(maps);\\n\\n// 3.判断集合是否为空，为空返回true ,反之！\\nSystem.out.println(maps.isEmpty());\\n\\n// 4.根据键获取对应值。\\n//Integer value = maps.get(\\\"娃娃\\\");\\n//System.out.println(value);\\nSystem.out.println(maps.get(\\\"娃娃\\\"));\\n\\n// 5.根据键删除整个元素。(删除键会返回键的值)\\nmaps.remove(\\\"iphoneX\\\");\\nSystem.out.println(maps);\\n\\n// 6.判断是否包含某个键 ，包含返回true ,反之\\nSystem.out.println(maps.containsKey(\\\"手表\\\")); // true\\nSystem.out.println(maps.containsKey(10)); // false\\n\\n// 7.判断是否包含某个值。\\nSystem.out.println(maps.containsValue(1000)); // true\\nSystem.out.println(maps.containsValue(10)); // true\\nSystem.out.println(maps.containsValue(\\\"30\\\")); // false 包含的是整数30不是字符串。\\n\\n// 8.获取全部键的集合：public Set<K> keySet()\\n// Map集合的键是无序不重复的，所以返回的是一个Set集合。\\nSet<String> keys = maps.keySet();\\nfor (String key : keys) {\\n    System.out.println(key);\\n}\\n\\n// 9.获取全部值的集合：Collection<V> values();\\n// Map集合的值是不做要求的，可能重复，所以值要用Collection集合接收!\\nCollection<Integer> values = maps.values();\\nfor (Integer value : values) {\\n    System.out.println(value);\\n}\\n\\n// 10.集合的大小\\nSystem.out.println(maps.size());\\n\\n// 11.合并其他Map集合。(拓展)\\nMap<String,Integer> maps2 = new HashMap<>();\\nmaps2.put(\\\"xiaoMi\\\" , 1);\\nmaps2.put(\\\"🔨手机\\\" , 10);\\nmaps2.put(\\\"手表\\\" , 10000);\\nmaps.putAll(maps2); // 把Map集合maps2的数据全部倒入到maps集合中去\\nSystem.out.println(maps);\\n```\\n\\n### Map集合的遍历\\n\\n`Map`集合的遍历方式有3种：\\n\\n* **键找值**的方式遍历：先获取`Map`集合全部的键，再根据遍历键找值\\n* **键值对**的方式遍历\\n* JDK1.8之后支持`Lambda`表达式\\n\\n首先是**键找值**遍历方式\\n\\n* 先获取`Map`集合的全部键的`Set`集合\\n* 遍历键的`Set`集合，然后通过键找值\\n\\n```java\\nSet<String> keys = maps.keySet();\\nfor (String key : keys) {\\n    // 过键取对应的值\\n    Integer value = maps.get(key);\\n    System.out.println(key + \\\"=\\\" + value);\\n}\\n```\\n\\n然后是**键值对**的方式遍历\\n\\n* 把`Map`集合转换成一个`Set`集合:`Set<Map.Entry<K, V>> entrySet();`\\n* 此时键值对元素的类型就确定了，类型是键值对实体类型：`Map.Entry<K, V>`\\n* 接下来就可以用`foreach`遍历这个`Set`集合，类型用`Map.Entry<K, V>`\\n\\n```java\\nSet<Map.Entry<String,Integer>> entries = maps.entrySet();\\nfor (Map.Entry<String, Integer> entry : entries) {\\n    String key = entry.getKey();\\n    Integer value = entry.getValue();\\n    System.out.println(key + \\\"=>\\\" + value);\\n}\\n```\\n\\n最后是简介的`Lambda`表达式\\n\\n```java\\nmaps.forEach((k , v) -> {\\n    System.out.println(k+\\\"==>\\\"+v);\\n});\\n```\\n\\n### Map集合存储自定义类型\\n\\n`Map`集合的键和值都可以存储自定义类型\\n\\n如果`Map`集合认为自定义类型的键对象重复了，必须重写对象的`hashCode()`和`equals()`方法\\n\\n`Orange.java`\\n\\n```java\\npublic class Orange {\\n    private String name;\\n    private double weight;\\n    private String price;\\n\\n\\n    public Orange() {\\n    }\\n\\n    public Orange(String name, double weight, String price) {\\n        this.name = name;\\n        this.weight = weight;\\n        this.price = price;\\n    }\\n\\n    @Override\\n    public boolean equals(Object o) {\\n        if (this == o) return true;\\n        if (o == null || getClass() != o.getClass()) return false;\\n        Orange orange = (Orange) o;\\n        return Double.compare(orange.weight, weight) == 0 &&\\n                Objects.equals(name, orange.name) &&\\n                Objects.equals(price, orange.price);\\n    }\\n\\n    @Override\\n    public int hashCode() {\\n        return Objects.hash(name, weight, price);\\n    }\\n    \\n    //...\\n}\\n```\\n\\n`Map`使用自定义存储类型\\n\\n```java\\nMap<Orange,String> maps = new HashMap<>();\\nOrange o1 = new Orange(\\\"黄橘子\\\",20.3 , \\\"贼便宜！\\\");\\nOrange o2 = new Orange(\\\"黑橘子\\\",30.3 , \\\"坏了\\\");\\nOrange o3 = new Orange(\\\"青橘子\\\",34.3 , \\\"9.9包邮\\\");\\nOrange o4 = new Orange(\\\"黄橘子\\\",20.3 , \\\"贼便宜！\\\");\\n\\nmaps.put(o1 , \\\"江西\\\\n\\\");\\nmaps.put(o2 , \\\"赣州\\\\n\\\");\\nmaps.put(o3 , \\\"广州\\\\n\\\");\\nmaps.put(o4 , \\\"广西\\\\n\\\");\\n\\nSystem.out.println(maps);\\n```\\n\\n### LinkedHashMap的特点\\n\\n`LinkedHashMap`是`HashMap`的子类，添加的元素按照键有序，不重复的。\\n\\n`HashSet`集合相当于是`HashMap`集合的键都不带值。\\n\\n`LinkedHashSet`集合相当于是`LinkedHashMap`集合的键都不带值。\\n\\n底层原理完全一样，都是基于哈希表按照键存储数据的，\\n\\n只是`HashMap`或者`LinkedHashMap`的键都多一个附属值。\\n\\n```java\\nMap<String , Integer> maps = new LinkedHashMap<>();\\nmaps.put(\\\"iphoneX\\\",10);\\nmaps.put(\\\"娃娃\\\",30);\\nmaps.put(\\\"iphoneX\\\",100); // 依然是保留前面的位置，只是替换其值！\\nmaps.put(\\\"huawei\\\",1000);\\nmaps.put(\\\"生活用品\\\",10);\\nmaps.put(\\\"手表\\\",10);\\nSystem.out.println(maps);\\n```\\n\\n* `HashMap`集合是无序不重复的键值对集合。\\n* `LinkedHashMap`集合是有序不重复的键值对集合。\\n* 他们都是基于哈希表存储数据,增删改查都很好。\\n\\n### TreeMap集合应用\\n\\n* `TreeMap`集合按照键是可排序不重复的键值对集合。(默认升序)\\n* `TreeMap`集合按照键排序的特点与`TreeSet`是完全一样的\\n\\n> `TreeMap`集合和`TreeSet`集合都是排序不重复集合\\n>\\n> `TreeSet`集合的底层是基于`TreeMap`，只是键没有附属值而已。\\n>\\n> 所以`TreeMap`集合指定大小规则有2种方式：\\n>\\n> * 直接为对象的类实现比较器规则接口`Comparable`，重写比较方法（拓展方式）\\n> * 直接为集合设置比较器`Comparator`对象,重写比较方法\\n\\n类实现`Comparable`\\n\\n```java\\n// 比较者： this\\n// 被比较者： o\\n// 需求：按照价格排序！\\n@Override\\npublic int compareTo(Object o) {\\n    // 浮点型的大小比较建议使用Java自己的API:\\n    // public static int compare(double d1, double d2)\\n    return  -Double.compare(this.price , ((Pig)o).price);\\n}\\n```\\n\\n集合设置`Comparator`\\n\\n```java\\nMap<Pig,String> pigs1 = new TreeMap<>(new Comparator<Pig>() {\\n    @Override\\n    public int compare(Pig p1, Pig p2) {\\n        return Double.compare(p1.getWeight() , p2.getWeight());\\n    }\\n});\\n```\\n\\n## 第二章 排序算法\\n\\n### 冒泡排序算法\\n\\n```java\\nint[] arr = new int[] {55, 22, 99, 88};\\n// 1.定义一个循环控制总共需要冒泡几轮：数组的长度-1\\nfor(int i = 0 ;  i < arr.length - 1 ; i++ ){\\n    // i = 0   j = 0 1 2\\n    // i = 1   j = 0 1\\n    // i = 2   j = 0\\n    // 2.控制每轮比较几次。\\n    for(int j = 0 ; j < arr.length - i - 1 ; j++ ){\\n        // 如果当前元素大于后一个元素\\n        if(arr[j] > arr[j+1]){\\n            // 交换位置。大的元素必须后移！\\n            // 定义一个临时变量存储后一个元素\\n            int temp = arr[j+1];\\n            arr[j+1] = arr[j];\\n            arr[j] = temp;\\n        }\\n    }\\n}\\n```\\n\\n## 选择排序算法\\n\\n```java\\nint[] arr = {5 , 1 , 3 , 2};\\n// 1.定义一个循环控制选择几轮\\nfor(int i = 0 ; i < arr.length - 1 ; i++ ){\\n    // 2.定义一个循环控制每轮比较几次，一定是以当前位置与后面元素比较\\n    // i =0  j = 1 2 3\\n    // i =1  j = 2 3\\n    // i =2  j = 3\\n    // 遍历后面的元素\\n    for(int j = i+1 ; j < arr.length ; j++ ){\\n        // 拿当前位置与j指定的元素进行大小比较，后面的较小就交换位置\\n        if(arr[j] < arr[i]){\\n            int temp = arr[i];\\n            arr[i] = arr[j];\\n            arr[j] = temp;\\n        }\\n    }\\n}\\n```\\n\\n## 第三章 二分查找\\n\\n**二分查找的前提**：对数组是有要求的,数组必须已经排好序。\\n\\n每次先与中间的元素进行比较，如果大于往右边找，如果小于往左边找，如果等于就返回该元素索引位置！\\n\\n如果没有该元素，返回-1。综合性能比较好！！\\n\\n```java\\n/**\\n     *\\n     * @param arr  被检索的数组\\n     * @param number 被检索的元素值\\n     * @return  返回元素在数组中的索引值，不存在该元素返回-1\\n     */\\npublic static int binarySerach(int[] arr , int number){\\n    // 3.记录当前区间搜索的开始索引和结束索引。\\n    int start = 0 ;\\n    int end = arr.length - 1;\\n    // 4.定义一个循环，反复去循环元素。\\n    while(start <= end){\\n        // 5.取中间索引位置\\n        int middleIndex = (start + end) / 2 ;\\n        // 6.判断当前元素与中间元素的大小\\n        if(number < arr[middleIndex]){\\n            // 7.往左边继续寻找，结束索引应该-1\\n            end = middleIndex - 1;\\n        }else if(number > arr[middleIndex]){\\n            start = middleIndex + 1;\\n        }else if(number == arr[middleIndex]){\\n            return middleIndex;\\n        }\\n    }\\n    // 如果上述循环执行完毕还没有返回索引，说明根本不存在该元素值，直接返回-1\\n    return -1;\\n}\\n```\\n\\n# day7-异常、线程\\n\\n## 第一章 异常\\n\\n### 异常的概述和体系\\n\\n**异常**：指的是程序在执行过程中，出现的非正常的情况，最终会导致JVM的非正常停止\\n\\n* 在`Java`等面向对象的编程语言中，异常本身是一个类，产生异常就是创建异常对象并抛出了一个异常对象。`Java`处理异常的方式是中断处理。\\n* `Java`会为常见的代码异常都设计一个类来代表\\n* `Java`中异常继承的根类是：`Throwable`\\n\\n<img src=\\\"http://47.108.219.199:81/articles/image-20220603140634079.png\\\" alt=\\\"image-20220603140634079\\\" style=\\\"zoom: 80%;\\\" />\\n\\n`Error `: 错误的意思，严重错误`Error`，无法通过处理的错误，一旦出现，程序员无能为力了，\\n\\n* 只能重启系统，优化项目。\\n* 比如内存奔溃，`JVM`本身的奔溃。这个程序员无需理会。\\n\\n`Exception`:才是异常类，它才是开发中代码在编译或者执行的过程中可能出现的错误，\\n\\n* 它是需要提前处理的。以便程序更健壮！\\n\\n`Exception`异常的分类:\\n\\n* **编译时异常**：继承自`Exception`的异常或者其子类，编译阶段就会报错，必须程序员处理的。否则代码编译就不能通过\\n* **运行时异常**: 继承自`RuntimeException`的异常或者其子类，编译阶段是不会出错的，它是在运行时阶段可能出现，运行时异常可以处理也可以不处理，编译阶段是不会出错的，但是运行阶段可能出现，还是建议提前处理\\n\\n### 常见的运行时异常==面试热点==\\n\\n继承自`RuntimeException`的异常或者其子类，编译阶段是不会出错的，它是在运行时阶段可能出现的错误，运行时异常编译阶段可以处理也可以不处理,代码编译都能通过\\n\\n* 数组索引越界异常: `ArrayIndexOutOfBoundsException`\\n* 空指针异常 : `NullPointerException`\\n  直接输出没有问题。但是调用空指针的变量的功能就会报错\\n* 类型转换异常：`ClassCastException`\\n* 迭代器遍历没有此元素异常：`NoSuchElementException`\\n* 数学操作异常：`ArithmeticException`\\n* 数字转换异常： `NumberFormatException`\\n\\n### 编译时异常\\n\\n编译时异常：继承自`Exception`的异常或者其子类，没有继承`RuntimeException`\\n\\n* \\\"编译时异常是编译阶段就会报错\\\"，\\n* 必须程序员编译阶段就处理的。否则代码编译就报错\\n\\n编译时异常的作用是什么：\\n\\n* 是担心程序员的技术不行，在编译阶段就爆出一个错误, 目的在于提醒\\n* 提醒程序员这里很可能出错，请检查并注意不要出bug\\n\\n## 第二章 异常的处理\\n\\n### 异常的产生、处理的默认过程\\n\\n* 默认会在出现异常的代码那里自动的创建一个异常对象：`ArithmeticException`。\\n* 异常会从方法中出现的点这里抛出给调用者，调用者最终抛出给`JVM`虚拟机。\\n* 虚拟机接收到异常对象后，先在控制台直接输出异常栈信息数据。\\n* 直接从当前执行的异常点干掉当前程序。\\n* 后续代码没有机会执行了，因为程序已经死亡。\\n\\n### 编译时异常处理机制\\n\\n方法一\\n\\n* 在出现编译时异常的地方层层把异常抛出去给调用者，调用者最终抛出给JVM虚拟机。\\n* JVM虚拟机输出异常信息，直接干掉程序，这种方式与默认方式是一样的。\\n\\n抛出异常格式：\\n\\n```java\\n\\n方法 throws 异常1 ,  异常2 , ..{\\n\\n}\\n建议抛出异常的方式：代表可以抛出一切异常，\\n方法 throws Exception{\\n\\n}\\n```\\n\\n虽然可以解决代码编译时的错误，但是一旦运行时真的出现异常，程序还是会立即死亡\\n\\n方法二\\n\\n在出现异常的地方自己处理，谁出现谁处理\\n\\n```java\\ntry{\\n    // 监视可能出现异常的代码！\\n}catch(异常类型1 变量){\\n    // 处理异常\\n}catch(异常类型2 变量){\\n    // 处理异常\\n}...\\n```\\n\\n> 第二种方式，可以处理异常，并且出现异常后代码也不会死亡。这种方案还是可以的。但是从理论上来说，这种方式不是最好的，上层调用者不能直接知道底层的执行情况\\n\\n```java\\ntry{\\n    SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy/MM-dd HH:mm:ss\\\");\\n    Date d = sdf.parse(time);\\n    System.out.println(d);\\n\\n    InputStream is = new FileInputStream(\\\"D:/meinv.png\\\");\\n} catch (FileNotFoundException e) {\\n    System.err.println(\\\"文件根本不存在！\\\");\\n} catch (ParseException e) {\\n    System.err.println(\\\"解析有问题，请检查代码！\\\");\\n}\\n```\\n\\n方法三\\n\\n在出现异常的地方吧异常一层一层的抛出给最外层调用者，最外层调用者集中捕获处理==规范做法==\\n\\n> 这种方案最外层调用者可以知道底层执行的情况，同时程序在出现异常后也不会立即死亡，这是\\n> 理论上最好的方案\\n\\n\\n\\n```java\\npublic static void main(String[] args) {\\n    System.out.println(\\\"程序开始。。。。\\\");\\n    try {\\n        parseDate(\\\"2013-03-23 10:19:23\\\");\\n        System.out.println(\\\"功能成功执行！！\\\");\\n    } catch (Exception e) {\\n        e.printStackTrace();\\n        System.out.println(\\\"功能执行失败！！\\\");\\n    }\\n    System.out.println(\\\"程序结束。。。。。\\\");\\n}\\n\\n// 可以拦截所以异常!\\npublic static void parseDate(String time) throws Exception {\\n    SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\");\\n    Date d = sdf.parse(time);\\n    System.out.println(d);\\n\\n    InputStream is = new FileInputStream(\\\"D:/meinv.png\\\");\\n}\\n```\\n\\n### 运行时异常的处理机制\\n\\n运行时异常在编译阶段是不会报错，在运行阶段才会出错。运行时异常在编译阶段不处理也不会报错，但是运行时如果出错了程序还是会死亡。所以运行时异常也建议要处理。\\n\\n运行时异常是自动往外抛出的，不需要我们手工抛出。\\n\\n运行时异常的处理规范：直接在最外层捕获处理即可，底层会自动抛出\\n\\n```java\\npublic static void main(String[] args) {\\n        System.out.println(\\\"程序开始。。。。\\\");\\n        try{\\n            chu(10 , 0);\\n            System.out.println(\\\"操作成功！\\\");\\n        }catch (Exception e){\\n            e.printStackTrace();\\n            System.out.println(\\\"操作失败！\\\");\\n        }\\n        System.out.println(\\\"程序结束。。。。\\\");\\n    }\\n\\n    public static void chu(int a , int b)  {\\n        System.out.println( a / b );\\n    }\\n```\\n\\n### finally关键字\\n\\n用在捕获处理的异常格式中的，放在最后面\\n\\n无论代码是出现异常还是正常执行，最终一定要执行这里的代码\\n\\n```java\\ntry{\\n    // 可能出现异常的代码！\\n}catch(Exception e){\\n    e.printStackTrace();\\n}finally{\\n    // 无论代码是出现异常还是正常执行，最终一定要执行这里的代码！！\\n}\\n```\\n\\n`finally`的作用: 可以在代码执行完毕以后进行资源的释放操作。\\n\\n```java\\ntry{\\n    //System.out.println(10/0);\\n    is = new FileInputStream(\\\"D:/cang.png\\\");\\n    System.out.println(10 / 0 );\\n\\n}catch (Exception e){\\n    e.printStackTrace();\\n}finally {\\n    System.out.println(\\\"==finally被执行===\\\");\\n    // 回收资源。用于在代码执行完毕以后进行资源的回收操作！\\n    try {\\n        if(is!=null)is.close();\\n    } catch (Exception e) {\\n        e.printStackTrace();\\n    }\\n}\\n```\\n\\n### 异常的注意事项\\n\\n- 运行时异常被抛出可以不处理。可以自动抛出,编译时异常必须处理.按照规范都应该处理!\\n- 重写方法申明抛出的异常，**应该与父类被重写方法申明抛出的异常一样或者范围更小**\\n- 方法默认都可以自动抛出运行时异常！  `throws RuntimeException`可以省略不写!!\\n- 当多异常处理时，捕获处理，**前边的异常类不能是后边异常类的父类**。\\n- 在`try/catch`后可以追加`finally`代码块，其中的代码一定会被执行，通常用于资源回收操作。\\n\\n## 第三章 自定义异常\\n\\n自定义**编译时异常**\\n\\n- 定义一个异常类继承`Exception`\\n- 重写构造器\\n- 在出现异常的地方用`throw new `自定义对象抛出\\n- 编译时异常是编译阶段就报错，提醒更加强烈，一定需要处理\\n\\n```java\\npublic class ItheimaAgeIllegalException extends Exception {\\n    public ItheimaAgeIllegalException() {\\n    }\\n\\n    public ItheimaAgeIllegalException(String message) {\\n        super(message);\\n    }\\n\\n    public ItheimaAgeIllegalException(String message, Throwable cause) {\\n        super(message, cause);\\n    }\\n\\n    public ItheimaAgeIllegalException(Throwable cause) {\\n        super(cause);\\n    }\\n\\n    public ItheimaAgeIllegalException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\\n        super(message, cause, enableSuppression, writableStackTrace);\\n    }\\n}\\n```\\n\\n自定义**运行时异常**\\n\\n- 定义一个异常类继承`RuntimeException`\\n- 重写构造器\\n- 在出现异常的地方用`throw new`自定义对象抛出\\n- 提醒不强烈，编译阶段不报错，运行时才可能出现\\n\\n```java\\npublic class ItheimaAgeIllegalRuntimeException extends RuntimeException {\\n    public ItheimaAgeIllegalRuntimeException() {\\n    }\\n\\n    public ItheimaAgeIllegalRuntimeException(String message) {\\n        super(message);\\n    }\\n\\n    public ItheimaAgeIllegalRuntimeException(String message, Throwable cause) {\\n        super(message, cause);\\n    }\\n\\n    public ItheimaAgeIllegalRuntimeException(Throwable cause) {\\n        super(cause);\\n    }\\n\\n    public ItheimaAgeIllegalRuntimeException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\\n        super(message, cause, enableSuppression, writableStackTrace);\\n    }\\n}\\n```\\n\\n异常的作用：\\n\\n* 可以处理代码问题，防止程序出现异常后的死亡\\n* 提高了程序的健壮性和安全性\\n\\n```java\\ntry{\\n    Scanner sc = new Scanner(System.in);\\n    System.out.println(\\\"请您输入您的年年龄：\\\");\\n    int age = sc.nextInt();\\n    System.out.println(\\\"您是：\\\"+age);\\n    break;\\n}catch (Exception e){\\n    System.err.println(\\\"您的年龄是瞎输入的！\\\");\\n}\\n```\\n\\n## 第四章 多线程\\n\\n### 进程与线程\\n\\n- **进程**：是指一个内存中运行的应用程序，每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程；进程也是程序的一次执行过程，是系统运行程序的基本单位；系统运行一个程序即是一个进程从创建、运行到消亡的过程。\\n- **线程**：是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程。一个进程中是可以有多个线程的，这个应用程序也可以称之为多线程程序。\\n\\n进程的三个特征：\\n\\n- 动态性 ： 进程是运行中的程序，要动态的占用内存，CPU和网络等资源。\\n\\n- 独立性 ： 进程与进程之间是相互独立的，彼此有自己的独立内存区域。\\n\\n- 并发性 ： 假如`CPU`是单核，同一个时刻其实内存中只有一个进程在被执行。\\n\\n  `CPU`会分时轮询切换依次为每个进程服务，因为切换的速度非常快，给我们的感觉这些进程在同时执行，这就是并发性。\\n\\n线程的作用\\n\\n- 可以提高程序的效率，线程也支持并发性，可以有更多机会得到CPU。\\n- 多线程可以解决很多业务模型。\\n- 大型高并发技术的核心技术。\\n- 设计到多线程的开发可能都比较难理解。\\n\\n### 线程常用方法\\n\\n线程开启我们需要用到了`java.lang.Thread`类，API中该类中定义了有关线程的一些方法，具体如下：\\n\\n**构造方法：**\\n\\n- `public Thread()`:分配一个新的线程对象。\\n- `public Thread(String name)`:分配一个指定名字的新的线程对象。\\n- `public Thread(Runnable target)`:分配一个带有指定目标新的线程对象。\\n- `public Thread(Runnable target,String name)`:分配一个带有指定目标新的线程对象并指定名字。\\n\\n**常用方法：**\\n\\n- `public void setName(String name)`：给当前线程取名字\\n- `public String getName()`:获取当前线程名称。\\n- `public void start()`:导致此线程开始执行; Java虚拟机调用此线程的run方法。\\n- `public void run()`:此线程要执行的任务在此处定义代码。\\n- `public static void sleep(long millis)`:使当前正在执行的线程以指定的毫秒数暂停（暂时停止执行）。\\n- `public static Thread currentThread()  `:返回对当前正在执行的线程对象的引用。\\n\\n翻阅API后得知创建线程的方式总共有两种，一种是继承Thread类方式，一种是实现Runnable接口方式，方式一我们上一天已经完成，接下来讲解方式二实现的方式。\\n\\n### 线程的创建方式一-继承方式\\n\\nJava使用`java.lang.Thread`类代表**线程**，所有的线程对象都必须是Thread类或其子类的实例。每个线程的作用是完成一定的任务，实际上就是执行一段程序流即一段顺序执行的代码。Java使用线程执行体来代表这段程序流。Java中通过继承Thread类来**创建**并**启动多线程**的步骤如下：\\n\\n1. 定义Thread类的子类，并重写该类的run()方法，该run()方法的方法体就代表了线程需要完成的任务,因此把run()方法称为线程执行体。\\n2. 创建Thread子类的实例，即创建了线程对象\\n3. 调用线程对象的start()方法来启动该线程\\n\\n```java\\npublic class ThreadDemo {\\n    // 启动后的ThreadDemo当成一个进程。\\n    // main方法是由主线程执行的，理解成main方法就是一个主线程\\n    public static void main(String[] args) {\\n        // 3.创建一个线程对象\\n        Thread t = new MyThread();\\n        // 4.调用线程对象的start()方法启动线程,最终还是执行run()方法！\\n        t.start();\\n\\n        for(int i = 0 ; i < 100 ; i++ ){\\n            System.out.println(\\\"main线程输出：\\\"+i);\\n        }\\n    }\\n}\\n\\n// 1.定义一个线程类继承Thread类。\\nclass MyThread extends Thread{\\n    // 2.重写run()方法\\n    @Override\\n    public void run() {\\n        // 线程的执行方法。\\n        for(int i = 0 ; i < 100 ; i++ ){\\n            System.out.println(\\\"子线程输出：\\\"+i);\\n        }\\n    }\\n}\\n```\\n\\n> * 线程的启动必须调用`start()`方法，否则当成普通类处理\\n>   * 如果线程直接调用`run()`方法，相当于变成了普通类的执行，此时只有主线程在执行他们\\n>   * `start()`方法底层其实是给CPU注册当前线程，并且触发`run()`方法执行\\n> * 建议线程先创建子线程，主线程的任务放在之后，否则主线程永远是先执行完\\n\\n### 线程创建方式二-实现方式\\n\\n采用`java.lang.Runnable`也是非常常见的一种，我们只需要重写run方法即可。\\n\\n步骤如下：\\n\\n1. 定义Runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。\\n2. 创建Runnable实现类的实例，并以此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。\\n3. 调用线程对象的start()方法来启动线程。\\n\\n```java\\npublic class ThreadDemo {\\n    public static void main(String[] args) {\\n        // 3.创建一个线程任务对象(注意：线程任务对象不是线程对象，只是执行线程的任务的)\\n        Runnable target = new MyRunnable();\\n        // 4.把线程任务对象包装成线程对象.且可以指定线程名称\\n        // Thread t = new Thread(target);\\n        Thread t = new Thread(target,\\\"1号线程\\\");\\n        // 5.调用线程对象的start()方法启动线程\\n        t.start();\\n\\n        Thread t2 = new Thread(target);\\n        // 调用线程对象的start()方法启动线程\\n        t2.start();\\n\\n        for(int i = 0 ; i < 10 ; i++ ){\\n            System.out.println(Thread.currentThread().getName()+\\\"==>\\\"+i);\\n        }\\n    }\\n}\\n\\n// 1.创建一个线程任务类实现Runnable接口。\\nclass MyRunnable implements Runnable{\\n    // 2.重写run()方法\\n    @Override\\n    public void run() {\\n        for(int i = 0 ; i < 10 ; i++ ){\\n            System.out.println(Thread.currentThread().getName()+\\\"==>\\\"+i);\\n        }\\n    }\\n}\\n```\\n\\n### 匿名内部类方式\\n\\n这种方式是实现方式的匿名内部类写法，代码更加简洁\\n\\n```java\\npublic class NoNameInnerClassThread {\\n   \\tpublic static void main(String[] args) {\\t   \\t\\n//\\t\\tnew Runnable(){\\n//\\t\\t\\tpublic void run(){\\n//\\t\\t\\t\\tfor (int i = 0; i < 20; i++) {\\n//\\t\\t\\t\\t\\tSystem.out.println(\\\"张宇:\\\"+i);\\n//\\t\\t\\t\\t}\\n//\\t\\t\\t}  \\n//\\t   \\t}; //---这个整体  相当于new MyRunnable()\\n        Runnable r = new Runnable(){\\n            public void run(){\\n                for (int i = 0; i < 20; i++) {\\n                  \\tSystem.out.println(\\\"张宇:\\\"+i);\\n                }\\n            }  \\n        };\\n        new Thread(r).start();\\n\\n        for (int i = 0; i < 20; i++) {\\n          \\tSystem.out.println(\\\"费玉清:\\\"+i);\\n        }\\n   \\t}\\n}\\n```\\n\\n### 线程创建方式三-实现Callable接口\\n\\n\\n\\n- 定义一个线程任务类实现Callable接口 ， 申明线程执行的结果类型。\\n- 重写线程任务类的call方法，这个方法可以直接返回执行的结果。\\n- 创建一个Callable的线程任务对象。\\n- 把Callable的线程任务对象包装成一个未来任务对象。\\n- 把未来任务对象包装成线程对象。\\n- 调用线程的start()方法启动线程\\n\\n这样做的优点是：\\n\\n- 线程任务类只是实现了Callable接口，可以继续继承其他类，而且可以继续实现其他接口（避免了单继承的局限性）\\n- 同一个线程任务对象可以被包装成多个线程对象\\n- 适合多个多个线程去共享同一个资源（后面内容）\\n- 实现解耦操作，线程任务代码可以被多个线程共享，线程任务代码和线程独立。\\n- 线程池可以放入实现Runable或Callable线程任务对象。(后面了解)\\n- 能直接得到线程执行的结果！\\n\\n```java\\npublic class ThreadDemo {\\n    public static void main(String[] args) {\\n        // 3.创建一个Callable的线程任务对象\\n        Callable call = new MyCallable();\\n        // 4.把Callable任务对象包装成一个未来任务对象\\n        //      -- public FutureTask(Callable<V> callable)\\n        // 未来任务对象是啥，有啥用？\\n        //      -- 未来任务对象其实就是一个Runnable对象:这样就可以被包装成线程对象！\\n        //      -- 未来任务对象可以在线程执行完毕之后去得到线程执行的结果。\\n        FutureTask<String> task = new FutureTask<>(call);\\n        // 5.把未来任务对象包装成线程对象\\n        Thread t = new Thread(task);\\n        // 6.启动线程对象\\n        t.start();\\n\\n        for(int i = 1 ; i <= 10 ; i++ ){\\n            System.out.println(Thread.currentThread().getName()+\\\" => \\\" + i);\\n        }\\n\\n        // 在最后去获取线程执行的结果,如果线程没有结果，让出CPU等线程执行完再来取结果\\n        try {\\n            String rs = task.get(); // 获取call方法返回的结果（正常/异常结果）\\n            System.out.println(rs);\\n        }  catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n\\n    }\\n}\\n\\n// 1.创建一个线程任务类实现Callable接口，申明线程返回的结果类型\\nclass MyCallable implements Callable<String>{\\n    // 2.重写线程任务类的call方法！\\n    @Override\\n    public String call() throws Exception {\\n        // 需求：计算1-10的和返回\\n        int sum = 0 ;\\n        for(int i = 1 ; i <= 10 ; i++ ){\\n            System.out.println(Thread.currentThread().getName()+\\\" => \\\" + i);\\n            sum+=i;\\n        }\\n        return Thread.currentThread().getName()+\\\"执行的结果是：\\\"+sum;\\n    }\\n}\\n```\\n\\n## 第五章 线程安全\\n\\n线程安全问题：多个线程同时操作同一个共享资源的时候可能会出现线程安全问题\\n\\n### 同步代码块\\n\\n- **同步代码块**：`synchronized`关键字可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。\\n\\n格式: \\n\\n```java\\nsynchronized(同步锁){\\n     需要同步操作的代码\\n}\\n```\\n\\n**同步锁**:\\n\\n对象的同步锁只是一个概念,可以想象为在对象上标记了一个锁.\\n\\n1. 锁对象 可以是任意类型。\\n2. 多个线程对象  要使用同一把锁。\\n\\n> 注意:在任何时候,最多允许一个线程拥有同步锁,谁拿到锁就进入代码块,其他的线程只能在外等着(BLOCKED)。\\n\\n使用同步代码块解决代码：\\n\\n```java\\npublic class Ticket implements Runnable{\\n\\tprivate int ticket = 100;\\n\\t\\n\\tObject lock = new Object();\\n\\t/*\\n\\t * 执行卖票操作\\n\\t */\\n\\t@Override\\n\\tpublic void run() {\\n\\t\\t//每个窗口卖票的操作 \\n\\t\\t//窗口 永远开启 \\n\\t\\twhile(true){\\n\\t\\t\\tsynchronized (lock) {\\n\\t\\t\\t\\tif(ticket>0){//有票 可以卖\\n\\t\\t\\t\\t\\t//出票操作\\n\\t\\t\\t\\t\\t//使用sleep模拟一下出票时间 \\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tThread.sleep(50);\\n\\t\\t\\t\\t\\t} catch (InterruptedException e) {\\n\\t\\t\\t\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t//获取当前线程对象的名字 \\n\\t\\t\\t\\t\\tString name = Thread.currentThread().getName();\\n\\t\\t\\t\\t\\tSystem.out.println(name+\\\"正在卖:\\\"+ticket--);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n```\\n\\n### 同步方法\\n\\n- **同步方法**:使用synchronized修饰的方法,就叫做同步方法,保证A线程执行该方法的时候,其他线程只能在方法外等着。\\n\\n格式：\\n\\n```java\\npublic synchronized void method(){\\n   \\t可能会产生线程安全问题的代码\\n}\\n```\\n\\n> 同步锁是谁?\\n>\\n> ​      对于非static方法,同步锁就是this。  \\n>\\n> ​      对于static方法,我们使用当前方法所在类的字节码对象(类名.class)。\\n\\n使用同步方法代码如下：\\n\\n```java\\npublic class Ticket implements Runnable{\\n\\tprivate int ticket = 100;\\n\\t/*\\n\\t * 执行卖票操作\\n\\t */\\n\\t@Override\\n\\tpublic void run() {\\n\\t\\t//每个窗口卖票的操作 \\n\\t\\t//窗口 永远开启 \\n\\t\\twhile(true){\\n\\t\\t\\tsellTicket();\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/*\\n\\t * 锁对象 是 谁调用这个方法 就是谁 \\n\\t *   隐含 锁对象 就是  this\\n\\t *    \\n\\t */\\n\\tpublic synchronized void sellTicket(){\\n        if(ticket>0){//有票 可以卖\\t\\n            //出票操作\\n            //使用sleep模拟一下出票时间 \\n            try {\\n              \\tThread.sleep(100);\\n            } catch (InterruptedException e) {\\n              \\t// TODO Auto-generated catch block\\n              \\te.printStackTrace();\\n            }\\n            //获取当前线程对象的名字 \\n            String name = Thread.currentThread().getName();\\n            System.out.println(name+\\\"正在卖:\\\"+ticket--);\\n        }\\n\\t}\\n}\\n```\\n\\n### Lock锁\\n\\n`java.util.concurrent.locks.Lock`机制提供了比**synchronized**代码块和**synchronized**方法更广泛的锁定操作,同步代码块/同步方法具有的功能Lock都有,除此之外更强大\\n\\nLock锁也称同步锁，加锁与释放锁方法化了，如下：\\n\\n- `public void lock() `:加同步锁。\\n- `public void unlock()`:释放同步锁。\\n\\n使用如下：\\n\\n```java\\npublic class Ticket implements Runnable{\\n\\tprivate int ticket = 100;\\n\\t\\n\\tLock lock = new ReentrantLock();\\n\\t/*\\n\\t * 执行卖票操作\\n\\t */\\n\\t@Override\\n\\tpublic void run() {\\n\\t\\t//每个窗口卖票的操作 \\n\\t\\t//窗口 永远开启 \\n\\t\\twhile(true){\\n\\t\\t\\tlock.lock();\\n\\t\\t\\tif(ticket>0){//有票 可以卖\\n\\t\\t\\t\\t//出票操作 \\n\\t\\t\\t\\t//使用sleep模拟一下出票时间 \\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tThread.sleep(50);\\n\\t\\t\\t\\t} catch (InterruptedException e) {\\n\\t\\t\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t//获取当前线程对象的名字 \\n\\t\\t\\t\\tString name = Thread.currentThread().getName();\\n\\t\\t\\t\\tSystem.out.println(name+\\\"正在卖:\\\"+ticket--);\\n\\t\\t\\t}\\n\\t\\t\\tlock.unlock();\\n\\t\\t}\\n\\t}\\n}\\n```\\n\\n# day8-线程状态、volatile关键字、原子性、并发包、死锁、线程池\\n\\n## 第一章 线程状态\\n\\n### 线程状态概述\\n\\n当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。在线程的生命周期中，有几种状态呢？在API中`java.lang.Thread.State`这个枚举中给出了六种线程状态：\\n\\n这里先列出各个线程状态发生的条件，下面将会对每种状态进行详细解析\\n\\n| 线程状态                | 导致状态发生条件                                             |\\n| ----------------------- | ------------------------------------------------------------ |\\n| NEW(新建)               | 线程刚被创建，但是并未启动。还没调用start方法。MyThread t = new MyThread只有线程对象，没有线程特征。 |\\n| Runnable(可运行)        | 线程可以在java虚拟机中运行的状态，可能正在运行自己代码，也可能没有，这取决于操作系统处理器。调用了t.start()方法   ：就绪（经典教法） |\\n| Blocked(锁阻塞)         | 当一个线程试图获取一个对象锁，而该对象锁被其他的线程持有，则该线程进入Blocked状态；当该线程持有锁时，该线程将变成Runnable状态。 |\\n| Waiting(无限等待)       | 一个线程在等待另一个线程执行一个（唤醒）动作时，该线程进入Waiting状态。进入这个状态后是不能自动唤醒的，必须等待另一个线程调用notify或者notifyAll方法才能够唤醒。 |\\n| Timed Waiting(计时等待) | 同waiting状态，有几个方法有超时参数，调用他们将进入Timed Waiting状态。这一状态将一直保持到超时期满或者接收到唤醒通知。带有超时参数的常用方法有Thread.sleep 、Object.wait。 |\\n| Teminated(被终止)       | 因为run方法正常退出而死亡，或者因为没有捕获的异常终止了run方法而死亡。 |\\n\\n### 睡眠方法\\n\\n我们看到状态中有一个状态叫做计时等待，可以通过Thread类的方法来进行演示.\\n\\n`public static void  sleep(long time)`  让当前线程进入到睡眠状态，到毫秒后自动醒来继续执行\\n\\n```java\\npublic class Test{\\n  public static void main(String[] args){\\n    for(int i = 1;i<=5;i++){\\n      \\tThread.sleep(1000);\\n        System.out.println(i)   \\n    } \\n  }\\n}\\n```\\n\\n这时我们发现主线程执行到sleep方法会休眠1秒后再继续执行。\\n\\n### 等待和唤醒\\n\\nObject类的方法\\n\\n`public void wait()` : 让当前线程进入到等待状态 此方法必须锁对象调用.\\n\\n```java\\npublic class Demo1_wait {\\n    public static void main(String[] args) throws InterruptedException {\\n\\t   // 步骤1 : 子线程开启,进入无限等待状态, 没有被唤醒,无法继续运行.\\n        new Thread(() -> {\\n            try {\\n\\n                System.out.println(\\\"begin wait ....\\\");\\n                synchronized (\\\"\\\") {\\n                    \\\"\\\".wait();\\n                }\\n                System.out.println(\\\"over\\\");\\n            } catch (Exception e) {\\n            }\\n        }).start();\\n    }\\n```\\n\\n`public void notify()` : 唤醒当前锁对象上等待状态的线程  此方法必须锁对象调用.\\n\\n```java\\npublic class Demo2_notify {\\n    public static void main(String[] args) throws InterruptedException {\\n\\t   // 步骤1 : 子线程开启,进入无限等待状态, 没有被唤醒,无法继续运行.\\n        new Thread(() -> {\\n            try {\\n\\n                System.out.println(\\\"begin wait ....\\\");\\n                synchronized (\\\"\\\") {\\n                    \\\"\\\".wait();\\n                }\\n                System.out.println(\\\"over\\\");\\n            } catch (Exception e) {\\n            }\\n        }).start();\\n\\n        //步骤2:  加入如下代码后, 3秒后,会执行notify方法, 唤醒wait中线程.\\n        Thread.sleep(3000);\\n        new Thread(() -> {\\n            try {\\n                synchronized (\\\"\\\") {\\n                    System.out.println(\\\"唤醒\\\");\\n                    \\\"\\\".notify();\\n                }\\n            } catch (Exception e) {\\n            }\\n        }).start();\\n    }\\n}\\n```\\n\\n## 第二章 线程通信\\n\\n- 多个线程因为在同一个进程中，所以互相通信比较容易\\n- 线程通信一定是多个线程在操作同一个资源才需要进行通信\\n- 线程通信必须先保证线程安全，否则毫无意义\\n\\n线程通信的核心方法：\\n\\n- `public void wait()`: 让当前线程进入到等待状态 此方法必须锁对象调用.\\n- `public void notify()` : 唤醒当前锁对象上等待状态的某个线程  此方法必须锁对象调用\\n- `public void notifyAll()` : 唤醒当前锁对象上等待状态的全部线程  此方法必须锁对象调用\\n\\n## 第三章 线程池\\n\\n线程池:其实就是一个容纳多个线程的容器,其中的线程可以反复的使用，省去了频繁创建和销毁线程对象的操作,无需反复创建线程而消耗过多资源。\\n\\n合理利用线程池能够带来三个好处\\n\\n1. 降低资源消耗。\\n   减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。\\n2. 提高响应速度\\n   不需要频繁的创建线程，如果有线程可以直接用，不会出现系统僵死！\\n3. 提高线程的可管理性（线程池可以约束系统最多只能有多少个线程，不会因为线程过多而死机）\\n\\n>  线程池的核心思想：线程复用，同一个线程可以被重复使用，来处理多个任务。\\n\\n### 创建线程池\\n\\n线程池在Java中的代表类：ExecutorService(接口)。\\n\\nJava在Executors类下提供了一个静态方法得到一个线程池的对象：\\n`public static ExecutorService newFixedThreadPool(int nThreads)`：创建一个线程池返回。\\n\\n- ExecutorService提交线程任务对象执行的方法：\\n  `Future<?> submit(Runnable task)`:提交一个Runnable的任务对象给线程池执行。\\n- `Future<?> submit(Callable task)`:提交一个Callable的任务对象给线程池执行。\\n\\n> * `pools.shutdown();` // 等待任务执行完毕以后才会关闭线程池\\n> * `pools.shutdownNow();` // 立即关闭线程池的代码，无论任务是否执行完毕\\n> * 线程池中的线程可以被复用，线程用完以后可以继续去执行其他任务。\\n\\n`Runnable`任务对象给线程池执行\\n\\n```java\\nimport java.util.concurrent.ExecutorService;\\nimport java.util.concurrent.Executors;\\n\\npublic class ThreadPoolsDemo02 {\\n    public static void main(String[] args) {\\n        // a.创建一个线程池，指定线程的固定数量是3.\\n        // new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue());\\n        ExecutorService pools = Executors.newFixedThreadPool(3);\\n        // b.创建线程的任务对象。\\n        Runnable target = new MyRunnable();\\n        // c.把线程任务放入到线程池中去执行。\\n        pools.submit(target); // 提交任务，此时会创建一个新线程,自动启动线程执行！\\n        pools.submit(target); // 提交任务，此时会创建一个新线程,自动启动线程执行！\\n        pools.submit(target); // 提交任务，此时会创建一个新线程,自动启动线程执行！\\n        pools.submit(target); // 不会再创建新线程，会复用之前的线程来处理这个任务\\n\\n        pools.shutdown(); // 等待任务执行完毕以后才会关闭线程池\\n        //pools.shutdownNow(); // 立即关闭线程池的代码，无论任务是否执行完毕！\\n    }\\n}\\n\\nclass MyRunnable implements Runnable{\\n    @Override\\n    public void run() {\\n        for(int i  = 0 ; i < 5 ; i++ ){\\n            System.out.println(Thread.currentThread().getName()+\\\" => \\\"+i);\\n        }\\n    }\\n}\\n```\\n\\n`Callable`任务对象给线程池执行\\n\\n```java\\npublic class ThreadPoolsDemo03 {\\n    public static void main(String[] args) {\\n        // a.创建一个线程池，指定线程的固定数量是3.\\n        // new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue());\\n        ExecutorService pools = Executors.newFixedThreadPool(3);\\n        Future<String> t1 = pools.submit(new MyCallable(10)); // 提交任务，此时会创建一个新线程,自动启动线程执行！\\n        Future<String> t2 = pools.submit(new MyCallable(20)); // 提交任务，此时会创建一个新线程,自动启动线程执行！\\n        Future<String> t3 = pools.submit(new MyCallable(30)); // 提交任务，此时会创建一个新线程,自动启动线程执行！\\n        Future<String> t4 = pools.submit(new MyCallable(40)); // 复用之前的某个线程\\n\\n        try{\\n            // b.可以得到线程池执行的任务结构\\n            String rs1 = t1.get();\\n            String rs2 = t2.get();\\n            String rs3 = t3.get();\\n            String rs4 = t4.get();\\n            System.out.println(rs1);\\n            System.out.println(rs2);\\n            System.out.println(rs3);\\n            System.out.println(rs4);\\n        }catch (Exception e){\\n            e.printStackTrace();\\n        }\\n    }\\n}\\n\\n// 1.定义一个线程任务类实现Callable接口 ， 申明线程执行的结果类型。\\nclass MyCallable implements Callable<String>{\\n    private int n;\\n    public MyCallable(int n){\\n        this.n = n;\\n    }\\n    // 2.重写线程任务类的call方法，这个方法可以直接返回执行的结果。\\n    @Override\\n    public String call() throws Exception {\\n        int sum = 0 ;\\n        for(int i = 1 ; i <= n ; i++){\\n            System.out.println(Thread.currentThread().getName()+\\\" => \\\"+i);\\n            sum += i ;\\n        }\\n        return Thread.currentThread().getName()+\\\"计算1-\\\"+n+\\\"的和：\\\"+sum;\\n    }\\n}\\n```\\n\\n## 第四章 死锁\\n\\n死锁是这样一种情形：多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于线程被无限期地阻塞，因此程序不可能正常终止。\\n\\njava 死锁产生的四个必要条件：\\n\\n* **互斥使用**，即当资源被一个线程使用(占有)时，别的线程不能使用\\n* **不可抢占**，资源请求者不能强制从资源占有者手中夺取资源，资源只能由资源占有者主动释放\\n* **求和保持**，即当资源请求者在请求其他的资源的同时保持对原有资源的占有\\n* **循环等待**，即存在一个等待循环队列：p1要p2的资源，p2要p1的资源。这样就形成了一个等待环路\\n\\n​    当上述四个条件都成立的时候，便形成死锁。当然，死锁的情况下如果打破上述任何一个条件，便可让死锁消失\\n\\n## 第五章 volatile关键字\\n\\n**问题**：线程修改了某个成员变量的值，但是在主线程中读取到的还是之前的值修改后的值无法读取到。\\n\\n**原因**：按照JMM模型，所有的成员变量和静态变量都存在于主内存中，主内存中的变量可以被多个线程共享。每个线程都存在一个专属于自己的工作内存，工作内存一开始存储的是成员变量的副本。所以线程很多时候都是直接访问自己工作内存中的该变量，其他线程对主内存变量值的修改将不可见\\n\\n![image-20220606111513140](http://47.108.219.199:81/articles/image-20220606111513140.png)\\n\\n希望所有线程对于主内存的成员变量修改，其他线程是可见的。\\n\\n* **加锁**：可以实现其他线程对变量修改的可见性\\n  某一个线程进入`synchronized`代码块前后，执行过程入如下：\\n  * 线程获得锁\\n  * 清空工作内存\\n  * 从主内存拷贝共享变量最新的值到工作内存成为副本\\n* 可以给成员变量加上一个`volatile`关键字，立即就实现了成员变量多线程修改的可见性\\n\\n> `volatile`与`synchronized`的区别。\\n>\\n> - `volatile`只能修饰实例变量和静态变量，而`synchronized`可以修饰方法，以及代码块。\\n> - `volatile`保证数据的可见性，但是不保证原子性(多线程进行写操作，不保证线程安全);而`synchronized`是一种排他（互斥）的机制，\\n\\n```java\\npublic class VolatileDemo01 {\\n    public  static void main(String[] args) {\\n        // 1.启动线程，把线程对象中的flag改为true。\\n        VolatileThread t = new VolatileThread();\\n        t.start();\\n\\n        // 2.定义一个死循环\\n        while(true){\\n            // 这里读取到了flag值一直是false,虽然线程已经把它的值改成了true。\\n            if(t.isFlag()){\\n                System.out.println(\\\"执行了循环一次~~~~~~~\\\");\\n            }\\n        }\\n       /* while(true){\\n            synchronized (\\\"ddd\\\"){\\n                // 这里读取到了flag值一直是false,虽然线程已经把它的值改成了true。\\n                if(t.isFlag()){\\n                    System.out.println(\\\"执行了循环一次~~~~~~~\\\");\\n                }\\n            }\\n        }*/\\n    }\\n}\\n// 线程类。\\nclass VolatileThread extends Thread {\\n    // 定义成员变量\\n    // volatile可以实现变量一旦被子线程修改，其他线程可以马上看到它修改后的最新值！\\n    private volatile boolean flag = false ;\\n    public boolean isFlag() {\\n        return flag;\\n    }\\n\\n    @Override\\n    public void run() {\\n        try {\\n            Thread.sleep(1000);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n\\n        // 将flag的值更改为true\\n        this.flag = true ;\\n        System.out.println(\\\"线程修改了flag=\\\" + flag);\\n    }\\n}\\n```\\n\\n## 第六章 原子性\\n\\n**原子性**是指在一次操作或者多次操作中，所有的操作全部都得到了执行并且不会受到任何因素的干扰。最终结果要保证线程安全。\\n\\n> 在多线程环境下，`volatile`关键字可以保证共享数据的可见性，但是并不能保证对数据操作的原子性（在多线程环境下volatile修饰的变量也是线程不安全的）。\\n>   `volatile`的使用场景\\n>\\n> - 开关控制\\n>      用可见性特点，控制某一段代码执行或者关闭\\n>\\n> - 多个线程操作共享变量，但是是有一个线程对其进行写操作，其他的线程都是读\\n>\\n>   此时加上更好，其他线程可以立即读取到最新值。`volatile`不能保证变量操作的原子性（安全性）。\\n\\n### 解决方法一-加锁\\n\\n```java\\npublic class VolatileAtomicThread implements Runnable {\\n    // 定义一个int类型的遍历\\n    private volatile int count = 0 ;\\n    @Override\\n    public void run() {\\n        // 对该变量进行++操作，100次\\n        for(int x = 0 ; x < 100 ; x++) {\\n           synchronized (this){\\n               count++ ;\\n               System.out.println(Thread.currentThread().getName() + \\\"count =========>>>> \\\" + count);\\n           }\\n        }\\n    }\\n}\\n\\nclass VolatileAtomicThreadDemo {\\n    public static void main(String[] args) {\\n        // 创建VolatileAtomicThread对象\\n        Runnable target = new VolatileAtomicThread() ;\\n        // 开启100个线程对执行这一个任务。\\n        for(int x = 0 ; x < 100 ; x++) {\\n            new Thread(target).start();\\n        }\\n    }\\n\\n}\\n```\\n\\n> 这种方法虽然安全性得到了保证，但是性能不好\\n\\n### 解决方法二-基于CAS方式的原子类\\n\\nJava已经提供了一些本身即可实现原子性（线程安全）的类。\\n\\n- 概述：java从JDK1.5开始提供了java.util.concurrent.atomic包(简称Atomic包)，这个包中的原子操作类提供了一种用法简单，性能高效，线程安全地更新一个变量的方式。\\n- 操作整型的原子类\\n  - `public AtomicInteger()`：           初始化一个默认值为0的原子型`Integer`\\n  - `public AtomicInteger(int initialValue)`： 初始化一个指定值的原子型`Integer`\\n  - `int get()`:                                        获取值\\n  - `int getAndIncrement()`:               以原子方式将当前值加1，注意，这里返回的是自增前的值。\\n  - `int incrementAndGet()`:               以原子方式将当前值加1，注意，这里返回的是自增后的值。\\n  - `int addAndGet(int data)`:            以原子方式将输入的数值与实例中的值（`AtomicInteger`里的value）相加，并返回结果。\\n  - `int getAndSet(int value)`:            以原子方式设置为`newValue`的值，并返回旧值。\\n\\n```java\\npublic class VolatileAtomicThread implements Runnable {\\n    // 原子类中封装好了整型变量，默认值是0\\n    private AtomicInteger atomicInteger = new AtomicInteger();\\n    @Override\\n    public void run() {\\n        // 对该变量进行++操作，100次\\n        for(int x = 0 ; x < 100 ; x++) {\\n            int count = atomicInteger.incrementAndGet(); // 底层变量+1且返回！\\n            System.out.println(\\\"count =========>>>> \\\" + count);\\n        }\\n    }\\n}\\n\\nclass VolatileAtomicThreadDemo {\\n    public static void main(String[] args) {\\n        // 创建VolatileAtomicThread对象\\n        Runnable target = new VolatileAtomicThread() ;\\n        // 开启100个线程对执行这一个任务。\\n        for(int x = 0 ; x < 100 ; x++) {\\n            new Thread(target).start();\\n        }\\n    }\\n\\n}\\n```\\n\\n>  **CAS与Synchronized总结**\\n>\\n> `Synchronized`是从悲观的角度出发：总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁（**共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程**）。因此`Synchronized`我们也将其称之为**悲观锁**。jdk中的`ReentrantLock`也是一种悲观锁。性能较差\\n>\\n> `CAS`是从乐观的角度出发:总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据。CAS这种机制我们也可以将其称之为**乐观锁**。综合性能较好\\n\\n## 第七章 并发包\\n\\n并发包的来历：\\n在实际开发中如果不需要考虑线程安全问题，大家不需要做线程安全，因为如果做了反而性能不好！\\n但是开发中有很多业务是需要考虑线程安全问题的，此时就必须考虑了。否则业务出现问题。\\nJava为很多业务场景提供了性能优异，且线程安全的并发包，程序员可以选择使用！\\n\\n### ConcurrentHashMap\\n\\n`Map`集合中的经典集合：`HashMap`它是线程不安全的，性能好，如果在要求线程安全的业务情况下就不能用这个集合做Map集合，否则业务会崩溃\\n\\n为了保证线程安全，可以使用`Hashtable`。注意：线程中加入了计时，`Hashtable`是线程安全的`Map`集合，但是性能较差！(已经被淘汰了，虽然安全，但是性能差)\\n\\n为了保证线程安全，再看`ConcurrentHashMap`（不止线程安全，而且效率高，性能好，最新最好用的线程安全的Map集合）`ConcurrentHashMap`保证了线程安全，综合性能较好！\\n\\n> * `HashMap`是线程不安全的。\\n> *  `Hashtable`线程安全基于`synchronized`，综合性能差,被淘汰了。\\n> * `ConcurrentHashMap`：线程安全的，分段式锁，综合性能最好，线程安全开发中推荐使用\\n\\n```java\\npublic class ConcurrentHashMapDemo {\\n    // 定义一个静态的HashMap集合，只有一个容器。\\n    // public static Map<String,String> map = new HashMap<>();\\n     public static Map<String,String> map = new Hashtable<>();\\n    //public static Map<String,String> map = new ConcurrentHashMap<>();\\n\\n    public static void main(String[] args) throws InterruptedException {\\n        // HashMap线程不安全演示。\\n        // 需求：多个线程同时往HashMap容器中存入数据会出现安全问题。\\n        // 具体需求：提供2个线程分别给map集合加入50万个数据！\\n        new AddMapDataThread().start();\\n        new AddMapDataThread().start();\\n\\n        //休息10秒，确保两个线程执行完毕\\n        Thread.sleep(1000 * 4);\\n        //打印集合大小\\n        System.out.println(\\\"Map大小：\\\" + map.size());\\n    }\\n}\\n\\nclass AddMapDataThread extends Thread{\\n    @Override\\n    public void run() {\\n        for(int i = 0 ; i < 1000000 ; i++ ){\\n            ConcurrentHashMapDemo.map.put(Thread.currentThread().getName()+\\\"键：\\\"+i , \\\"值\\\"+i);\\n        }\\n    }\\n}\\n```\\n\\n### CountDownLatch\\n\\n`CountDownLatch`允许一个或多个线程等待其他线程完成操作，再执行自己。\\n\\n例如：\\n\\n线程1要执行打印：A和C，线程2要执行打印：B，但线程1在打印A后，要线程2打印B之后才能打印C，所以：线程1在打印A后，必须等待线程2打印完B之后才能继续执行\\n\\n需求：\\n\\n提供A线程，打印 A , C\\n提供B线程，打印 B\\n\\n构造器：\\n\\n`public CountDownLatch(int count)`// 初始化唤醒需要的down几步。\\n\\n方法：\\n`public void await() throws InterruptedException`// 让当前线程等待，必须down完初始化的数字才可以被唤醒，否则进入无限等待\\n`public void countDown()`    // 计数器进行减1 （down 1）\\n\\n```java\\npublic class CountDownLatchDemo {\\n    public static void main(String[] args) {\\n        //创建1个计数器：用来控制 A , B线程的执行流程的。\\n        CountDownLatch down = new CountDownLatch(1);\\n        new ThreadA(down).start();\\n        new ThreadB(down).start();\\n    }\\n}\\n\\nclass ThreadA extends Thread{\\n    private CountDownLatch down;\\n    public ThreadA(CountDownLatch down){\\n        this.down = down;\\n    }\\n    @Override\\n    public void run() {\\n        System.out.println(\\\"A\\\");\\n        try {\\n            down.await(); // A线程你进入等待，让B线程执行自己！\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n        System.out.println(\\\"C\\\");\\n    }\\n}\\n\\nclass ThreadB extends Thread{\\n    private CountDownLatch down;\\n    public ThreadB(CountDownLatch down){\\n        this.down = down;\\n    }\\n    @Override\\n    public void run() {\\n        System.out.println(\\\"B\\\");\\n        down.countDown(); // 这里相当于是-1，代表自己执行完毕了。A线程被唤醒！！\\n    }\\n}\\n```\\n\\n### CyclicBarrier\\n\\n`CyclicBarrier`作用：某个线程任务必须等待其他线程执行完毕以后才能最终触发自己执行。\\n\\n例如：公司召集5名员工开会，等5名员工都到了，会议开始。我们创建5个员工线程，1个开会任务，几乎同时启动。使用`CyclicBarrier`保证5名员工线程全部执行后，再执行开会线程。\\n\\n构造器：\\n`public CyclicBarrier(int parties, Runnable barrierAction)`\\n     // 用于在线程到达屏障5时，优先执行`barrierAction`，方便处理更复杂的业务场景\\n方法：\\n   `  public int await()`\\n     // 每个线程调用await方法告诉`CyclicBarrier`我已经到达了屏障，然后当前线程被阻塞\\n\\n> - 可以实现多线程中，某个任务在等待其他线程执行完毕以后触发。\\n> - 循环屏障可以实现达到一组屏障就触发一个任务执行！\\n\\n```java\\npublic class CyclicBarrierDemo {\\n    public static void main(String[] args) {\\n        // 1.创建一个任务循环屏障对象。\\n        /**\\n         * 参数一：代表多少个线程的执行。\\n         * 参数二：到达执行屏障就开始触发的线程任务。\\n         */\\n        CyclicBarrier cb = new CyclicBarrier(5 , new MeetingRunnable());\\n        new PeopleThread(cb).start();\\n        new PeopleThread(cb).start();\\n        new PeopleThread(cb).start();\\n        new PeopleThread(cb).start();\\n        new PeopleThread(cb).start();\\n\\n        new PeopleThread(cb).start();\\n        new PeopleThread(cb).start();\\n        new PeopleThread(cb).start();\\n        new PeopleThread(cb).start();\\n        new PeopleThread(cb).start();\\n\\n    }\\n}\\n\\n// 任务类：开始开会的任务\\nclass MeetingRunnable implements Runnable{\\n    @Override\\n    public void run() {\\n        System.out.println(\\\"人员到齐了开始由\\\"+Thread.currentThread().getName()+\\\"主持会议！\\\");\\n    }\\n}\\n\\n// 员工类\\nclass PeopleThread extends Thread{\\n    private CyclicBarrier cb ;\\n    public PeopleThread(CyclicBarrier cb) {\\n        this.cb = cb;\\n    }\\n\\n    @Override\\n    public void run() {\\n        try {\\n            Thread.sleep(1000);\\n            System.out.println(\\\"员工：\\\"+Thread.currentThread().getName()+\\\"进入会议室\\\");\\n            cb.await(); // 自己做完了，告诉循环屏障我结束了！\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}\\n```\\n\\n### Semaphore\\n\\n- `Semaphore`（发信号）的主要作用是控制线程的并发数量。\\n  \\n- `synchronized`可以起到\\\"锁\\\"的作用，但某个时间段内，只能有一个线程允许执行。\\n- `Semaphore`可以设置同时允许几个线程执行。\\n- `Semaphore`字面意思是信号量的意思，它的作用是控制访问特定资源的线程数目。\\n\\n`Semaphore`的构造器：\\n\\n- `public Semaphore(int permits)`：    permits 表示许可线程的数量\\n- `public Semaphore(int permits, boolean fair)`：fair 表示公平性，如果这个设为 true 的话，下次执行的线程会是等待最久的线程\\n\\n`Semaphore`的方法：\\n\\n- `public void acquire() throws InterruptedException` 表示获取许可\\n- `public void release() release()` 表示释放许可\\n\\n```java\\npublic class SemaphoreDemo {\\n    public static void main(String[] args) {\\n        Service service = new Service();\\n        for(int i = 1 ; i <= 5 ; i++ ){\\n            new MyThread(service,\\\"线程：\\\"+i).start();\\n        }\\n    }\\n}\\n// 执行的任务。\\nclass Service{\\n    // 可以同时支持多个线程进入共享资源区执行。\\n    private Semaphore semaphore = new Semaphore(2);\\n    public void showMethod(){\\n        try {\\n            semaphore.acquire();\\n            long startTimer = System.currentTimeMillis();\\n            System.out.println(\\\"进入时间：\\\"+startTimer);\\n            System.out.println(Thread.currentThread().getName()+\\\"进入资源执行\\\");\\n            Thread.sleep(1000);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n        long endTimer = System.currentTimeMillis();\\n        System.out.println(\\\"结束时间：\\\"+endTimer);\\n        semaphore.release();\\n        //acquire()和release()方法之间的代码为\\\"同步代码\\\"\\n    }\\n}\\n\\n// 线程类。\\nclass MyThread extends Thread{\\n    private Service service;\\n    public MyThread(Service service , String name){\\n        super(name);\\n        this.service = service;\\n    }\\n    @Override\\n    public void run() {\\n        service.showMethod();\\n    }\\n}\\n```\\n\\n### Exchanger\\n\\nExchanger（交换者）是一个用于线程间协作的工具类。Exchanger用于进行线程间的数据交换。这两个线程通过exchange方法交换数据，如果第一个线程先执行exchange()方法，它会一直等待第二个线程也执行exchange方法，当两个线程都到达同步点时，这两个线程就可以交换数据，将本线程生产出来的数据传递给对方。\\n\\n Exchanger构造方法：public Exchanger()\\n\\n Exchanger重要方法：public V exchange(V x)\\n\\n 分析：\\n    （1）需要2个线程\\n    （2）需要一个交换对象负责交换两个线程执行的结果。\\n\\n> - Exchanger可以实现线程间的数据交换。\\n> - 一个线程如果等不到对方的数据交换就会一直等待。\\n> - 我们也可以控制一个线程等待的时间。\\n> - 必须双方都进行交换才可以正常进行数据的交换。\\n\\n```java\\npublic class ExchangerDemo {\\n    public static void main(String[] args) {\\n        // 创建交换对象（信使）\\n        Exchanger<String> exchanger = new Exchanger<>();\\n        // 创建2给线程对象。\\n        new ThreadA(exchanger).start();\\n        new ThreadB(exchanger).start();\\n    }\\n}\\n\\nclass ThreadA extends Thread{\\n    private Exchanger<String> exchanger;\\n    public ThreadA(Exchanger<String> exchanger) {\\n        this.exchanger = exchanger;\\n    }\\n    @Override\\n    public void run() {\\n        try {\\n            // 礼物A\\n            System.out.println(\\\"线程A,做好了礼物A,等待线程B送来的礼物B.....\\\");\\n            // 开始交换礼物。参数是送给其他线程的礼物!\\n            // System.out.println(\\\"线程A收到线程B的礼物：\\\"+exchanger.exchange(\\\"礼物A\\\"));\\n            // 如果等待了5s还没有交换它就去死（抛出异常）！\\n            System.out.println(\\\"线程A收到线程B的礼物：\\\"+exchanger.exchange(\\\"礼物A\\\", 5 , TimeUnit.SECONDS));\\n        } catch (Exception e) {\\n            System.out.println(\\\"线程A等待了5s，没有收到礼物,最终就执行结束了!\\\");\\n        }\\n    }\\n}\\n\\nclass ThreadB extends Thread{\\n    private Exchanger<String> exchanger;\\n    public ThreadB(Exchanger<String> exchanger) {\\n        this.exchanger = exchanger;\\n    }\\n    @Override\\n    public void run() {\\n        try {\\n            // 礼物B\\n             System.out.println(\\\"线程B,做好了礼物B,等待线程A送来的礼物A.....\\\");\\n            // 开始交换礼物。参数是送给其他线程的礼物!\\n             System.out.println(\\\"线程B收到线程A的礼物：\\\"+exchanger.exchange(\\\"礼物B\\\"));\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}\\n```\\n\\n# day9-方法引用、Lambda表达式、Stream流\\n\\n## 第一章 方法引用\\n\\n### 方法引用概述\\n\\n方法引用是为了进一步简化Lambda表达式的写法。\\n\\n方法引用的格式：类型或者对象::引用的方法。\\n\\n方法引用有四种形式：\\n\\n- 静态方法的引用\\n- 实例方法的引用\\n- 特定类型方法的引用\\n- 构造器引用\\n\\n```java\\nist<String> lists = new ArrayList<>();\\nlists.add(\\\"java1\\\");\\nlists.add(\\\"java2\\\");\\nlists.add(\\\"java3\\\");\\n\\nlists.forEach( s -> System.out.println(s));\\n// 方法引用！\\nlists.forEach(System.out::println);\\n```\\n\\n### 静态方法引用\\n\\n引用格式：类名::静态方法\\n\\n简化步骤：定义一个静态方法，把需要简化的代码放到一个静态方法中去。\\n\\n静态方法引用的注意事项：**被引用的方法的参数列表要和函数式接口中的抽象方法的参数列表一致**\\n\\n`Student`\\n\\n```java\\npublic class Student {\\n    private String name ;\\n    private int age ;\\n    private char sex ;\\n\\n    public static int compareByAge(Student o1 , Student o2){\\n        return  o1.getAge() - o2.getAge();\\n    }\\n    // ...\\n}\\n```\\n\\n排序\\n\\n```java\\nList<Student> lists = new ArrayList<>();\\nStudent s1 = new Student(\\\"李铭\\\",18,\'男\');\\nStudent s2 = new Student(\\\"冯龙\\\",23,\'男\');\\nStudent s3 = new Student(\\\"王乐乐\\\",21,\'男\');\\nCollections.addAll(lists , s1 , s2 , s3);\\n\\nCollections.sort(lists, ( o1, o2) -> Student.compareByAge(o1 , o2));\\n// 如果前后参数是一样的，而且方法是静态方法，既可以使用静态方法引用\\nCollections.sort(lists, Student::compareByAge);\\n```\\n\\n### 实例方法引用\\n\\n格式： 对象::实例方法\\n\\n简化步骤：定义一个实例方法，把需要的代码放到实例方法中去。\\n\\n实例方法引用的注意事项：**被引用的方法的参数列表要和函数式接口中的抽象方法的参数列表一致**\\n\\n```java\\nList<String> lists = new ArrayList<>();\\nlists.add(\\\"java1\\\");\\nlists.add(\\\"java2\\\");\\nlists.add(\\\"java3\\\");\\n\\n// 对象是 System.out = new PrintStream();\\n// 实例方法：println()\\n// 前后参数正好都是一个\\nlists.forEach(s -> System.out.println(s));\\nlists.forEach(System.out::println);\\n```\\n\\n### 特定类型方法的引用\\n\\n特定类型：String ,任何类型\\n\\n格式：特定类型::方法\\n\\n注意：如果第一个参数列表中的形参中的第一个参数作为了后面的方法的调用者，并且其余参数作为后面方法的形参，那么就可以用特定类型方法引用了\\n\\n```java\\nString[] strs = new String[]{\\\"James\\\", \\\"AA\\\", \\\"John\\\",\\n                             \\\"Patricia\\\",\\\"Dlei\\\" , \\\"Robert\\\",\\\"Boom\\\", \\\"Cao\\\" ,\\\"black\\\" ,\\n                             \\\"Michael\\\", \\\"Linda\\\",\\\"cao\\\",\\\"after\\\",\\\"sBBB\\\"};\\n\\n// public static <T> void sort(T[] a, Comparator<? super T> c)\\n// 需求：按照元素的首字符(忽略大小写)升序排序！！！\\nArrays.sort(strs, new Comparator<String>() {\\n    @Override\\n    public int compare(String s1, String s2) {\\n        return s1.compareToIgnoreCase(s2);// 按照元素的首字符(忽略大小写)比较。\\n    }\\n});\\nArrays.sort(strs, (String s1, String s2) -> {\\n    return s1.compareToIgnoreCase(s2);// 按照元素的首字符(忽略大小写)比较。\\n});\\n\\nArrays.sort(strs, ( s1,  s2 ) ->  s1.compareToIgnoreCase(s2));\\n\\n// 特定类型的方法引用：\\nArrays.sort(strs,  String::compareToIgnoreCase);\\n\\nSystem.out.println(Arrays.toString(strs));\\n```\\n\\n### 构造器引用\\n\\n格式是：类名::new\\n\\n注意点：前后参数一致的情况下，又在创建对象就可以使用构造器引用`s -> new Student(s) => Student::new`\\n\\n```java\\nList<String> lists = new ArrayList<>();\\nlists.add(\\\"java1\\\");\\nlists.add(\\\"java2\\\");\\nlists.add(\\\"java3\\\");\\n\\n// 集合默认只能转成Object类型的数组。\\nObject[] objs = lists.toArray();\\nSystem.out.println(\\\"Object类型的数组：\\\"+ Arrays.toString(objs));\\n\\n// 我们想指定转换成字符串类型的数组！！\\n// 最新的写法可以结合构造器引用实现 。\\n// default <T> T[] toArray(IntFunction<T[]> generator)\\nString[] strs = lists.toArray(new IntFunction<String[]>() {\\n    @Override\\n    public String[] apply(int value) {\\n        return new String[value];\\n    }\\n});\\n\\nString[] strs1 = lists.toArray(s -> new String[s] );\\n\\nString[] strs2 = lists.toArray(String[]::new);\\n\\nSystem.out.println(\\\"String类型的数组：\\\"+ Arrays.toString(strs2));\\n```\\n\\n## 第二章 Lambda表达式\\n\\nLambda表达式是JDK1.8开始之后的新技术，是一种代码的新语法，作用是为了简化匿名内部类的代码写法\\n\\nLambda表达式的格式\\n\\n```java\\n(匿名内部类被重写方法的形参列表) -> {\\n\\t// 被重写方法的方法代码\\n}\\n```\\n\\nLambda表达式的使用前提：\\n\\n* Lambda表达式并不能简化所有匿名内部类的写法。\\n* Lambda表达式只能简化接口中只有一个抽象方法的匿名内部类形式。\\n\\nLambda表达式**只能简化函数式接口的匿名内部类写法**：\\n\\n- 首先必须是接口\\n- 接口中只能有一个抽象方法\\n\\n### Lambda表达式简化Runnable接口匿名内部类\\n\\n`@FunctionalInterface`函数式接口注解：一旦某个接口加上了这个注解，这个接口只能有且仅有一个抽象方法。\\n   这个接口就可以被Lambda表达式简化。\\n\\n```java\\nThread t = new Thread(new Runnable() {\\n    @Override\\n    public void run() {\\n        System.out.println(Thread.currentThread().getName()+\\\":执行~~~\\\");\\n    }\\n});\\nt.start();\\n\\nThread t1 = new Thread(() -> {\\n    System.out.println(Thread.currentThread().getName()+\\\":执行~~~\\\");\\n});\\nt1.start();\\n\\nnew Thread(() -> {\\n    System.out.println(Thread.currentThread().getName()+\\\":执行~~~\\\");\\n}).start();\\n\\nnew Thread(() -> System.out.println(Thread.currentThread().getName()+\\\":执行~~~\\\")).start();\\n```\\n\\n### Lambda表达式简化Comparator接口匿名内部类写法\\n\\n```java\\nList<Student> lists = new ArrayList<>();\\nStudent s1 = new Student(\\\"李铭\\\",18,\'男\');\\nStudent s2 = new Student(\\\"冯龙\\\",23,\'男\');\\nStudent s3 = new Student(\\\"王乐乐\\\",21,\'男\');\\nCollections.addAll(lists , s1 , s2 , s3);\\n\\n// 按照年龄进行升序排序！\\nCollections.sort(lists, new Comparator<Student>() {\\n    @Override\\n    public int compare(Student s1, Student s2) {\\n        return s1.getAge() - s2.getAge();\\n    }\\n});\\n\\n// 简化写法\\nCollections.sort(lists ,(Student t1, Student t2) -> {\\n    return t1.getAge() - t2.getAge();\\n});\\n\\nCollections.sort(lists ,(Student t1, Student t2) -> t1.getAge() - t2.getAge());\\n\\n// 参数类型可以省略\\nCollections.sort(lists ,( t1,  t2) -> t1.getAge() - t2.getAge());\\n\\nSystem.out.println(lists);\\n```\\n\\n### Lambda表达式的省略写法\\n\\nLambda表达式的省略写法（进一步在Lambda表达式的基础上继续简化）\\n\\n- 如果Lambda表达式的方法体代码只有一行代码。可以省略大括号不写,同时要省略分号\\n- 如果Lambda表达式的方法体代码只有一行代码。可以省略大括号不写。此时，如果这行代码是return语句，必须省略return不写，同时也必须省略\\\";\\\"不写\\n- 参数类型可以省略不写\\n- 如果只有一个参数，参数类型可以省略，同时()也可以省略\\n\\n```java\\nList<String> names = new ArrayList<>();\\nnames.add(\\\"胡伟光\\\");\\nnames.add(\\\"甘挺\\\");\\nnames.add(\\\"洪磊\\\");\\n\\nnames.forEach(new Consumer<String>() {\\n    @Override\\n    public void accept(String s) {\\n        System.out.println(s);\\n    }\\n});\\n\\nnames.forEach((String s) -> {\\n    System.out.println(s);\\n});\\n\\nnames.forEach((s) -> {\\n    System.out.println(s);\\n});\\n\\nnames.forEach(s -> {\\n    System.out.println(s);\\n});\\n\\nnames.forEach(s -> System.out.println(s) );\\n\\nnames.forEach(System.out::println);\\n```\\n\\n## 第三章 Stream流\\n\\n### Stream流概述\\n\\n在Java 8中，得益于Lambda所带来的函数式编程，引入了一个全新的Stream流概念 ，用于解决已有集合/数组类库有的弊端。\\n\\nStream流能解决什么问题：\\n\\n- 可以解决已有集合类库或者数组API的弊端。\\n- Stream认为集合和数组操作的API很不好用，所以采用了Stream流简化集合和数组的操作\\n\\n```java\\nList<String> list = new ArrayList<>();\\nlist.add(\\\"张无忌\\\");\\nlist.add(\\\"周芷若\\\");\\nlist.add(\\\"赵敏\\\");\\nlist.add(\\\"张强\\\");\\nlist.add(\\\"张三丰\\\");\\n\\nlist.stream().filter(s -> s.startsWith(\\\"张\\\")).filter( s -> s.length()== 3 )\\n    .forEach(System.out::println);\\n```\\n\\n### Stream流的获取\\n\\nStream流式思想的核心：\\n\\n- 是先得到集合或者数组的Stream流（就是一根传送带）\\n- 然后就用这个Stream流操作集合或者数组的元素\\n- 然后用Stream流简化替代集合操作的API\\n\\n```java\\ndefault Stream<E> stream();\\n```\\n\\n```java\\nCollection<String> c = new ArrayList<>();\\nStream<String> ss = c.stream();\\n\\n/** --------------------Map集合获取流-------------------------------   */\\nMap<String, Integer> map = new HashMap<>();\\n// 先获取键的Stream流。\\nStream<String> keyss = map.keySet().stream();\\n// 在获取值的Stream流\\nStream<Integer> valuess = map.values().stream();\\n// 获取键值对的Stream流（key=value： Map.Entry<String,Integer>）\\nStream<Map.Entry<String,Integer>> keyAndValues = map.entrySet().stream();\\n\\n/** ---------------------数组获取流------------------------------   */\\n// 数组也有Stream流。\\nString[] arrs = new String[]{\\\"Java\\\", \\\"JavaEE\\\" ,\\\"Spring Boot\\\"};\\nStream<String> arrsSS1 = Arrays.stream(arrs);\\nStream<String> arrsSS2 = Stream.of(arrs);\\n```\\n\\n### Stream流的常用API\\n\\n- `forEach `: 逐一处理(遍历)\\n\\n- `count`：统计个数\\n\\n  `long count();`\\n\\n- `filter`: 过滤元素\\n\\n- `Stream<T> filter(Predicate<? super T> predicate)`\\n\\n- `limit`: 取前几个元素\\n\\n- `skip`: 跳过前几个\\n\\n- `map` : 加工方法\\n\\n  把原来的元素加工以后，重新放上去\\n\\n  ```java\\n  <R> Stream<R> map(Function<? super T, ? extends R> mapper);\\n  ```\\n\\n- `concat `: 合并流\\n\\n  ```java\\n  public static <T> Stream<T> concat(Stream<? extends T> a, Stream<? extends T> b)\\n  ```\\n\\n```java\\nList<String> list = new ArrayList<>();\\nlist.add(\\\"张无忌\\\");\\nlist.add(\\\"周芷若\\\");\\nlist.add(\\\"赵敏\\\");\\nlist.add(\\\"张强\\\");\\nlist.add(\\\"张三丰\\\");\\nlist.add(\\\"张三丰\\\");\\n\\nlist.stream().filter( s -> s.length() == 3 ).filter( s -> s.startsWith(\\\"张\\\"))\\n    .forEach( System.out::println);\\n// 统计数量\\nlong count = list.stream().filter( s -> s.length() == 3 )\\n    .filter( s -> s.startsWith(\\\"张\\\")).count();\\nSystem.out.println(count);\\n// 取前2个\\nlist.stream().filter(s -> s.length() == 3).limit(2)\\n    .forEach(System.out::println);\\n// 跳过前2个\\nlist.stream().filter(s -> s.length() == 3).skip(2)\\n    .forEach(System.out::println);\\n// 把名称加工成学生对象放入list中\\nlist.stream().map(Student::new).forEach(System.out::println);\\n```\\n\\n合并流\\n\\n```java\\nList<String> list = new ArrayList<>();\\nlist.add(\\\"张无忌\\\");\\nlist.add(\\\"周芷若\\\");\\nlist.add(\\\"赵敏\\\");\\nlist.add(\\\"张强\\\");\\nlist.add(\\\"张三丰\\\");\\nlist.add(\\\"张三丰\\\");\\n\\n// 数组流\\nStream<Integer> s1 = Stream.of(10, 20 ,30 ,40);\\n// 集合流\\nStream<String> s2 = list.stream();\\n// 合并流\\nStream<Object> s3 = Stream.concat(s1,s2);\\ns3.forEach(System.out::println);\\n```\\n\\n### Stream流的综合应用\\n\\n\\n\\n```java\\nList<String> one = new ArrayList<>();\\none.add(\\\"迪丽热巴\\\");\\none.add(\\\"宋远桥\\\");\\none.add(\\\"苏星河\\\");\\none.add(\\\"老子\\\");\\none.add(\\\"庄子\\\");\\none.add(\\\"孙子\\\");\\none.add(\\\"洪七公\\\");\\n\\nList<String> two = new ArrayList<>();\\ntwo.add(\\\"古力娜扎\\\");\\ntwo.add(\\\"张无忌\\\");\\ntwo.add(\\\"张三丰\\\");\\ntwo.add(\\\"赵丽颖\\\");\\ntwo.add(\\\"张二狗\\\");\\ntwo.add(\\\"张天爱\\\");\\ntwo.add(\\\"张三\\\");\\n\\n/**\\n         * 1. 第一个队伍只要名字为3个字的成员姓名；\\n         * 2. 第一个队伍筛选之后只要前3个人；\\n         */\\nStream<String> oneStream =\\n    one.stream().filter(s -> s.length() == 3).limit(3);\\n\\n/**\\n         * 3. 第二个队伍只要姓张的成员姓名；\\n         * 4. 第二个队伍筛选之后不要前2个人；\\n         * 5. 将两个队伍合并为一个队伍；\\n         */\\nStream<String> twoStream =\\n    two.stream().filter(s -> s.startsWith(\\\"张\\\")).skip(2);\\n\\nStream<String> allStream = Stream.concat(oneStream , twoStream);\\n\\n/**\\n         * 6. 根据姓名创建`Student`对象； (加工)\\n         * 7. 打印整个队伍的Student对象信息。\\n         */\\n//allStream.map(s -> new Student(s)).forEach(System.out::println);\\nallStream.map(Student::new).forEach(System.out::println);\\n```\\n\\n### Stream流的终结与非终结方法\\n\\n一旦Stream调用了终结方法，流的操作就全部终结了，不能继续使用，只能创建新的Stream操作。\\n\\n终结方法： `foreach `, `count`\\n\\n非终结方法：每次调用完成以后返回一个新的流对象，可以继续使用，支持链式编程！\\n\\n```java\\nList<String> list = new ArrayList<>();\\nlist.add(\\\"张无忌\\\");\\nlist.add(\\\"周芷若\\\");\\nlist.add(\\\"赵敏\\\");\\nlist.add(\\\"张强\\\");\\nlist.add(\\\"张三丰\\\");\\nlist.add(\\\"张三丰\\\");\\n\\n// foreach终结方法\\nlist.stream().filter(s -> s.startsWith(\\\"张\\\"))\\n    .filter(s -> s.length() == 3).forEach(System.out::println);\\n\\nlong count =  list.stream().filter(s -> s.startsWith(\\\"张\\\"))\\n    .filter(s -> s.length() == 3).count();\\nSystem.out.println(count);\\n```\\n\\n### 收集Stream流\\n\\n收集Stream流:把Stream流的数据转回成集合。\\n\\nStream的作用是：把集合转换成一根传送带，借用Stream流的强大功能进行的操作。但是实际开发中数据最终的形式还是应该是集合，最终Stream流操作完毕以后还是要转换成集合。这就是收集Stream流。\\n\\n收集Stream流的含义：就是把Stream流的数据转回到集合中去。\\n\\n```java\\nList<String> list = new ArrayList<>();\\nlist.add(\\\"张无忌\\\");\\nlist.add(\\\"周芷若\\\");\\nlist.add(\\\"赵敏\\\");\\nlist.add(\\\"张强\\\");\\nlist.add(\\\"张三丰\\\");\\nlist.add(\\\"张三丰\\\");\\n\\nStream<String> zhangLists = list.stream().filter(s -> s.startsWith(\\\"张\\\"));\\n// 把stream流转换成Set集合。\\nSet<String> sets = zhangLists.collect(Collectors.toSet());\\nSystem.out.println(sets);\\n\\n// 把stream流转换成List集合。\\nStream<String> zhangLists1 = list.stream().filter(s -> s.startsWith(\\\"张\\\"));\\nList<String> lists= zhangLists1.collect(Collectors.toList());\\nSystem.out.println(lists);\\n\\n// 把stream流转换成数组。\\nStream<String> zhangLists2 = list.stream().filter(s -> s.startsWith(\\\"张\\\"));\\nObject[] arrs = zhangLists2.toArray();\\n// 可以借用构造器引用申明转换成的数组类型！！！\\n//String[] arrs1 = zhangLists2.toArray(String[]::new);\\n```\\n\\n## 第四章 File类\\n\\n### File类的概述\\n\\nFile类：代表操作系统的文件对象\\n\\nFile类：是用来操作操作系统的文件对象的，删除文件，获取文件信息，创建文件（文件夹）...\\n\\n广义来说操作系统认为文件包含（文件和文件夹）\\n\\nFile类的创建文件对象的API:\\n\\n* 包：`java.io.File`\\n* 构造器：\\n  * `public File(String pathname)`:根据路径获取文件对象\\n  * `public File(String parent, String child)`:根据父路径和文件名称获取文件对象！\\n\\nFile类创建文件对象的格式:\\n\\n* `File f = new File(\\\"绝对路径/相对路径\\\");`\\n  * **绝对路径**：从磁盘的的盘符一路走到目的位置的路径。\\n    * 绝对路径依赖具体的环境，一旦脱离环境，代码可能出错！！\\n    * 一般是定位某个操作系统中的某个文件对象。\\n  * **相对路径**：不带盘符的。（重点）\\n    * 默认是直接相对到工程目录下寻找文件的。\\n    * 相对路径只能用于寻找工程下的文件。\\n    * 能用相对路径就应该尽量使用，可以跨平台！\\n* `File f = new File(\\\"文件对象/文件夹对象\\\");`\\n  广义来说：文件是包含文件和文件夹的。\\n\\n> * 创建文件对象可以用绝对路径也可以用相对路径。\\n> * 相对路径只能用于寻找工程下的文件。\\n> * 文件对象可以表示文件也可以表示文件夹！\\n\\n```java\\nFile f1 = new File(\\\"D:\\\\\\\\itcast\\\\\\\\图片资源\\\\\\\\beautiful.jpg\\\");\\nSystem.out.println(f1.length()); // 获取文件的大小，字节大小\\n\\n// 2.创建文件对象：使用相对路径\\nFile f2 = new File(\\\"Day09Demo/src/dlei01.txt\\\");\\nSystem.out.println(f2.length());\\n\\n// 3.创建文件对象：代表文件夹。\\nFile f3 = new File(\\\"D:\\\\\\\\itcast\\\\\\\\图片资源\\\");\\nSystem.out.println(f3.exists());// 判断路径是否存在！！\\n```\\n\\n### File类的获取功能的方法\\n\\n- `public String getAbsolutePath()`  ：返回此File的绝对路径名字符串。\\n- `public String getPath()`  ： 获取创建文件对象的时候用的路径\\n- `public String getName()`  ： 返回由此File表示的文件或目录的名称。\\n- `public long length()`  ：    返回由此File表示的文件的长度。\\n\\n```java\\n// 1.绝对路径创建一个文件对象\\nFile f1 = new File(\\\"D:/itcast/图片资源/meinv.jpg\\\");\\n// a.获取它的绝对路径。\\nSystem.out.println(f1.getAbsolutePath());\\n// b.获取文件定义的时候使用的路径。\\nSystem.out.println(f1.getPath());\\n// c.获取文件的名称：带后缀。\\nSystem.out.println(f1.getName());\\n// d.获取文件的大小：字节个数。\\nSystem.out.println(f1.length());\\n\\nSystem.out.println(\\\"------------------------\\\");\\n\\n// 2.相对路径\\nFile f2 = new File(\\\"Day09Demo/src/dlei01.txt\\\");\\n// a.获取它的绝对路径。\\nSystem.out.println(f2.getAbsolutePath());\\n// b.获取文件定义的时候使用的路径。\\nSystem.out.println(f2.getPath());\\n// c.获取文件的名称：带后缀。\\nSystem.out.println(f2.getName());\\n// d.获取文件的大小：字节个数。\\nSystem.out.println(f2.length());\\n```\\n\\n### File类的判断功能的方法\\n\\n- `public boolean exists()` ：此File表示的文件或目录是否实际存在。\\n- `public boolean isDirectory()`：此File表示的是否为目录。\\n- `public boolean isFile()` ：此File表示的是否为文件\\n\\n```java\\n// 1.文件对象。\\nFile f1 = new File(\\\"D:\\\\\\\\itcast\\\\\\\\图片资源\\\\\\\\meinv.jpg\\\");\\n// a.判断文件路径是否存在\\nSystem.out.println(f1.exists()); // true\\n// b.判断文件对象是否是文件,是文件返回true ,反之\\nSystem.out.println(f1.isFile()); // true\\n// c.判断文件对象是否是文件夹,是文件夹返回true ,反之\\nSystem.out.println(f1.isDirectory()); // false\\n\\n// 1.文件对象。\\nFile f2 = new File(\\\"D:\\\\\\\\itcast\\\\\\\\图片资源\\\");\\n// a.判断文件路径是否存在\\nSystem.out.println(f2.exists()); // true\\n// b.判断文件对象是否是文件,是文件返回true ,反之\\nSystem.out.println(f2.isFile()); // false\\n// c.判断文件对象是否是文件夹,是文件夹返回true ,反之\\nSystem.out.println(f2.isDirectory()); // true\\n```\\n\\n### File类的创建和删除方法\\n\\n- `public boolean createNewFile()` ：当且仅当具有该名称的文件尚不存在时，\\n         创建一个新的空文件。 （几乎不用的，因为以后文件都是自动创建的！）\\n- `public boolean delete()` ：删除由此File表示的文件或目录。 （只能删除空目录）\\n- `public boolean mkdir()` ：创建由此File表示的目录。（只能创建一级目录）\\n- `public boolean mkdirs()` ：可以创建多级目录（建议使用的）\\n\\n```java\\nFile f = new File(\\\"Day09Demo/src/dlei02.txt\\\");\\n// a.创建新文件，创建成功返回true ,反之\\nSystem.out.println(f.createNewFile());\\n\\n// b.删除文件或者空文件夹\\nSystem.out.println(f.delete());\\n// 不能删除非空文件夹，只能删除空文件夹\\nFile f1 = new File(\\\"D:/itcast/aaaaa\\\");\\nSystem.out.println(f1.delete());\\n\\n// c.创建一级目录\\nFile f2 = new File(\\\"D:/itcast/bbbb\\\");\\nSystem.out.println(f2.mkdir());\\n\\n// d.创建多级目录\\nFile f3 = new File(\\\"D:/itcast/e/a/d/ds/fas/fas/fas/fas/fas/fas\\\");\\nSystem.out.println(f3.mkdirs());\\n```\\n\\n### File目录的遍历\\n\\n- `public String[] list()`\\n    获取当前目录下所有的\\\"一级文件名称\\\"到一个字符串数组中去返回。\\n- `public File[] listFiles()`==常用==\\n    获取当前目录下所有的\\\"一级文件对象\\\"到一个文件对象数组中去返回（重点）\\n\\n```java\\nFile dir = new File(\\\"day09/src/com/itheima\\\");\\n// a.获取当前目录对象下的全部一级文件名称到一个字符串数组返回。\\nString[] names = dir.list();\\nfor (String name : names) {\\n    System.out.println(name);\\n}\\n// b.获取当前目录对象下的全部一级文件对象到一个File类型的数组返回。\\nFile[] files = dir.listFiles();\\nfor (File file : files) {\\n    System.out.println(file.getAbsolutePath());\\n}\\n\\n// ---------拓展------------\\nFile f1 = new File(\\\"C:\\\\\\\\Users\\\\\\\\Administrator\\\\\\\\Documents\\\\\\\\codes\\\\\\\\notes\\\\\\\\java-notes\\\\\\\\java补充知识点\\\\\\\\codes\\\\\\\\seniorJava\\\\\\\\day09\\\\\\\\src\\\\\\\\com\\\\\\\\itheima\\\\\\\\_20File目录的遍历\\\\\\\\FileDemo.java\\\");\\nlong time = f1.lastModified(); // 最后修改时间！\\nSimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\");\\nSystem.out.println(sdf.format(time));\\n```\\n\\n## 第五章 递归\\n\\n### 递归的概述\\n\\n方法在方法中又调用了自己\\n\\n* 直接递归：自己的方法调用自己\\n* 间接递归：自己的方法调用别的方法，别的方法又调用自己\\n\\n> - 递归是自己调用自己。\\n> - 递归如果控制的不恰当，会形成递归的死循环，从而导致栈内存溢出错误！！\\n> - 递归应该防止进入递归的死循环！\\n\\n一个简单的例子，计算\\n$$\\nf(x) = f(x-1) + 1\\n$$\\n\\n```java\\npublic class RecursionDemo02 {\\n    public static void main(String[] args) {\\n        System.out.println(f(10));\\n    }\\n\\n    public static int f(int x){\\n        if(x == 1) {\\n            return 1;\\n        }else{\\n            return f(x - 1) + 1 ;\\n        }\\n    }\\n}\\n```\\n\\n### 递归的核心\\n\\n递归算法分为三个要素：\\n\\n* 递归公式\\n  $$\\n  f(x)=f(x)+1\\n  $$\\n\\n* 递归终结点\\n  $$\\n  f(1)=1\\n  $$\\n\\n* 递归方向\\n\\n  必须走向终结点\\n\\n必须满足三要素，否则递归会出现死亡\\n\\n### 递归实现文件搜索\\n\\n这是一个非规律递归，实现步骤是：\\n\\n* 定义一个方法用于做搜索\\n* 进入方法中进行业务搜索分析\\n\\n```java\\n/**\\n     * 去某个目录下搜索某个文件\\n     * @param dir 搜索文件的目录。\\n     * @param fileName 搜索文件的名称。\\n     */\\npublic static void searchFiles(File dir , String fileName){\\n    // 1.判断是否存在该路径，是否是文件夹\\n    if(dir.exists() && dir.isDirectory()){\\n        // 2.提取当前目录下的全部一级文件对象\\n        File[] files = dir.listFiles(); // null/[]\\n        // 3.判断是否存在一级文件对象（判断是否不为空目录）\\n        if(files!=null && files.length > 0){\\n            // 4.判断一级文件对象\\n            for (File f : files) {\\n                // 5.判断file是文件还是文件夹\\n                if(f.isFile()){\\n                    // 6.判断该文件是否为我要找的文件对象\\n                    if(f.getName().contains(fileName)){\\n                        System.out.println(f.getAbsolutePath());\\n                        try {\\n                            // 启动它（拓展）\\n                            Runtime r = Runtime.getRuntime();\\n                            r.exec(f.getAbsolutePath());\\n                        } catch (IOException e) {\\n                            e.printStackTrace();\\n                        }\\n                    }\\n                }else{\\n                    // 7.该文件是文件夹，文件夹要递归进入继续寻找\\n                    searchFiles(f ,fileName);\\n                }\\n            }\\n        }\\n    }\\n}\\n```\\n\\n## 第六章 字节流\\n\\n### 字符集\\n\\n字符集：各个国家为自己国家的字符取的一套编号规则。计算机的底层是不能直接存储字符的。计算机的底层只能存储二进制。010101二进制就是可以转成10进制的。10进制就是整数编号。101 = 1*2^0 + 0*2^1 + 1*2^2 = 5\\n\\n* 中国用的编码：GBK编码\\n* 美国用的编码：ACSII编码\\n\\n### IO流读写数据\\n\\nIO输入输出流：输入/输出流。\\n\\n* Input:输入。\\n* Output:输出。\\n\\n引入：\\nFile类只能操作文件对象本身，不能读写文件对象的内容。\\n读写数据内容，应该使用IO流。\\n\\nIO流是一个水流模型：IO理解成水管，把数据理解成水流。\\n\\nIO流的分类\\n\\n按照流的方向分为：输入流，输出流。\\n\\n* 输出流：以内存为基准，把内存中的数据写出到磁盘文件或者网络介质中去的流称为输出流。\\n  输出流的作用：写数据到文件，或者写数据发送给别人。\\n* 输入流：以内存为基准，把磁盘文件中的数据或者网络中的数据读入到内存中去的流称为输入流。\\n  输入流的作用：读取数据到内存。\\n\\n按照流的内容分为: 字节流，字符流。\\n\\n* 字节流：流中的数据的最小单位是一个一个的字节，这个流就是字节流。\\n* 字符流：流中的数据的最小单位是一个一个的字符，这个流就是字符流。(针对于文本内容)\\n\\n所以流大体分为四大类:\\n\\n* 字节输入流：以内存为基准，把磁盘文件中的数据或者网络中的数据以一个一个的字节的形式读入到内存中去的流称为字节输入流。\\n* 字节输出流：以内存为基准，把内存中的数据以一个一个的字节写出到磁盘文件或者网络介质中去的流称为字节输出流。\\n* 字符输入流：以内存为基准，把磁盘文件中的数据或者网络中的数据以一个一个的字符的形式读入到内存中去的流称为字符输入流。\\n* 字符输出流：以内存为基准，把内存中的数据以一个一个的字符写出到磁盘文件或者网络介质中去的流称为字符输出流。\\n\\n>  IO流是读写传输数据的，IO流有很多种，每种流有自己的功能特点。\\n\\n### 字节流的使用\\n\\nIO流的体系\\n\\n|     字节流      |      字节流      |   字符流   |         字符流         |\\n| :-------------: | :--------------: | :--------: | :--------------------: |\\n|   字节输入流    |    字节输出流    | 字符输入流 |       字符输出流       |\\n|   InputStream   |   OutputStream   |   Reader   |     Writer(抽象类)     |\\n| FileInputStream | FileOutputStream | FileReader | FileWriter(子类实现类) |\\n\\n#### 输入流\\n\\nFileInputStream文件字节输入流\\n\\n作用：以内存为基准，把磁盘文件中的数据按照字节的形式读入到内存中的流，简单的来说，就是按照字节读取文件数据到内存\\n\\n构造器\\n\\n* `public FileInputStream(File path)`:创建一个字节输入流管道与源文件对象接通\\n* `public FileInputStream(String pathName)`:创建一个字节输入流管道与文件路径对接\\n\\n方法\\n\\n* `public int read()` 每次读取一个直接返回，读取完毕会返回`-1`\\n* `public int read(byte[] buffer)` 从字节输入流中读取字节到字节数组中去，返回读取的字节数量，没有字节可读返回`-1`\\n\\n> - 一个一个字节读取英文和数字没有问题。\\n> - 但是一旦读取中文输出无法避免乱码，因为会截断中文的字节。\\n> - 一个一个字节的读取数据，性能也较差，所以禁止使用此方案！\\n\\n```java\\n// 1.创建文件对象定位dlei01.txt\\nFile file = new File(\\\"Day09Demo/src/dlei01.txt\\\");\\n// 2.创建一个字节输入流管道与源文件接通\\nInputStream is = new FileInputStream(file);\\n// 3.读取一个字节的编号返回，读取完毕返回-1\\n//        int code1 = is.read(); // 读取一滴水，一个字节\\n//        System.out.println((char)code1);\\n//\\n//        int code2 = is.read(); // 读取一滴水，一个字节\\n//        System.out.println((char)code2);\\n//\\n//        int code3 = is.read(); // 读取一滴水，一个字节\\n//        System.out.println((char)code3);\\n//\\n//        int code4 = is.read(); // 读取一滴水，一个字节 ,读取没有字节返回-1\\n//        System.out.println(code4);\\n\\n// 4.使用while读取字节数\\n// 定义一个整数变量存储字节\\nint ch = 0 ;\\nwhile((ch = is.read())!= -1){\\n    System.out.print((char) ch);\\n}\\n\\n// 读法优化，必须使用循环     // abc xyz i\\n// a.定义一个字节数组代表桶   // ooo ooo o\\nbyte[] buffer = new byte[3];\\nint len ; // 存储每次读取的字节数。\\nwhile((len = is.read(buffer)) != -1){\\n    // 读取了多少就倒出多少！\\n    String rs = new String(buffer , 0 , len);\\n    System.out.print(rs);\\n}\\n```\\n\\n解决中文乱码\\n\\n定义一个字节数组与文件的大小刚刚一样大，然后一桶水读取全部字节数据再输出\\n\\n```java\\n// 0.定位文件对象\\nFile f = new File(\\\"C:\\\\\\\\Users\\\\\\\\Administrator\\\\\\\\Documents\\\\\\\\codes\\\\\\\\notes\\\\\\\\java-notes\\\\\\\\java补充知识点\\\\\\\\codes\\\\\\\\seniorJava\\\\\\\\day09\\\\\\\\src\\\\\\\\com\\\\\\\\itheima\\\\\\\\_25字节流的使用\\\\\\\\FileInputStreamDemo03.java\\\");\\n// 1.定义一个字节输入流通向源文件路径，简化写法！\\nInputStream is = new FileInputStream(f);\\n\\n// 2.定义一个字节数组与文件的大小刚刚一样大\\n//        System.out.println(\\\"文件大小：\\\"+f.length());\\n//        byte[] buffer = new byte[(int) f.length()];\\n//        int len = is.read(buffer);\\n//        System.out.println(\\\"读取了：\\\"+len);\\n//        String rs = new String(buffer);\\n//        System.out.println(rs);\\n\\nbyte[] buffer = is.readAllBytes();\\nString rs = new String(buffer);\\nSystem.out.println(rs);\\n```\\n\\n#### 输出流\\n\\n`FileOutputStream`文件字节输出流\\n\\n作用：以内存为基准，把内存中的数据，按照字节的形式写出到磁盘文件中去。简单来说，把内存数据按照字节写出到磁盘文件中去。\\n\\n构造器：\\n\\n- `public FileOutputStream(File file)`:创建一个字节输出流管道通向目标文件对象。\\n- `public FileOutputStream(String file)`:创建一个字节输出流管道通向目标文件路径。\\n- `public FileOutputStream(File file , boolean append)`:创建一个追加数据的字节输出流管道通向目标文件对象。\\n- `public FileOutputStream(String file , boolean append)`:创建一个追加数据的字节输出流管道通向目标文件路径。\\n\\n方法：\\n\\n- `public void write(int a)`:写一个字节出去 。\\n\\n- `public void write(byte[] buffer)`:写一个字节数组出去。\\n\\n- `public void write(byte[] buffer , int pos , int len)`:写一个字节数组的一部分出去。\\n\\n  参数一，字节数组；参数二：起始字节索引位置，参数三：写多少个字节数出去。\\n\\n> * 字节输出流只能写字节出去\\n> * 字节输出流默认是覆盖数据管道\\n> * 换行用： `os.write(\\\"\\\\r\\\\n\\\".getBytes());`\\n> * 关闭和刷新：刷新流可以继续使用，关闭包含刷新数据但是流就不能使用了！\\n\\n`FileOutputStream`字节输出流每次启动写数据的时候都会先清空之前的全部数据\\n\\n### 字节流做文件复制\\n\\n字节是计算机中一切文件的组成，所以字节流适合做一切文件的复制。\\n\\n复制是把源文件的全部字节一字不漏的转移到目标文件，只要文件前后的格式一样，绝对不会有问题。\\n\\n复制步骤：\\n\\n- 创建一个字节输入流管道与源文件接通。\\n- 创建一个字节输出流与目标文件接通。\\n- 创建一个字节数组作为桶\\n- 从字节输入流管道中读取数据，写出到字节输出流管道即可。\\n- 关闭资源！\\n\\n```java\\nInputStream is = null ;\\nOutputStream os = null ;\\ntry{\\n    /** （1）创建一个字节输入流管道与源文件接通。 */\\n    is = new FileInputStream(\\\"D:\\\\\\\\itcast\\\\\\\\图片资源\\\\\\\\meinv.jpg\\\");\\n    /** （2）创建一个字节输出流与目标文件接通。*/\\n    os = new FileOutputStream(\\\"D:\\\\\\\\itcast\\\\\\\\meimei.jpg\\\");\\n    /** （3）创建一个字节数组作为桶*/\\n    byte[] buffer = new byte[1024];\\n    /** （4）从字节输入流管道中读取数据，写出到字节输出流管道即可。*/\\n    int len = 0;\\n    while((len = is.read(buffer)) != -1){\\n        // 读取多少就倒出多少\\n        os.write(buffer, 0 , len);\\n    }\\n    System.out.println(\\\"复制完成！\\\");\\n}catch (Exception e){\\n    e.printStackTrace();\\n} finally {\\n    /**（5）关闭资源！ */\\n    try{\\n        if(os!=null)os.close();\\n        if(is!=null)is.close();\\n    }catch (Exception e){\\n        e.printStackTrace();\\n    }\\n}\\n```\\n\\nJDK1.7 开始之后释放资源的新方式\\n\\ntry-with-resources:\\n\\n```java\\ntry(\\n    // 这里只能放置资源对象，用完会自动调用close()关闭\\n){\\n\\n}catch(Exception e){\\n    e.printStackTrace();\\n}\\n```\\n\\n什么是资源？\\n\\n* 资源类一定是实现了Closeable接口，实现这个接口的类就是资源\\n* 有close()方法，try-with-resources会自动调用它的close()关闭资源。\\n\\n```java\\ntry(\\n    /** （1）创建一个字节输入流管道与源文件接通。 */\\n    InputStream is  = new FileInputStream(\\\"D:\\\\\\\\itcast\\\\\\\\图片资源\\\\\\\\meinv.jpg\\\");\\n    /** （2）创建一个字节输出流与目标文件接通。*/\\n    OutputStream os = new FileOutputStream(\\\"D:\\\\\\\\itcast\\\\\\\\meimei.jpg\\\");\\n    /** （5）关闭资源！是自动进行的 */\\n){\\n    /** （3）创建一个字节数组作为桶*/\\n    byte[] buffer = new byte[1024];\\n    /** （4）从字节输入流管道中读取数据，写出到字节输出流管道即可。*/\\n    int len = 0;\\n    while((len = is.read(buffer)) != -1){\\n        // 读取多少就倒出多少\\n        os.write(buffer, 0 , len);\\n    }\\n    System.out.println(\\\"复制完成！\\\");\\n}catch (Exception e){\\n    e.printStackTrace();\\n}\\n```\\n\\n# day10-缓冲流、转换流、序列流\\n\\n## 第一章 字符流\\n\\n`FileReader`:文件字符输入流。\\n\\n作用：以内存为基准，把磁盘文件的数据以字符的形式读入到内存。简单来说，读取文本文件内容到内存中去。\\n\\n构造器：\\n\\n* `public FileReader(File file)`:创建一个字符输入流与源文件对象接通。\\n* `public FileReader(String filePath)`:创建一个字符输入流与源文件路径接通。\\n\\n方法：\\n\\n- `public int read()`: 读取一个字符的编号返回！ 读取完毕返回-1\\n- `public int read(char[] buffer)`:读取一个字符数组，读取多少个字符就返回多少个数量，读取完毕返回-1\\n\\n- \\n  字符流一个一个字符的读取文本内容输出，可以解决中文读取输出乱码的问题。\\n- 字符流很适合操作文本文件内容。\\n- 但是：一个一个字符的读取文本内容性能较差！！\\n\\n```java\\n// 1.创建一个文件对象定位源文件\\n// File f = new File(\\\"Day10Demo/src/dlei01.txt\\\");\\n// 2.创建一个字符输入流管道与源文件接通\\n// Reader fr = new FileReader(f);\\n// 3.简化写法：创建一个字符输入流管道与源文件路径接通\\nReader fr = new FileReader(\\\"Day10Demo/src/dlei01.txt\\\");\\n// 4.按照字符读取，每次读取一个字符的编号返回。\\n//        int code1 = fr.read();\\n//        System.out.print((char)code1);\\n//        int code2 = fr.read();\\n//        System.out.print((char)code2);\\n//        int code3 = fr.read();\\n//        System.out.print((char)code3);\\n//        int code4 = fr.read(); // 读取完毕返回-1\\n//        System.out.print(code4);\\n\\n// 5.while循环一个一个字符读取。\\n// 定义一个变量存储一个字符的编号\\nint ch ;\\nwhile ((ch = fr.read()) != -1){\\n    System.out.print((char)ch);\\n}\\n\\n// a.按照字符数组读取数据使用循环\\nchar[] buffer = new char[1024]; // 1K\\n// b.定义一个整数记录每次桶读取的字符数据量。\\nint len;\\nwhile((len = fr.read(buffer)) != -1 ) {\\n    // 读取多少倒出多少字符\\n    System.out.print(new String(buffer, 0 , len));\\n}\\n```\\n\\n`FileWriter`文件字符输出流的使用。\\n\\n作用：以内存为基准，把内存中的数据按照字符的形式写出到磁盘文件中去。简单来说，就是把内存的数据以字符写出到文件中去。\\n\\n构造器：\\n\\n- `public FileWriter(File file)`:创建一个字符输出流管道通向目标文件对象。\\n- `public FileWriter(String filePath)`:创建一个字符输出流管道通向目标文件路径。\\n- `public FileWriter(File file,boolean append`):创建一个追加数据的字符输出流管道通向目标文件对象。\\n- `public FileWriter(String filePath,boolean append)`:创建一个追加数据的字符输出流管道通向目标文件路径。\\n\\n方法：\\n\\n- `public void write(int c)`:写一个字符出去\\n- `public void write(String c)` 写一个字符串出去：\\n- `public void write(char[] buffer)`:写一个字符数组出去\\n- `public void write(String c ,int pos ,int len)`:写字符串的一部分出去\\n- `public void write(char[] buffer ,int pos ,int len)`:写字符数组的一部分出去\\n\\n小结：\\n\\n字符输出流可以写字符数据出去，总共有5个方法写字符。\\n\\n覆盖管道：\\n\\n`Writer fw = new FileWriter(\\\"Day10Demo/src/dlei03.txt\\\"); // 覆盖数据管道`\\n\\n追加数据管道：\\n\\n`Writer fw = new FileWriter(\\\"Day10Demo/src/dlei03.txt\\\",true); // 追加数据管道`\\n\\n换行：\\n\\n`fw.write(\\\"\\\\r\\\\n\\\"); // 换行` \\n\\n读写字符文件数据建议使用字符流。\\n\\n```java\\n// 1.创建一个字符输出流管道通向目标文件路径\\n//Writer fw = new FileWriter(\\\"Day10Demo/src/dlei03.txt\\\"); // 覆盖数据管道\\nWriter fw = new FileWriter(\\\"Day10Demo/src/dlei03.txt\\\",true); // 追加数据管道\\n\\n// 2.写一个字符出去：public void write(int c):写一个字符出去\\nfw.write(97);   // 字符a\\nfw.write(\'b\');  // 字符b\\nfw.write(\'磊\'); // 字符磊，此时没有任何问题。\\nfw.write(\\\"\\\\r\\\\n\\\"); // 换行\\n\\n// 3.写一个字符串出去：public void write(String c)写一个字符串出去：\\nfw.write(\\\"Java是最优美的语言！\\\");\\nfw.write(\\\"我们在黑马学习它！\\\");\\nfw.write(\\\"\\\\r\\\\n\\\"); // 换行\\n\\n// 4.写一个字符数组出去：public void write(char[] buffer):写一个字符数组出去\\nfw.write(\\\"我爱中国\\\".toCharArray());\\nfw.write(\\\"\\\\r\\\\n\\\"); // 换行\\n\\n// 5.写字符串的一部分出去: public void write(String c ,int pos ,int len):写字符串的一部分出去\\nfw.write(\\\"Java是最优美的语言！\\\",0,9);\\nfw.write(\\\"\\\\r\\\\n\\\"); // 换行\\n\\n// 6.写字符数组的一部分出去：public void write(char[] buffer ,int pos ,int len):写字符数组的一部分出去\\nfw.write(\\\"我爱中国\\\".toCharArray(),0 ,2);\\nfw.write(\\\"\\\\r\\\\n\\\"); // 换行\\n\\nfw.close();\\n```\\n\\n## 第二章 IO资源的处理\\n\\n...\\n\\n\\n\\n\\n\\n## 第三章 属性集\\n\\n`Properties`：属性集对象。\\n\\n其实就是一个Map集合。也就是一个键值对集合。但是我们一般不会当集合使用，\\n\\n因为有HashMap。\\n\\n`Properties`核心作用：\\n\\nProperties代表的是一个属性文件，可以把键值对的数据存入到一个属性文件中去。\\n\\n属性文件：后缀是.properties结尾的文件,里面的内容都是 key=value。\\n\\n大家在后期学的很多大型框架技术中，属性文件都是很重要的系统配置文件。\\n\\n```java\\nusers.properties\\nadmin=123456\\ndlei=dlei\\n```\\n\\n 需求：使用Properties对象生成一个属性文件，里面存入用户名和密码信息。\\n\\nProperties的方法：\\n\\n- `public Object setProperty(String key, String value)` ： 保存一对属性。\\n- `public String getProperty(String key)` ：使用此属性列表中指定的键搜索属性值\\n- `public Set<String> stringPropertyNames()` ：所有键的名称的集合\\n- `public void store(OutputStream out, String comments)`：保存数据到属性文件中去\\n- `public void store(Writer fw, String comments)`：保存数据到属性文件中去\\n- `public synchronized void load(InputStream inStream)`:加载属性文件的数据到属性集对象中去\\n- `public synchronized void load(Reader fr)`:加载属性文件的数据到属性集对象中去\\n\\n```java\\nProperties properties = new Properties();\\nproperties.setProperty(\\\"admin\\\" , \\\"123456\\\");\\nproperties.setProperty(\\\"dlei\\\" , \\\"101333\\\");\\nSystem.out.println(properties);\\n\\n// b.把属性集对象的数据存入到属性文件中去（重点）\\nOutputStream os = new FileOutputStream(\\\"Day10Demo/src/users.properties\\\");\\n/**\\n         * 参数一：被保存数据的输出管道\\n         * 参数二：保存心得。就是对象保存的数据进行解释说明！\\n         */\\nproperties.store(os , \\\"i am very happy!!我快乐的保存了用户数据!\\\");\\n```\\n\\n导入属性\\n\\n```java\\n// 1.创建一个属性集对象\\nProperties properties = new Properties();\\nSystem.out.println(properties);\\n\\n// 2.字节输入流加载属性文件的数据到属性集对象properties中去。\\nproperties.load(new FileInputStream(\\\"Day10Demo/src/users.properties\\\"));\\nSystem.out.println(properties);\\n\\nSystem.out.println(properties.getProperty(\\\"dlei\\\"));\\nSystem.out.println(properties.getProperty(\\\"admin\\\"));\\n```\\n\\n## 第四章 缓冲流\\n\\n### 缓冲流的概述和分类\\n\\n什么是缓冲流：缓冲流可以提高字节流和字符流的读写数据的性能\\n\\n缓冲流分为四类：\\n\\n- `BufferedInputStream`：字节缓冲输入流，可以提高字节输入流读数据的性能。\\n- `BufferedOutStream`：  字节缓冲输出流，可以提高字节输出流写数据的性能。\\n- `BufferedReader`：  字符缓冲输入流，可以提高字符输入流读数据的性能。\\n- `BufferedWriter`：  字符缓冲输出流，可以提高字符输出流写数据的性能。\\n\\n### 字节缓冲流\\n\\n字节缓冲输入流：`BufferedInputStream`\\n\\n作用：可以把低级的字节输入流包装成一个高级的缓冲字节输入流管道，从而提高字节输入流读数据的性能。\\n\\n构造器: `public BufferedInputStream(InputStream in)`\\n\\n原理：缓冲字节输入流管道自带了一个8KB的缓冲池，每次可以直接借用操作系统的功能最多提取8KB的数据到缓冲池中去，以后我们直接从缓冲池读取数据，所以性能较好！\\n\\n> * 字节缓冲输入流：`BufferedInputStream`\\n> * 可以把低级的字节输入流包装成一个高级的缓冲字节输入流管道,从而提高字节输入流读数据的性能。\\n> * 功能几乎无变化。\\n\\n```java\\n// 1.定义一个低级的字节输入流与源文件接通\\nInputStream is = new FileInputStream(\\\"Day10Demo/src/dlei04.txt\\\");\\n\\n// 3.把低级的字节输入流包装成一个高级的缓冲字节输入流。\\nBufferedInputStream bis = new BufferedInputStream(is);\\n\\n// 2.定义一个字节数组按照循环读取。\\nbyte[] buffer = new byte[3];\\nint len ;\\nwhile((len = is.read(buffer)) != -1){\\n    String rs = new String(buffer, 0 , len);\\n    System.out.print(rs);\\n}\\n```\\n\\n字节缓冲输出流：`BufferedOutputStream`\\n\\n作用：可以把低级的字节输出流包装成一个高级的缓冲字节输出流，从而提高写数据的性能。\\n\\n构造器：`public BufferedOutputStream(OutputStream os)`\\n\\n原理：缓冲字节输出流自带了8KB缓冲池,数据就直接写入到缓冲池中去，性能极高了！\\n\\n> * 字节缓冲输出流可以把低级的字节输出流包装成一个高级的缓冲字节输出流，从而提高写数据的性能。\\n> * 功能几乎不变。\\n\\n```java\\n// 1.写一个原始的字节输出流\\nOutputStream os = new FileOutputStream(\\\"Day10Demo/src/dlei05.txt\\\");\\n// 3.把低级的字节输出流包装成一个高级的缓冲字节输出流\\nBufferedOutputStream bos =  new BufferedOutputStream(os);\\n// 2.写数据出去\\nbos.write(\'a\');\\nbos.write(100);\\nbos.write(\'b\');\\nbos.write(\\\"我爱中国\\\".getBytes());\\nbos.close();\\n```\\n\\n> 高级的字节缓冲流按照一个一个字节数组的形式复制性能极高，建议以后使用\\n\\n### 字符缓冲流\\n\\n字符缓冲输入流：`BufferedReader`\\n\\n作用：字符缓冲输入流可以把字符输入流包装成一个高级的缓冲字符输入流，可以提高字符输入流读数据的性能。\\n\\n构造器：`public BufferedReader(Reader reader)`\\n\\n原理：缓冲字符输入流默认会有一个8K的字符缓冲池,可以提高读字符的性能。缓冲字符输入流除了提高了字符输入流的读数据性能，缓冲字符输入流还多了一个按照行读取数据的功能（重点）:`public String readLine()`: 读取一行数据返回，读取完毕返回`null`;\\n\\n字符缓冲输入流可以把字符输入流包装成一个高级的缓冲字符输入流，\\n\\n可以提高字符输入流读数据的性能。\\n\\n除此之外多了一个按照行读取数据的功能：\\n\\n`public String readLine()`: 读取一行数据返回，读取完毕返回`null`;\\n\\n```java\\n// 1.定义一个原始的字符输入流读取源文件\\nReader fr = new FileReader(\\\"Day10Demo/src/dlei06.txt\\\");\\n\\n// 3.把低级的字符输入流管道包装成一个高级的缓冲字符输入流管道\\nBufferedReader br = new BufferedReader(fr);\\n// 定义一个字符串变量存储每行数据\\nString line;\\n// 使用一个循环读取数据(经典代码)\\nwhile((line = br.readLine())!=null){\\n    System.out.println(line);\\n}\\n\\n//        // 2.定义一个字符数组循环读取\\n//        char[] buffer = new char[1024];\\n//        int len ;\\n//        while((len = br.read(buffer))!=-1){\\n//            System.out.println(new String(buffer , 0 , len));\\n//        }\\n\\nbr.close();\\n```\\n\\n字符缓冲输出流：`BufferedWriter`\\n\\n作用：把字符输出流包装成一个高级的缓冲字符输出流，提高写字符数据的性能。\\n\\n构造器：`public BufferedWriter(Writer writer)`:\\n\\n原理：高级的字符缓冲输出流多了一个8k的字符缓冲池，写数据性能极大提高了!\\n\\n字符缓冲输出流除了提高字符输出流写数据的性能，还多了一个换行的特有功能：`public void newLine()`：新建一行。\\n\\n缓冲字符输出流可以把低级的字符输出流进行包装。提高了写字符的性能。\\n\\n多了一个换行的功能：public void newLine()：新建一行。\\n\\n```java\\n// 1.定义一个低级的字符输出流写数据出去\\nWriter fw = new FileWriter(\\\"Day10Demo/src/dlei07.txt\\\",true);\\n\\n// 3.把低级的字符输出流包装成高级的缓冲字符输出流\\nBufferedWriter bw = new BufferedWriter(fw);\\n\\n// 2.写字符输出\\nbw.write(\\\"我在黑马学IO流~~~~\\\");\\nbw.newLine(); // 换行\\nbw.write(\\\"我在黑马学IO流~~~~\\\");\\nbw.newLine();// 换行\\n\\nbw.close();\\n```\\n\\n### 不同编码读取乱码问题\\n\\n- 如果代码编码和读取的文件编码一致。字符流读取的时候不会乱码。\\n- 如果代码编码和读取的文件编码不一致。字符流读取的时候会乱码。\\n\\n```java\\n// 1.定义一个原始的字符输入流读取源文件\\n//  代码UTF-8  文件UTF-8 不会出现乱码！\\n// Reader fr = new FileReader(\\\"Day10Demo/src/dlei06.txt\\\");\\n//  代码UTF-8  文件GBK   会出现乱码！\\nReader fr = new FileReader(\\\"D:\\\\\\\\itcast\\\\\\\\网络编程公开课\\\\\\\\Netty.txt\\\");\\n// 2.把低级的字符输入流管道包装成一个高级的缓冲字符输入流管道\\nBufferedReader br = new BufferedReader(fr);\\n// 3.定义一个字符串变量存储每行数据\\nString line;\\n// 使用一个循环读取数据(经典代码)\\nwhile((line = br.readLine())!=null){\\n    System.out.println(line);\\n}\\n```\\n\\n## 第五章 转换流\\n\\n字符输入转换流`InputStreamReader`\\n\\n作用\\n\\n- 可以解决字符流读取不同编码乱码的问题。\\n- 可以把原始的字节流按照当前默认的代码编码转换成字符输入流。\\n- 也可以把原始的字节流按照指定编码转换成字符输入流\\n\\n构造器：\\n\\n- public InputStreamReader(InputStream is)：可以使用当前代码默认编码转换成字符流，几乎不用！\\n- public InputStreamReader(InputStream is,String charset):可以指定编码把字节流转换成字符流\\n\\n\\n字符输入转换流可以把字节输入流按照默认编码转换成字符输入流。\\n\\nReader isr = new InputStreamReader(is); // 使用当前代码默认编码UTF-8转换成字符流，几乎不用！\\n\\n字符输入转换流也可以指定编码把字节输入流转换成字符输入流。\\n\\nReader isr = new InputStreamReader(is,\\\"GBK\\\"); // 指定编码把字节流转换成字符流\\n\\n字符输入转换流可以解决不同编码读取乱码的问题！\\n\\n```java\\n// 代码：UTF-8    文件：GBK(ab我爱你： o o [oo] [oo] [oo])\\n// 1.提取GBK文件的原始字节流\\nInputStream is = new FileInputStream(\\\"D:\\\\\\\\itcast\\\\\\\\网络编程公开课\\\\\\\\Netty.txt\\\");\\n// 2.把原始字节输入流通过转换流，转换成 字符输入转换流InputStreamReader\\n//Reader isr = new InputStreamReader(is); // 使用当前代码默认编码UTF-8转换成字符流，几乎不用！\\nReader isr = new InputStreamReader(is,\\\"GBK\\\"); // 指定编码把字节流转换成字符流\\n// 3.包装成缓冲流\\nBufferedReader br = new BufferedReader(isr);\\n// 4.定义一个字符串变量存储每行数据\\nString line;\\n// 使用一个循环读取数据(经典代码)\\nwhile((line = br.readLine())!=null){\\n    System.out.println(line);\\n}\\n```\\n\\n字符输出转换流：`OutputStreamWriter`\\n\\n作用：可以指定编码把字节输出流转换成字符输出流。可以指定写出去的字符的编码。\\n\\n构造器：\\n\\n- `public OutputStreamWriter(OutputStream os) `:   用当前默认编码UTF-8把字节输出流转换成字符输出流\\n- `public OutputStreamWriter(OutputStream os , String charset)`:指定编码把字节输出流转换成字符输出流\\n\\n```java\\n// 1.写一个字节输出流通向文件\\nOutputStream os = new FileOutputStream(\\\"Day10Demo/src/dlei07.txt\\\");\\n\\n// 2.把字节输出流转换成字符输出流。\\n// Writer fw = new OutputStreamWriter(os); // .把字节输出流按照默认编码UTF-8转换成字符输出流。\\nWriter fw = new OutputStreamWriter(os,\\\"GBK\\\"); // .  把字节输出流按照指定编码GBK转换成字符输出流。\\nfw.write(\\\"abc我是中国人\\\");\\nfw.close();\\n```\\n\\n## 第六章 序列流\\n\\n**对象序列化**：就是把Java对象数据直接存储到文件中去。           对象 => 文件中\\n\\n**对象反序列化**：就是把Java对象的文件数据恢复到Java对象中。     文件中 => 对象\\n\\n对象序列化流（对象字节输出流）：`ObjectOutputStream`\\n\\n**作用**：把内存中的Java对象数据保存到文件中去。\\n\\n构造器：   `public ObjectOutputStream(OutputStream out)`\\n\\n序列化方法：`public final void writeObject(Object obj)`\\n\\n> 对象如果想参与序列化，对象必须实现序列化接口 implements Serializable ，否则序列化失败！\\n\\n```java\\n// 1.创建User用户对象\\nUser user = new User(\\\"tsgz\\\",\\\"003197\\\",\\\"铁扇公主\\\");\\n// 2.创建低级的字节输出流通向目标文件\\nOutputStream os = new FileOutputStream(\\\"Day10Demo/src/obj.dat\\\");\\n// 3.把低级的字节输出流包装成高级的对象字节输出流ObjectOutputStream\\nObjectOutputStream oos = new ObjectOutputStream(os);\\n// 4.通过对象字节输出流序列化对象：\\noos.writeObject(user);\\n// 6.释放资源\\noos.close();\\nSystem.out.println(\\\"序列化对象成功~~~~\\\");\\n```\\n\\n对象反序列化（对象字节输入流）：`ObjectInputStream`\\n\\n作用：读取序列化的对象文件恢复到Java对象中。\\n\\n构造器：`public ObjectInputStream(InputStream is)`\\n\\n方法：`public final Object readObject()`\\n\\n如果一个字段不想参数序列化：`transient`修饰该成员变量，它将不参与序列化！\\n\\n序列化版本号：\\n\\nprivate static final long serialVersionUID = 2L;\\n\\n必须序列化使用的版本号和反序列化使用的版本号一致才可以正常反序列化！否则报错！\\n\\n```java\\n// 1.定义一个低级的字节输入流通向源文件\\nInputStream is = new FileInputStream(\\\"Day10Demo/src/obj.dat\\\");\\n// 2.把字节输入流包装成高的对象字节输入流\\nObjectInputStream ois = new ObjectInputStream(is);\\n// 3.反序列化\\nUser user = (User) ois.readObject();\\nSystem.out.println(user);\\nSystem.out.println(\\\"反序列化完成！\\\");\\n```\\n\\n## 第七章 打印流\\n\\n打印流 `PrintStream `/ `PrintWriter`\\n\\n打印流的作用：\\n\\n可以方便，快速的写数据出去。\\n\\n可以实现打印啥出去，就是啥出去。\\n\\n打印流的构造器：\\n\\n- `public PrintStream(OutputStream os)`\\n- `public PrintStream(String filepath)`\\n\\n```java\\n// 1.打印流PrintStream\\n//OutputStream os = new FileOutputStream(\\\"Day10Demo/src/dlei08.txt\\\");\\n//PrintStream ps = new PrintStream(os);\\nPrintStream ps = new  PrintStream(\\\"Day10Demo/src/dlei08.txt\\\");\\n//PrintWriter pw = new  PrintWriter(\\\"Day10Demo/src/dlei08.txt\\\");\\n\\nps.println(97); // 写97\\nps.println(110); // 写110\\nps.println(\\\"我在黑马快乐的调皮~~\\\");\\nps.println(99.8);\\nps.println(false);\\nps.println(\'徐\');\\n\\n// 写字节数据出去\\n// ps.write(\\\"我爱你\\\".getBytes());\\n\\nps.close();\\n```\\n\\n`public static void setOut(PrintStream out)` :让系统的输出流向打印流。\\n\\n```java\\nSystem.out.println(\\\"==itheima0==\\\");\\nPrintStream ps = new PrintStream(\\\"Day10Demo/src/log.txt\\\");\\nSystem.setOut(ps); // 让系统的输出流向打印流。\\n\\nSystem.out.println(\\\"==itheima1==\\\");\\nSystem.out.println(\\\"==itheima2==\\\");\\nSystem.out.println(\\\"==itheima3==\\\");\\nSystem.out.println(\\\"==itheima4==\\\");\\nSystem.out.println(\\\"==itheima5==\\\");\\n```\\n\\n# day11-网络编程和NIO\\n\\n## 第一章 网络编程\\n\\n通信一定是基于软件结构实现的\\n\\n* C/S结构 ：全称为Client/Server结构，是指客户端和服务器结构。常见程序有ＱＱ、迅雷，IDEA等软件\\n* B/S结构 ：全称为Browser/Server结构，是指浏览器和服务器结构。常见浏览器有谷歌、火狐等、软件：博学谷、京东、淘宝。（开发中的重点，基于网页设计界面，界面效果可以更丰富: Java Web开发）\\n\\n两种架构各有优势，但是无论哪种架构，都离不开网络的支持。网络编程，就是在一定的协议下，实现两台计算机的通信的技术\\n\\n### 网络通信的三要素\\n\\n1. 协议：计算机网络客户端与服务端通信必须事先约定和彼此遵守的通信规则。\\n   HTTP , FTP , TCP , UDP , SSH , SMTP。\\n\\n2. IP地址：指互联网协议地址（Internet Protocol Address），俗称IP。\\n\\n   IP地址用来给一个网络中的计算机设备做唯一的编号\\n\\n   IPv4: **4个字节，32位组成**。  192.168.70.70\\n\\n   局域网：公司内部用\\n\\n   城域网\\n\\n   广域网（公网）：可以在任何地方访问\\n\\n   IPv6: 可以实现为所有设备分配IP  **128位**\\n\\n   ipconfig：查看本机的IP\\n\\n   ping 检查本机与某个IP指定的机器是否联通，或者说是检测对方是否在线。\\n\\n   ping 空格 IP地址\\n\\n   ping 220.181.57.216\\n\\n   ping www.baidu.com\\n\\n   注意：特殊的IP地址： 本机IP地址.(不受环境的影响，任何时候都存在这两个ip,可以直接找本机！)\\n\\n   127.0.0.1 == localhost。\\n\\n3. 端口：端口号就可以唯一标识设备中的进程（应用程序）了\\n\\n   端口号：用两个字节表示的整数，它的取值范围是0~65535。\\n\\n   * 0~1023之间的端口号用于一些知名的网络服务和应用。\\n   * 普通的应用程序需要使用1024以上的端口号。\\n   * 如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败。报出端口被占用异常！！\\n\\n利用`协议`+`IP地址`+`端口号` 三元组合，就可以标识网络中的进程了，那么进程间的通信就可以利用这个标识与其它进程进行交互。\\n\\n### 网络通信的分层和协议\\n\\n网络通信协议：通信协议是对计算机必须遵守的规则，只有遵守这些规则，计算机之间才能进行通信\\n\\n```\\n-------------------------------------------------------------------------------\\n应用层  ：应用程序（QQ,微信,浏览器）,可能用到的协议（HTTP,FTP,SMTP）   通常程序员只需要关心这一层\\n------------------------------------------------------------------------------\\n传输层  ：TCP/IP协议 - UDP协议    计算机网络工程师需要精通的协议，有些技术我们也需要精通这一层协议，\\n-----------------------------------------------------------------\\n网络层  ：IP协议  封装自己的IP和对方的IP和端口\\n-----------------------------------------------------------------\\n数据链路层 ： 进入到硬件（网）\\n-----------------------------------------------------------------\\n```\\n\\n* TCP/IP协议：传输控制协议 (Transmission Control Protocol)。\\n\\n  TCP协议是**面向连接**的安全的可靠的传输通信协议。\\n\\n  1. 在通信之前必须确定对方在线并且连接成功才可以通信。\\n  2. 例如下载文件、浏览网页等(要求可靠传输)\\n\\n* UDP：用户数据报协议(User Datagram Protocol)。\\n\\n  UDP协议是一个**面向无连接**的不可靠传输的协议。\\n\\n  1. 直接发消息给对方，不管对方是否在线，发消息后也不需要确认。\\n  2. 无线（视频会议，通话），性能好，可能丢失一些数据！！\\n\\n### InetAddress类概述\\n\\n`InetAddress`类的对象就代表一个IP地址对象。\\n\\n`InetAddress`类成员方法：\\n\\n* 获得本地主机IP地址对象\\n\\n     `static InetAddress getLocalHost()`\\n\\n* 根据IP地址字符串或主机名获得对应的IP地址对象\\n\\n     `static InetAddress getByName(String host)`\\n\\n* 获得主机名\\n\\n     `String getHostName()`\\n\\n* 获得IP地址字符串\\n\\n     `String getHostAddress()`\\n\\n```java\\n// 1.获取本机地址对象。\\nInetAddress ip = InetAddress.getLocalHost();\\nSystem.out.println(ip.getHostName());\\nSystem.out.println(ip.getHostAddress());\\n// 2.获取域名ip对象\\nInetAddress ip2 = InetAddress.getByName(\\\"www.baidu.com\\\");\\nSystem.out.println(ip2.getHostName());\\nSystem.out.println(ip2.getHostAddress());\\n\\n// 3.获取公网IP对象。\\nInetAddress ip3 = InetAddress.getByName(\\\"182.61.200.6\\\");\\nSystem.out.println(ip3.getHostName());\\nSystem.out.println(ip3.getHostAddress());\\n\\n// 4.判断是否能通： ping  5s之前测试是否可通\\nSystem.out.println(ip2.isReachable(5000)); // ping\\n```\\n\\n## 第二章 UDP通信\\n\\nUDP协议的特点\\n\\n* **面向无连接**的协议\\n* 发送端只管发送，不确认对方是否能收到\\n* 基于数据包进行数据传输\\n* 发送数据的包的大小限制**64KB以内**\\n* **因为面向无连接，速度快，但是不可靠。会丢失数据！**\\n\\nUDP协议的使用场景\\n* 在线视频\\n* 网络语音电话\\n\\nUDP协议相关的两个类\\n* `DatagramPacket`\\n     * 数据包对象\\n     * 作用：用来封装要发送或要接收的数据，比如：集装箱\\n* `DatagramSocket`\\n     * 发送对象\\n     * 作用：用来发送或接收数据包，比如：码头\\n\\n`DatagramPacket`类构造器\\n\\n发送端用：`new DatagramPacket(byte[] buf, int length, InetAddress address, int port)` 创建发送端数据包对象\\n\\n* `buf`：要发送的内容，字节数组\\n* `length`：要发送内容的长度，单位是字节\\n* `address`：接收端的IP地址对象\\n* `port`：接收端的端口号\\n\\n接收端用：`new DatagramPacket(byte[] buf, int length)`\\n* 创建接收端的数据包对象\\n* `buf`：用来存储接收到内容\\n* `length`：能够接收内容的长度\\n\\n`DatagramPacket`类常用方法\\n\\n    * `int getLength()` 获得实际接收到的字节个数\\n\\n`DatagramSocket`类构造方法\\n\\n* `DatagramSocket()` 创建发送端的Socket对象，系统会随机分配一个端口号。\\n* `DatagramSocket(int port)` 创建接收端的Socket对象并指定端口号\\n\\n`DatagramSocket`类成员方法\\n\\n* `void send(DatagramPacket dp)` 发送数据包\\n* `void receive(DatagramPacket p)` 接收数据包\\n\\n需求：使用UDP实现客户端发，服务端收。(了解)\\n\\n客户端\\n\\n```java\\nSystem.out.println(\\\"===启动客户端===\\\");\\n// 1.创建一个集装箱对象，用于封装需要发送的数据包!\\n/**\\n         new DatagramPacket(byte[] buf, int length, InetAddress address, int port)\\n         参数一：封装数据的字节数组。\\n         参数二：发送数据的长度!\\n         参数三：服务端的IP地址\\n         参数四：服务端程序的端口号码。\\n         */\\nbyte[] buffer = \\\"今晚，约吗？\\\".getBytes();\\nDatagramPacket packet = new DatagramPacket(buffer, buffer.length,  InetAddress.getLocalHost(), 6666);\\n\\n// 2.创建一个码头对象\\n// 参数可以申明客户端端口，可以有可以没有，默认会给一个端口。\\nDatagramSocket socket = new DatagramSocket();\\n\\n// 3.开始发送数据包对象\\nsocket.send(packet);\\n\\nsocket.close();\\n```\\n\\n服务端\\n\\n```java\\nSystem.out.println(\\\"==启动服务端程序==\\\");\\n// 1.创建一个接收客户都端的数据包对象（集装箱）\\n/**\\n         * new DatagramPacket(byte[] buffer ,int lenght):\\n         * 参数一：接收数据的数组。\\n         * 参数二：接收数据的数组的长度！\\n         */\\nbyte[] buffer = new byte[1024*64];\\nDatagramPacket packet = new DatagramPacket(buffer, buffer.length);\\n\\n// 2.创建一个接收端的码头对象\\nDatagramSocket socket = new DatagramSocket(6666);\\n\\n// 3.开始接收\\nsocket.receive(packet);\\n\\n// 4.从集装箱中获取本次读取的数据量\\nint len = packet.getLength();\\n\\n// 5.输出数据\\nString rs = new String(buffer , 0 , len);\\nSystem.out.println(rs);\\n\\n// 6.服务端还可以获取发来信息的客户端的IP和端口。\\nString ip = packet.getAddress().getHostAddress();\\nint port = packet.getPort();\\nSystem.out.println(\\\"对方：\\\"+ip+\\\":\\\"+port);\\nsocket.close();\\n```\\n\\n## 第三章 TCP通信\\n\\nTCP/IP协议 ==> Transfer Control Protocol ==> 传输控制协议\\nTCP/IP协议的特点\\n\\n* **面向连接**的协议\\n* 只能由客户端主动发送数据给服务器端，服务器端接收到数据之后，可以给客户端响应数据。\\n* 通过**三次握手建立连接**，连接成功形成数据传输通道。\\n* 通过**四次挥手断开连接**\\n* 基于IO流进行数据传输\\n* 传输数据大小没有限制\\n* 因为**面向连接的协议，速度慢，但是是可靠的协议**。\\n\\nTCP协议的使用场景\\n* 文件上传和下载\\n* 邮件发送和接收\\n* 远程登录\\n\\nTCP协议相关的类\\n* `Socket`\\n\\n     一个该类的对象就代表一个客户端程序\\n\\n* `ServerSocket`\\n\\n     一个该类的对象就代表一个服务器端程序\\n\\nTCP通信也叫`Socket`网络编程，只要代码基于`Socket`开发，底层就是基于了可靠传输的TCP通信。\\n\\n`Socket`类构造方法\\n\\n    * `Socket(String host, int port)`\\n        \\n    根据ip地址字符串和端口号创建客户端Socket对象\\n          \\n          > 只要执行该方法，就会立即连接指定的服务器程序，如果连接不成功，则会抛出异常。如果连接成功，则表示三次握手通过。\\n\\n`Socket`类常用方法\\n\\n* `OutputStream getOutputStream()`; 获得字节输出流对象\\n* `InputStream getInputStream()`;获得字节输入流对象\\n\\n**客户端的开发流程**\\n\\n1. 客户端要请求于服务端的`socket`管道连接。\\n2. 从`socket`通信管道中得到一个字节输出流\\n3. 通过字节输出流给服务端写出数据。\\n\\n**服务端的开发流程**\\n\\n1. 注册端口。\\n2. 接收客户端的`Socket`管道连接。\\n3. 从`socket`通信管道中得到一个字节输入流。\\n4. 从字节输入流中读取客户端发来的数据。\\n\\n需求：客户端发送一行数据，服务端接收一行数据！！\\n\\n> 1. 客户端用`Socket`连接服务端。\\n> 2. 服务端用`ServerSocket`注册端口，接收客户端的`Socket`连接。\\n> 3. 通信是很严格的，对方怎么发，你就应该怎么收，对方发多少你就只能收多少。\\n> 4. 实现的面向连接的`socket`端到端的通信管道，一方如果出现对象，另一方会出现异常！\\n\\n### TCP通信的第一个入门案例\\n\\n简单的发送一条信息\\n\\n客户端\\n\\n```java\\n// 1.客户端要请求于服务端的socket管道连接。\\n// Socket(String host, int port)\\nSocket socket = new Socket(\\\"127.0.0.1\\\" , 9999);\\n// 2.从socket通信管道中得到一个字节输出流\\nOutputStream os = socket.getOutputStream();\\n// 3.把低级的字节输出流包装成高级的打印流。\\nPrintStream ps = new PrintStream(os);\\n// 4.开始发消息出去\\nps.println(\\\"我是客户端，喜欢你很久了，第一次给你发消息，只想说：约吗？\\\");\\nps.flush();\\nSystem.out.println(\\\"客户端发送完毕~~~~\\\");\\n```\\n\\n服务端\\n\\n```java\\nSystem.out.println(\\\"----服务端启动----\\\");\\n// 1.注册端口: public ServerSocket(int port)\\nServerSocket serverSocket = new ServerSocket(9999);\\n// 2.开始等待接收客户端的Socket管道连接。\\nSocket socket = serverSocket.accept();\\n// 3.从socket通信管道中得到一个字节输入流。\\nInputStream is = socket.getInputStream();\\n// 4.把字节输入流转换成字符输入流\\nReader isr = new InputStreamReader(is);\\n// 5.把字符输入流包装成缓冲字符输入流。\\nBufferedReader br = new BufferedReader(isr);\\n// 6.按照行读取消息 。\\nString line ;\\nif((line = br.readLine())!=null){\\n    System.out.println(line);\\n}\\n```\\n\\n### TCP通信的第二个案例-循环发送\\n\\n客户端可以反复发送数据，服务端可以反复接受数据\\n\\n客户端\\n\\n```java\\n// 1.客户端要请求于服务端的socket管道连接。\\n// Socket(String host, int port)\\nSocket socket = new Socket(\\\"127.0.0.1\\\" , 9999);\\n// 2.从socket通信管道中得到一个字节输出流\\nOutputStream os = socket.getOutputStream();\\n// 3.把低级的字节输出流包装成高级的打印流。\\nPrintStream ps = new PrintStream(os);\\n// 4.开始发消息出去\\nwhile(true){\\nScanner sc = new Scanner(System.in);\\nSystem.out.print(\\\"请说：\\\");\\nps.println(sc.nextLine());\\nps.flush();\\n}\\n```\\n\\n服务端\\n\\n```java\\nSystem.out.println(\\\"----服务端启动----\\\");\\n// 1.注册端口: public ServerSocket(int port)\\nServerSocket serverSocket = new ServerSocket(9999);\\n// 2.开始等待接收客户端的Socket管道连接。\\nSocket socket = serverSocket.accept();\\n// 3.从socket通信管道中得到一个字节输入流。\\nInputStream is = socket.getInputStream();\\n// 4.把字节输入流转换成字符输入流\\nReader isr = new InputStreamReader(is);\\n// 5.把字符输入流包装成缓冲字符输入流。\\nBufferedReader br = new BufferedReader(isr);\\n// 6.按照行读取消息 。\\nString line ;\\nwhile((line = br.readLine())!=null){\\n\\tSystem.out.println(line);\\n}\\n```\\n\\n### TCP通信的第三个案例-一个服务端同时接受多个客户端消息\\n\\n需要在服务端引入多线程。每接收一个客户端的Socket通道，就为它分配一个独立的线程来处理它的消息。如此便可实现：一个服务端可以同时接收多个客户端的消息。\\n\\n服务端\\n\\n```java\\npublic class ServerDemo02 {\\n    public static void main(String[] args) throws Exception {\\n        System.out.println(\\\"----服务端启动----\\\");\\n        // 1.注册端口: public ServerSocket(int port)\\n        ServerSocket serverSocket = new ServerSocket(9999);\\n        // 2.定义一个循环不断的接收客户端的连接请求\\n        while(true){\\n            // 3.开始等待接收客户端的Socket管道连接。\\n            Socket socket = serverSocket.accept();\\n            // 4.每接收到一个客户端必须为这个客户端管道分配一个独立的线程来处理与之通信。\\n            new ServerReaderThread(socket).start();\\n        }\\n    }\\n}\\n\\nclass ServerReaderThread extends Thread{\\n    private Socket socket ;\\n    public ServerReaderThread(Socket socket){\\n        this.socket = socket;\\n    }\\n\\n    @Override\\n    public void run() {\\n        try{\\n            // 3.从socket通信管道中得到一个字节输入流。\\n            InputStream is = socket.getInputStream();\\n            // 4.把字节输入流转换成字符输入流\\n            Reader isr = new InputStreamReader(is);\\n            // 5.把字符输入流包装成缓冲字符输入流。\\n            BufferedReader br = new BufferedReader(isr);\\n            // 6.按照行读取消息 。\\n            String line ;\\n            while((line = br.readLine())!=null){\\n                System.out.println(socket.getRemoteSocketAddress()+\\\"说：\\\"+line);\\n            }\\n        }catch (Exception e){\\n            System.out.println(socket.getRemoteSocketAddress()+\\\"下线了~~~~~~\\\");\\n        }\\n    }\\n}\\n```\\n\\n客户端\\n\\n```java\\n// 1.客户端要请求于服务端的socket管道连接。\\n// Socket(String host, int port)\\nSocket socket = new Socket(\\\"127.0.0.1\\\" , 9999);\\n// 2.从socket通信管道中得到一个字节输出流\\nOutputStream os = socket.getOutputStream();\\n// 3.把低级的字节输出流包装成高级的打印流。\\nPrintStream ps = new PrintStream(os);\\n// 4.开始发消息出去\\nwhile(true){\\n    Scanner sc = new Scanner(System.in);\\n    System.out.print(\\\"请说：\\\");\\n    ps.println(sc.nextLine());\\n    ps.flush();\\n}\\n```\\n\\n### TCP通信的第四个案例-线程池\\n\\n\\n\\n我们之前引入的线程解决一个服务端可以接收多个客户端消息。客户端与服务端的线程模型是： N-N的关系。 一个客户端要一个线程。这种模型是不行的，并发越高，系统瘫痪的越快\\n\\n我们可以在服务端引入**线程池**，使用线程池来处理与客户端的消息通信，线程池不会引起出现过多的线程而导致系统死机\\n\\n客户端\\n\\n```java\\ntry {\\n    // 1.客户端要请求于服务端的socket管道连接。\\n    // Socket(String host, int port)\\n    Socket socket = new Socket(\\\"127.0.0.1\\\" , 9999);\\n    // 2.从socket通信管道中得到一个字节输出流\\n    OutputStream os = socket.getOutputStream();\\n    // 3.把低级的字节输出流包装成高级的打印流。\\n    PrintStream ps = new PrintStream(os);\\n    Scanner sc = new Scanner(System.in);\\n    while(true){\\n        System.out.print(\\\"请说：\\\");\\n        String msg = sc.nextLine();\\n        ps.println(msg);\\n        ps.flush();\\n    }\\n} catch (Exception e) {\\n    e.printStackTrace();\\n}\\n```\\n\\n服务端主程序\\n\\n```java\\ntry {\\n    System.out.println(\\\"----------服务端启动成功------------\\\");\\n    ServerSocket ss = new ServerSocket(9999);\\n\\n    // 一个服务端只需要对应一个线程池\\n    HandlerSocketThreadPool handlerSocketThreadPool =\\n        new HandlerSocketThreadPool(3, 100);\\n\\n    // 客户端可能有很多个\\n    while(true){\\n        Socket socket = ss.accept() ;\\n        System.out.println(\\\"有人上线了！！\\\");\\n        // 每次收到一个客户端的socket请求，都需要为这个客户端分配一个\\n        // 独立的线程 专门负责对这个客户端的通信！！\\n        handlerSocketThreadPool.execute(new ReaderClientRunnable(socket));\\n    }\\n\\n} catch (Exception e) {\\n    e.printStackTrace();\\n}\\n```\\n\\n`HandlerSocketThreadPool`\\n\\n```java\\n// 线程池处理类\\npublic class HandlerSocketThreadPool {\\n\\t\\n\\t// 线程池 \\n\\tprivate ExecutorService executor;\\n\\t// 线程池：3个线程  100个\\n\\tpublic HandlerSocketThreadPool(int maxPoolSize, int queueSize){\\n\\t\\texecutor = new ThreadPoolExecutor(\\n\\t\\t\\t\\tmaxPoolSize,\\n\\t\\t\\t\\tmaxPoolSize,\\n\\t\\t\\t\\t120L, \\n\\t\\t\\t\\tTimeUnit.SECONDS,\\n\\t\\t\\t\\tnew ArrayBlockingQueue<Runnable>(queueSize) );\\n\\t}\\n\\t\\n\\tpublic void execute(Runnable task){\\n\\t\\tthis.executor.execute(task);\\n\\t}\\n}\\n```\\n\\n`ReaderClientRunnable`\\n\\n```java\\nclass ReaderClientRunnable implements Runnable {\\n\\tprivate Socket socket ;\\n\\n\\tpublic ReaderClientRunnable(Socket socket) {\\n\\t\\tthis.socket = socket;\\n\\t}\\n\\n\\t@Override\\n\\tpublic void run() {\\n\\t\\ttry {\\n\\t\\t\\t// 读取一行数据\\n\\t\\t\\tInputStream is = socket.getInputStream() ;\\n\\t\\t\\t// 转成一个缓冲字符流\\n\\t\\t\\tReader fr = new InputStreamReader(is);\\n\\t\\t\\tBufferedReader br = new BufferedReader(fr);\\n\\t\\t\\t// 一行一行的读取数据\\n\\t\\t\\tString line = null ;\\n\\t\\t\\twhile((line = br.readLine())!=null){ // 阻塞式的！！\\n\\t\\t\\t\\tSystem.out.println(\\\"服务端收到了数据：\\\"+line);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tSystem.out.println(\\\"有人下线了\\\");\\n\\t\\t}\\n\\t}\\n}\\n```\\n\\n### 即时通信\\n\\n`ClientChat`\\n\\n```java\\nimport javax.swing.*;\\nimport java.awt.*;\\nimport java.awt.event.ActionEvent;\\nimport java.awt.event.ActionListener;\\nimport java.io.DataInputStream;\\nimport java.io.DataOutputStream;\\nimport java.net.Socket;\\n\\n/**\\n * @Author xlei(徐磊)\\n * 客户端界面\\n */\\npublic class ClientChat implements ActionListener {\\n\\t/** 1.设计界面  */\\n\\tprivate JFrame win = new JFrame();\\n\\t/** 2.消息内容框架 */\\n\\tpublic JTextArea smsContent =new JTextArea(23 , 50);\\n\\t/** 3.发送消息的框  */\\n\\tprivate JTextArea smsSend = new JTextArea(4,40);\\n\\t/** 4.在线人数的区域  */\\n\\t/** 存放人的数据 */\\n\\t/** 展示在线人数的窗口 */\\n\\tpublic JList<String> onLineUsers = new JList<>();\\n\\n\\t// 是否私聊按钮\\n\\tprivate JCheckBox isPrivateBn = new JCheckBox(\\\"私聊\\\");\\n\\t// 消息按钮\\n\\tprivate JButton sendBn  = new JButton(\\\"发送\\\");\\n\\n\\t// 登录界面\\n\\tprivate JFrame loginView;\\n\\n\\tprivate JTextField ipEt , nameEt , idEt;\\n\\n\\tprivate Socket socket ;\\n\\n\\tpublic static void main(String[] args) {\\n\\t\\tnew ClientChat().initView();\\n\\n\\t}\\n\\n\\tprivate void initView() {\\n\\t\\t/** 初始化聊天窗口的界面 */\\n\\t\\twin.setSize(650, 600);\\n\\n\\t\\t/** 展示登录界面  */\\n\\t\\tdisplayLoginView();\\n\\n\\t\\t/** 展示聊天界面 */\\n\\t\\t//displayChatView();\\n\\n\\n\\t}\\n\\n\\tprivate void displayChatView() {\\n\\n\\t\\tJPanel bottomPanel = new JPanel(new BorderLayout());\\n\\t\\t//-----------------------------------------------\\n\\t\\t// 将消息框和按钮 添加到窗口的底端\\n\\t\\twin.add(bottomPanel, BorderLayout.SOUTH);\\n\\t\\tbottomPanel.add(smsSend);\\n\\t\\tJPanel btns = new JPanel(new FlowLayout(FlowLayout.LEFT));\\n\\t\\tbtns.add(sendBn);\\n\\t\\tbtns.add(isPrivateBn);\\n\\t\\tbottomPanel.add(btns, BorderLayout.EAST);\\n\\t\\t//-----------------------------------------------\\n\\t\\t// 给发送消息按钮绑定点击事件监听器\\n\\t\\t// 将展示消息区centerPanel添加到窗口的中间\\n\\t\\tsmsContent.setBackground(new Color(0xdd,0xdd,0xdd));\\n\\t\\t// 让展示消息区可以滚动。\\n\\t\\twin.add(new JScrollPane(smsContent), BorderLayout.CENTER);\\n\\t\\tsmsContent.setEditable(false);\\n\\t\\t//-----------------------------------------------\\n\\t\\t// 用户列表和是否私聊放到窗口的最右边\\n\\t\\tBox rightBox = new Box(BoxLayout.Y_AXIS);\\n\\t\\tonLineUsers.setFixedCellWidth(120);\\n\\t\\tonLineUsers.setVisibleRowCount(13);\\n\\t\\trightBox.add(new JScrollPane(onLineUsers));\\n\\t\\twin.add(rightBox, BorderLayout.EAST);\\n\\t\\t//-----------------------------------------------\\n\\t\\t// 关闭窗口退出当前程序\\n\\t\\twin.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\\n\\t\\twin.pack();  // swing 加上这句 就可以拥有关闭窗口的功能\\n\\t\\t/** 设置窗口居中,显示出来  */\\n\\t\\tsetWindowCenter(win,650,600,true);\\n\\t\\t// 发送按钮绑定点击事件\\n\\t\\tsendBn.addActionListener(this);\\n\\t}\\n\\n\\tprivate void displayLoginView(){\\n\\n\\t\\t/** 先让用户进行登录\\n\\t\\t *  服务端ip\\n\\t\\t *  用户名\\n\\t\\t *  id\\n\\t\\t *  */\\n\\t\\t/** 显示一个qq的登录框     */\\n\\t\\tloginView = new JFrame(\\\"登录\\\");\\n\\t\\tloginView.setLayout(new GridLayout(3, 1));\\n\\t\\tloginView.setSize(400, 230);\\n\\n\\t\\tJPanel ip = new JPanel();\\n\\t\\tJLabel label = new JLabel(\\\"   IP:\\\");\\n\\t\\tip.add(label);\\n\\t\\tipEt = new JTextField(20);\\n\\t\\tip.add(ipEt);\\n\\t\\tloginView.add(ip);\\n\\n\\t\\tJPanel name = new JPanel();\\n\\t\\tJLabel label1 = new JLabel(\\\"姓名:\\\");\\n\\t\\tname.add(label1);\\n\\t\\tnameEt = new JTextField(20);\\n\\t\\tname.add(nameEt);\\n\\t\\tloginView.add(name);\\n\\n\\t\\tJPanel btnView = new JPanel();\\n\\t\\tJButton login = new JButton(\\\"登陆\\\");\\n\\t\\tbtnView.add(login);\\n\\t\\tJButton cancle = new JButton(\\\"取消\\\");\\n\\t\\tbtnView.add(cancle);\\n\\t\\tloginView.add(btnView);\\n\\t\\t// 关闭窗口退出当前程序\\n\\t\\tloginView.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\\n\\t\\tsetWindowCenter(loginView,400,260,true);\\n\\n\\t\\t/** 给登录和取消绑定点击事件 */\\n\\t\\tlogin.addActionListener(this);\\n\\t\\tcancle.addActionListener(this);\\n\\n\\t}\\n\\n\\tprivate static void setWindowCenter(JFrame frame, int width , int height, boolean flag) {\\n\\t\\t/** 得到所在系统所在屏幕的宽高 */\\n\\t\\tDimension ds = frame.getToolkit().getScreenSize();\\n\\n\\t\\t/** 拿到电脑的宽 */\\n\\t\\tint width1 = ds.width;\\n\\t\\t/** 高 */\\n\\t\\tint height1 = ds.height ;\\n\\n\\t\\tSystem.out.println(width1 +\\\"*\\\" + height1);\\n\\t\\t/** 设置窗口的左上角坐标 */\\n\\t\\tframe.setLocation(width1/2 - width/2, height1/2 -height/2);\\n\\t\\tframe.setVisible(flag);\\n\\t}\\n\\n\\t@Override\\n\\tpublic void actionPerformed(ActionEvent e) {\\n\\t\\t/** 得到点击的事件源 */\\n\\t\\tJButton btn = (JButton) e.getSource();\\n\\t\\tswitch(btn.getText()){\\n\\t\\t\\tcase \\\"登陆\\\":\\n\\t\\t\\t\\tString ip = ipEt.getText().toString();\\n\\t\\t\\t\\tString name = nameEt.getText().toString();\\n\\t\\t\\t\\t// 校验参数是否为空\\n\\t\\t\\t\\t// 错误提示\\n\\t\\t\\t\\tString msg = \\\"\\\" ;\\n\\t\\t\\t\\t// 12.1.2.0\\n\\t\\t\\t\\t// \\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\\\n\\t\\t\\t\\tif(ip==null || !ip.matches(\\\"\\\\\\\\d{1,3}\\\\\\\\.\\\\\\\\d{1,3}\\\\\\\\.\\\\\\\\d{1,3}\\\\\\\\.\\\\\\\\d{1,3}\\\")){\\n\\t\\t\\t\\t\\tmsg = \\\"请输入合法的服务端ip地址\\\";\\n\\t\\t\\t\\t}else if(name==null || !name.matches(\\\"\\\\\\\\S{1,}\\\")){\\n\\t\\t\\t\\t\\tmsg = \\\"姓名必须1个字符以上\\\";\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif(!msg.equals(\\\"\\\")){\\n\\t\\t\\t\\t\\t/** msg有内容说明参数有为空 */\\n\\t\\t\\t\\t\\t// 参数一：弹出放到哪个窗口里面\\n\\t\\t\\t\\t\\tJOptionPane.showMessageDialog(loginView, msg);\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\t// 参数都合法了\\n\\t\\t\\t\\t\\t\\t// 当前登录的用户,去服务端登陆\\n\\t\\t\\t\\t\\t\\t/** 先把当前用户的名称展示到界面 */\\n\\t\\t\\t\\t\\t\\twin.setTitle(name);\\n\\t\\t\\t\\t\\t\\t// 去服务端登陆连接一个socket管道\\n\\t\\t\\t\\t\\t\\tsocket = new Socket(ip, Constants.PORT);\\n\\n\\t\\t\\t\\t\\t\\t//为客户端的socket分配一个线程 专门负责收消息\\n\\t\\t\\t\\t\\t\\tnew ClientReader(this,socket).start();\\n\\n\\t\\t\\t\\t\\t\\t// 带上用户信息过去\\n\\t\\t\\t\\t\\t\\tDataOutputStream dos = new DataOutputStream(socket.getOutputStream());\\n\\t\\t\\t\\t\\t\\tdos.writeInt(1); // 登录消息\\n\\t\\t\\t\\t\\t\\tdos.writeUTF(name.trim());\\n\\t\\t\\t\\t\\t\\tdos.flush();\\n\\n\\t\\t\\t\\t\\t\\t// 关系当前窗口 弹出聊天界面\\n\\t\\t\\t\\t\\t\\tloginView.dispose(); // 登录窗口销毁\\n\\t\\t\\t\\t\\t\\tdisplayChatView(); // 展示了聊天窗口了\\n\\n\\n\\t\\t\\t\\t\\t} catch (Exception e1) {\\n\\t\\t\\t\\t\\t\\te1.printStackTrace();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"取消\\\":\\n\\t\\t\\t\\t/** 退出系统 */\\n\\t\\t\\t\\tSystem.exit(0);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"发送\\\":\\n\\t\\t\\t\\t// 得到发送消息的内容\\n\\t\\t\\t\\tString msgSend = smsSend.getText().toString();\\n\\t\\t\\t\\tif(!msgSend.trim().equals(\\\"\\\")){\\n\\t\\t\\t\\t\\t/** 发消息给服务端 */\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\t// 判断是否对谁发消息\\n\\t\\t\\t\\t\\t\\tString selectName = onLineUsers.getSelectedValue();\\n\\t\\t\\t\\t\\t\\tint flag = 2 ;// 群发 @消息\\n\\t\\t\\t\\t\\t\\tif(selectName!=null&&!selectName.equals(\\\"\\\")){\\n\\t\\t\\t\\t\\t\\t\\tmsgSend =(\\\"@\\\"+selectName+\\\",\\\"+msgSend);\\n\\t\\t\\t\\t\\t\\t\\t/** 判断是否选中了私法 */\\n\\t\\t\\t\\t\\t\\t\\tif(isPrivateBn.isSelected()){\\n\\t\\t\\t\\t\\t\\t\\t\\t/** 私法 */\\n\\t\\t\\t\\t\\t\\t\\t\\tflag = 3 ;//私发消息\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tDataOutputStream dos = new DataOutputStream(socket.getOutputStream());\\n\\t\\t\\t\\t\\t\\tdos.writeInt(flag); // 群发消息  发送给所有人\\n\\t\\t\\t\\t\\t\\tdos.writeUTF(msgSend);\\n\\t\\t\\t\\t\\t\\tif(flag == 3){\\n\\t\\t\\t\\t\\t\\t\\t// 告诉服务端我对谁私发\\n\\t\\t\\t\\t\\t\\t\\tdos.writeUTF(selectName.trim());\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tdos.flush();\\n\\n\\t\\t\\t\\t\\t} catch (Exception e1) {\\n\\t\\t\\t\\t\\t\\te1.printStackTrace();\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tsmsSend.setText(null);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t}\\n\\n\\t}\\n}\\n\\nclass ClientReader extends Thread {\\n\\n\\tprivate Socket socket;\\n\\tprivate ClientChat clientChat ;\\n\\n\\tpublic ClientReader(ClientChat clientChat, Socket socket) {\\n\\t\\tthis.clientChat = clientChat;\\n\\t\\tthis.socket = socket;\\n\\t}\\n\\n\\t@Override\\n\\tpublic void run() {\\n\\t\\ttry {\\n\\t\\t\\tDataInputStream dis = new DataInputStream(socket.getInputStream());\\n\\t\\t\\t/** 循环一直等待客户端的消息 */\\n\\t\\t\\twhile(true){\\n\\t\\t\\t\\t/** 读取当前的消息类型 ：登录,群发,私聊 , @消息 */\\n\\t\\t\\t\\tint flag = dis.readInt();\\n\\t\\t\\t\\tif(flag == 1){\\n\\t\\t\\t\\t\\t// 在线人数消息回来了\\n\\t\\t\\t\\t\\tString nameDatas = dis.readUTF();\\n\\t\\t\\t\\t\\t// 展示到在线人数的界面\\n\\t\\t\\t\\t\\tString[] names = nameDatas.split(Constants.SPILIT);\\n\\n\\t\\t\\t\\t\\tclientChat.onLineUsers.setListData(names);\\n\\t\\t\\t\\t}else if(flag == 2){\\n\\t\\t\\t\\t\\t// 群发消息\\n\\t\\t\\t\\t\\tString msg = dis.readUTF() ;\\n\\t\\t\\t\\t\\tclientChat.smsContent.append(msg);\\n\\t\\t\\t\\t\\t//滾動到底端\\n\\t\\t\\t\\t\\tclientChat.smsContent.setCaretPosition(clientChat.smsContent.getText().length());\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\n\\t}\\n}\\n```\\n\\n`User`\\n\\n```java\\npublic class User {\\n\\tprivate Integer id ;\\n\\tprivate String name ;\\n\\t\\n\\tpublic User(Integer id, String name) {\\n\\t\\tthis.id = id;\\n\\t\\tthis.name = name;\\n\\t}\\n\\t\\n\\tpublic Integer getId() {\\n\\t\\treturn id;\\n\\t}\\n\\tpublic void setId(Integer id) {\\n\\t\\tthis.id = id;\\n\\t}\\n\\tpublic String getName() {\\n\\t\\treturn name;\\n\\t}\\n\\tpublic void setName(String name) {\\n\\t\\tthis.name = name;\\n\\t}\\n\\t@Override\\n\\tpublic String toString() {\\n\\t\\treturn \\\"User [id=\\\" + id + \\\", name=\\\" + name + \\\"]\\\";\\n\\t}\\n\\t\\n\\t\\n}\\n```\\n\\n`ServerChat`\\n\\n```java\\n/**\\n * @Author\\n * @Email dlei0009@163.com\\n */\\npublic class ServerChat {\\n\\n\\t/** 定义一个集合存放所有在线的socket  */\\n\\tpublic static Map<Socket, String> onLineSockets = new HashMap<>();\\n\\n\\tpublic static void main(String[] args) {\\n\\t\\ttry {\\n\\t\\t\\t/** 注册端口   */\\n\\t\\t\\tServerSocket serverSocket = new ServerSocket(Constants.PORT);\\n\\n\\t\\t\\t/** 循环一直等待所有可能的客户端连接 */\\n\\t\\t\\twhile(true){\\n\\t\\t\\t\\tSocket socket = serverSocket.accept();\\n\\t\\t\\t\\t/** 把客户端的socket管道单独配置一个线程来处理 */\\n\\t\\t\\t\\tnew ServerReader(socket).start();\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t}\\n}\\n\\nclass ServerReader extends Thread {\\n\\n\\tprivate Socket socket;\\n\\n\\tpublic ServerReader(Socket socket) {\\n\\t\\tthis.socket = socket;\\n\\t}\\n\\n\\t@Override\\n\\tpublic void run() {\\n\\t\\tDataInputStream dis = null;\\n\\t\\ttry {\\n\\t\\t\\tdis = new DataInputStream(socket.getInputStream());\\n\\t\\t\\t/** 循环一直等待客户端的消息 */\\n\\t\\t\\twhile(true){\\n\\t\\t\\t\\t/** 读取当前的消息类型 ：登录,群发,私聊 , @消息 */\\n\\t\\t\\t\\tint flag = dis.readInt();\\n\\t\\t\\t\\tif(flag == 1){\\n\\t\\t\\t\\t\\t/** 先将当前登录的客户端socket存到在线人数的socket集合中   */\\n\\t\\t\\t\\t\\tString name = dis.readUTF() ;\\n\\t\\t\\t\\t\\tSystem.out.println(name+\\\"---->\\\"+socket.getRemoteSocketAddress());\\n\\t\\t\\t\\t\\tServerChat.onLineSockets.put(socket, name);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\twriteMsg(flag,dis);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tSystem.out.println(\\\"--有人下线了--\\\");\\n\\t\\t\\t// 从在线人数中将当前socket移出去  \\n\\t\\t\\tServerChat.onLineSockets.remove(socket);\\n\\t\\t\\ttry {\\n\\t\\t\\t\\t// 从新更新在线人数并发给所有客户端 \\n\\t\\t\\t\\twriteMsg(1,dis);\\n\\t\\t\\t} catch (Exception e1) {\\n\\t\\t\\t\\te1.printStackTrace();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n\\n\\tprivate void writeMsg(int flag, DataInputStream dis) throws Exception {\\n//\\t\\tDataOutputStream dos = new DataOutputStream(socket.getOutputStream()); \\n\\t\\t// 定义一个变量存放最终的消息形式 \\n\\t\\tString msg = null ;\\n\\t\\tif(flag == 1){\\n\\t\\t\\t/** 读取所有在线人数发给所有客户端去更新自己的在线人数列表 */\\n\\t\\t\\t/** onlineNames = [徐磊,zhangsan,李刚]*/\\n\\t\\t\\tStringBuilder rs = new StringBuilder();\\n\\t\\t\\tCollection<String> onlineNames = ServerChat.onLineSockets.values();\\n\\t\\t\\t// 判断是否存在在线人数 \\n\\t\\t\\tif(onlineNames != null && onlineNames.size() > 0){\\n\\t\\t\\t\\tfor(String name : onlineNames){\\n\\t\\t\\t\\t\\trs.append(name+ Constants.SPILIT);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// 徐磊003197♣♣㏘♣④④♣zhangsan003197♣♣㏘♣④④♣李刚003197♣♣㏘♣④④♣\\n\\t\\t\\t\\t// 去掉最后的一个分隔符 \\n\\t\\t\\t\\tmsg = rs.substring(0, rs.lastIndexOf(Constants.SPILIT));\\n\\n\\t\\t\\t\\t/** 将消息发送给所有的客户端 */\\n\\t\\t\\t\\tsendMsgToAll(flag,msg);\\n\\t\\t\\t}\\n\\t\\t}else if(flag == 2 || flag == 3){\\n\\t\\t\\t// 读到消息  群发的 或者 @消息\\n\\t\\t\\tString newMsg = dis.readUTF() ; // 消息\\n\\t\\t\\t// 得到发件人 \\n\\t\\t\\tString sendName = ServerChat.onLineSockets.get(socket);\\n\\n\\t\\t\\t// 李刚 时间\\n\\t\\t\\t//    内容--\\n\\t\\t\\tStringBuilder msgFinal = new StringBuilder();\\n\\t\\t\\t// 时间  \\n\\t\\t\\tSimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss EEE\\\");\\n\\t\\t\\tif(flag == 2){\\n\\t\\t\\t\\tmsgFinal.append(sendName).append(\\\"  \\\").append(sdf.format(System.currentTimeMillis())).append(\\\"\\\\r\\\\n\\\");\\n\\t\\t\\t\\tmsgFinal.append(\\\"    \\\").append(newMsg).append(\\\"\\\\r\\\\n\\\");\\n\\t\\t\\t\\tsendMsgToAll(flag,msgFinal.toString());\\n\\t\\t\\t}else if(flag == 3){\\n\\t\\t\\t\\tmsgFinal.append(sendName).append(\\\"  \\\").append(sdf.format(System.currentTimeMillis())).append(\\\"对您私发\\\\r\\\\n\\\");\\n\\t\\t\\t\\tmsgFinal.append(\\\"    \\\").append(newMsg).append(\\\"\\\\r\\\\n\\\");\\n\\t\\t\\t\\t// 私发 \\n\\t\\t\\t\\t// 得到给谁私发 \\n\\t\\t\\t\\tString destName = dis.readUTF();\\n\\t\\t\\t\\tsendMsgToOne(destName,msgFinal.toString());\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t/**\\n\\t * @param destName 对谁私发 \\n\\t * @param msg 发的消息内容 \\n\\t * @throws Exception\\n\\t */\\n\\tprivate void sendMsgToOne(String destName, String msg) throws Exception {\\n\\t\\t// 拿到所有的在线socket管道 给这些管道写出消息\\n\\t\\tSet<Socket> allOnLineSockets = ServerChat.onLineSockets.keySet();\\n\\t\\tfor(Socket sk :  allOnLineSockets){\\n\\t\\t\\t// 得到当前需要私发的socket \\n\\t\\t\\t// 只对这个名字对应的socket私发消息\\n\\t\\t\\tif(ServerChat.onLineSockets.get(sk).trim().equals(destName)){\\n\\t\\t\\t\\tDataOutputStream dos = new DataOutputStream(sk.getOutputStream());\\n\\t\\t\\t\\tdos.writeInt(2); // 消息类型\\n\\t\\t\\t\\tdos.writeUTF(msg);\\n\\t\\t\\t\\tdos.flush();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n\\n\\tprivate void sendMsgToAll(int flag, String msg) throws Exception {\\n\\t\\t// 拿到所有的在线socket管道 给这些管道写出消息\\n\\t\\tSet<Socket> allOnLineSockets = ServerChat.onLineSockets.keySet();\\n\\t\\tfor(Socket sk :  allOnLineSockets){\\n\\t\\t\\tDataOutputStream dos = new DataOutputStream(sk.getOutputStream());\\n\\t\\t\\tdos.writeInt(flag); // 消息类型\\n\\t\\t\\tdos.writeUTF(msg);\\n\\t\\t\\tdos.flush();\\n\\t\\t}\\n\\t}\\n}\\n```\\n\\n`Constants`\\n\\n```java\\npublic class Constants {\\n\\t/** 常量 */\\n\\tpublic static final int PORT = 7778 ;\\n\\t\\n\\t/** 协议分隔符 */\\n\\tpublic static final String SPILIT = \\\"003197♣♣㏘♣④④♣\\\";\\n}\\n```\\n\\n### 文件上传\\n\\n实现客户端上传图片给服务端保存起来\\n\\n服务端实现：\\n\\n* 接受多个客户端传输来的图片数据存储到服务器路径\\n* 响应一个成功的消息给当前客户端\\n\\n`ClientDemo`\\n\\n```java\\npublic class ClientDemo {\\n    // 本地图片路径、\\n    public static void main(String[] args) throws Exception {\\n        // 1.请求于服务端的Socket管道连接。\\n        Socket socket = new Socket(Constants.SERVER_IP , Constants.SERVER_PORT);\\n        // 2.从socket管道中得到一个字节输出流包装成缓冲字节输出流\\n        BufferedOutputStream bos = new BufferedOutputStream(socket.getOutputStream());\\n        // 3.提取本机的图片上传给服务端\\n        // 4.得到一个缓冲字节输入流与本地图片接通\\n        BufferedInputStream bis =\\n                new BufferedInputStream(new FileInputStream(Constants.SRC_IMAGE));\\n        // 5.定义一个字节数组\\n        byte[] buffer = new byte[1024];\\n        int len ;\\n        while((len = bis.read(buffer)) != -1) {\\n            bos.write(buffer, 0 ,len);\\n        }\\n        bos.flush(); // 刷新图片数据到服务端！！\\n        socket.shutdownOutput(); // 告诉服务端我的数据已经发送完毕，请不要在等我了！\\n        bis.close(); // 可以关闭\\n\\n        // 6.等待着服务端的响应数据！！\\n        BufferedReader  br = new BufferedReader(new InputStreamReader(socket.getInputStream()));\\n        System.out.println(\\\"收到服务端响应：\\\"+br.readLine());\\n    }\\n}\\n```\\n\\n`Constants`\\n\\n```java\\n/**\\n * 客户端常量包\\n */\\npublic class Constants {\\n    public static final String SRC_IMAGE = \\\"D:\\\\\\\\itcast\\\\\\\\图片资源\\\\\\\\beautiful.jpg\\\";\\n    public static final String SERVER_DIR = \\\"D:\\\\\\\\itcast\\\\\\\\约吧图片服务器\\\\\\\\\\\";\\n    public static final String SERVER_IP = \\\"127.0.0.1\\\";\\n    public static final int SERVER_PORT = 8888;\\n\\n}\\n```\\n\\n`ServerDemo`\\n\\n```java\\n/**\\n      功能点：\\n      1.接收多个客户端传输来的图片数据存储到服务器路径：\\n      2.响应一个成功的消息给当前客户端。\\n */\\npublic class ServerDemo {\\n    public static void main(String[] args) throws Exception {\\n        System.out.println(\\\"----服务端启动----\\\");\\n        // 1.注册端口: public ServerSocket(int port)\\n        ServerSocket serverSocket = new ServerSocket(Constants.SERVER_PORT);\\n        // 2.定义一个循环不断的接收客户端的连接请求\\n        while(true){\\n            // 3.开始等待接收客户端的Socket管道连接。\\n            Socket socket = serverSocket.accept();\\n            // 4.每接收到一个客户端必须为这个客户端管道分配一个独立的线程来处理与之通信。\\n            new ServerReaderThread(socket).start();\\n        }\\n    }\\n}\\n\\nclass ServerReaderThread extends Thread{\\n    private Socket socket ;\\n    public ServerReaderThread(Socket socket){\\n        this.socket = socket;\\n    }\\n\\n    @Override\\n    public void run() {\\n        try{\\n            // 1.从socket通信管道中得到一个字节输入流读取客户端发来的图片数据！\\n            InputStream is = socket.getInputStream();\\n            // 2.包装成高级的缓冲字节输入流\\n            BufferedInputStream bis = new BufferedInputStream(is);\\n            // 3.定义一个缓冲字节输出流通向目标路径（服务端路径）\\n            BufferedOutputStream bos =\\n                    new BufferedOutputStream(new FileOutputStream(Constants.SERVER_DIR+ UUID.randomUUID().toString()+\\\".jpg\\\"));\\n            byte[] buffer = new byte[1024];\\n            int len ;\\n            while((len = bis.read(buffer)) != -1) {\\n                bos.write(buffer, 0 ,len);\\n            }\\n            bos.close();\\n            System.out.println(\\\"服务端接收完毕了！\\\");\\n\\n            // 4.响应数据给客户端\\n            PrintStream ps = new PrintStream(socket.getOutputStream());\\n            ps.println(\\\"您好，已成功接收您上传的图片！\\\");\\n            ps.flush();\\n\\n            Thread.sleep(100000); // 等消失发送完毕被客户端接收后死亡！\\n        }catch (Exception e){\\n            System.out.println(socket.getRemoteSocketAddress()+\\\"下线了~~~~~~\\\");\\n        }\\n    }\\n}\\n```\\n\\n## 第四章 BS架构 \\n\\n之前客户端和服务端都需要自己开发。也就是CS架构。接下来模拟一下BS架构。\\n\\n客户端：浏览器。（无需开发）\\n\\n服务端：自己开发。\\n\\n需求：在浏览器中请求本程序，响应一个网页文字给浏览器显示。\\n\\n```java\\nclass ServerReaderThread extends Thread{\\n    private Socket socket;\\n    public ServerReaderThread(Socket socket) {\\n        this.socket = socket;\\n    }\\n    @Override\\n    public void run() {\\n        try {\\n            // 响应消息数据给浏览器显示。\\n            // 浏览器是基于HTTP协议通信！响应格式必须满足HTTP协议数据格式的要求，浏览器\\n            // 才能够识别，否则响应消息浏览器根本不认识。\\n            PrintStream ps = new PrintStream(socket.getOutputStream());\\n            ps.println(\\\"HTTP/1.1 200 OK\\\"); // 响应数据的响应头数据！\\n            ps.println(\\\"Content-Type:text/html;charset=UTF-8\\\");//响应数据的类型。网页或者文本内容！\\n            ps.println(); // 必须换一行\\n            // 以下开始响应真实的数据！！\\n            ps.println(\\\"<span style=\'color:green;font-size:100px;\'>Hello, world<span>\\\");\\n\\n            Thread.sleep(4000);\\n            ps.close();\\n\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}\\n```\\n\\n## 第五章 基本通信模型\\n\\n1. BIO通信模式：同步阻塞式通信。（Socket网络编程也就是上面的通信架构）\\n\\n   同步：当前线程要自己进行数据的读写操作。（自己去银行取钱）\\n\\n   异步: 当前线程可以去做其他事情，（委托一小弟拿银行卡到银行取钱，然后给你）\\n\\n   阻塞： 在数据没有的情况下，还是要继续等待着读。（排队等待）\\n\\n   非阻塞：在数据没有的情况下，会去做其他事情，一旦有了数据再来获取。（柜台取款，取个号，然后坐在椅子上做其它事，等号广播会通知你办理）\\n\\n   > * BIO表示同步阻塞式IO，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，当然可以通过线程池机制改善。\\n   > * 同步阻塞式性能极差：大量线程，大量阻塞。\\n\\n2. 伪异步通信：引入了线程池。\\n\\n   不需要一个客户端一个线程，可以实现1个线程复用来处理很多个客户端！\\n\\n   这种架构，可以避免系统的死机，因为不会出现很多线程，线程可控。\\n\\n   但是高并发下性能还是很差：a.线程数量少，数据依然是阻塞的。数据没有来线程还是要等待！\\n\\n3. NIO表示同步非阻塞IO，服务器实现模式为请求对应一个线程，\\n\\n   即客户端发送的连接请求都会注册到多路复用器上，\\n\\n   多路复用器轮询到连接有I/O请求时才启动一个线程进行处理。\\n\\n   > 1个主线程专门负责接收客户端：\\n   >\\n   > 1个线程[c1 ,s2 ,c3,c4, ,s2 ,c3,c4,,c3,c4, ,s2 ,c3,c4]轮询所有的客户端，发来了数据才会开启线程处理\\n   >\\n   > 这种架构性能还可以！！\\n   >\\n   > **同步**：线程还是要不断的接收客户端连接，以及处理数据。\\n   >\\n   > **非阻塞**：如果一个管道没有数据，不需要等待，可以轮询下一个管道是否有数据！\\n\\n4. AIO表示异步非阻塞IO，服务器实现模式为一个有效请求一个线程，\\n\\n   客户端的I/O请求都是由操作系统先完成IO操作后再通知服务器应用来启动线程进行处理。\\n\\n   异步：服务端线程接收到了客户端管道以后就交给底层处理它的io通信。\\n\\n   自己可以做其他事情。\\n\\n   非阻塞：底层也是客户端有数据才会处理，有了数据以后处理好通知服务器应用来启动线程进行处理。\\n\\n各种模型应用场景：\\n\\nBIO适用于连接数目比较小且固定的架构，该方式对服务器资源要求比较高，JDK 1.4以前的唯一选择。\\n\\nNIO适用于连接数目多且连接比较短（轻操作）的架构，如聊天服务器，编程复杂，\\n\\nJDK 1.4开始支持。\\n\\nAIO适用于连接数目多且连接比较长（重操作）的架构，如相册服务器，充分调用操作系统参与并发操作，编程复杂，JDK 1.7开始支持。\\n\\n# day12-JUnit单元测试、反射、注解、动态代理\\n\\n## 第一章 单元测试\\n\\n单元测试是指程序员写的测试代码给自己的类中的方法进行预期正确性的验证。\\n\\n单元测试一旦写好了这些测试代码，就可以一直使用，可以实现一定程度上的自动化测试。\\n\\n单元测试一般要使用框架进行。\\n什么是框架？\\n框架是前人或者一些牛逼的技术公司在实战或者研发中设计的一些优良的设计方案或者成型的 代码功能，作为一个完整的技术体系发行出来称为框架。\\n\\n框架可以让程序员快速拥有一个强大的解决方案，可以快速的开发功能，提高效率并且直接就有了很好的性能。\\n\\n单元测试的经典框架：`Junit`\\n\\n`Junit`是什么\\n\\n*  `Junit`是Java语言编写的第三方单元测试框架\\n*  `Junit`框架的方案可以帮助我们方便且快速的测试我们的代码的正确性。\\n\\n单元测试概念\\n* 单元：在Java中，一个类就是一个单元\\n* 单元测试：程序猿用`Junit`编写的一小段代码，用来对某个类中的某个方法进行功能测试或业务逻辑测试。\\n\\n`Junit`单元测试框架的作用\\n\\n* 用来对类中的方法功能进行有目的的测试，以保证程序的正确性和稳定性。\\n* 能够独立的测试某个方法或者所有方法的预期正确性。\\n\\nJunit框架的使用步骤:\\n\\n1. 下载这个框架。（别人设计好的技术体系）\\n\\n   框架一般是jar包的形式，jar包里面都是class文件。（Java工程的最终形式）class文件就是我们调用的核心代码\\n\\n   现在不需要大家去官网下载，因为很多知名框架其实IDEA工具早就整合好了，程序员可以直接使用。\\n\\n   Junit已经被IDEA下载好了，可以直接导入到项目使用的。\\n\\n2. 直接用Junit测试代码即可\\n   * 先模拟业务代码\\n   * 写测试类\\n     * 测试类的命名规范：以Test开头，以业务类类名结尾，使用驼峰命名法\\n     * 业务名称是：UserService\\n     * 测试这个业务类的测试类：TestUserService/UserServiceTest\\n   * 在测试类中写测试方法\\n     * 测试方法的命名规则：以test开头，以业务方法名结尾\\n     * 比如被测试业务方法名为：login，那么测试方法名就应该叫：testLogin\\n   * 测试方法注意事项\\n     * 必须是`public`修饰的，没有返回值，没有参数\\n     * 必须使注解`@Test`修饰\\n\\n3. 如何运行测试方法\\n\\n   * 选中方法名 --> 右键 --> Run \'测试方法名\'  运行选中的测试方法\\n   * 选中测试类名 --> 右键 --> Run \'测试类类名\'  运行测试类中所有测试方法\\n\\n   * 选中模块名 --> 右键 --> Run \'All Tests\'  运行模块中的所有测试类的所有测试方法\\n\\n\\n​    如何查看测试结果\\n   * 绿色：表示测试通过\\n   * 红色：表示测试失败，有问题\\n\\n​    `Junit`常用注解(Junit 4.xxxx版本)\\n* `@Test` 测试方法！\\n* `@Before`：用来修饰实例方法，该方法会在每一个测试方法执行之前执行一次。\\n* `@After`：用来修饰实例方法，该方法会在每一个测试方法执行之后执行一次。\\n* `@BeforeClass`：用来静态修饰方法，该方法会在所有测试方法之前只执行一次。\\n* `@AfterClass`：用来静态修饰方法，该方法会在所有测试方法之后只执行一次。\\n\\n开始执行的方法:初始化资源。\\n\\n执行完之后的方法:释放资源。\\n\\nJunit常用注解(Junit5.xxxx版本)\\n* `@Test` 测试方法！\\n* `@BeforeEach`：用来修饰实例方法，该方法会在每一个测试方法执行之前执行一次。\\n* `@AfterEach`：用来修饰实例方法，该方法会在每一个测试方法执行之后执行一次。\\n* `@BeforeAll`：用来静态修饰方法，该方法会在所有测试方法之前只执行一次。\\n* `@AfterAll`：用来静态修饰方法，该方法会在所有测试方法之后只执行一次。\\n\\n```java\\npublic class UserServiceTest {\\n    // @Before：用来修饰实例方法，该方法会在每一个测试方法执行之前执行一次。\\n    @Before\\n    public void before(){\\n        System.out.println(\\\"===before===\\\");\\n    }\\n    // @After：用来修饰实例方法，该方法会在每一个测试方法执行之后执行一次。\\n    @After\\n    public void after(){\\n        System.out.println(\\\"===after===\\\");\\n    }\\n\\n    // @BeforeClass：用来静态修饰方法，该方法会在所有测试方法之前只执行一次。\\n    @BeforeClass\\n    public static void beforeClass(){\\n        System.out.println(\\\"===beforeClass===\\\");\\n    }\\n\\n    // @AfterClass：用来静态修饰方法，该方法会在所有测试方法之后只执行一次。\\n    @AfterClass\\n    public static void afterClass(){\\n        System.out.println(\\\"===afterClass===\\\");\\n    }\\n\\n\\n    /**\\n     * 测试方法的要求：\\n     *  1.必须public修饰\\n     *  2.没有返回值没有参数\\n     *  3. 必须使注解@Test修饰\\n     */\\n    @Test\\n    public void testLogin(){\\n        UserService userService = new UserService();\\n        String rs = userService.login(\\\"admin\\\",\\\"123456\\\");\\n        // 断言预期结果的正确性。\\n        /**\\n         * 参数一：测试失败的提示信息。\\n         * 参数二：期望值。\\n         * 参数三：实际值\\n         */\\n        // public static void assertEquals(String message, Object expected, Object actual)\\n        Assert.assertEquals(\\\"登录业务功能方法有错误，请检查！\\\",\\\"success\\\",rs);\\n    }\\n\\n    @Test\\n    public void testChu(){\\n        UserService userService = new UserService();\\n        userService.chu(10 , 2);\\n    }\\n}\\n```\\n\\n## 第二章 反射\\n\\n### 反射的概述\\n\\n反射，注解，代理，泛型是Java的高级技术，是以后框架的底层原理必须使用到的技术。\\n\\n反射：是Java独有的技术。是Java技术显著的特点。\\n\\n反射是指对于任何一个类，在\\\"运行的时候\\\"都可以直接得到这个类全部成分。\\n\\n- 在运行时,可以直接得到这个类的构造器对象。（Constructor）\\n- 在运行时,可以直接得到这个类的成员变量对象。（Field）\\n- 在运行时,可以直接得到这个类的成员方法对象。（Method）\\n\\n反射的核心思想和关键就是得到：编译以后的class文件对象。\\n\\n反射提供了一个Class类型，就是可以得到编译以后的class类对象。\\n\\n```java\\nHelloWorld.java -> javac -> HelloWorld.class\\n\\nClass c = HelloWorld.class;\\n```\\n\\n> 反射是工作在运行时的技术，因为只有运行之后才会有class类对象\\n>\\n> 反射的核心思想和关键就是得到：编译以后的class文件对象\\n>\\n> 反射是在运行时获取类的字节码文件对象：然后可以解析类中的全部成分\\n\\n### 获取Class类对象\\n\\n反射是通过先得到编译以后的Class类对象：字节码文件。然后才可以得到类中的全部成分，进行一些功能设计。\\n\\n反射为一个类的全部成分都设计了一个类型来代表这个对象：\\n\\n- `Class `: 字节码文件的类型\\n- `Constructor `: 构造器的类型\\n- `Field` : 成员变量的类型\\n- `Method `: 方法的类型\\n\\n反射技术的第一步永远是先得到Class类对象:有三种方式获取\\n\\n1. 类名.class\\n\\n2. 通过类的对象.getClass()方法\\n\\n3. Class.forName(\\\"类的全限名\\\")\\n\\n   ```java\\n   public static Class<?> forName(String className)\\n   ```\\n\\nClass类下的方法：\\n\\n- String getSimpleName(); 获得类名字符串：类名\\n- String getName();  获得类全名：包名+类名\\n- T newInstance() ;  创建Class对象关联类的对象,其实底层也是调用无参数构造器，已经被淘汰。\\n\\nClass类对象的获取有三种方式：\\n\\n1. 类名.class。\\n2. 通过类的对象.getClass()方法。\\n3. Class.forName(\\\"类的全限名\\\")。\\n4. Class类的方法：\\n   * `String getSimpleName();` 获得类名字符串：类名\\n   * `String getName(); ` 获得类全名：包名+类名\\n\\n```java\\n// 反射的第一步永远是先得到类的Class文件对象: 字节码文件。\\n// 1.类名.class\\nClass c1 = Student.class;\\nSystem.out.println(c1);\\n\\n// 2.对象.getClass()\\nStudent swk = new Student();\\nClass c2 = swk.getClass();\\nSystem.out.println(c2);\\n\\n// 3.Class.forName(\\\"类的全限名\\\")\\n// 直接去加载该类的class文件。\\nClass c3 = Class.forName(\\\"com.itheima._03反射_获取Class类对象.Student\\\");\\nSystem.out.println(c3);\\n\\nSystem.out.println(c1.getSimpleName()); // 获取类名本身（简名）\\nSystem.out.println(c1.getName()); // 获取类的全限名\\n// Student s1 = (Student) c1.newInstance(); // 调用无参数构造器得到对象，被淘汰了！\\n```\\n\\n### 获取Constructor构造器对象\\n\\n反射中Class类型获取构造器提供了很多的API:\\n     1. `Constructor getConstructor(Class... parameterTypes)`\\n        根据参数匹配获取某个构造器，只能拿public修饰的构造器，几乎不用！\\n     2. `Constructor getDeclaredConstructor(Class... parameterTypes)`\\n  根据参数匹配获取某个构造器，只要申明就可以定位，不关心权限修饰符，建议使用！\\n     3. `Constructor[] getConstructors()`\\n  获取所有的构造器，只能拿public修饰的构造器。几乎不用！！太弱了！\\n     4. `Constructor[] getDeclaredConstructors()`\\n  获取所有声明的构造器，只要你写我就能拿到，无所谓权限。建议使用！！\\n\\n\\n获取类的全部构造器对象：` Constructor[] getDeclaredConstructors()`\\n\\n获取所有申明的构造器，只要你写我就能拿到，无所谓权限。建议使用！！\\n\\n获取类的某个构造器对象：`Constructor getDeclaredConstructor(Class... parameterTypes)`\\n\\n根据参数匹配获取某个构造器，只要申明就可以定位，不关心权限修饰符，建议使用！\\n\\n对于类`Student`来说\\n\\n```java\\npublic class Student {\\n    private String name ;\\n    private int age ;\\n\\n    private Student(){\\n        System.out.println(\\\"无参数构造器被执行~~~~\\\");\\n    }\\n\\n    public Student(String name, int age) {\\n        System.out.println(\\\"有参数构造器被执行~~~~\\\");\\n        this.name = name;\\n        this.age = age;\\n    }\\n    //...\\n}\\n```\\n\\n获取该类运行时的构造器可以用一下代码实现\\n\\n```java\\npublic class TestStudent {\\n    // 1. getConstructors:\\n    // 获取全部的构造器：只能获取public修饰的构造器。\\n    // Constructor[] getConstructors()\\n    @Test\\n    public void getConstructors(){\\n        // a.反射第一步先得到Class类对象\\n        Class c = Student.class ;\\n        // b.getConstructors()：定位全部构造器，只能拿public修饰的！\\n        Constructor[] cons = c.getConstructors();\\n        // c.遍历这些构造器\\n        for (Constructor con : cons) {\\n            System.out.println(con.getName()+\\\"===>\\\"+con.getParameterCount());\\n        }\\n    }\\n\\n    // 2.getDeclaredConstructors():\\n    // 获取全部的构造器：只要你敢写，这里就能拿到，无所谓权限是否可及。\\n    @Test\\n    public void getDeclaredConstructors(){\\n        // a.反射第一步先得到Class类对象\\n        Class c = Student.class ;\\n        // b.getDeclaredConstructors()：定位全部构造器，只要申明了就可以拿到\\n        Constructor[] cons = c.getDeclaredConstructors();\\n        // c.遍历这些构造器\\n        for (Constructor con : cons) {\\n            System.out.println(con.getName()+\\\"===>\\\"+con.getParameterCount());\\n        }\\n    }\\n\\n    // 3.getConstructor(Class... parameterTypes)\\n    // 获取某个构造器：只能拿public修饰的某个构造器\\n    @Test\\n    public void getConstructor() throws Exception {\\n        // a.反射第一步先得到Class类对象\\n        Class c = Student.class ;\\n        // b.getConstructor()：定位某个构造器，根据参数匹配，只能拿public修饰的！\\n        // Constructor con = c.getConstructor(); // 报错!\\n        Constructor con = c.getConstructor(String.class  ,int.class); // 有参数的！!\\n        // c.构造器名称和参数\\n        System.out.println(con.getName()+\\\"===>\\\"+con.getParameterCount());\\n    }\\n\\n    // 4.getDeclaredConstructor\\n    // 获取某个构造器：只要你敢写，这里就能拿到，无所谓权限是否可及。\\n    @Test\\n    public void getDeclaredConstructor() throws Exception {\\n        // a.反射第一步先得到Class类对象\\n        Class c = Student.class ;\\n        // b.getDeclaredConstructor()：定位某个构造器，根据参数匹配，只要申明了就可以获取\\n        Constructor con = c.getDeclaredConstructor(); // 可以拿到！定位无参数构造器！\\n        //Constructor con = c.getDeclaredConstructor(String.class  , int.class); // 有参数的！!\\n        // c.构造器名称和参数\\n        System.out.println(con.getName()+\\\"===>\\\"+con.getParameterCount());\\n    }\\n}\\n```\\n\\n获取到构造器之后，可以通过该构造器初始化对象\\n\\n反射获取`Class`中构造器对象`Constructor`的作用，就是用来初始化并得到类的一个对象返回\\n\\n`Constructor`的API\\n\\n* `T newInstance(Object... initargs)`\\n\\n  创建对象，注入构造器需要的数据\\n\\n* `void setAccessible(true)`\\n\\n  修改访问权限，`true`代表暴力攻破权限，`false`表示保留不可访问权限\\n\\n```java\\npublic class TestStudent02 {\\n    // 1.调用无参数构造器得到一个类的对象返回。\\n    @Test\\n    public void createObj01() throws Exception {\\n        // a.反射第一步是先得到Class类对象\\n        Class c = Student.class ;\\n        // b.定位无参数构造器对象\\n        Constructor constructor = c.getDeclaredConstructor();\\n        // c.暴力打开私有构造器的访问权限\\n        constructor.setAccessible(true);\\n        // d.通过无参数构造器初始化对象返回\\n        Student swk = (Student) constructor.newInstance(); // 最终还是调用无参数构造器的！\\n        System.out.println(swk);\\n    }\\n\\n    // 2.调用有参数构造器得到一个类的对象返回。\\n    @Test\\n    public void createObj02() throws Exception {\\n        // a.反射第一步是先得到Class类对象\\n        Class c = Student.class ;\\n        // b.定位有参数构造器对象\\n        Constructor constructor = c.getDeclaredConstructor(String.class , int.class);\\n        // c.通过无参数构造器初始化对象返回\\n        Student swk = (Student) constructor.newInstance(\\\"孙悟空\\\",10000); // 最终还是调用有参数构造器的！\\n        System.out.println(swk);\\n    }\\n}\\n```\\n\\n### 获取Field成员变量对象\\n\\n* `Field getField(String name);`\\n  根据成员变量名获得对应Field对象，只能获得public修饰\\n* `Field getDeclaredField(String name);`\\n  根据成员变量名获得对应Field对象，只要申明了就可以得到\\n* `Field[] getFields();`\\n  获得所有的成员变量对应的Field对象，只能获得public的\\n* `Field[] getDeclaredFields();`\\n  获得所有的成员变量对应的Field对象，只要申明了就可以得到\\n\\n对于`Dog`类\\n\\n```java\\npublic class Dog {\\n    private String name;\\n    private int age ;\\n    private String color ;\\n    public static String school;\\n    public static final String SCHOOL_1 = \\\"宠物学校\\\";\\n\\n    public Dog() {\\n    }\\n    // ...\\n}\\n```\\n\\n获取其成员变量\\n\\n```java\\npublic class FieldDemo {\\n    /**\\n     * 1.获取全部的成员变量。\\n     */\\n    @Test\\n    public void getDeclaredFields(){\\n        // a.先获取class类对象\\n        Class c = Dog.class;\\n        // b.获取全部申明的成员变量对象\\n        Field[] fields = c.getDeclaredFields();\\n        for (Field field : fields) {\\n            System.out.println(field.getName()+\\\"===>\\\"+field.getType());\\n        }\\n    }\\n\\n    /**\\n        2.获取某个成员变量对象\\n     */\\n    @Test\\n    public void getDeclaredField() throws Exception {\\n        // a.先获取class类对象\\n        Class c = Dog.class;\\n        // b.定位某个成员变量对象 :根据名称定位！！\\n        Field ageF = c.getDeclaredField(\\\"age\\\");\\n        System.out.println(ageF.getName()+\\\"--->\\\"+ageF.getType());\\n    }\\n\\n}\\n```\\n\\n给成员变量取值和复制\\n\\n- `void set(Object obj, Object value)`：给对象注入某个成员变量数据\\n- `Object get(Object obj)` ：获取对象的成员变量的值。\\n- `void setAccessible(true)` ：暴力反射，设置为可以直接访问私有类型的属性。\\n- `Class getType()`：获取属性的类型，返回Class对象。\\n- `String getName()`：获取属性的名称。\\n\\n```java\\npublic class FieldDemo02 {\\n    @Test\\n    public void setField() throws Exception {\\n        // a.反射的第一步获取Class类对象\\n        Class c = Dog.class ;\\n        // b.定位name成员变量\\n        Field nameF = c.getDeclaredField(\\\"name\\\");\\n        // c.为这个成员变量赋值！\\n        Dog taiDi = new Dog();\\n        nameF.setAccessible(true); // 暴力反射！\\n        /**\\n         * 参数一：被赋值的对象。\\n         * 参数二：该成员变量的值。\\n         */\\n        nameF.set(taiDi , \\\"勇敢的泰迪\\\");\\n        System.out.println(taiDi);\\n\\n        // d.获取成员变量的值\\n        String value = nameF.get(taiDi)+\\\"\\\";\\n        System.out.println(value);\\n    }\\n}\\n```\\n\\n### 获取Method方法\\n\\n反射获取类的Method方法对象：\\n\\n* `Method getMethod(String name,Class...args)`：根据方法名和参数类型获得对应的方法对象，只能获得public的\\n* `Method getDeclaredMethod(String name,Class...args)`：根据方法名和参数类型获得对应的方法对象，包括private的\\n* `Method[] getMethods()`：获得类中的所有成员方法对象，返回数组，只能获得public修饰的且包含父类的\\n* `Method[] getDeclaredMethods()`：获得类中的所有成员方法对象，返回数组,只获得本类申明的方法\\n\\nMethod的方法执行：\\n`Object invoke(Object obj, Object... args)`\\n\\n* 参数一：触发的是哪个对象的方法执行\\n* 参数二： args：调用方法时传递的实际参数\\n\\n`Dog`类\\n\\n```java\\npublic class Dog {\\n\\n    private String name ;\\n\\n    public Dog(){\\n    }\\n\\n    public Dog(String name) {\\n        this.name = name;\\n    }\\n\\n    public void run(){\\n        System.out.println(\\\"狗跑的贼快~~\\\");\\n    }\\n\\n    private void eat(){\\n        System.out.println(\\\"狗吃骨头\\\");\\n    }\\n\\n    private void eat(String name){\\n        System.out.println(\\\"狗吃\\\"+name);\\n    }\\n\\n    public static void inAddr(){\\n        System.out.println(\\\"在吉山区有一只单身狗！\\\");\\n    }\\n\\n    public String getName() {\\n        return name;\\n    }\\n\\n    public void setName(String name) {\\n        this.name = name;\\n    }\\n}\\n```\\n\\n反射获取方法\\n\\n```java\\npublic class MethodDemo01 {\\n    /**\\n     * 1.获得类中的所有成员方法对象\\n     */\\n    @Test\\n    public void getDeclaredMethods(){\\n        // a.先获取class类对象\\n        Class c = Dog.class ;\\n        // b.获取全部申明的方法!\\n        Method[] methods = c.getDeclaredMethods();\\n        // c.遍历这些方法\\n        for (Method method : methods) {\\n            System.out.println(method.getName()+\\\"====>\\\"\\n                    + method.getParameterCount()+\\\"===>\\\" + method.getReturnType());\\n        }\\n\\n    }\\n    /**\\n     * 2. 获取某个方法对象\\n     */\\n    @Test\\n    public void getDeclardMethod() throws Exception {\\n        // a.先获取class类对象\\n        Class c = Dog.class;\\n        // b.定位它的某个方法\\n        Method run = c.getDeclaredMethod(\\\"run\\\");\\n        // c.触发方法执行!\\n        Dog jinMao = new Dog();\\n        Object rs = run.invoke(jinMao); // 触发jinMao对象的run()方法执行！\\n        System.out.println(rs);// 如果方法没有返回值，结果是null\\n\\n        /**\\n         * 参数一：方法名称\\n         * 参数二：方法的参数个数和类型(可变参数！)\\n         */\\n        Method eat = c.getDeclaredMethod(\\\"eat\\\",String.class);\\n        eat.setAccessible(true); // 暴力反射！\\n        /**\\n         * 参数一：被触发方法所在的对象\\n         * 参数二：方法需要的入参值\\n         */\\n        Object rs1 = eat.invoke(jinMao,\\\"肉\\\");\\n        System.out.println(rs1);// 如果方法没有返回值，结果是null\\n    }\\n}\\n```\\n\\n### 暴力攻击集合泛型\\n\\n* 反射可以破坏面向对象的封装性（暴力反射）\\n* 同时可以破坏泛型的约束性\\n\\n```java\\n// 泛型只能工作在编译阶段，运行阶段泛型就消失了，\\n// 反射工作在运行时阶段。\\nList<Double> scores = new ArrayList<>();\\nscores.add(99.3);\\nscores.add(199.3);\\nscores.add(89.5);\\n\\n// 拓展：通过反射暴力的注入一个其他类型的数据进去。\\n// a.先得到集合对象的Class文件对象\\nClass c = scores.getClass();\\n// b.从ArrayList的Class对象中定位add方法\\nMethod add = c.getDeclaredMethod(\\\"add\\\", Object.class);\\n// c.触发scores集合对象中的add执行（运行阶段，泛型不能约束了）\\nadd.invoke(scores,\\\"波仔\\\");\\n\\nSystem.out.println(scores);\\n```\\n\\n### 反射作用\\n\\n* 可以在运行时得到一个类的全部成分然后操作。\\n* 可以破坏封装性。\\n* 也可以破坏泛型的约束性。\\n\\n更重要的用途是适合：做Java高级框架，基本上主流框架都会基于反射设计一些通用技术功能。\\n\\nMybatis框架：\\n\\n你给任何一个对象数据我都可以直接帮你解析字段并且把对应数据保存起来。\\n\\nStudent (注册，把信息字段都存储起来)\\n\\nTeacher (注册，把信息字段都存储起来)\\n\\nManager (注册，把信息字段都存储起来)\\n\\n我现在用反射技术开发一个框架实现：\\n\\n任何对象只要给我，我就可以把信息和字段都解析并存储起来。\\n\\n> 反射适合做通用技术框架的底层实现，在框架的底层源码中我们经常看到反射的影子!!\\n\\n## 第三章 注解\\n\\n### 注解的概念\\n\\n- 用在类上，方法上，成员变量，构造器，...上对成分进行编译约束，标记等操作的。\\n- 注解是JDK1.5的新特性。\\n- 注解相当一种标记，是类的组成部分，可以给类携带一些额外的信息。\\n- 注解是给编译器或JVM看的，编译器或JVM可以根据注解来完成对应的功能。\\n\\n```java\\npublic class AnnotationDemo01 {\\n\\n}\\n\\n@FunctionalInterface\\ninterface A{\\n    void test();\\n}\\n```\\n\\n### 自定义注解\\n\\n自定义注解的格式：\\n\\n```java\\n修饰符 @interface 注解名{\\n// 注解属性\\n}\\n```\\n\\n> * 自定义注解用@interface关键字。\\n> * 使用注解的格式：@注解名称。\\n> * 注解默认可以标记很多地方。\\n\\n```java\\n@Book\\n@MyTest\\npublic class MyBook {\\n    @Book\\n    @MyTest\\n    private MyBook(){\\n\\n    }\\n    @Book\\n    @MyTest\\n    public static void main(@MyTest String[] args) {\\n        @MyTest\\n        @Book\\n        int age = 12;\\n    }\\n}\\n\\n@interface Book{\\n}\\n\\n@interface MyTest{\\n\\n}\\n```\\n\\n### 注解的属性\\n\\n属性的格式\\n   - 格式1：数据类型 属性名();\\n   - 格式2：数据类型 属性名() default 默认值;\\n\\n属性适用的数据类型:\\n\\n* 八种基本数据类型`(int, short, long, double, byte, char, boolean, float)`\\n* `String，Class`\\n* 以上类型的数组形式都支持\\n\\n> * 注解可以有属性，属性名必须带()\\n> * 在用注解的时候，属性必须赋值，除非这个属性有默认值\\n\\n```java\\n@MyBook(name=\\\"《精通Java基础》\\\",authors = {\\\"播仔\\\",\\\"Dlei\\\",\\\"播妞\\\"} , price = 99.9 )\\npublic class AnnotationDemo01 {\\n    @MyBook(name=\\\"《精通MySQL数据库入门到删库跑路》\\\",authors = {\\\"小白\\\",\\\"小黑\\\"} ,\\n            price = 19.9 , address = \\\"北京\\\")\\n    public static void main(String[] args) {\\n\\n    }\\n}\\n\\n// 自定义一个注解\\n@interface MyBook{\\n    String name();\\n    String[] authors(); // 数组\\n    double price();\\n    String address() default \\\"广州\\\";\\n}\\n```\\n\\n### 注解的特殊属性-value\\n\\n* 如果只有一个value属性的情况下，使用value属性的时候可以省略value名称不写\\n* 但是如果有多个属性,且多个属性没有默认值，那么value是不能省略的。\\n\\n```java\\n//@Book(value = \\\"/deleteBook.action\\\")\\n//@Book(\\\"/deleteBook.action\\\")\\n//@Book(value = \\\"/deleteBook.action\\\" , age = 12)\\n//@Book(\\\"/deleteBook.action\\\")\\n\\npublic class AnnotationDemo01{\\n}\\n\\n@interface Book{\\n    String value();\\n    int age() default 10;\\n}\\n```\\n\\n### 元注解\\n\\n- 元注解是sun公司提供的。\\n- 元注解是用在自定义注解上的注解。\\n- 元注解是用来注解自定义注解的。\\n\\n元注解有两个：\\n\\n* `@Target`:约束自定义注解只能在哪些地方使用，但是默认的注解可以在类，方法，构造器，成员变量，... 使用。\\n* `@Retention`：声明注解的生命周期\\n  申明注解的作用范围：编译时，运行时。\\n\\n`@Target`\\n\\n   * 作用：用来标识注解使用的位置，如果没有使用该注解标识，则自定义的注解可以使用在任意位置。\\n   * 可使用的值定义在ElementType枚举类中，常用值如下\\n        * TYPE，类，接口\\n        * FIELD, 成员变量\\n        * METHOD, 成员方法\\n        * PARAMETER, 方法参数\\n        * CONSTRUCTOR, 构造器\\n        * LOCAL_VARIABLE, 局部变量\\n\\n\\n`@Retention`\\n\\n* 作用：用来标识注解的生命周期(有效存活范围)\\n* 可使用的值定义在RetentionPolicy枚举类中，常用值如下\\n  * SOURCE：注解只作用在源码阶段，生成的字节码文件中不存在\\n  * CLASS：注解作用在源码阶段，字节码文件阶段，运行阶段不存在，默认值.\\n  * RUNTIME：注解作用在源码阶段，字节码文件阶段，运行阶段（开发常用）\\n\\n> * `@Target`约束自定义注解可以标记的范围。\\n> * `@Retention`用来约束自定义注解的存活范围。\\n\\n```java\\npublic class AnnotationDemo01{\\n    // @MyTest\\n    private String name;\\n\\n    @MyTest\\n    public static void main( String[] args) {\\n    }\\n\\n    @MyTest\\n    public void testRun(){\\n\\n    }\\n}\\n\\n//@Target({ElementType.METHOD , ElementType.FIELD}) // 申明只能注解方法和成员变量！\\n@Target(ElementType.METHOD ) // 申明只能注解方法\\n@Retention(RetentionPolicy.RUNTIME) // 申明注解从写代码一直到运行还在，永远存活！！\\n@interface MyTest{\\n}\\n```\\n\\n### 注解解析\\n\\n我们会使用注解注释一个类的成分，那么就设计到要解析出这些注解的数据。开发中经常要知道一个类的成分上面到底有哪些注解，注解有哪些属性数据，这都需要进行注解的解析。\\n\\n与注解解析相关的接口\\n        1. `Annotation`: 注解类型，该类是所有注解的父类。注解都是一个`Annotation`的对象\\n     1. `AnnotatedElement`:该接口定义了与注解解析相关的方法\\n          2所有的类成分Class, Method , Field , Constructor：都实现了`AnnotatedElement`接口，他们都拥有解析注解的能力：\\n       * `Annotation[] getDeclaredAnnotations()`\\n          获得当前对象上使用的所有注解，返回注解数组。\\n        * `T getDeclaredAnnotation(Class<T> annotationClass)`\\n          根据注解类型获得对应注解对象\\n        * `boolean isAnnotationPresent(Class<Annotation> annotationClass)`\\n          判断当前对象是否使用了指定的注解，如果使用了则返回true，否则false\\n\\n解析注解数据的原理\\n* 注解在哪个成分上，我们就先拿哪个成分对象。\\n* 比如注解作用成员方法，则要获得该成员方法对应的Method对象，再来拿上面的注解\\n* 比如注解作用在类上，则要该类的Class对象，再来拿上面的注解\\n* 比如注解作用在成员变量上，则要获得该成员变量对应的Field对象，再来拿上面的注解\\n\\n```java\\npublic class AnnotationDemo01 {\\n    @Test\\n    public void parseClass(){\\n        // 1.定位Class类对象\\n        Class c = BookStore.class ;\\n        // 2.判断这个类上是否使用了某个注解\\n        if(c.isAnnotationPresent(Book.class)){\\n            // 3.获取这个注解对象\\n            Book book = (Book) c.getDeclaredAnnotation(Book.class);\\n            System.out.println(book.value());\\n            System.out.println(book.price());\\n            System.out.println(Arrays.toString(book.authors()));\\n        }\\n    }\\n\\n    @Test\\n    public void parseMethod() throws Exception {\\n        // 1.定位Class类对象\\n        Class c = BookStore.class ;\\n        // 2.定位方法对象\\n        Method run = c.getDeclaredMethod(\\\"run\\\");\\n        // 3.判断这个方法上是否使用了某个注解\\n        if(run.isAnnotationPresent(Book.class)){\\n            // 3.获取这个注解对象\\n            Book book = (Book) run.getDeclaredAnnotation(Book.class);\\n            System.out.println(book.value());\\n            System.out.println(book.price());\\n            System.out.println(Arrays.toString(book.authors()));\\n        }\\n    }\\n}\\n\\n@Book(value = \\\"《Java基础到精通》\\\" , price = 99.5 , authors = {\\\"波仔\\\",\\\"波妞\\\"})\\nclass BookStore{\\n    @Book(value = \\\"《Mybatis持久层框架》\\\" , price = 199.5 , authors = {\\\"dlei\\\",\\\"播客\\\"})\\n    public void run(){\\n    }\\n}\\n\\n@Target({ElementType.TYPE,ElementType.METHOD}) // 类和成员方法上使用\\n@Retention(RetentionPolicy.RUNTIME) // 注解永久存活\\n@interface Book{\\n    String value();\\n    double price() default 100;\\n    String[] authors();\\n}\\n\\n```\\n\\n### 注解模拟Junit框架\\n\\n需求：定义若干个方法，只要加了MyTest注解，就可以被自动触发执行。\\n\\n分析：\\n\\n1. 定义一个自定义注解MyTest.\\n   只能注解方法。\\n   存活范围一直都在。\\n2. 定义若干个方法，只要有`@MyTest`注解的方法就能被触发执行！！\\n   没有这个注解的方法不能执行\\n\\n> * 注解和反射可以配合解决一些框架思想\\n> * 注解可以实现标记的成分做特殊处理!!\\n\\n```java\\npublic class TestDemo{\\n    @MyTest\\n    public void test01(){\\n        System.out.println(\\\"===test01===\\\");\\n    }\\n\\n    public void test02(){\\n        System.out.println(\\\"===test02===\\\");\\n    }\\n\\n    @MyTest\\n    public void test03(){\\n        System.out.println(\\\"===test03===\\\");\\n    }\\n\\n    @MyTest\\n    public void test04(){\\n        System.out.println(\\\"===test04===\\\");\\n    }\\n    public static void main(String[] args) throws Exception {\\n        TestDemo t = new TestDemo();\\n        // 模拟测试类的启动按钮，实现有注解标记的方法就要触发执行。\\n        // 1.得到类对象\\n        Class c = TestDemo.class;\\n        // 2.获取类中全部方法对象\\n        Method[] methods = c.getDeclaredMethods();\\n        // 3.遍历全部方法，有注解就触发执行\\n        for (Method method : methods) {\\n            if(method.isAnnotationPresent(MyTest.class)){\\n                // 触发此方法执行。\\n                method.invoke(t);\\n            }\\n        }\\n    }\\n}\\n\\n@Target(ElementType.METHOD) // 只能注解方法！\\n@Retention(RetentionPolicy.RUNTIME) // 一直都活着\\n@interface MyTest{\\n}\\n```\\n\\n## 第四章 动态代理\\n\\n* 代理就是被代理者没有能力或者不愿意去完成某件事情，需要找个人代替自己去完成这件事。\\n* 动态代理只能为实现接口的实现类对象做代理(也可以只为接口做代理对象)\\n\\n引入：\\n\\n* 在业务开发中经常存在很多重复的方法代码，他们前后的代码形式是一样的\\n* 只有中间部分代码有差别！！这种时候代码冗余读很高\\n* 有没有一种方法可以直接省略前后重复的代码就可以完成功能，这时候用动态代理。\\n\\n开发步骤：\\n\\n* 必须有接口。\\n* 实现类要实现接口，定义自己的业务功能代码。\\n* 为业务功能做代理对象（动态代理，难点）\\n\\n> * 动态代理非常的灵活，可以为任意的接口实现类对象做代理\\n> * 动态代理可以为被代理对象的所有接口的所有方法做代理，\\n> * 动态代理可以在不改变方法源码的情况下，实现对方法功能的增强，\\n> * 动态代理类不仅简化了编程工作，而且提高了软件系统的可扩展性，因为Java 反射机制可以生成任意类型的动态代理类。\\n> * 动态代理同时也提高了开发效率。\\n> * 缺点：只能针对接口或者接口的实现类对象做代理对象，普通类是不能做代理对象的。\\n\\n```java\\npublic class ProxyUtil {\\n    /**\\n     * 做一个被代理的业务对象返回!\\n     * @param obj\\n     * @return\\n     */\\n    public static <T> T getProxy(Object obj) {\\n        /**\\n         参数一：类加载器:负责加载到时候做好的业务代理对象！\\n         参数二：被代理业务对象的全部实现的接口，以便代理对象可以知道要为哪些方法做代理。\\n         参数三：代理真正的执行方法，也就是代理的处理逻辑！\\n         */\\n        return (T) Proxy.newProxyInstance(obj.getClass().getClassLoader(),\\n                obj.getClass().getInterfaces(), new InvocationHandler() {\\n                    @Override\\n                    public Object invoke(Object proxy, Method method, Object[] params) throws Throwable {\\n                        // proxy : 业务代理对象本身。用不到\\n                        // method: 代表当前正在被代理执行的方法！！\\n                        // params: 代表的是执行方法的参数，数组的形式!\\n                        long startTime = System.currentTimeMillis();\\n\\n                        // 真正触发真实的方法执行\\n                        Object rs = method.invoke(obj,params);\\n\\n                        long endTime = System.currentTimeMillis();\\n                        System.out.println(method.getName()+\\\"方法耗时：\\\"+(endTime - startTime)/1000.0+\\\"s\\\");\\n                        return rs; // 返回方法执行的结果！！\\n                    }\\n                });\\n    }\\n}\\n```\\n\\n# day13-XML和Dom4j、装饰模式、工厂模式、commons-io工具包\\n\\n## 第一章 Dom4j\\n\\n### Dom4j获取Document对象和根元素\\n\\ndom4j属于第三方技术，必须导入该框架！！\\n\\ndom4j安装步骤：\\n\\n- 去dom4j官网下载dom4j的框架：都是一些jar包。\\n- 把dom4j的核心jar包导入到当前项目中去。\\n- 在项目中创建一个文件夹：lib\\n- 将dom4j-2.1.1.jar文件复制到 lib 文件夹\\n- 在jar文件上点右键，选择 Add as Library -> 点击OK\\n- 在类中导包使用\\n\\nJava提供了Class下的一个方法：\\n\\n`public InputStream getResourceAsStream(String path)`\\n\\n 用于加载文件成为一个字节输入流返回！！\\n\\nDocument文档：\\n`Element getRootElement()`：获取根元素。\\n\\n> * 先导入dom4j框架\\n> * 创建一个dom4j的解析对象：SAXReader\\n> * 通过解析对象把xml文件解析成Document文档对象。\\n> * 从Document文档对象中获取我们想要的xml信息。\\n\\n```java\\n// 需求：解析books.xml文件成为一个Document文档树对象，得到根元素对象。\\n// 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\nSAXReader saxReader = new SAXReader();\\n\\n// 2.第一种方式（简单）：通过解析器对象去加载xml文件数据，成为一个Document文档树对象。\\n//Document document = saxReader.read(new File(\\\"Day13Demo/src/books.xml\\\"));\\n\\n// 3.第二种方式（代码多点）先把xml文件读成一个字节输入流\\n// 这里的“/”是直接去src类路径下寻找文件。\\nInputStream is = Dom4JDemo01.class.getResourceAsStream(\\\"/books.xml\\\");\\nDocument document = saxReader.read(is);\\n\\nSystem.out.println(document);\\n\\n// 4.从document文档树对象中提取根元素对象\\nElement root = document.getRootElement();\\nSystem.out.println(root.getName());\\n```\\n\\nElement元素的API:\\n\\n- `String getName()`:取元素的名称。\\n- `List<Element> elements()`:获取当前元素下的全部子元素（一级）\\n- `List<Element> elements(String name)`:获取当前元素下的指定名称的全部子元素（一级）\\n- `Element element(String name)`:获取当前元素下的指定名称的某个子元素，默认取第一个（一级）\\n\\n```java\\n// 需求：解析books.xml文件成为一个Document文档树对象，得到根元素对象。\\n// 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\nSAXReader saxReader = new SAXReader();\\n\\n// 2.第一种方式（简单）：通过解析器对象去加载xml文件数据，成为一个Document文档树对象。\\nDocument document = saxReader.read(new File(\\\"Day13Demo/src/books.xml\\\"));\\n\\n// 3.获取根元素对象\\nElement root = document.getRootElement();\\nSystem.out.println(root.getName());\\n\\n// 4.获取根元素下的全部子元素\\nList<Element> sonElements = root.elements();\\nfor (Element sonElement : sonElements) {\\n    System.out.println(sonElement.getName());\\n}\\n\\nSystem.out.println(\\\"-------------------\\\");\\n// 5.获取根源下的全部book子元素\\nList<Element> sonElements1 = root.elements(\\\"book\\\");\\nfor (Element sonElement : sonElements1) {\\n    System.out.println(sonElement.getName());\\n}\\nSystem.out.println(\\\"-------------------\\\");\\n// 6.获取根源下的指定的某个元素\\nElement son = root.element(\\\"user\\\");\\nSystem.out.println(son.getName());\\n\\n// 默认会提取第一个名称一样的子元素对象返回！\\nElement son1 = root.element(\\\"book\\\");\\nSystem.out.println(son1.attributeValue(\\\"id\\\"));\\n```\\n\\n### Dom4j获取属性信息\\n\\nElement元素的API:\\n\\n- `List<Attribute> attributes()`: 获取元素的全部属性对象。\\n- `Attribute attribute(String name)`:根据名称获取某个元素的属性对象。\\n- `String attributeValue(String var1)`:直接获取某个元素的某个属性名称的值。\\n\\nAttribute对象的API:\\n\\n- `String getName()`:  获取属性名称。\\n- `String getValue()`: 获取属性值。\\n\\n```java\\n// 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\nSAXReader saxReader = new SAXReader();\\n\\n// 2.第一种方式（简单）：通过解析器对象去加载xml文件数据，成为一个Document文档树对象。\\nDocument document = saxReader.read(new File(\\\"day13/src/books.xml\\\"));\\n\\n// 3.获取根元素对象。\\nElement root = document.getRootElement();\\n\\n// 4.获取book子元素\\nElement bookEle = root.element(\\\"book\\\");\\n\\n// 5.获取book元素的全部属性对象\\nList<Attribute> attributes = bookEle.attributes();\\nfor (Attribute attribute : attributes) {\\n    System.out.println(attribute.getName()+\\\"=>\\\"+attribute.getValue());\\n}\\n\\n// 6.获取Book元素的某个属性对象\\nAttribute descAttr = bookEle.attribute(\\\"desc\\\");\\nSystem.out.println(descAttr.getName()+\\\"--->\\\"+descAttr.getValue());\\n\\n// 7.可以直接获取元素的属性值\\nSystem.out.println(bookEle.attributeValue(\\\"id\\\"));\\nSystem.out.println(bookEle.attributeValue(\\\"desc\\\"));\\n```\\n\\n### Dom4j获取XML文本\\n\\n- `String elementText(String name)`: 可以直接获取当前元素的子元素的文本内容\\n- `String elementTextTrim(String name)`: 去前后空格,直接获取当前元素的子元素的文本内容\\n- `String getText()`:直接获取当前元素的文本内容。\\n- `String getTextTrim()`:去前后空格,直接获取当前元素的文本内容。\\n\\n```java\\n// 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\nSAXReader saxReader = new SAXReader();\\n\\n// 2.第一种方式（简单）：通过解析器对象去加载xml文件数据，成为一个Document文档树对象。\\nDocument document = saxReader.read(new File(\\\"Day13Demo/src/books.xml\\\"));\\n\\n// 3.获取根元素对象。\\nElement root = document.getRootElement();\\n\\n// 4.得到第一个子元素book\\nElement bookEle = root.element(\\\"book\\\");\\n\\n// 5.直接拿到当前book元素下的子元素文本值\\nSystem.out.println(bookEle.elementText(\\\"name\\\"));\\nSystem.out.println(bookEle.elementTextTrim(\\\"name\\\")); // 去前后空格\\nSystem.out.println(bookEle.elementText(\\\"author\\\"));\\nSystem.out.println(bookEle.elementTextTrim(\\\"author\\\")); // 去前后空格\\nSystem.out.println(bookEle.elementText(\\\"sale\\\"));\\nSystem.out.println(bookEle.elementTextTrim(\\\"sale\\\")); // 去前后空格\\n\\n// 6.先获取到子元素对象，再获取该文本值\\nElement bookNameEle = bookEle.element(\\\"name\\\");\\nSystem.out.println(bookNameEle.getText());\\nSystem.out.println(bookNameEle.getTextTrim());// 去前后空格\\n```\\n\\n### Dom4j解析案例\\n\\nContacts.xml 解析成===>` List<Contact>`\\n\\n首先定义一个`Contact`类\\n\\n```java\\n/**\\n <contact id=\\\"1\\\" vip=\\\"true\\\">\\n     <name>潘金莲</name>\\n     <gender>女</gender>\\n     <email>panpan@itcast.cn</email>\\n </contact>\\n */\\npublic class Contact {\\n    private int id ;\\n    private boolean vip;\\n    private String name ;\\n    private char sex ;\\n    private String email ;\\n\\n    public Contact() {\\n    }\\n\\n    public Contact(int id, boolean vip, String name, char sex, String email) {\\n        this.id = id;\\n        this.vip = vip;\\n        this.name = name;\\n        this.sex = sex;\\n        this.email = email;\\n    }\\n\\n    /**\\n     * 获取\\n     * @return id\\n     */\\n    public int getId() {\\n        return id;\\n    }\\n\\n    /**\\n     * 设置\\n     * @param id\\n     */\\n    public void setId(int id) {\\n        this.id = id;\\n    }\\n\\n    /**\\n     * 获取\\n     * @return vip\\n     */\\n    public boolean isVip() {\\n        return vip;\\n    }\\n\\n    /**\\n     * 设置\\n     * @param vip\\n     */\\n    public void setVip(boolean vip) {\\n        this.vip = vip;\\n    }\\n\\n    /**\\n     * 获取\\n     * @return name\\n     */\\n    public String getName() {\\n        return name;\\n    }\\n\\n    /**\\n     * 设置\\n     * @param name\\n     */\\n    public void setName(String name) {\\n        this.name = name;\\n    }\\n\\n    /**\\n     * 获取\\n     * @return sex\\n     */\\n    public char getSex() {\\n        return sex;\\n    }\\n\\n    /**\\n     * 设置\\n     * @param sex\\n     */\\n    public void setSex(char sex) {\\n        this.sex = sex;\\n    }\\n\\n    /**\\n     * 获取\\n     * @return email\\n     */\\n    public String getEmail() {\\n        return email;\\n    }\\n\\n    /**\\n     * 设置\\n     * @param email\\n     */\\n    public void setEmail(String email) {\\n        this.email = email;\\n    }\\n\\n    public String toString() {\\n        return \\\"Contact{id = \\\" + id + \\\", vip = \\\" + vip + \\\", name = \\\" + name + \\\", sex = \\\" + sex + \\\", email = \\\" + email + \\\"}\\\";\\n    }\\n}\\n```\\n\\n解析代码\\n\\n```java\\n// 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\nSAXReader saxReader = new SAXReader();\\n\\n// 2.第一种方式（简单）：通过解析器对象去加载xml文件数据，成为一个Document文档树对象。\\nDocument document = saxReader.read(new File(\\\"day13/src/Contacts.xml\\\"));\\n\\n// 3.获取根元素对象。\\nElement root = document.getRootElement();\\n\\n// 4.获取根元素下的全部子元素\\nList<Element> sonElements = root.elements();\\n\\n// 5.遍历子元素 封装成List集合对象\\nList<Contact> contactList = new ArrayList<>();\\nif(sonElements != null && sonElements.size() > 0) {\\n    for (Element sonElement : sonElements) {\\n        Contact contact = new Contact();\\n        contact.setId(Integer.valueOf(sonElement.attributeValue(\\\"id\\\")));\\n        contact.setVip(Boolean.valueOf(sonElement.attributeValue(\\\"vip\\\")));\\n        contact.setName(sonElement.elementText(\\\"name\\\"));\\n        contact.setSex(sonElement.elementText(\\\"gender\\\").charAt(0));\\n        contact.setEmail(sonElement.elementText(\\\"email\\\"));\\n        contactList.add(contact);\\n    }\\n}\\nSystem.out.println(contactList);\\n```\\n\\n### Xpath表达式\\n\\n用于检索XML中的某些信息\\n\\nXPath使用步骤：\\n\\n1. 导入dom4j框架。（XPath依赖于Dom4j技术,必须先倒入dom4j框架！）\\n1. 导入XPath独有的框架包。jaxen-1.1.2.jar\\n\\nXPath常用API:\\n\\n- `List<Node> selectNodes(String var1)`：检索出一批节点集合。\\n- `Node selectSingleNode(String var1)`：检索出一个节点返回。\\n\\nXPath提供的四种检索数据的写法：\\n\\n1. 绝对路径\\n2. 相对路径\\n3. 全文搜索\\n4. 属性查找\\n\\n> 1. 绝对路径： /根元素/子元素/子元素。\\n> 2. 相对路径： ./子元素/子元素。 (.代表了当前元素)\\n> 3. 全文搜索：\\n>    `//元素`  在全文找这个元素\\n>    `//元素1/元素2`  在全文找元素1下面的一级元素2\\n>    `//元素1//元素2  `在全文找元素1下面的全部元素2\\n> 4. 属性查找。\\n>    `//@属性名称`  在全文检索属性对象。\\n>    `//元素[@属性名称]`  在全文检索包含该属性的元素对象。\\n>    `//元素[@属性名称=值]`  在全文检索包含该属性的元素且属性值为该值的元素对象。\\n\\n```java\\npublic class XPathDemo {\\n\\n    //  1.绝对路径： /根元素/子元素/子元素。\\n    @Test\\n    public void path01() throws Exception {\\n        // 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\n        SAXReader saxReader = new SAXReader();\\n\\n        // 2.第二种方式（代码多点）先把xml文件读成一个字节输入流\\n        // 这里的“/”是直接去src类路径下寻找文件。\\n        InputStream is = Dom4JDemo01.class.getResourceAsStream(\\\"/Contact.xml\\\");\\n        Document document = saxReader.read(is);\\n        // 3.使用绝对路径定位全部的name名称\\n        List<Node> nameNodes = document.selectNodes(\\\"/contactList/contact/name\\\");\\n        for (Node nameNode : nameNodes) {\\n            System.out.println(nameNode.getText());\\n        }\\n    }\\n\\n    // 2.相对路径： ./子元素/子元素。 (.代表了当前元素)\\n    @Test\\n    public void path02() throws Exception {\\n        // 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\n        SAXReader saxReader = new SAXReader();\\n\\n        // 2.第二种方式（代码多点）先把xml文件读成一个字节输入流\\n        // 这里的“/”是直接去src类路径下寻找文件。\\n        InputStream is = Dom4JDemo01.class.getResourceAsStream(\\\"/Contact.xml\\\");\\n        Document document = saxReader.read(is);\\n\\n        // 3.得到根元素对象\\n        Element root = document.getRootElement();\\n\\n        // 4.从根元素开始检索\\n        // .代表当前根元素对象路径！直接找其下的contact下的name\\n        List<Node> nameNodes = root.selectNodes(\\\"./contact/name\\\");\\n        for (Node nameNode : nameNodes) {\\n            System.out.println(nameNode.getText());\\n        }\\n    }\\n\\n    // 3.全文搜索：\\n    //                \\\"//元素\\\"  在全文找这个元素\\n    //                \\\"//元素1/元素2\\\"  在全文找元素1下面的一级元素2\\n    //                \\\"//元素1//元素2\\\"  在全文找元素1下面的全部元素2\\n    @Test\\n    public void path03() throws Exception {\\n        // 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\n        SAXReader saxReader = new SAXReader();\\n\\n        // 2.第二种方式（代码多点）先把xml文件读成一个字节输入流\\n        // 这里的“/”是直接去src类路径下寻找文件。\\n        InputStream is = Dom4JDemo01.class.getResourceAsStream(\\\"/Contact.xml\\\");\\n        Document document = saxReader.read(is);\\n\\n        // 3.//name是指在整个xml文件中检索name节点！\\n        List<Node> nameNodes = document.selectNodes(\\\"//name\\\");\\n        for (Node nameNode : nameNodes) {\\n            System.out.println(nameNode.getText());\\n        }\\n        System.out.println(\\\"-----------------\\\");\\n        // 4.在全文中检索所有contact下的直接name节点\\n        List<Node> nameNodes1 = document.selectNodes(\\\"//contact/name\\\");\\n        for (Node nameNode : nameNodes1) {\\n            System.out.println(nameNode.getText());\\n        }\\n        System.out.println(\\\"-----------------\\\");\\n        // 5.在全文中检索所有contact下的所有name节点\\n        List<Node> nameNodes2 = document.selectNodes(\\\"//contact//name\\\");\\n        for (Node nameNode : nameNodes2) {\\n            System.out.println(nameNode.getText());\\n        }\\n    }\\n\\n    //   4.属性查找。\\n    //         //@属性名称  在全文检索属性对象。\\n    //          //元素[@属性名称]  在全文检索包含该属性的元素对象。\\n    //          //元素[@属性名称=值]  在全文检索包含该属性的元素且属性值为该值的元素对象。\\n    @Test\\n    public void path04() throws Exception {\\n        // 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\n        SAXReader saxReader = new SAXReader();\\n\\n        // 2.第二种方式（代码多点）先把xml文件读成一个字节输入流\\n        // 这里的“/”是直接去src类路径下寻找文件。\\n        InputStream is = Dom4JDemo01.class.getResourceAsStream(\\\"/Contact.xml\\\");\\n        Document document = saxReader.read(is);\\n\\n        // 3.检索全部属性对象\\n        List<Node> attributs = document.selectNodes(\\\"//@id\\\");\\n        for (Node attribut : attributs) {\\n            Attribute attr = (Attribute) attribut;\\n            System.out.println(attr.getName() + \\\"--->\\\"+attr.getValue());\\n        }\\n        System.out.println(\\\"---------------\\\");\\n        // 4.//元素[@属性名称]  在全文检索包含该属性的元素对象\\n        List<Node> nodeEles = document.selectNodes(\\\"//contact[@id]\\\");\\n        for (Node nodeEle : nodeEles) {\\n            System.out.println(nodeEle.getName());\\n        }\\n\\n        System.out.println(\\\"---------------\\\");\\n        // 5. //元素[@属性名称=值]  在全文检索包含该属性的元素且属性值为该值的元素对象。\\n        Node nodeEle = document.selectSingleNode(\\\"//contact[@id=2]\\\");\\n        Element ele = (Element) nodeEle;\\n        System.out.println(ele.elementTextTrim(\\\"name\\\"));\\n    }\\n}\\n```\\n\\n### 解析Mybatis的核心配置文件信息\\n\\n```java\\npublic class ParseXMLConfig {\\n    @Test\\n    public void parseXML() throws Exception {\\n        // 1.创建一个解析器对象\\n        SAXReader saxReader = new SAXReader();\\n        // 2.加载类路径下的xml文件成为一个document文档对象。\\n        Document document = saxReader.read(ParseXMLConfig.class.getResourceAsStream(\\\"/sqlMapConfig.xml\\\"));\\n        // 3.得到根元素对象\\n        Element root = document.getRootElement();\\n        // 4.获取子元素environments\\n        Element environments = root.element(\\\"environments\\\");\\n        // 5.获取子元素environment\\n        Element environment = environments.element(\\\"environment\\\");\\n        // 6.获取子元素dataSource\\n        Element dataSource = environment.element(\\\"dataSource\\\");\\n        // 7.获取 dataSource下的全部子元素\\n        List<Element>  properties = dataSource.elements();\\n        // 8.遍历他们\\n        for (Element property : properties) {\\n            System.out.println(property.attributeValue(\\\"name\\\")\\n                    +\\\"==>\\\"+property.attributeValue(\\\"value\\\"));\\n        }\\n    }\\n}\\n```\\n\\n## 第二章 设计模式\\n\\n### 工厂设计模型\\n\\n什么是工厂设计模式？\\n\\n- 工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一\\n- 这种类型的设计模式属于创建型模式，它提供了一种创建对象的方式\\n- 之前我们创建类对象时, 都是使用`new`对象的形式创建, 除`new`对象方式以外，工厂模式也可以创建对象\\n\\n工厂设计模式的作用：\\n\\n* 对象通过工厂的方法创建返回，工厂的方法可以为该对象进行加工和数据注入。\\n* 可以实现类与类之间的**解耦操作**\\n\\n> * 优点：工厂模式的存在可以改变创建对象的方式,解决类与类之间的耦合\\n> * 缺点：工厂设计模式多了一个工厂类\\n\\n`FactoryPattern`\\n\\n```java\\npublic class FactoryPattern {\\n    // 生产对象的方法：工厂方法\\n    public static Animal createAniaml(){\\n//        Dog dog = new Dog();\\n//        return dog;\\n        return new Cat();\\n    }\\n}\\n```\\n\\n创建对象可以使用\\n\\n```java\\nAnimal a = FactoryPattern.createAniaml();\\na.run();\\n```\\n\\n之后如果需要修改创建的对象，可以直接在`FactoryPattern`中修改对象创建\\n\\n### 装饰设计模式\\n\\n装饰模式指的是在不改变原类, 动态地扩展一个类的功能。\\n\\n思想：是创建一个新类，包装原始类，从而在新类中提升原来类的功能！！\\n\\n> 装饰模式可以在不改变原类的基础上对类中的方法进行扩展增强,实现原则为:\\n>\\n> 1. 定义父类\\n> 2. 定义原始类，继承父类，定义功能。\\n> 3. 定义装饰类，继承父类，包装原始类，增强功能！！\\n\\n`InputStream`\\n\\n```java\\npublic abstract class InputStream {\\n    public abstract void read();\\n    public abstract void close();\\n}\\n```\\n\\n`FileInputStream`\\n\\n```java\\npublic class FileInputStream extends InputStream {\\n    @Override\\n    public void read() {\\n        System.out.println(\\\"读取数据~~~\\\");\\n    }\\n\\n    @Override\\n    public void close() {\\n        System.out.println(\\\"关闭流~~~\\\");\\n    }\\n}\\n\\n```\\n\\n`BufferedInputStream`\\n\\n```java\\npublic class BufferedInputStream extends InputStream {\\n    private InputStream is ;\\n    public BufferedInputStrem(InputStream is){\\n        this.is = is;\\n    }\\n    @Override\\n    public void read() {\\n        System.out.println(\\\"开启高效缓冲读取~\\\");\\n        is.read();\\n    }\\n\\n    @Override\\n    public void close() {\\n        is.close();\\n    }\\n}\\n```\\n\\n`Demo`\\n\\n```java\\nInputStream is = new BufferedInputStrem(new FileInputStream());\\nis.read();\\nis.close();\\n```\\n\\n## 第三章 Commons-io包\\n\\n什么是`Commons-io`包？\\n\\ncommons-io是apache开源基金组织提供的一组有关IO操作的类库，可以挺提高IO功能开发的效率。commons-io工具包提供了很多有关io操作的类，见下表：\\n\\n| 包   | 功能描述 |\\n| ----------------------------------- | ------------------------------------------- |\\n| org.apache.commons.io | 有关Streams、Readers、Writers、Files的工具类 |\\n| org.apache.commons.io.input | 输入流相关的实现类，包含Reader和InputStream |\\n| org.apache.commons.io.output | 输出流相关的实现类，包含Writer和OutputStream |\\n| org.apache.commons.io.serialization | 序列化相关的类 |\\n\\n步骤：\\n\\n 1. 下载commons-io相关jar包；http://commons.apache.org/proper/commons-io/\\n 2. 把commons-io-2.6.jar包复制到指定的Module的lib目录中\\n 3. 将commons-io-2.6.jar加入到classpath中\\n\\n> `IOUtils`和`FileUtils`可以方便的复制文件和文件夹\\n\\n```java\\n// 1.完成文件复制！\\nIOUtils.copy(new FileInputStream(\\\"Day13Demo/src/books.xml\\\"), new FileOutputStream(\\\"Day13Demo/new.xml\\\"));\\n// 2.完成文件复制到某个文件夹下！\\nFileUtils.copyFileToDirectory(new File(\\\"Day13Demo/src/books.xml\\\"), new File(\\\"D:/itcast\\\"));\\n// 3.完成文件夹复制到某个文件夹下！\\nFileUtils.copyDirectoryToDirectory(new File(\\\"D:\\\\\\\\itcast\\\\\\\\约吧图片服务器\\\") , new File(\\\"D:\\\\\\\\\\\"));\\n\\n//  Java从1.7开始提供了一些nio, 自己也有一行代码完成复制的技术。\\nFiles.copy(Paths.get(\\\"Day13Demo/src/books.xml\\\")\\n        , new FileOutputStream(\\\"Day13Demo/new11.txt\\\"));\\n```\\n\\n## 第四章 Base64\\n\\nBase64是网络上最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法。\\n\\n在Java 8中，Base64编码已经成为Java类库的标准。\\n\\nJava 8 内置了 Base64 编码的编码器和解码器。\\n\\nBase64工具类提供了一套静态方法获取下面三种BASE64编解码器：\\n\\n- **基本：**输出被映射到一组字符A-Za-z0-9+/，编码不添加任何行标，输出的解码仅支持A-Za-z0-9+/。\\n- **URL：**输出映射到一组字符A-Za-z0-9+_，输出是URL和文件。\\n- **MIME：**输出隐射到MIME友好格式。输出每行不超过76字符，并且使用\'\\\\r\'并跟随\'\\\\n\'作为分割。编码输出最后没有行分割。\\n\\n**内嵌类**\\n\\n| 序号 | 内嵌类 & 描述                                                |\\n| :--- | :----------------------------------------------------------- |\\n| 1    | **static class Base64.Decoder**该类实现一个解码器用于，使用 Base64 编码来解码字节数据。 |\\n| 2    | **static class Base64.Encoder**该类实现一个编码器，使用 Base64 编码来编码字节数据 |\\n\\n**方法**\\n\\n| 序号 | 方法名 & 描述                                                |\\n| :--- | :----------------------------------------------------------- |\\n| 1    | **static Base64.Decoder getDecoder()**返回一个 Base64.Decoder ，解码使用基本型 base64 编码方案。 |\\n| 2    | **static Base64.Encoder getEncoder()**返回一个 Base64.Encoder ，编码使用基本型 base64 编码方案。 |\\n| 3    | **static Base64.Decoder getMimeDecoder()**返回一个 Base64.Decoder ，解码使用 MIME 型 base64 编码方案。 |\\n| 4    | **static Base64.Encoder getMimeEncoder()**返回一个 Base64.Encoder ，编码使用 MIME 型 base64 编码方案。 |\\n| 5    | **static Base64.Encoder getMimeEncoder(int lineLength, byte[] lineSeparator)**返回一个 Base64.Encoder ，编码使用 MIME 型 base64 编码方案，可以通过参数指定每行的长度及行的分隔符。 |\\n| 6    | **static Base64.Decoder getUrlDecoder()**返回一个 Base64.Decoder ，解码使用 URL 和文件名安全型 base64 编码方案。 |\\n| 7    | **static Base64.Encoder getUrlEncoder()**返回一个 Base64.Encoder ，编码使用 URL 和文件名安全型 base64 编码方案。 |\\n\\n> **注意：**Base64 类的很多方法从 **java.lang.Object** 类继承\\n\\n```java\\ntry {\\n    // 1-1.基本编码后结果。普通文本的编码\\n    String rs1 = Base64.getEncoder().encodeToString(\\\"黑马程序员\\\".getBytes());\\n    System.out.println(rs1); // 6buR6ams56iL5bqP5ZGY\\n\\n    // 1-2.基本解码后结果。普通文本的解码\\n    byte[] buffer = Base64.getDecoder().decode(rs1);\\n    System.out.println(new String(buffer));\\n\\n    // 2-1.URL编码\\n    String rs2 = Base64.getUrlEncoder().encodeToString(\\\"?loginName=黑马&passWord=123456\\\".getBytes());\\n    System.out.println(rs2);\\n    // 2-2 URL解码\\n    byte[] buffer2 = Base64.getUrlDecoder().decode(rs2);\\n    System.out.println(new String(buffer2));\\n\\n    // 3-1 MIME编码\\n    StringBuilder sb = new StringBuilder();\\n    for (int i = 0; i < 10; ++i) {\\n        sb.append(UUID.randomUUID().toString());\\n    }\\n\\n    String rs3 = Base64.getMimeEncoder().encodeToString(sb.toString().getBytes());\\n    System.out.println(rs3);\\n\\n    // 3-2 MIME解码\\n    byte[] buffer3 = Base64.getMimeDecoder().decode(rs3);\\n    System.out.println(new String(buffer3));\\n}catch(Exception e){\\n    System.out.println(\\\"Error :\\\" + e.getMessage());\\n}\\n```\\n\\n\",\"articleCover\":\"http://47.108.219.199:81/articles/a2fc5f9fc3d6c835e4e123757f282664.jpg\",\"articleTitle\":\"Java进阶知识精华汇总\",\"categoryName\":\"Java基础\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[\"Java\"],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',996,'madao','127.0.0.1','','2022-07-14 20:52:15',NULL),(1107,'评论模块','删除','/admin/comments','com.minzheng.blog.controller.CommentController.deleteComments','删除评论','[[731]]','DELETE','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',996,'madao','127.0.0.1','','2022-07-14 20:55:09',NULL),(1108,'评论模块','删除','/admin/comments','com.minzheng.blog.controller.CommentController.deleteComments','删除评论','[[730,729,728,727,726,725]]','DELETE','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',996,'madao','127.0.0.1','','2022-07-14 20:55:17',NULL),(1109,'留言模块','删除','/admin/messages','com.minzheng.blog.controller.MessageController.deleteMessages','删除留言','[[3939,3938]]','DELETE','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',996,'madao','127.0.0.1','','2022-07-14 20:55:26',NULL),(1110,'分类模块','新增或修改','/admin/categories','com.minzheng.blog.controller.CategoryController.saveOrUpdateCategory','添加或修改分类','[{\"categoryName\":\"Java基础\",\"id\":191}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',996,'madao','127.0.0.1','','2022-07-14 20:55:35',NULL),(1111,'用户信息模块','修改','/admin/users/role','com.minzheng.blog.controller.UserInfoController.updateUserRole','修改用户角色','[{\"nickname\":\"madao33\",\"roleIdList\":[1],\"userInfoId\":1}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',996,'madao','127.0.0.1','','2022-07-14 21:04:02',NULL),(1112,'用户信息模块','修改','/admin/users/disable','com.minzheng.blog.controller.UserInfoController.updateUserDisable','修改用户禁用状态','[{\"id\":1,\"isDisable\":0}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',996,'madao','127.0.0.1','','2022-07-14 21:06:13',NULL),(1113,'用户信息模块','修改','/admin/users/role','com.minzheng.blog.controller.UserInfoController.updateUserRole','修改用户角色','[{\"nickname\":\"madao\",\"roleIdList\":[2],\"userInfoId\":1006}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',996,'madao','127.0.0.1','','2022-07-14 21:06:21',NULL),(1114,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"# Java进阶简介\\n\\n主要的知识点来自于黑马程序员的视频：`BV1TE41177mP`\\n\\n\\n\\n# day1-复习回顾、静态、继承、引用类型使用\\n\\n## 定义类\\n\\n- 类名的首字母应该大写，满足**驼峰写法**\\n- 一个Java文件可以定义多个类。但是只有一个类是用`public`修饰，`public`修饰的类名必须称为`Java`文件名。\\n\\n- 类中有且仅有5大成分（五大金刚）\\n\\n  - **成员变量Field**：描述类或者对象的属性信息的。\\n  - **成员方法Method**：描述类或者对象的行为的。\\n  - **构造器（构造方法,Constructor）**: 初始化类的一个对象返回。\\n    - 有参构造器\\n    - 无参构造器\\n  - **代码块**\\n\\n  - **内部类**\\n\\n## 封装\\n\\n- 面向对象的三大**特征**之一：**封装，继承，多态**。 \\n- 形成了规范，即使毫无意义还是会这样写代码！\\n- 合理隐藏，合理暴露。\\n- 封装的规范：成员变量私有，方法一般公开，提供成套的`getter`和`setter`方法暴露成员变量的取值和赋值，`public`修饰符\\n- 封装的作用：提高安全性，提高代码的组件化思想。\\n- 封装已经成为`Java`代码的规范，即使毫无意义，我们也要这样写代码（成员变量私有，方法公开）\\n\\n## this关键字\\n\\n- `this`代表了当前对象的引用。\\n- `this`可以出现在构造器和方法中。\\n- `this`出现在构造器中代表构造器正在初始化的对象。\\n- `this`出现在方法中，哪个对象调用方法，`this`就代表哪个对象。\\n- `this`可以访问对象的成员变量，区分成员变量是局部的还是对象中的成员变量。\\n\\n## static关键字\\n\\n`Java`是通过成员变量是否有`static`修饰来区分是类的还是属于对象的\\n\\n* 没有`static`修饰的方法和变量是属于每个对象的\\n* 有`static`修饰的方法和成员变量属于类的\\n\\n按照有无`static`修饰，成员变量和方法可以分为：\\n\\n**成员变量**：\\n\\n* **静态成员变量**（类变量）：有`static`修饰的成员变量称为静态成员变量也叫类变量，属于类本身的，**直接用类名访问**即可。\\n* **实例成员变量**：无`static`修饰的成员变量称为实例成员变量，属于类的每个对象的，**必须用类的对象来访问**。\\n\\n> * 同一个类中访问静态成员变量可以省略类名不写\\n> * 对象也可以访问静态成员变量，但是不推荐，静态成员变量属于类，如果用对象访问静态成员变量容易混淆\\n\\n成员变量访问内存\\n\\n![image-20220427112225577](http://47.108.219.199:81/articles/image-20220427112225577.png)\\n\\n```java\\npublic class Student{\\n    // 1.静态成员变量:有static修饰，属于类本身，直接用类名访问即可！\\n    public static String schoolName = \\\"黑马\\\";\\n    // 2.实例成员变量:无static修饰，属于类的对象的，必须用对象访问！\\n    private String name;\\n    private int age ;\\n\\n    public static void main(String[] args) {\\n        // 1.类名.静态成员变量\\n        System.out.println(Student.schoolName);\\n        // 注意：同一个类中访问静态成员变量可以省略类名不写\\n        System.out.println(schoolName);\\n\\n        // 2.对象.实例成员变量\\n        //System.out.println(Student.name); // 报错！\\n        Student swk = new Student();\\n        swk.name = \\\"孙悟空\\\";\\n        System.out.println(swk.name);\\n        System.out.println(swk.age);\\n\\n        // 3.对象.静态成员变量(不推荐)\\n        // 静态成员变量属于类，直接用类名访问即可。\\n        System.out.println(swk.schoolName);\\n    }\\n}\\n```\\n\\n**成员方法**：\\n\\n* **静态方法**：有`static`修饰的成员方法称为静态方法也叫类方法，属于类本身的，**直接用类名访问**即可。\\n* **实例方法**：无`static`修饰的成员方法称为实例方法，属于类的每个对象的，**必须用类的对象**来访问。\\n\\n> * 静态方法属于类，有static修饰，直接用类名访问即可。\\n> * 实例方法属于对象，无static修饰，必须先创建对象，然后用对象来访问。\\n> * 静态方法也可以被对象共享访问，但是不推荐，因为静态方法直接用类名访问即可。\\n\\n![image-20220427143750503](http://47.108.219.199:81/articles/image-20220427143750503.png)\\n\\n```java\\npublic class Student {\\n    // 0.实例成员变量。\\n    private String name;\\n    private int age ;\\n\\n    // 1.静态方法：有static修饰，属于类，直接用类名访问即可！\\n    public static void inAddr(){\\n        System.out.println(\\\"我们都在天河区吉山村happy的学习Java!\\\");\\n    }\\n\\n    // 2.实例方法：无static修饰，属于对象，必须用对象访问！\\n    public void eat(){\\n        System.out.println(name + \\\"已经\\\"+age+\\\"岁，在吃好吃的！！\\\");\\n    }\\n\\n    public static void main(String[] args) {\\n        // a.类名.静态方法\\n        Student.inAddr();\\n        // 注意：在同一个类中访问静态成员可以省略类名不写！！\\n        inAddr();\\n\\n        // b.对象.实例方法\\n        // Student.eat(); // 报错了！\\n        Student zbj = new Student();\\n        zbj.name = \\\"猪刚鬣\\\";\\n        zbj.age = 1000;\\n        zbj.eat();\\n\\n        // c.对象.静态方法(不推荐)\\n        zbj.inAddr();\\n    }\\n}\\n```\\n\\n关于`static`常考的八类题：\\n\\n* 实例方法是否可以直接访问实例成员变量？可以的，因为它们都属于对象。\\n* 实例方法是否可以直接访问静态成员变量？可以的，静态成员变量可以被共享访问。\\n* 实例方法是否可以直接访问实例方法? 可以的，实例方法和实例方法都属于对象。\\n* 实例方法是否可以直接访问静态方法？可以的，静态方法可以被共享访问！\\n* 静态方法是否可以直接访问实例变量？ 不可以的，实例变量必须用对象访问！！\\n* 静态方法是否可以直接访问静态变量？ 可以的，静态成员变量可以被共享访问。\\n* 静态方法是否可以直接访问实例方法? 不可以的，实例方法必须用对象访问！！\\n* 静态方法是否可以直接访问静态方法？可以的，静态方法可以被共享访问！！\\n\\n> **也就是说实例方法啥都可以访问，静态方法只能访问静态方法或者静态变量**\\n\\n## 继承\\n\\n### 继承的概述\\n\\n面向对象的三大特征：封装、继承和多态\\n\\n继承是Java中一般到特殊的关系，是一种子类到父类的关系。例如：学生类继承了人类。  猫类继承了动物类。\\n\\n被继承的类称为：父类/超类。继承父类的类称为：子类\\n\\n* 继承可以**提高代码的复用性**\\n* 子类直接继承父类，就可以直接使用父类的这些代码了（相同代码重复利用）\\n\\n子类继承了一个父类，子类就可以直接得到父类的属性（成员变量）和行为（方法）了。\\n\\n### 继承的例子\\n\\n```java\\nclass Animal{\\n\\n}\\n\\nclass Cat extends Animal{\\n\\n}\\n```\\n\\n> - 继承的优势可以把相同的代码定义在父类中，子类可以直接继承使用。\\n> - 这样就可以**提高代码的复用性**：相同代码只需要在父类中写一次就可以了。\\n\\n### 子类不能继承父类的内容\\n\\n- 子类继承父类，子类就得到了父类的属性和行为。\\n- 但是并非所有父类的属性和行为等子类都可以继承。\\n\\n**子类不能继承父类的东西**：子类不能继承父类的构造器，子类有自己的构造器。（没有争议的）\\n\\n有争议的观点（拓展）：\\n\\n**子类是否可以继承父类的私有成员**（私有成员变量，私有成员方法）?\\n\\n* **子类是可以继承父类的私有成员的，只是不能直接访问而已**。\\n* 以后可以暴力去访问继承自父类的私有成员~~~\\n\\n**子类是否可以继承父类的静态成员？**\\n\\n* **子类是不能继承父类的静态成员的**\\n* **子类只是可以访问父类的静态成员**，父类的静态成员只有一份可以被子类共享访问。\\n* **共享并非继承**\\n\\n### 成员变量的访问特点\\n\\n**就近原则**：子类有找子类，子类没有找父类，父类没有就报错\\n\\n```java\\nclass Animal{\\n    public String name = \\\"动物名称\\\";\\n}\\n\\nclass Cat extends Animal{\\n    public String name = \\\"子类名称\\\";\\n    public void show(){\\n        String name = \\\"局部名称\\\";\\n        System.out.println(name); // 局部名称\\n        System.out.println(this.name); // 子类名称\\n        System.out.println(super.name); // 父类名称\\n    }\\n}\\n```\\n\\n> - `this`代表了当前对象的引用，可以用于访问当前子类对象的成员变量。\\n> - `super`代表了父类对象的引用，可以用于访问父类中的成员变量。\\n\\n### 成员方法的访问特点\\n\\n就近原则：子类有找子类，子类没有找父类，父类没有就报错\\n\\n子类对象优先使用子类已有的方法，也就是说父类的方法被重写\\n\\n```java\\npublic class TestDemo {\\n    public static void main(String[] args) {\\n        Cat cat = new Cat();\\n        cat.run(); // 子类的\\n        cat.eat(); // 父类的\\n        // cat.go(); // 报错！\\n    }\\n}\\n\\nclass Animal{\\n    public void run(){\\n        System.out.println(\\\"动物可以跑~~~~\\\");\\n    }\\n\\n    public void eat(){\\n        System.out.println(\\\"吃东西~~~~\\\");\\n    }\\n}\\n\\nclass Cat extends Animal {\\n    public void run(){\\n        System.out.println(\\\"🐱跑的贼溜~~~~\\\");\\n    }\\n}\\n```\\n\\n### 方法重写\\n\\n子类继承了父类，子类就得到了父类的某个方法。但是子类觉得父类的这个方法不好用或者无法满足自己的需求，子类重写一个与父类申明一样的方法来覆盖父类的该方法，子类的这个方法就进行了方法重写。\\n\\n方法重写的校验注解： `@Override`\\n\\n- `Java`建议在重写的方法上面加上一个`@Override`注解。\\n- 方法一旦加了这个注解，那**就必须是成功重写父类**的方法，否则报错！\\n- `Override`优势：**可读性好，安全，优雅**\\n\\n方法重写的具体要求：\\n\\n* 子类重写方法的**名称和形参列表必须与父类被重写方法一样**。\\n* 子类重写方法的返回值类型申明要么与父类一样，要么比父类方法**返回值类型范围更小**。（以后再了解）\\n* 子类重写方法的修饰符权限应该与父类被重写方法的**修饰符权限相同或者更大**。（以后再了解）\\n* 子类重写方法申明抛出的异常应该与父类被重写方法申明抛出的**异常一样或者范围更小**！（以后再了解）\\n\\n```java\\nclass Wolf extends Animal{\\n    // 进行了方法重写！！\\n    // 子类重写方法的名称和形参列表必须与父类被重写方法一样\\n    // 子类重写方法的返回值类型申明要么与父类一样，要么比父类方法返回值类型范围更小\\n    // 子类重写方法的修饰符权限应该与父类被重写方法的修饰符权限相同或者更大\\n    @Override\\n    public void run(){\\n        System.out.println(\\\"🐺跑的贼快~~~\\\");\\n    }\\n}\\n\\nclass Animal{\\n    public void run(){\\n        System.out.println(\\\"动物可以跑步~~~\\\");\\n    }\\n}\\n```\\n\\n> - 方法重写是子类重写一个与父类申明一样的方法覆盖父类的方法。\\n> - 方法重写建议加上`@Override`注解。\\n> - 方法重写的核心要求：方法名称形参列表必须与被重写方法一致！！\\n> - 建议**申明不变，重新实现**。\\n\\n调用父类被重写的方法使用`super`\\n\\n```java\\nclass SportMan extends People{\\n    @Override\\n    public void run(){\\n        System.out.println(\\\"运动员跑的贼快~~~~~\\\");\\n    }\\n\\n    public void go(){\\n        super.run(); // 父类被重写的方法\\n        run(); // 子类的\\n    }\\n}\\n\\nclass People{\\n    public void run(){\\n        System.out.println(\\\"人会跑~\\\");\\n    }\\n}\\n```\\n\\n> `super`可以用在子类的实例方法中调用父类被重写的方法\\n\\n静态方法和私有方法**不可以**被重写\\n\\n```java\\nclass Mac extends Computer{\\n//    @Override\\n    public void go(){\\n    }\\n\\n    // @Override\\n    public static void test(){\\n    }\\n}\\n\\nclass Computer{\\n    public static void test(){\\n        System.out.println(\\\"super test\\\");\\n    }\\n\\n    private void go(){\\n\\n    }\\n}\\n```\\n\\n### 继承后构造器的特点\\n\\n子类的全部构造器默认一定会**先访问父类的无参数构造器，再执行子类自己的构造器**，主要的原因是\\n\\n* 子类的构造器的第一行默认有一个`super()`调用父类的无参数构造器，写不写都存在\\n* 子类继承父类，子类就得到了父类的属性和行为\\n* 当我们调用子类构造器初始化子类对象数据的时候，必须先调用父类构造器初始化继承自父类的属性和行为\\n\\n### super调用父类构造器\\n\\n`super(...)`可以根据参数选择调用父类的某个构造器\\n\\n```java\\nclass Monkey extends Animal{\\n\\n    public Monkey(String name, int age, char sex) {\\n        super(name , age , sex) ; // 根据参数匹配调用父类构造器\\n    }\\n\\n    public void eatBanana(){\\n        System.out.println(getName()+\\\"-->\\\"+getAge()+\\\"-->\\\"+getSex()+\\\"在吃🍌~~~\\\");\\n    }\\n}\\n\\nclass Animal{\\n    private String name;\\n    private int age;\\n    private char sex;\\n\\n    public Animal() {\\n    }\\n\\n    public Animal(String name, int age, char sex) {\\n        this.name = name;\\n        this.age = age;\\n        this.sex = sex;\\n    }\\n\\n    public String getName() {\\n        return name;\\n    }\\n\\n    public void setName(String name) {\\n        this.name = name;\\n    }\\n\\n    public int getAge() {\\n        return age;\\n    }\\n\\n    public void setAge(int age) {\\n        this.age = age;\\n    }\\n\\n    public char getSex() {\\n        return sex;\\n    }\\n\\n    public void setSex(char sex) {\\n        this.sex = sex;\\n    }\\n}\\n```\\n\\n`super`调用父类构造器的内存分布图\\n\\n![image-20220505160400907](http://47.108.219.199:81/articles/image-20220505160400907.png)\\n\\n### this和super关键字使用总结\\n\\n`this`代表了当前对象的引用（继承中指代子类对象）：\\n\\n* `this` 子类成员变量\\n* `this`子类成员方法\\n* `this(...)` 可以根据参数匹配访问本类其他构造器\\n\\n`super`代表了父类对象的引用（继承中指代了父类对象空间）\\n\\n* `super` 父类成员变量\\n* `super`父类的成员方法\\n* `super(...)`可以根据参数匹配访问父类的构造器\\n\\n`this(...)`和`super(...)`**必须放在构造器的第一行**，否则报错\\n\\n所以`this(...)`和`super(...)`**不能同时出现在构造器中**\\n\\n```java\\nclass Student{\\n    private String name ;\\n    private int age ;\\n    private String schoolName ;\\n\\n    public Student() {\\n    }\\n\\n    public Student(String name , int age){\\n        // 借用兄弟构造器的功能！\\n        this(name , age , \\\"黑马\\\");\\n    }\\n\\n    public Student(String name, int age, String schoolName) {\\n        this.name = name;\\n        this.age = age;\\n        this.schoolName = schoolName;\\n    }\\n\\n    public String getName() {\\n        return name;\\n    }\\n\\n    public void setName(String name) {\\n        this.name = name;\\n    }\\n\\n    public int getAge() {\\n        return age;\\n    }\\n\\n    public void setAge(int age) {\\n        this.age = age;\\n    }\\n\\n    public String getSchoolName() {\\n        return schoolName;\\n    }\\n\\n    public void setSchoolName(String schoolName) {\\n        this.schoolName = schoolName;\\n    }\\n}\\n```\\n\\n### 继承的特点\\n\\n* **单继承**：一个类只能继承一个直接父类\\n\\n  * 如果是多继承可能会出现类的**二义性**\\n\\n    ```java\\n    class A{\\n        public void test(){\\n            System.out.println(\\\"A\\\");\\n        }\\n    }\\n    class B{\\n        public void test(){\\n            System.out.println(\\\"B\\\");\\n        }\\n    }\\n    class C extends A , B {\\n        public static void main(String[] args){\\n            C c = new C();\\n            c.test(); // 出现了类的二义性！所以Java不能多继承！！\\n        }\\n    }\\n    ```\\n\\n* **多层继承**：一个类可以间接继承多个父类\\n\\n* 一个类可以有多个子类\\n\\n* 一个类要么默认继承了`Object`类，要么间接继承了`Object`类，`Object`类是`Java`的祖宗类\\n\\n## 引用类型作为方法参数和返回值\\n\\n* 除了基本数据类型都是引用数据类型\\n* 引用类型可以作为方法的参数类型和返回值类型\\n* 引用数据类型可以在一切可以使用类型的地方使用\\n\\n```java\\npublic class TestDemo {\\n    public static void main(String[] args) {\\n        Dog jinMao = new Dog();\\n        go(jinMao);\\n\\n        System.out.println(\\\"--------------\\\");\\n        Dog dog = createDog();\\n        dog.run();\\n    }\\n\\n    // 引用类型作为方法的返回值:创建一个狗对象返回！\\n    public static Dog createDog(){\\n//        Dog taiDi = new Dog();\\n//        return taiDi;\\n         return new Dog();\\n    }\\n\\n    // 引用类型作为方法参数: 提供一个方法让狗进入比赛~~~\\n    public static void go(Dog a){\\n        System.out.println(\\\"比赛开始。。。\\\");\\n        a.run();\\n        System.out.println(\\\"比赛结束。。。\\\");\\n    }\\n}\\n\\nclass Dog{\\n    public void run(){\\n        System.out.println(\\\"🐕跑的贼溜~~~\\\");\\n    }\\n}\\n```\\n\\n## 引用类型作为成员变量的类型\\n\\n`Address.java`\\n\\n```java\\npublic class Address {\\n    private String code;\\n    private String name;\\n    private double x;\\n    private double y;\\n\\n    public Address() {\\n    }\\n\\n    public Address(String code, String name, double x, double y) {\\n        this.code = code;\\n        this.name = name;\\n        this.x = x;\\n        this.y = y;\\n    }\\n}\\n```\\n\\n`Student.java`\\n\\n```java\\npublic class Student {\\n    private String name;\\n    private int age ;\\n    // 地址信息:复合类型。\\n    // 引用类型作为成员变量的类型\\n    private Address address;\\n}\\n```\\n\\n# day2-抽象类、接口、代码块、final、单例、枚举\\n\\n## 抽象类\\n\\n### 抽象类的概述\\n\\n父类指导之类一定要完成某个功能，但是每个之类完成的情况是不一样的。子类以后也只会用自己重写的功能，那么父类的该功能就可以定义成抽象方法，子类重写调用自己的方法。所以父类的该功能就可以定义为抽象的方法。拥有冲向方法的类必须定义为抽象类。\\n\\n> **抽象方法**：没有方法体，只有方法签名，必须用`abstract`修饰的方法就是抽象方法。\\n>\\n> **抽象类**：拥有抽象方法的类必须定义成抽象类，必须用`abstract`修饰。\\n\\n```java\\nclass Wolf extends Animal{\\n    @Override\\n    public void run(){\\n        System.out.println(\\\"🐺跑的贼贼溜~~~\\\");\\n    }\\n}\\n\\n// 抽象类：拥有了抽象方法的类必须定义成抽象类。抽象类必须加上abstract修饰。\\nabstract class Animal{\\n    // 抽象方法：没有方法体，只有方法签名，必须加上abstract修饰。\\n    public abstract void run();\\n}\\n```\\n\\n### 抽象类的使用\\n\\n抽象类是为了被子类继承\\n\\n```java\\nclass Manager extends Employee{\\n    @Override\\n    public void work() {\\n        System.out.println(\\\"班主任需要管理班级~~~~\\\");\\n    }\\n\\n     @Override\\n     public void run() {\\n\\n     }\\n }\\n\\nclass Techer extends Employee{\\n    @Override\\n    public void work() {\\n        System.out.println(\\\"老师需要授课~~~~\\\");\\n    }\\n\\n    @Override\\n    public void run() {\\n\\n    }\\n}\\n\\n// 员工（老师，班主任 ） 每个员工都要工作，但是工作内容不一样。\\nabstract class Employee{\\n    public abstract void work();\\n    public abstract void run();\\n}\\n```\\n\\n> * 一个类继承了抽象类，必须重写完抽象类的全部抽象方法，否则这个类必须定义成抽象类。\\n> * 因为拥有抽象方法的类必须定义成抽象类。\\n\\n### 抽象类的特征\\n\\n抽象类的特征是：**有得有失**\\n\\n* 抽象类得到了拥有对象的能力\\n* 抽象类失去了创建对象的能力，即抽象类不能创建对象\\n\\n> **抽象类是否有构造器，是否可以创建对象**，为什么?\\n>\\n> 抽象类作为类一定**有构造器**，而且必须有构造器。**提供给子类继承后调用父类构造器**使用的。\\n>\\n> 抽象类虽然有构造器，但是抽象类**绝对不能创建对象**。抽象类中可能存在抽象方法，**抽象方法不能执行**。抽象在学术上本身意味着不能实例化。\\n\\n### 抽象类的意义\\n\\n抽象类存在的意义有两点：\\n\\n* **被继承**：抽象类就是为了被子类继承，否则抽象类将毫无意义\\n* 抽象类体现的**模板思想**：部分实现，部分抽象，可以使用抽象类设计一个模板模式\\n\\n### 抽象类设计模板模式\\n\\n**设计模式**：就是前人或者软件行业在生产实战中发现的优秀软件设计架构和思想。后来者可以直接用这些架构或者思想就可以设计出优秀的软件，提高开发效率，提高软件可扩展性和可维护性。\\n\\n模板设计模式就是一种经典的设计模式思想\\n\\n**模板设计模型的作用**：优化代码架构，提高代码的复用性，相同功能的重复代码无需重复书写。可以做到部分实现，部分抽象，抽象的东西交给使用模板的人重写实现\\n\\n```java\\nclass Teacher extends Template{\\n    @Override\\n    public String writeMain() {\\n        return \\\"\\\\t\\\\t我爸就是好，有多好，做他儿子才能懂~~~\\\";\\n    }\\n}\\n\\nclass Student extends Template{\\n    @Override\\n    public String writeMain() {\\n        return \\\"\\\\t\\\\t我爸爸很牛，我爸爸是马云，就是爽，很有钱~~~~\\\";\\n    }\\n}\\n// 1.写一个模板类：代表了作文模板。\\nabstract class Template{\\n    private String title = \\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t《我的爸爸》\\\";\\n    private String one = \\\"\\\\t\\\\t我的爸爸很牛逼，到底有多牛呢，请看如下说明：\\\";\\n    private String last = \\\"\\\\t\\\\t以上就是我的爸爸，简直太好了，下辈子还要做他儿子！\\\";\\n\\n    // 2.提供一个写作文方法\\n    public void write(){\\n        System.out.println(title);\\n        System.out.println(one);\\n        // 正文：正文部分模板是不知道怎么写的！应该把正文部分定义成抽象方法\\n        // 交给使用模板的子类重写！\\n        System.out.println(writeMain());\\n        System.out.println(last);\\n    }\\n\\n    // 正文部分定义成抽象方法，交给子类重写！！\\n    public abstract String writeMain();\\n}\\n```\\n\\n### 抽象类的注意事项\\n\\n1. 抽象类不能创建对象，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象。\\n   理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。\\n\\n2. 抽象类一定有而且是必须有构造器，是供子类创建对象时，初始化父类成员使用的。\\n   理解：子类的构造器中，有默认的super()，需要访问父类构造器。\\n\\n3. 抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。\\n\\n4. 抽象类的子类，必须重写抽象父类中所有的抽象方法，否则子类也必须定义成抽象类。\\n\\n5. 抽象类存在的意义是为了被子类继承，抽象类体现的是模板思想。\\n   理解：抽象类中已经实现的是模板中确定的成员，\\n   抽象类不确定如何实现的定义成抽象方法，交给具体的子类去实现。\\n\\n## 接口\\n\\n### 接口的概述\\n\\n接口体现的是规范思想，实现接口的子类必须重写完接口的全部抽象方法\\n\\n接口是更加彻底的抽象，在JDK 1.8之前接口中只能是抽象方法和常量\\n\\n定义格式\\n\\n```java\\n修饰符 interface 接口名称{\\n\\t// 在JDK 1.8 之前接口中只能是抽象方法和常量\\n}\\n```\\n\\n成分研究（JDK 1.8之前）\\n\\n* 接口中抽象方法默认加上`public abstract`修饰，可以省略不写\\n\\n* 常量是指有`public static final`修饰的成员变量，**有且仅能被复制一次**，值不能改变\\n\\n  常量名称规范要求全部大写，多个单词下划线连接\\n\\n  常量修饰`public static final`可以省略不写，默认会加上\\n\\n```java\\npublic interface InterfaceDemo {\\n     // 2.常量\\n     // 只有一份，在执行的过程中其值必须有，但是不能改变！\\n     // 常量是public static final修饰\\n     // 常量的名称建议字母全部大写，多个单词用“_”连接\\n     // 在接口中常量可以省略public static final不写，默认会加上该三个修饰符！\\n     //public static final String SCHOOL_NAME = \\\"黑马\\\";\\n     String SCHOOL_NAME = \\\"黑马\\\";\\n\\n\\n     // 1.抽象方法\\n     // public abstract void run();\\n     // 接口中的抽象方法默认会加上public abstract修饰,所以可以省略不写。\\n     void run();\\n     void work();\\n}\\n```\\n\\n### 接口的基本实现\\n\\n子类和父类是继承，实现类和接口是实现关系。接口是用来被类实现的，实现接口的类是实现类\\n\\n子类–>继承–>父类\\n\\n实现类–>实现–>接口\\n\\n类实现接口的格式：\\n\\n```java\\n修饰符 class 实现类名称 implements 接口1,接口2,接口3,....{\\n\\n}\\n```\\n\\n例如\\n\\n```java\\n// 实现类 实现 SportMan接口\\n// 一个类实现接口必须重写完接口中全部抽象方法，否则这个类必须定义成抽象类！！\\nclass PingPongMan implements SportMan{\\n    private String name;\\n    public PingPongMan(String name){\\n        this.name = name;\\n    }\\n    @Override\\n    public void run() {\\n        System.out.println(name+\\\"必须天天运动。正在🏃训练~~~‍\\\");\\n    }\\n\\n    @Override\\n    public void win() {\\n        System.out.println(name+\\\"参加比赛中~~~‍\\\");\\n    }\\n}\\n\\n// 定义一个接口：表示运动员的规范\\ninterface SportMan{\\n    void run(); // 跑步\\n    void win(); // 比赛得奖\\n}\\n```\\n\\n> * 接口的使命就是要求实现接口的类必须有`run()`和`win()`方法\\n> * 接口可以多实现\\n> * 一个类实现接口必须重写完接口中全部抽象方法，否则这个类必须定义成抽象类\\n\\n### 接口的多实现\\n\\n* 类与类是单继承\\n* 类和接口是多实现\\n\\n一个类如果实现了多个接口，必须重写完全部接口中的全部抽象方法，否则这个类必须定义为抽象类\\n\\n```java\\nclass PingPongMan implements SportMan , Law{\\n\\n    @Override\\n    public void rule() {\\n\\n    }\\n\\n    @Override\\n    public void run() {\\n\\n    }\\n\\n    @Override\\n    public void win() {\\n\\n    }\\n}\\n\\ninterface Law{\\n    void rule();\\n    void run();\\n}\\n\\ninterface SportMan{\\n    void run();\\n    void win();\\n}\\n```\\n\\n### 接口与接口的多继承\\n\\n* 类与类是单继承关系：一个类只能继承一个直接父类\\n* 类与接口是多继承关系：一个类可以同时实现多个接口\\n* 接口与接口是多继承关系：一个接口可以同时继承多个接口\\n\\n接口与接口的多继承，用一个接口合并多个接口\\n\\n```java\\nclass PingPongMan implements SportMan{\\n\\n    @Override\\n    public void eat() {\\n\\n    }\\n\\n    @Override\\n    public void rule() {\\n\\n    }\\n\\n    @Override\\n    public void run() {\\n\\n    }\\n\\n    @Override\\n    public void goAbroad() {\\n\\n    }\\n}\\n\\ninterface Food{\\n    void eat();\\n}\\n\\ninterface Law{\\n    void rule();\\n}\\n\\n// 接口与接口的多继承！\\ninterface SportMan extends Law , Food {\\n    void run();\\n    void goAbroad();\\n}\\n```\\n\\n### JDK1.8之后接口新增的方法\\n\\nJDK1.8开始之后接口新增的三个方法，了解即可\\n\\n* **默认方法**\\t就是之前写的实例方法\\n  * 必须用`default`修饰\\n  * 默认会加`public`修饰\\n  * 只能用接口的实现类的对象来调用\\n* **静态方法**\\n  * 可以直接加`static`修饰\\n  * 默认会加`public`修饰\\n  * 接口的静态方法只能用接口的类名称调用\\n* **私有方法**    从JDK 1.9开始才支持的\\n  * 其实就是私有的实例方法，必须加`private`修饰\\n  * 只能在**本接口**被其他的默认方法或者私有方法访问\\n\\n```java\\npublic class InterfaceDemo {\\n    public static void main(String[] args) {\\n        // 1.默认方法调用：必须用接口的实现类对象调用。\\n        PingPongMan zjk = new PingPongMan();\\n        zjk.run();\\n        zjk.work();\\n\\n        // 2.接口的静态方法必须用接口的类名本身来调用。\\n        InterfaceJDK8.inAddr();\\n    }\\n}\\n\\nclass PingPongMan implements InterfaceJDK8{\\n    @Override\\n    public void work() {\\n        System.out.println(\\\"工作中。。。\\\");\\n    }\\n}\\n\\ninterface InterfaceJDK8{\\n    // 之前的抽象方法！！\\n    void work();\\n\\n    // a.默认方法（就是之前写的普通实例方法）\\n    // 必须用接口的实现类的对象来调用。\\n    default void run(){\\n        go();\\n        System.out.println(\\\"开始跑步🏃‍~~~~\\\");\\n    }\\n\\n    // b.静态方法\\n    // 注意：接口的静态方法必须用接口的类名本身来调用\\n    static void inAddr(){\\n        System.out.println(\\\"我们在吉山区~~~~\\\");\\n    }\\n\\n    // c.私有方法（就是私有的实例方法）: JDK 1.9才开始有的。\\n    //  -- 只能在本接口中被其他的默认方法或者私有方法访问。\\n    private void go(){\\n        System.out.println(\\\"开始。。\\\");\\n    }\\n}\\n```\\n\\n### 接口的注意事项\\n\\n* 如果实现了多个接口，多个接口存在同名的**静态方法**并不会从冲突，原因是只能通过各自接口方法访问各自静态方法\\n* 当一个类，即继承一个父类，又实现若干个接口时，父类的成员方法与接口中的默认方法重名时，之类**就近**选择执行父类的成员方法\\n* 当一个类实现多个接口时，多个接口存在同名的默认方法，实现类必须重写这个方法\\n\\n## 代码块\\n\\n代码块按照有无`static`修饰可以分为：静态代码块、实例代码块\\n\\n### 静态代码块\\n\\n静态代码块：必须用`static`修饰，必须放在类下，与类一起优先加载执行\\n\\n静态代码块可以用于执行类的方法之前进行静态资源的初始化操作\\n\\n```java\\npublic class CodeDemo01 {\\n    public static String schoolName ;\\n    public static ArrayList<String> lists = new ArrayList<>();\\n\\n    // 静态代码块,属于类，与类一起加载一次!\\n    static {\\n        System.out.println(\\\"静态代码块被触发执行~~~~~~~\\\");\\n        // 在静态代码块中进行静态资源的初始化操作\\n        schoolName = \\\"黑马\\\";\\n        lists.add(\\\"3\\\");\\n        lists.add(\\\"4\\\");\\n        lists.add(\\\"5\\\");\\n    }\\n\\n    public static void main(String[] args) {\\n        System.out.println(schoolName);\\n        System.out.println(lists);\\n    }\\n}\\n```\\n\\n### 实例代码块\\n\\n* 实例代码块直接用`{}`括起来，无需`static`修饰\\n* 会和类的对象一起加载，每次创建对象的时候，实例代码块会被加载且自动执行一次\\n* 实例代码块的代码在底层实际上是提取到每个构造器中去执行的，**实例代码块属于对象**\\n* 实例代码块可以在创建对象之前进行实例资源的初始化操作\\n\\n```java\\npublic class CodeDemo02 {\\n    private String name;\\n    private ArrayList<String> lists = new ArrayList<>();\\n    // 实例代码块！属于对象！与对象一起加载!\\n    {\\n        name = \\\"小手\\\";\\n        lists.add(\\\"东\\\");\\n        lists.add(\\\"南\\\");\\n        lists.add(\\\"西\\\");\\n        lists.add(\\\"北\\\");\\n        System.out.println(\\\"实例代码块被触发执行一次~~~~~~~~\\\");\\n    }\\n\\n    public CodeDemo02(){\\n\\n    }\\n    public CodeDemo02(String name){\\n\\n    }\\n\\n    public static void main(String[] args) {\\n        CodeDemo02 c = new CodeDemo02();\\n        System.out.println(c.name);\\n        System.out.println(c.lists);\\n        new CodeDemo02();\\n        new CodeDemo02();\\n    }\\n}\\n```\\n\\n## final关键词\\n\\n`final`可以用于修饰类、方法、变量\\n\\n* `final`修饰类：类不能被继承了\\n* `final`修饰方法：方法不能被重写\\n* `final`修饰变量：变量有且仅能被赋值一次\\n  * 局部变量-只能赋值一次，不能在更改\\n  * 实例成员变量\\n    * 显示初始化，在定义成员变量的时候立马赋值\\n    * 实例代码块中赋值一次\\n    * 构造器初始化，在构造器中赋值一次\\n\\n`final`和`abstract`的关系\\n\\n互斥关系，不能同时修饰类或者同时修饰方法\\n\\n**常量**：有`public static final`修饰，名称字母全部大写，多个单词用下划线连接\\n\\n## 单例设计模式\\n\\n**单例**的意思是一个类永远只存在一个对象，不能创建多个对象\\n\\n* 开发中有很多类的对象我们只需要一个对象，例如虚拟机，任务管理器对象\\n* 对象越多越占内存，有时候只需要一个对象就可以实现业务，单例可以节约内存，提高性能\\n\\n### 饿汉单例设计模式\\n\\n通过类获取单例对象的时候，对象已经提前准备做好了\\n\\n设计步骤：\\n\\n* 定义一个类，把**构造器私有**\\n* 定义一个静态变量存储一个对象\\n* 提供一个返回单例对象的方法\\n\\n```java\\n// 饿汉单例设计模式\\nclass Singleton01{\\n    //  b.定义一个静态变量存储一个对象( 在用类获取对象的时候，对象已经提前为你创建好了。)\\n    private static final Singleton01 INSTANCE = new Singleton01();\\n    //  a.定义一个类，把构造器私有。\\n    private Singleton01(){\\n    }\\n    // c.提供一个返回单例对象的方法。\\n    public static Singleton01 getInstance(){\\n        return INSTANCE;\\n    }\\n}\\n```\\n\\n### 懒汉单例设计模式\\n\\n通过类获取单例对象的时候发现没有对象才会去创建一个对象\\n\\n设计步骤：\\n\\n* 定义一个类，把**构造器私有**\\n* 定义一个静态成员变量用于存储一个对象\\n* 提供一个返回单例对象的方法，判断对象不存在才创建一次，存在直接返回\\n\\n```java\\n// 懒汉单例设计模式\\nclass Singleton02{\\n    //  b.定义一个静态变量存储一个对象(这里不能创建对象，需要的时候才创建，这里只是一个变量用于存储对象！)\\n    public static Singleton02  instance ;\\n\\n    //   a.定义一个类，把构造器私有。\\n    private Singleton02(){\\n\\n    }\\n    //  c.提供一个返回单例对象的方法。\\n    public static Singleton02 getInstance(){\\n        if(instance == null){\\n            // 第一次来拿单例对象！需要创建一次对象，以后直接返回！！\\n            instance = new Singleton02();\\n        }\\n        return instance;\\n    }\\n}\\n```\\n\\n## 枚举\\n\\n枚举类的作用：是为了做信息的标志和信息分类\\n\\n### 枚举类基本语法\\n\\n```java\\n修饰符 enum 枚举名称{\\n\\t// 第一行罗列的必须的枚举类的对象名称\\n}\\n```\\n\\n例如\\n\\n```java\\nenum Sex{\\n    BOY , GIRL;\\n}\\n\\n// 枚举\\nenum Season {\\n    SPRING , SUMMER , AUTUMN , WINTER;\\n}\\n```\\n\\n枚举类反编译以后的源代码\\n\\n```Java\\npublic final class Season extends java.lang.Enum<Season> {\\n    public static final Season SPRING = new Season();\\n    public static final Season SUMMER = new Season();\\n    public static final Season AUTUMN = new Season();\\n    public static final Season WINTER = new Season();\\n\\n    public static Season[] values();\\n    public static Season valueOf(java.lang.String);\\n}\\n```\\n\\n### 枚举类的特点\\n\\n* 枚举类是`final`修饰的，不能被继承\\n* 枚举类默认继承了枚举类型`java.lang.Enum`\\n* 枚举类的第一行罗列的是枚举类的对象，而且是用常量存储的\\n* 所以枚举类的第一行写的都是常量名称，默认存储了枚举对象\\n* 枚举类的构造器默认是私有的\\n* 枚举类相当于是多例设计模式\\n\\n> `Java`建议做信息标志和信息分类应该使用**枚举**实现，比较优雅，可以实现可读性，而且入参受限制，不能乱输入\\n\\n# day3-多态、包、权限修饰符、内部类、object类、Date类\\n\\n## 多态==重点==\\n\\n面向对象的三大特征：封装、继承、多态\\n\\n多态的形式：\\n\\n```java\\n父类类型 变量名 = new 子类/实现类构造器;\\n变量名.方法名();\\n```\\n\\n```java\\npublic class PolymorphicDemo {\\n    public static void main(String[] args) {\\n        //  父类类型 对象名称 = new 子类构造器;\\n        Animal dlam = new Cat();\\n        dlam.run(); // 对于方法的调用：编译看左边，运行看右边。\\n        System.out.println(dlam.name); // 对于变量的调用：编译看左边，运行看左边。\\n\\n        Animal taiDi = new Dog();\\n        taiDi.run(); // 对于方法的调用：编译看左边，运行看右边。\\n        System.out.println(taiDi.name); // 对于变量的调用：编译看左边，运行看左边。\\n    }\\n}\\n\\nclass Dog extends Animal{\\n    public String name = \\\"🐶名称Dog\\\";\\n    @Override\\n    public void run(){\\n        System.out.println(\\\"🐕跑的贼快~~~~！\\\");\\n    }\\n}\\n\\nclass Cat extends Animal{\\n    public String name = \\\"🐱名称Cat\\\";\\n    @Override\\n    public void run(){\\n        System.out.println(\\\"🐱跑的飞快~~~~！\\\");\\n    }\\n}\\n\\nclass Animal{\\n    public String name = \\\"动物名称Animal\\\";\\n    public void run(){\\n        System.out.println(\\\"动物跑！\\\");\\n    }\\n}\\n```\\n\\n**多态的概念：**同一个类型的对象，执行同一个行为，在不同的状态下会表现出不同的行为特征\\n\\n**多态的识别技巧：**\\n\\n* 对于方法的调用：编译看左边，运行看右边\\n* 对于变量的调用：编译看左边，运行看左边\\n\\n**多态的使用前提**\\n\\n* 必须存在继承或者实现关系\\n* 必须存在父类类型的变量引用子类类型的对象\\n* 需要存在方法重写\\n\\n### 多态的优劣势\\n\\n优势：\\n\\n* 在多态形式下，右边对象可以实现组件化切换，业务功能也随之改变，便于扩展和维护。可以实现类与类之间的解耦\\n* 实际开发中，父类类型作为方法形式参数，传递之类对象给方法，可以传递一切子类对象进行方法的调用，更能体现出多态的扩展性与便利\\n\\n劣势：\\n\\n* **多态形式下，不能直接调用子类特有的功能**。编译看左边！！左边父类没有子类独有的功能，所以代码在编译阶段就直接报错了\\n\\n### 引用类型自动类型转换\\n\\n基本数据类型的转换\\n\\n* 小范围类型的变量或者值可以**直接赋值**给大范围类型的变量。\\n* 大范围类型的变量或者值**必须强制类型转换**给小范围类型的变量。\\n\\n所以引用类型转换的思想也一样\\n\\n子类类型的对象或者变量可以自动类型转换赋值给父类类型的变量\\n\\n> 引用类型的自动类型转换并不能解决多态的劣势\\n\\n### 引用类型的强制类型转换\\n\\n父类类型的变量或者对象必须强制类型转换成子类类型的变量，否则报错!\\n\\n```java\\n类型 变量名称 = (类型)(对象或者变量)\\n```\\n\\n注意：有**继承/实现关系**的两个类型就可以进行强制类型转换，编译阶段一定不报错！但是运行阶段可能出现：类型转换**异常** `ClassCastException`\\n\\nJava建议在进行强制类型转换之前先判断变量的真实类型，再强制类型转换!\\n\\n`变量 instanceof 类型`： 判断前面的变量是否是后面的类型或者其子类类型才会返回`true`\\n\\n```java\\npublic class PolymorphicDemo {\\n    public static void main(String[] args) {\\n        Animal a = new Wolf();\\n        a.run();\\n        // a.catchSheep(); // 报错！\\n\\n        // 1.把动物类型的变量a 转换成 真实的狼类型\\n        Wolf w = (Wolf) a;\\n        w.catchSheep();\\n\\n        // 2.多态下类型转换异常问题研究（重点）\\n        Animal a1 = new Cat();\\n        //Wolf w1 = (Wolf) a1; // 编译阶段没有报错！在运行阶段出现ClassCastException类型转换成！\\n\\n        if(a1 instanceof Cat){\\n            Cat c1 = (Cat) a1;\\n            c1.catchMouse();\\n        }else if(a1 instanceof Wolf){\\n            Wolf w1 = (Wolf) a1;\\n            w1.catchSheep();\\n        }\\n    }\\n}\\n\\nclass Wolf extends Animal{\\n    @Override\\n    public void run(){\\n        System.out.println(\\\"狼跑的飞快~~~\\\");\\n    }\\n\\n    public void catchSheep(){\\n        System.out.println(\\\"🐺抓🐏\\\");\\n    }\\n}\\n\\nclass Cat extends Animal{\\n    @Override\\n    public void run(){\\n        System.out.println(\\\"猫跑的贼快~~~\\\");\\n    }\\n\\n    public void catchMouse(){\\n        System.out.println(\\\"🐱抓🐀~~\\\");\\n    }\\n}\\n\\nclass Animal{\\n    public void run(){\\n        System.out.println(\\\"动物可以跑~~\\\");\\n    }\\n}\\n```\\n\\n### 多态接口的综合案例\\n\\n```java\\npublic class Demo {\\n    public static void main(String[] args) {\\n        // 1.买一部电脑\\n        Computer c = new Computer();\\n        // 2.买一个鼠标\\n        USB xiaoMi = new Mouse(\\\"小米鼠标\\\");\\n        c.install(xiaoMi);\\n        // 3.买一个键盘\\n        KeyBoard sfy = new KeyBoard(\\\"双飞燕键盘\\\");\\n        c.install(sfy);\\n    }\\n}\\n\\nclass Computer{\\n    // 提供一个安装USB设备的入口\\n    public void install(USB usb){\\n        usb.connect();\\n\\n        // usb.dbclick();\\n        // usb可能是鼠标，也可能键盘 .....\\n        if(usb instanceof Mouse){\\n            Mouse m = (Mouse) usb;\\n            m.dbclick();\\n        }else if(usb instanceof KeyBoard){\\n            KeyBoard k = (KeyBoard) usb;\\n            k.keyDown();\\n        }\\n\\n        usb.unconnect();\\n    }\\n}\\n\\n// 定义2个USB设备：鼠标，键盘。\\nclass Mouse implements USB{\\n    private String name;\\n\\n    public Mouse(String name) {\\n        this.name = name;\\n    }\\n\\n    // 双击\\n    public void dbclick(){\\n        System.out.println(name+\\\"双击了，老铁，6666666~~~~\\\");\\n    }\\n\\n    @Override\\n    public void connect() {\\n        System.out.println(name+\\\"成功接入了设备~~~~\\\");\\n    }\\n\\n    @Override\\n    public void unconnect() {\\n        System.out.println(name+\\\"成功拔出了设备~~~~\\\");\\n    }\\n}\\n\\nclass KeyBoard implements USB{\\n    private String name;\\n\\n    public KeyBoard(String name) {\\n        this.name = name;\\n    }\\n\\n    // 按键\\n    public void keyDown(){\\n        System.out.println(name+\\\"写下了，来了，老弟~~记得点亮小💗💗....\\\");\\n    }\\n\\n    @Override\\n    public void connect() {\\n        System.out.println(name+\\\"成功接入了设备~~~~\\\");\\n    }\\n\\n    @Override\\n    public void unconnect() {\\n        System.out.println(name+\\\"成功拔出了设备~~~~\\\");\\n    }\\n}\\n\\n// 定义USB的规范，必须要完成接入和拔出的功能！！\\ninterface USB{\\n    void connect();    // 接入\\n    void unconnect();  // 拔出\\n}\\n```\\n\\n## 内部类\\n\\n内部类是类的五大成分之一：成员变量、方法、构造器、代码块、内部类\\n\\n内部类是定义在一个类里面的类\\n\\n内部类有什么用\\n\\n* 可以提供更好的封装性\\n* 内部类有更多的权限修饰符\\n* 其封装有更多的控制\\n* 可以体现出组件的思想\\n\\n内部类的分类：\\n\\n* 静态内部类\\n* 实例内部类（成员内部类）\\n* 局部内部类\\n* **匿名内部类**\\n\\n### 静态内部类\\n\\n有`static`修饰，属于外部类本身，会加载一次\\n\\n成分研究：\\n\\n* 类有的成分它都有，静态内部类属于外部类本身，只会加载一次\\n* 所以它的特点与外部类是完全一样的，只是位置在别人里面而已。\\n\\n外部类=宿主\\n\\n内部类=寄生\\n\\n静态内部类的访问格式：\\n\\n```\\n外部类名称.内部类名称\\n```\\n\\n静态内部类创建对象的格式：\\n\\n```\\n外部类名称.内部类名称 对象名称 = new 外部类名称.内部类构造器;\\n```\\n\\n静态内部类的访问拓展：\\n\\n* 静态内部类中是否可以直接访问外部类的静态成员?可以的，外部类的静态成员只有一份，可以被共享！\\n* 静态内部类中是否可以直接访问外部类的实例成员?不可以的,外部类的是成员必须用外部类对象访问！！\\n\\n```java\\nclass Outter{\\n    public static int age1 = 12;\\n    private double salary;\\n\\n    // 静态内部类：有static修饰，属于外部类本身，只会加载一次\\n    public static class Inner{\\n        private String name;\\n        private int age;\\n        public static String schoolName = \\\"黑马\\\";\\n\\n        public void show() {\\n            System.out.println(name+\\\"-->\\\"+age+\\\"岁~\\\");\\n            System.out.println(age1);\\n            //System.out.println(salary);\\n        }\\n\\n        public Inner() {\\n        }\\n\\n        public Inner(String name, int age) {\\n            this.name = name;\\n            this.age = age;\\n        }\\n\\n        public String getName() {\\n            return name;\\n        }\\n\\n        public void setName(String name) {\\n            this.name = name;\\n        }\\n\\n        public int getAge() {\\n            return age;\\n        }\\n\\n        public void setAge(int age) {\\n            this.age = age;\\n        }\\n\\n    }\\n}\\n```\\n\\n### 实例内部类（成员内部类）\\n\\n无`static`修饰的内部类，属于外部类的每个对象的，跟着对象一起加载的\\n\\n实例内部类的成分特点：\\n\\n* 实例内部类中不能定义静态成员，其他都可以定义\\n* 可以定义常量\\n\\n实例内部类的访问格式：\\n\\n```\\n外部类名称.内部类名称\\n```\\n\\n创建对象的格式：\\n\\n```\\n外部类名称.内部类名称 对象名称 = new 外部类构造器.new 内部构造器;\\n```\\n\\n拓展：\\n\\n* 实例内部类中是否可以直接访问外部类的静态成员\\n\\n  可以的，外部类的静态成员可以被共享访问\\n\\n* 实例内部类中是否可以访问外部类的实例成员\\n\\n  可以的，实例内部类属于外部类对象，可以直接访问当前外部类对象的实例成员\\n\\n> 实例内部类属于外部类对象，需要用外部类对象一起加载，**实例内部类可以访问外部类的全部成员**\\n\\n```java\\npublic class InnerClass {\\n    public static void main(String[] args) {\\n        // 实例内部类属于外部类对象。实例内部类的宿主是外部类对象！！\\n        Outter.Inner in = new Outter().new Inner();\\n        in.show();\\n    }\\n}\\n// 外部类\\nclass Outter{\\n    public static int age = 1;\\n    private double salary;\\n\\n    // 实例内部类：无static修饰，属于外部类的对象\\n    public class Inner{\\n        private String name ;\\n\\n        public static final String schoolName = \\\"黑马\\\";\\n        // 不能在实例内部类中定义静态成员！！！\\n//      public static String schoolName = \\\"黑马\\\";\\n//      public static void test(){\\n//\\n//      }\\n\\n        // 实例方法\\n        public void show(){\\n            System.out.println(name+\\\"名称！\\\");\\n            System.out.println(age);\\n            System.out.println(salary);\\n        }\\n\\n        public String getName() {\\n            return name;\\n        }\\n\\n        public void setName(String name) {\\n            this.name = name;\\n        }\\n    }\\n}\\n```\\n\\n### 局部内部类\\n\\n定义在方法中，在构造器中，代码块中，for循环中定义的内部类，就是局部内部类。\\n\\n局部内部类中的成分特点：\\n\\n* 只能定义实例成员，不能定义静态成员\\n* 可以定义常量的\\n\\n```java\\npublic class InnerClass {\\n\\n    static {\\n        abstract class A{\\n\\n        }\\n    }\\n\\n    public static void main(String[] args) {\\n        class A{\\n            private String name;\\n\\n            public void test(){\\n            }\\n            public String getName() {\\n                return name;\\n            }\\n\\n            public void setName(String name) {\\n                this.name = name;\\n            }\\n        }\\n        A a = new A();\\n        a.test();\\n    }\\n\\n    public static void test(){\\n       class Animal{\\n\\n       }\\n\\n       class Cat extends Animal{\\n\\n       }\\n    }\\n}\\n```\\n\\n### 匿名内部类\\n\\n就是一个没有名字的局部内部类\\n\\n匿名内部类目的是为了：简化代码，也是开发中常用的形式\\n\\n匿名内部类的格式：\\n\\n```java\\nnew 类名|抽象类|接口(形参){\\n方法重写。\\n}\\n```\\n\\n 匿名内部类的特点：\\n\\n* 匿名内部类是一个没有名字的内部类\\n* 匿名内部类一旦写出来，就会立即创建一个匿名内部类的对象返回\\n* 匿名内部类的对象的类型相当于是当前`new`的那个的类型的子类类型。\\n\\n```java\\npublic class Anonymity {\\n    public static void main(String[] args) {\\n        Animal a = new Animal(){\\n            @Override\\n            public void run() {\\n                System.out.println(\\\"猫跑的贼溜~~\\\");\\n            }\\n        };\\n        a.run();\\n        a.go();\\n\\n        Animal a1 = new Animal() {\\n            @Override\\n            public void run() {\\n                System.out.println(\\\"狗跑的贼快~~~\\\");\\n            }\\n        };\\n        a1.run();\\n        a.go();\\n\\n\\n    }\\n}\\nabstract class Animal{\\n    public abstract void run();\\n\\n    public void go(){\\n        System.out.println(\\\"开始go~~~\\\");\\n    }\\n}\\n```\\n\\n匿名内部类的使用形式\\n\\n```java\\npublic class Anonymity02 {\\n    public static void main(String[] args) {\\n        Swim bozai = new Swim() {\\n            @Override\\n            public void swimming() {\\n                System.out.println(\\\"老师🏊‍的贼溜~~~~\\\");\\n            }\\n        };\\n        go(bozai);\\n\\n        Swim boniu = new Swim() {\\n            @Override\\n            public void swimming() {\\n                System.out.println(\\\"波妞学生快乐的狗爬式~~~\\\");\\n            }\\n        };\\n        go(boniu);\\n\\n        go(new Swim() {\\n            @Override\\n            public void swimming() {\\n                System.out.println(\\\"波妞2学生快乐的狗爬式~~~\\\");\\n            }\\n        });\\n    }\\n\\n    // 提供一个方法让全部角色进入比赛\\n    public static void go(Swim s){\\n        System.out.println(\\\"开始。。。。\\\");\\n        s.swimming();\\n        System.out.println(\\\"结束。。。。\\\");\\n    }\\n}\\n\\ninterface Swim{\\n    void swimming();\\n}\\n```\\n\\n## 包和权限修饰符\\n\\n## 包\\n\\n* 分门别类的管理各种不同的技术。\\n* 企业的代码必须用包区分。便于管理技术，扩展技术，阅读技术。\\n\\n定义包的格式：\\n\\n`package 包名;`\\n\\n必须放在类名的最上面\\n一般工具已经帮我们做好了\\n\\n包名的命名规范：\\n\\n* 一般是公司域名的倒写+技术名称：\\n* http://www.itheima.com => com.itheima.技术名称\\n* 包名建议全部用英文，多个单词用”.“连接，必须是合法标识符，不能用关键字\\n\\n注意\\n\\n* 相同包下的类可以直接访问\\n* 不同包下的类必须导包,才可以使用\\n* 导包格式：`import 包名.类名;`\\n\\n### 权限修饰符\\n\\n权限修饰符：有四种（`private `-> `default`-> `protected `- > `public` ）\\n\\n可以修饰成员变量，修饰方法，修饰构造器，内部类，不同修饰符修饰的成员能够被访问的权限将受到限制!\\n\\n![image-20220525204748483](http://47.108.219.199:81/articles/image-20220525204748483.png)\\n\\n## Object类\\n\\n`Object`类是Java中的祖宗类\\n\\n* 一个类要么默认继承了`Object`类，要么间接继承了`Object`类\\n* `Object`类的方法是一切子类都可以直接使用的，所以我们要学习`Object`类的方法。\\n\\n`Object`类的常用方法：\\n\\n* `public String toString():`\\n\\n  * 默认是返回当前对象在堆内存中的地址信息\\n\\n    `com.itheima._12Object类的详细使用.Student@735b478`\\n\\n  * 默认的地址信息格式：类的全限名@内存地址\\n\\n  * 直接输出对象名称，默认会调用toString()方法，所以直接输出对象可以省略toString()不写。\\n\\n  * 实际开发中直接输出对象，输出对象的地址其实是没有意义的。\\n\\n  * 所以`toString`方法存在的意义是为了被子类重写，以便能够返回对象的数据内容输出。因为实际开发中我们输出对象更多的时候是希望看到对象的数据内容信息\\n\\n> * 开发中如果希望输出对象看到对象的内容，只需要重写`toString()`方法即可\\n> * 所以`toString`方法存在的意义是为了被子类重写\\n\\n* `public boolean equals(Object o)`\\n  * 默认是比较两个对象的地址是否相同。相同返回`true`，反之\\n  * 直接比较两个对象的地址是否相同完全可以用`==`替代`equals`，所以`equals`存在的意义是为了被子类重写，以便程序员可以自己来定制比较规则\\n\\n只要两个对象的内容一样，我们就认为他们是相等的。\\n\\n> `equals`存在的意义是为了被子类重写，以便程序员自己来定制比较规则\\n\\n```java\\n@Override\\n    public boolean equals(Object o) {\\n        // 1.判断是否自己和自己比较，如果是同一个对象比较直接返回true\\n        if (this == o) return true;\\n        // 2.判断被比较者是否为null ,以及是否是学生类型。\\n        if (o == null || this.getClass() != o.getClass()) return false;\\n        // 3.o一定是学生类型，强制转换成学生，开始比较内容！\\n        Student student = (Student) o;\\n        return age == student.age &&\\n                sex == student.sex &&\\n                Objects.equals(name, student.name);\\n    }\\n\\n    // 重写Object的toString()以便返回对象的内容数据\\n\\n    @Override\\n    public String toString() {\\n        return \\\"Student{\\\" +\\n                \\\"name=\'\\\" + name + \'\\\\\'\' +\\n                \\\", age=\\\" + age +\\n                \\\", sex=\\\" + sex +\\n                \'}\';\\n    }\\n```\\n\\n> idea可以自动生成`equals()`和`toString()`，直接按下快捷键`ALT+INSERT`，选择`generate`即可\\n\\n## Objects类\\n\\n* `Objects`类与`Object`还是继承关系\\n* `Objects`类是从JDK 1.7开始之后才有的。\\n\\n`Objects`的方法：\\n\\n* `public static boolean equals(Object a, Object b)`\\n\\n  * 比较两个对象的\\n\\n  * 底层进行非空判断，从而可以**避免空指针异常**。更安全，推荐使用\\n\\n    ```java\\n    public static boolean equals(Object a, Object b) {\\n    \\treturn a == b || a != null && a.equals(b);\\n    }\\n    ```\\n\\n  * `public static boolean isNull(Object obj)`\\n\\n    判断变量是否为`null`,为`null`返回`true`, 反之`false`\\n\\n## Date类\\n\\nJava是面向对象的，会用一个类代表一个事物\\n\\n`Date`类在Java中代表的是系统当前此刻日期时间对象。\\n\\n`Date`类：\\n\\n包：`java.util.Date`\\n\\n* 构造器：\\n  `public Date()` 创建当前系统的此刻日期时间对象。\\n  `public Date(long time)`\\n\\n```java\\nimport java.util.Date;\\n\\npublic class DateDemo01 {\\n    public static void main(String[] args) {\\n        // a.创建一个日期对象代表了系统此刻日期时间对象\\n        Date d = new Date();\\n        System.out.println(d);\\n\\n        // b.拿当前日期对象的时间毫秒值\\n        long time = d.getTime();\\n        System.out.println(time);\\n    }\\n}\\n```\\n\\n* 方法\\n\\n  `public long getTime()`: 返回自 1970 年 1 月 1 日 00:00:00 GMT 以来走过的总的毫秒数。\\n\\n时间记录的两种方式：\\n`Date`日期对象。\\n时间毫秒值：从1970-01-01 00:00:00开始走到此刻的总的毫秒值。 1s = 1000ms\\n\\n小结：\\n\\n* `Date`可以代表系统当前此刻日期时间对象。\\n* 时间记录的两种方式：\\n  * `Date`日期对象。\\n  * 时间毫秒值：从1970-01-01 00:00:00开始走到此刻的总的毫秒值。 1s = 1000ms\\n\\n```java\\nimport java.util.Date;\\n\\npublic class DateDemo02 {\\n    public static void main(String[] args) {\\n        // 1.拿到此刻日期时间对象的毫秒值\\n        long startTime = new Date().getTime();\\n        for(int i = 1; i < 1000000 ; i++ ){\\n            System.out.println(\\\"输出：\\\"+i);\\n        }\\n        // 2.拿到此刻日期时间对象的毫秒值\\n        long endTime = new Date().getTime();\\n        System.out.println( (endTime - startTime) / 1000.0 +\\\"s\\\");\\n    }\\n}\\n```\\n\\n`Date`类的有参数构造器的使用。\\n\\n构造器：\\n\\n* `public Date()`:创建当前系统的此刻日期时间对象。\\n* `public Date(long time)`:把时间毫秒值转换成日期对象。\\n\\n流程\\n\\n* `Date`日期对象 ->` getTime()` -> 时间毫秒值\\n* 时间毫秒值 ->` new Date(时间毫秒值)` -> `Date`日期对象\\n\\n# day4-常用API、正则表达式、泛型、Collection集合API\\n\\n## 第一章 DateFormat类\\n\\n简单日期格式化类`SimpleDateFormat`可以把日期对象格式化成我们喜欢的时间形式\\n\\n```java\\n// 1.得到此刻日期对象\\nDate d = new Date();\\nSystem.out.println(d);\\n\\n// 2.创建一个简单日期格式化对象负责格式化日期对象\\n// 注意：参数是之间的格式。\\nSimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy年MM月dd日 HH:mm:ss EEE a\\\");\\n\\n// 3.开始调用方法格式化时间得到格式化的字符串时间形式\\nString rs = sdf.format(d);\\nSystem.out.println(rs);\\n```\\n\\n也可以直接格式化时间毫秒值\\n\\n```java\\n// 1.问121s后的时间是多少。格式化输出。\\n// a.得到此刻日期对象\\nDate date = new Date();\\nSystem.out.println(date);\\n\\n// b.得到当前时间的时间毫秒值\\nlong time = date.getTime();\\ntime += 121 * 1000;\\n\\n// c.格式化时间毫秒值\\nSimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy年MM月dd日 HH:mm:ss EEE a\\\");\\nSystem.out.println(sdf.format(time));\\n```\\n\\n简单日期格式化类`SimpleDateFormat`解析字符串时间成为日期对象\\n\\n```java\\n// a.定义一个字符串时间\\nString date = \\\"2019-11-04 09:30:30\\\";\\n\\n// b.把字符串的时间解析成Date日期对象 。（重点）\\n// 1.创建一个简单日期格式化对象负责解析字符串的时间成为日期对象\\n// 注意：参数必须与被解析的时间的格式完全一致，否则执行报错！！\\nSimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\");\\n// 2.开始解析成日期对象\\nDate newDate = sdf.parse(date);\\n\\n// c.得到日期对象的时间毫秒值 + 往后走 1天15小时，30分29s\\nlong time = newDate.getTime() + (24L *60*60 + 15*60*60 + 30*60 + 29) * 1000;\\n\\n// d.把时间毫秒值格式化成喜欢的字符串的时间形式!\\nSystem.out.println(sdf.format(time));\\n```\\n\\n## 第二章 Calendar类\\n\\n`Calendar`代表了系统此刻日期对应的日历对象。\\n\\n`Calendar`是一个抽象类，不能直接创建对象。\\n\\n`Calendar`日历类创建日历对象的语法：\\n\\n```java\\nCalendar rightNow = Calendar.getInstance();\\n```\\n\\n`Calendar`的方法：\\n\\n* `public static Calendar getInstance()`: 返回一个日历类的对象。\\n* `public int get(int field)`：取日期中的某个字段信息。\\n* `public void set(int field,int value)`：修改日历的某个字段信息。\\n* `public void add(int field,int amount)`：为某个字段增加/减少指定的值\\n* `public final Date getTime()`: 拿到此刻日期对象。\\n* `public long getTimeInMillis()`: 拿到此刻时间毫秒值\\n\\n```java\\n// 1.通过调用日历类的静态方法getInstance得到一个当前此刻日期对象对应的日历对象。\\nCalendar rightNow = Calendar.getInstance();\\nSystem.out.println(rightNow);\\n\\n// 2.获取年：\\nint year = rightNow.get(Calendar.YEAR);\\nSystem.out.println(year);\\n\\nint mm = rightNow.get(Calendar.MONTH) + 1;\\nSystem.out.println(mm);\\n\\n// 3.一年中的第几天: 308\\nint days = rightNow.get(Calendar.DAY_OF_YEAR);\\nSystem.out.println(days);\\n\\n// 4.修改日历的信息\\n//rightNow.set(Calendar.YEAR , 2099);\\n//System.out.println(rightNow.get(Calendar.YEAR));\\n\\n// 5.日历可以得到此刻日期对象。\\nDate d = rightNow.getTime();\\nSystem.out.println(d);\\n\\n// 6.此刻时间毫秒值\\nlong time = rightNow.getTimeInMillis();\\nSystem.out.println(time);\\n\\n// 7.请问701天  15小时后是哪个日期\\n// 让日历的一年中的第几天往后走 701天！\\nrightNow.add(Calendar.DAY_OF_YEAR , 701);\\nrightNow.add(Calendar.HOUR , 15);\\nlong time1 = rightNow.getTimeInMillis();\\nSimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy年MM月dd日 HH:mm:ss EEE a\\\");\\nSystem.out.println(sdf.format(time1));\\n```\\n\\n## 第三章 Math类\\n\\n* `Math`用于做数学运算\\n* `Math`类中的方法全部是静态方法，直接用类名调用即可。\\n\\n常用方法\\n\\n- `public static int abs(int a)`                  获取参数a的绝对值：\\n- `public static double ceil(double a) `          向上取整\\n- `public static double floor(double a)`     向下取整\\n- `public static double pow(double a, double b) ` 获取a的b次幂        \\n- `public static long round(double a)`         四舍五入取整\\n\\n## 第四章 System类\\n\\n`System`系统类的使用，`System`代表当前系统\\n\\n静态方法：\\n\\n* `public static void exit(int status)`:终止JVM虚拟机，非0是异常终止。\\n* `public static long currentTimeMillis()`:获取当前系统此刻时间毫秒值。\\n* 可以做数组的拷贝。\\n  `arraycopy(Object var0, int var1, Object var2, int var3, int var4);`\\n     * 参数一：原数组\\n     * 参数二：从原数组的哪个位置开始赋值。\\n     * 参数三：目标数组\\n     * 参数四：赋值到目标数组的哪个位置\\n     * 参数五：赋值几个。\\n\\n## 第五章 BigDecimal类\\n\\n`BigDecimal`大数据类\\n\\n* 浮点型运算的时候直接+  * / 可能会出现数据失真（精度问题）\\n* `BigDecimal`可以解决浮点型运算数据失真的问题\\n\\n包：`java.math.`\\n创建对象的方式（最好的方式：）\\n      `public static BigDecimal valueOf(double val)` :包装浮点数成为大数据对象。\\n方法声明\\n\\n- `public BigDecimal add(BigDecimal value)`       加法运算\\n- `public BigDecimal subtract(BigDecimal value)`  减法运算 \\n- `public BigDecimal multiply(BigDecimal value) ` 乘法运算 \\n- `public BigDecimal divide(BigDecimal value)`    除法运算\\n- `public double doubleValue()`     把`BigDecimal`转换成`double`类型。\\n\\n```java\\ndouble a = 0.1 ;\\ndouble b = 0.2 ;\\n// 1.把浮点数转换成大数据对象运算\\nBigDecimal a1 = BigDecimal.valueOf(a);\\nBigDecimal b1 = BigDecimal.valueOf(b);\\n//BigDecimal c1 = a1.add(b1);  // 加法\\nBigDecimal c1 = a1.divide(b1); // 除法\\nSystem.out.println(c1);\\n\\n// 结果可能需要继续使用!!!\\n// BigDecimal只是解决精度问题的手段，double数据才是我们的目的！！\\ndouble rs = c1.doubleValue();\\nSystem.out.println(rs);\\n```\\n\\n## 第六章 包装类\\n\\n`Java`认为一切皆对象。引用数据类型就是对象了\\n\\n但是在`Java中8`基本数据类型不是对象，只是表示一种数据的类型形式,这8种数据类型显得很突兀\\n\\n`Java`为了一切皆对象的思想统一，把8种基本数据类型转换成对应的类，这个类称为基本数据类型的包装类。\\n\\n基本数据类型                    包装类（引用数据类型）\\n     byte                      \\t\\t\\tByte\\n     short                    \\t\\t\\t Short\\n     int                    \\t\\t\\t   Integer(特殊)\\n     long                    \\t\\t\\t  Long\\n\\n​     float                  \\t  \\t\\t Float\\n​     double                   \\t\\t Double\\n​     char                   \\t\\t   Character(特殊)\\n​     boolean                 \\t\\t\\t  Boolean\\n\\n* 自动装箱：可以直接把基本数据类型的值或者变量赋值给包装类\\n* 自动拆箱：可以把包装类的变量直接赋值给基本数据类型\\n\\n```java\\nint a = 12 ;\\nInteger a1 = 12 ;  // 自动装箱\\nInteger a2 = a ;   // 自动装箱\\n\\ndouble b = 99.9;\\nDouble b1 = 99.9; // 自动装箱\\nDouble b2 = b ;   // 自动装箱\\n\\nInteger c = 100 ;\\nint c1 = c ;      // 自动拆箱\\n\\nint d = 12;\\nInteger d1 = null; // 引用数据类型的默认值可以为null\\nInteger d2 = 0;\\n\\nSystem.out.println(\\\"-----------------\\\");\\nInteger it = Integer.valueOf(12);  // 手工装箱！\\n// Integer it1 = new Integer(12); // 手工装箱！\\nInteger it2 = 12;\\n\\n\\nInteger it3 = 111 ;\\nint it33 = it3.intValue(); // 手工拆箱\\nint it333 = it3;\\n```\\n\\n* Java为包装类做了一些特殊功能，以便程序员使用\\n* 包装类作为类首先拥有了`Object`类的方法\\n* 包装类作为引用类型的变量可以存储`null`值\\n\\n* 可以把基本数据类型的值转换成字符串类型的值。（没啥用）\\n  * 调用`toString()`方法\\n  * 调用`Integer.toString`(基本数据类型的值)得到字符串\\n  * 直接把基本数据类型+空字符串就得到了字符串\\n* 把字符串类型的数值转换成对应的基本数据类型的值。（真的很有用）\\n  * `Xxx.parseXxx(\\\"字符串类型的数值\\\")`\\n  * `Xxx.valueOf(\\\"字符串类型的数值\\\")` 推荐使用\\n\\n## 第七章 正则表达式\\n\\n是一些特殊字符组成的校验规则，可以校验信息的正确性，校验邮箱是否合法，例如电话号码，金额等。\\n\\n字符类\\n     \\n\\n```\\n[abc] a、b 或 c（简单类）\\n[^abc] 任何字符，除了 a、b 或 c（否定）\\n[a-zA-Z] a 到 z 或 A 到 Z，两头的字母包括在内（范围）\\n[a-d[m-p]] a 到 d 或 m 到 p：[a-dm-p]（并集）\\n[a-z&&[def23]] d、e 或 f（交集）\\n[a-z&&[^bc]] a 到 z，除了 b 和 c：[ad-z]（减去）\\n[a-z&&[^m-p]] a 到 z，而非 m 到 p：[a-lq-z]（减去）\\n```\\n\\n 预定义字符类\\n\\n```\\n. 任何字符\\n\\\\d 数字：[0-9]\\n\\\\D 非数字： [^0-9]\\n\\\\s 空白字符：[ \\\\t\\\\n\\\\x0B\\\\f\\\\r]\\n\\\\S 非空白字符：[^\\\\s]\\n\\\\w 单词字符：[a-zA-Z_0-9]\\n\\\\W 非单词字符：[^\\\\w]\\n```\\n\\n以上正则匹配只能校验单个字符。\\n\\nGreedy 数量词\\n\\n```\\nX? X，一次或一次也没有\\nX* X，零次或多次\\nX+ X，一次或多次\\nX{n} X，恰好 n 次\\nX{n,} X，至少 n 次\\nX{n,m} X，至少 n 次，但是不超过 m 次\\n```\\n\\n```java\\nprivate static void checkPhone() {\\n        Scanner sc = new Scanner(System.in);\\n        System.out.print(\\\"请您输入电话号码：\\\");\\n        String phone = sc.nextLine();\\n        if(phone.matches(\\\"0\\\\\\\\d{2,5}-?\\\\\\\\d{5,15}\\\")){\\n            System.out.println(\\\"电话号码合法了！\\\");\\n        }else{\\n            System.err.println(\\\"电话号码不正确！\\\");\\n        }\\n    }\\n\\n\\n    private static void checkTel() {\\n        Scanner sc = new Scanner(System.in);\\n        System.out.print(\\\"请您输入手机号码：\\\");\\n        String tel = sc.nextLine();\\n        if(tel.matches(\\\"1[3-9]\\\\\\\\d{9}\\\")){\\n            System.out.println(\\\"手机号码合法了！\\\");\\n        }else{\\n            System.err.println(\\\"手机号码不正确！\\\");\\n        }\\n    }\\n\\n    // 校验邮箱\\n    public static void checkEmail(){\\n        Scanner sc = new Scanner(System.in);\\n        System.out.print(\\\"请您输入邮箱：\\\");\\n        String email = sc.nextLine();\\n        // 3232323@qq.com\\n        // dlei082@163.com\\n        // dlei@pic.com.cn\\n        if(email.matches(\\\"\\\\\\\\w{1,}@\\\\\\\\w{2,10}(\\\\\\\\.\\\\\\\\w{2,10}){1,2}\\\")){\\n            System.out.println(\\\"邮箱合法了！\\\");\\n        }else{\\n            System.err.println(\\\"邮箱格式不正确！\\\");\\n        }\\n    }\\n```\\n\\n`split`可以结合正则表达式分割\\n\\n```java\\n// 1.split的基础用法\\nString names = \\\"贾乃亮,王宝强,陈羽凡\\\";\\n// 以“，”分割成字符串数组\\nString[] nameArrs = names.split(\\\",\\\");\\nfor(int i = 0 ; i < nameArrs.length ; i++ ){\\n    String name = nameArrs[i];\\n    System.out.println(name);\\n}\\n\\nSystem.out.println(\\\"----------------------\\\");\\n// 2.split集合正则表达式做分割\\nString names1 = \\\"贾乃亮lv434fda324王宝强87632fad2342423陈羽凡\\\";\\n// 以匹配正则表达式的内容为分割点分割成字符串数组\\nString[] nameArrs1 = names1.split(\\\"\\\\\\\\w+\\\");\\nfor(int i = 0 ; i < nameArrs1.length ; i++ ){\\n    String name = nameArrs1[i];\\n    System.out.println(name);\\n}\\nSystem.out.println(\\\"----------------------\\\");\\n// 3. public String replaceAll(String regex,String newStr)\\nString names2 = \\\"贾乃亮lv434fda324王宝强87632fad2342423陈羽凡\\\";\\n// 使用正则表达式定位出内容，替换成/\\nSystem.out.println(names2.replaceAll(\\\"\\\\\\\\w+\\\" , \\\"/\\\"));\\n\\nString names3 = \\\"贾乃亮,王宝强,羽凡\\\";\\nSystem.out.println(names3.replaceAll(\\\",\\\",\\\"-\\\"));\\n```\\n\\n正则表达式爬取信息中的内容\\n\\n可以通过`|`将正则表达式连接起来，是**或**的关系\\n\\n```java\\nString rs = \\\"来黑马程序学习Java,电话020-43422424，或者联系邮箱\\\" +\\n    \\\"itcast@itcast.cn,电话18762832633，0203232323\\\" +\\n    \\\"邮箱bozai@itcast.cn，400-100-3233 ，4001003232\\\";\\n// 需求：从上面的内容中爬取出 电话号码和邮箱。\\n// 1.定义爬取规则\\nString regex = \\\"(\\\\\\\\w{1,}@\\\\\\\\w{2,10}(\\\\\\\\.\\\\\\\\w{2,10}){1,2})|(1[3-9]\\\\\\\\d{9})|(0\\\\\\\\d{2,5}-?\\\\\\\\d{5,15})|400-?\\\\\\\\d{3,8}-?\\\\\\\\d{3,8}\\\";\\n// 2.编译正则表达式成为一个匹配规则对象\\nPattern pattern = Pattern.compile(regex);\\n// 3.通过匹配规则对象得到一个匹配数据内容的匹配器对象\\nMatcher matcher = pattern.matcher(rs);\\n// 4.通过匹配器去内容中爬取出信息\\nwhile(matcher.find()){\\n    System.out.println(matcher.group());\\n}\\n```\\n\\n## 第八章 泛型\\n\\n### 泛型概念\\n\\n什么是泛型\\n\\n* 泛型就是一个标签：`<数据类型>`\\n* 泛型可以在编译阶段约束只能操作某种数据类型\\n\\n> * JDK 1.7开始之后，泛型后面的申明可以省略不写\\n> * **泛型和集合都只能支持引用数据类型，不支持基本数据类型**\\n\\n### 泛型的好处\\n\\n* 泛型在编译阶段约束了操作的数据类型，从而不会出现类型转换异常\\n* 体现的是Java的严谨性和规范性，数据类型,经常需要进行统一\\n\\n### 自定义泛型\\n\\n使用了泛型定义的类就是泛型类\\n\\n```java\\nclass MyArrayList<E>{\\n\\n    private ArrayList lists = new ArrayList();\\n\\n    public void add(E e){\\n        lists.add(e);\\n    }\\n\\n    public void remove(E e){\\n        lists.remove(e);\\n    }\\n    @Override\\n    public String toString() {\\n        return lists.toString();\\n    }\\n}\\n```\\n\\n### 自定义泛型方法\\n\\n定义了泛型的方法就是泛型方法\\n\\n泛型方法定义格式\\n\\n```java\\n修饰符 <泛型变量> 返回值类型 方法名称(形参列表){\\n\\n}\\n```\\n\\n一个泛型方法的例子\\n\\n```java\\npublic static <T> String arrToString(T[] nums){\\n    StringBuilder sb = new StringBuilder();\\n    sb.append(\\\"[\\\");\\n    if(nums!=null && nums.length > 0){\\n        for(int i = 0 ; i < nums.length ; i++ ){\\n            T ele = nums[i];\\n            sb.append(i == nums.length-1 ? ele : ele+\\\", \\\");\\n        }\\n    }\\n    sb.append(\\\"]\\\");\\n    return sb.toString();\\n}\\n```\\n\\n> 泛型方法是一个通用技术\\n\\n### 泛型接口\\n\\n使用了泛型定义的接口就是泛型接口\\n\\n定义格式\\n\\n```java\\n修饰符 interface 接口名称<泛型变量>{\\n\\n}\\n```\\n\\n例如\\n\\n```java\\npublic interface Data<E> {\\n    void add(E stu);\\n    void delete(E stu);\\n    void update(E stu);\\n    E query(int id);\\n}\\n```\\n\\n> 泛型接口的核心思想，在实现接口的时候传入真实的数据类型\\n>\\n> 这样重写的方法就是对该数据类型进行操作\\n\\n### 泛型的通配符\\n\\n通配符：`?`\\n\\n* `?`可以用在**使用泛型**的时候代表一切类型\\n* `E , T , K , V`是在**定义泛型**的时候使用代表一切类型\\n\\n泛型的上下限：\\n\\n* `? extends Car` : 那么`?`必须是`Car`或者其子类。(泛型的上限)\\n* `? super  Car` :那么`?`必须是`Car`或者其父类。（泛型的下限。不是很常见）\\n\\n```java\\npublic class GenericDemo {\\n    public static void main(String[] args) {\\n        ArrayList<BMW> bmws = new ArrayList<>();\\n        bmws.add(new BMW());\\n        bmws.add(new BMW());\\n        bmws.add(new BMW());\\n        run(bmws);\\n\\n        ArrayList<BENZ> benzs = new ArrayList<>();\\n        benzs.add(new BENZ());\\n        benzs.add(new BENZ());\\n        benzs.add(new BENZ());\\n        run(benzs);\\n\\n        ArrayList<Dog> dogs = new ArrayList<>();\\n        dogs.add(new Dog());\\n        dogs.add(new Dog());\\n        dogs.add(new Dog());\\n        // run(dogs); // 就进不来了！\\n    }\\n\\n    // 定义一个方法，可以让很多汽车一起进入参加比赛\\n    public static void run(ArrayList<? extends Car> cars){\\n\\n    }\\n}\\n\\nclass Car{\\n}\\nclass BMW extends Car{\\n\\n}\\nclass BENZ extends Car{\\n\\n}\\nclass Dog{\\n\\n}\\n```\\n\\n## 第九章 Collection集合\\n\\n### 集合概述\\n\\n什么是集合\\n\\n- 集合是一个大小可变的容器\\n- 容器中的每个数据称为一个元素。数据==元素\\n- 集合的特点是：类型可以不确定，大小不固定。集合有很多种，不同的集合特点和使用场景不同\\n- 数组：类型和长度一旦定义出来就都固定了\\n\\n集合用处\\n\\n- 在开发中，很多时候元素的个数是不确定的。\\n- 而且经常要进行元素的增删该查操作，集合都是非常合适的。\\n- 开发中集合用的更多\\n\\n> - Java中集合的代表是：`Collection`\\n> - `Collection`集合是Java中集合的祖宗类\\n> - 学习Collection集合的功能，那么一切集合都可以用这些功能\\n\\n集合体系\\n\\n```\\n\\t\\t\\t\\t\\t\\t\\t\\tCollection<E>(接口)\\n                      /                                \\\\\\n                 Set<E>(接口)                            List<E>(接口)\\n                /               \\\\                       /                \\\\\\n         HashSet<E>(实现类)  TreeSet<>(实现类)     ArrayList<E>(实现类)  LinekdList<>(实现类)\\n             /\\n         LinkedHashSet<>(实现类)\\n```\\n\\n集合的特点：\\n\\n* `Set`系列集合：添加的元素是无序，不重复，无索引的\\n  * `HashSet`: 添加的元素是无序，不重复，无索引的\\n  * `LinkedHashSet`: 添加的元素是有序，不重复，无索引的\\n  * `TreeSet`: 不重复，无索引，按照大小默认升序排序\\n* `List`系列集合：添加的元素是有序，可重复，有索引\\n  * `ArrayList`：添加的元素是有序，可重复，有索引\\n  * `LinekdList`：添加的元素是有序，可重复，有索引\\n\\n```java\\n// 多态写法：\\n//  HashSet:添加的元素是无序，不重复，无索引的。\\nCollection<String> sets = new HashSet<>();\\nsets.add(\\\"MyBatis\\\");\\nsets.add(\\\"Java\\\");\\nsets.add(\\\"Java\\\");\\nsets.add(\\\"Spring\\\");\\nsets.add(\\\"MySQL\\\");\\nsets.add(\\\"MySQL\\\");\\n// [Java, MySQL, MyBatis, Spring]\\nSystem.out.println(sets);\\n\\n// ArrayList:添加的元素是有序，可重复，有索引。\\nCollection<String> lists = new ArrayList<>();\\nlists.add(\\\"MyBatis\\\");\\nlists.add(\\\"Java\\\");\\nlists.add(\\\"Java\\\");\\nlists.add(\\\"Spring\\\");\\nlists.add(\\\"MySQL\\\");\\nlists.add(\\\"MySQL\\\");\\n// [MyBatis, Java, Java, Spring, MySQL, MySQL]\\nSystem.out.println(lists);\\n```\\n\\n### 集合常用API\\n\\n`Collection`是集合的祖宗类，它的功能是全部集合都可以继承使用的，所以要学习它。\\nCollection API如下：\\n\\n- `public boolean add(E e)`：  把给定的对象添加到当前集合中 。\\n- `public void clear()` :清空集合中所有的元素。\\n- `public boolean remove(E e)`: 把给定的对象在当前集合中删除。\\n- `public boolean contains(Object obj)`: 判断当前集合中是否包含给定的对象。\\n- `public boolean isEmpty()`: 判断当前集合是否为空。\\n- `public int size()`: 返回集合中元素的个数。\\n- `public Object[] toArray()`: 把集合中的元素，存储到数组中\\n\\n```java\\n// HashSet:添加的元素是无序，不重复，无索引。\\nCollection<String> sets = new HashSet<>();\\n// 1.添加元素，添加成功返回true.\\nSystem.out.println(sets.add(\\\"贾乃亮\\\")); // true\\nSystem.out.println(sets.add(\\\"贾乃亮\\\")); // false\\nSystem.out.println(sets.add(\\\"王宝强\\\")); // true\\nsets.add(\\\"陈羽凡\\\");\\nSystem.out.println(sets); // 集合重写了toString()方法，默认打印出内容信息\\n// 2.清空集合的元素。\\n//sets.clear();\\n//System.out.println(sets);\\n\\n// 3.判断集合是否为空 是空返回true 反之\\nSystem.out.println(sets.isEmpty()); // false\\n\\n// 4.获取集合的大小\\nSystem.out.println(sets.size()); // 3\\n\\n// 5.判断集合中是否包含某个元素 。\\nSystem.out.println(sets.contains(\\\"贾乃亮\\\"));\\n\\n// 6.删除某个元素:如果有多个重复元素默认删除前面的第一个！\\nsets.remove(\\\"陈羽凡\\\");\\nSystem.out.println(sets);\\n\\n// 7.把集合转换成数组\\nObject[] arrs = sets.toArray();\\nSystem.out.println(\\\"数组：\\\"+ Arrays.toString(arrs));\\n\\nString[] arrs1 = sets.toArray(String[]::new); // 以后再了解，指定转换的数组类型！\\nSystem.out.println(\\\"数组：\\\"+ Arrays.toString(arrs1));\\n\\nSystem.out.println(\\\"---------------------拓展---------------------------\\\");\\nCollection<String> c1 = new ArrayList<>();\\nc1.add(\\\"李小璐\\\");\\nc1.add(\\\"马蓉\\\");\\n\\nCollection<String> c2 = new ArrayList<>();\\nc2.add(\\\"白百合\\\");\\n\\nc1.addAll(c2); // 把c2集合的元素全部倒入到c1\\nSystem.out.println(c1);\\n```\\n\\n# day5-迭代器、数据结构、List、Set、TreeSet集合、Collections工具类\\n\\n## 第一章 Iterator迭代器\\n\\n`Collection`集合的遍历方式\\n\\n* 迭代器\\n* `for-each`\\n* `Lambda`表达式\\n\\n### 迭代器遍历\\n\\n* `public Iterator iterator()` 获取集合对应的迭代器，用来遍历集合中的元素\\n* `E next()` 获取下一个元素值\\n* `boolean hasNext()` 判断是否有下一个元素\\n\\n```java\\nCollection<String> lists = new ArrayList<>();\\nlists.add(\\\"赵敏\\\");\\nlists.add(\\\"小昭\\\");\\nlists.add(\\\"殷素素\\\");\\nlists.add(\\\"周芷若\\\");\\nSystem.out.println(lists);\\n// 1.得到集合的迭代器对象。\\nIterator<String> it = lists.iterator();\\n\\n// 2.使用while循环遍历。\\nwhile(it.hasNext()){\\n    String ele = it.next();\\n    System.out.println(ele);\\n}\\n```\\n\\n### for-each遍历\\n\\n`for-each`遍历实际上是迭代器遍历的简化写法\\n\\n* `for-each`遍历集合或者数组很方便\\n* `for-each`遍历无法知道遍历到了哪个元素，因为没有索引\\n\\n```java\\nCollection<String> lists = new ArrayList<>();\\nlists.add(\\\"赵敏\\\");\\nlists.add(\\\"小昭\\\");\\nlists.add(\\\"殷素素\\\");\\nlists.add(\\\"周芷若\\\");\\nSystem.out.println(lists);\\n// lists = [赵敏, 小昭, 殷素素, 周芷若]\\n//  ele\\nfor (String ele : lists) {\\n    System.out.println(ele);\\n}\\n\\nint[] ages = new int[]{17 , 18 , 38 , 21};\\nfor (int age : ages) {\\n    System.out.println(age);\\n}\\n```\\n\\n### lambda表达式\\n\\n```java\\nCollection<String> lists = new ArrayList<>();\\nlists.add(\\\"赵敏\\\");\\nlists.add(\\\"小昭\\\");\\nlists.add(\\\"殷素素\\\");\\nlists.add(\\\"周芷若\\\");\\nSystem.out.println(lists);\\n//   [赵敏, 小昭, 殷素素, 周芷若]\\n//   s\\nlists.forEach(s -> {\\nSystem.out.println(s);\\n});\\n//      lists.forEach(s ->  System.out.println(s));\\n//      lists.forEach(System.out::println);\\n```\\n\\n## 第二章 Java常见数据结构种类\\n\\n队列（queue）\\n\\n- 先进先出，后进后出。\\n- 场景：各种排队。叫号系统。\\n- 有很多集合可以实现队列。\\n\\n栈（stack）\\n\\n- 后进先出，先进后出\\n  压栈 == 入栈\\n  弹栈 == 出栈\\n  场景：手枪的弹夹。\\n\\n数组\\n\\n- 数组是内存中的连续存储区域。\\n- 分成若干等分的小区域（每个区域大小是一样的）\\n- 元素存在索引\\n- 特点：查询元素快（根据索引快速计算出元素的地址，然后立即去定位）\\n             增删元素慢（创建新数组，迁移元素）\\n\\n链表\\n\\n- 元素不是内存中的连续区域存储。\\n- 元素是游离存储的。每个元素会记录下个元素的地址。\\n- 特点：查询元素慢\\n             增删元素快（针对于首尾元素，速度极快，一般是双链表）\\n\\n红黑树\\n\\n- 二叉树：binary tree 永远只有一个根节点，是每个结点不超过2个节点的树（tree） 。\\n- 查找二叉树,排序二叉树：小的左边，大的右边，但是可能树很高，性能变差。\\n- 为了做排序和搜索会进行左旋和右旋实现平衡查找二叉树，让树的高度差不大于1\\n- 红黑树（就是基于红黑规则实现了自平衡的排序二叉树）：树尽量的保证到了很矮小，但是又排好序了，性能最高的树。\\n- 红黑树的增删查改性能都好！！！\\n\\n\\n这些结构，其实Java早就通过代码实现了，我们要知道有这些结构即可!\\n\\n## 第三章 List系列集合的使用\\n\\n### ArrayList集合\\n\\n![image-20220601213800419](http://47.108.219.199:81/articles/image-20220601213800419.png)\\n\\n`Collection`集合体系的特点:\\n\\n`Set`系列集合：添加的元素，是无序，不重复，无索引的。\\n\\n- `HashSet`：添加的元素，是无序，不重复，无索引的。\\n- `LinkedHashSet`：添加的元素，是有序，不重复，无索引的。\\n\\n`List`系列集合：添加的元素，是有序，可重复，有索引的。\\n\\n- `LinkedList`： 添加的元素，是有序，可重复，有索引的。\\n- `ArrayList`： 添加的元素，是有序，可重复，有索引的。\\n- `Vector `：是线程安全的，速度慢，工作中很少使用。\\n\\n`List`集合继承了`Collection`集合的全部功能，同时因为`List`系列集合有索引，\\n\\n因为`List`集合多了索引，所以多了很多按照索引操作元素的功能\\n\\n`ArrayList`实现类集合底层基于数组存储数据的，查询快，增删慢！\\n\\n- `public void add(int index, E element)`: 将指定的元素，添加到该集合中的指定位置上。\\n- `public E get(int index)`:返回集合中指定位置的元素。\\n- `public E remove(int index)`: 移除列表中指定位置的元素, 返回的是被移除的元素。\\n- `public E set(int index, E element)`:用指定元素替换集合中指定位置的元素,返回更新前的元素值。\\n\\n> * `List`系列集合有序，可重复，有索引的。\\n> * `ArrayList`实现类集合底层基于数组存储数据的，查询快，增删慢！！\\n> * 开发中`ArrayList`集合用的最多！！\\n\\n### List集合的遍历方式\\n\\n`List`遍历方式有四种：\\n\\n* `for`循环\\n* 迭代器\\n* `for-each`\\n* lambda表达式\\n\\n```java\\nList<String> lists = new ArrayList<>();\\nlists.add(\\\"java1\\\");\\nlists.add(\\\"java2\\\");\\nlists.add(\\\"java3\\\");\\n\\n/** （1）for循环。 */\\nfor(int i = 0 ; i < lists.size() ; i++ ) {\\n    String ele = lists.get(i);\\n    System.out.println(ele);\\n}\\nSystem.out.println(\\\"-----------------------\\\");\\n\\n/** （2）迭代器。 */\\nIterator<String> it = lists.iterator();\\nwhile(it.hasNext()){\\n    System.out.println(it.next());\\n}\\nSystem.out.println(\\\"-----------------------\\\");\\n\\n/** （3）foreach。 */\\nfor(String ele : lists){\\n    System.out.println(ele);\\n}\\nSystem.out.println(\\\"-----------------------\\\");\\n\\n/** （4）JDK 1.8开始之后的Lambda表达式*/\\nlists.forEach(s -> {\\n    System.out.println(s);\\n});\\n```\\n\\n### LinkedList集合\\n\\n`LinkedList`也是`List`的实现类：底层是基于链表的，增删比较快，查询慢！！\\n`LinkedList`是支持双链表，定位前后的元素是非常快的，增删首尾的元素也是最快的\\n所以`LinkedList`除了拥有`List`集合的全部功能还多了很多操作首尾元素的特殊功能：\\n\\n- `public void addFirst(E e)`:将指定元素插入此列表的开头。\\n- `void addLast(E e)`:将指定元素添加到此列表的结尾。\\n- `public E getFirst()`:返回此列表的第一个元素。\\n- `public E getLast()`:返回此列表的最后一个元素。\\n- `public E removeFirst()`:移除并返回此列表的第一个元素。\\n- `public E removeLast()`:移除并返回此列表的最后一个元素。\\n- `public E pop()`:从此列表所表示的堆栈处弹出一个元素。\\n- `public void push(E e)`:将元素推入此列表所表示的堆栈。\\n\\n> * `LinkedList`是支持双链表，定位前后的元素是非常快的，增删首尾的元素也是最快的。\\n> * 所以提供了很多操作首尾元素的特殊API可以做栈和队列的实现。\\n> * 如果查询多而增删少用`ArrayList`集合。(用的最多的)\\n> * 如果查询少而增删首尾较多用`LinkedList`集合。\\n\\n## 第四章 Set系列集合\\n\\n研究两个问题==面试热点==\\n\\n* `Set`集合添加的元素是不重复的，是如何去重复的\\n* `Set`集合元素无序的原因是什么\\n\\n### Set系列集合元素去重复的流程\\n\\n* 对于有值特性的，`Set`集合可以直接判断进行去重复。\\n* 对于引用数据类型的类对象，Set集合是按照如下流程进行是否重复的判断。\\n  * `Set`集合会让两两对象，先调用自己的`hashCode()`方法得到彼此的哈希值（所谓的内存地址）\\n  * 然后比较两个对象的哈希值是否相同，如果不相同则直接认为两个对象不重复。\\n  * 如果哈希值相同，会继续让两个对象进行`equals`比较内容是否相同，如果相同认为真的重复了\\n  * 如果不相同认为不重复。\\n\\n```java\\nSet<Integer> sets = new HashSet<>(); // 一行经典代码！！\\nsets.add(1);\\nsets.add(1);\\nsets.add(2);\\nsets.add(2);\\nSystem.out.println(sets);\\n\\n// 存储一些自定义类型数据:无序不重复\\nSet<Apple> apples = new HashSet<>();\\nApple a1 = new Apple(\\\"红富士\\\",59.9 ,\\\"红色\\\");\\nApple a2 = new Apple(\\\"阿克苏\\\",39.9 ,\\\"青红色\\\");\\nApple a3 = new Apple(\\\"阿克苏\\\",39.9 ,\\\"青红色\\\");\\nSystem.out.println(a1.hashCode()); // 哈希值，相当于是内存地址\\nSystem.out.println(a2.hashCode()); // 哈希值，相当于是内存地址\\nSystem.out.println(a3.hashCode()); // 哈希值，相当于是内存地址\\napples.add(a1);\\napples.add(a2);\\napples.add(a3);\\nSystem.out.println(apples);\\n```\\n\\n### Set系列集合元素无序==面试必考==\\n\\n`Set`系列集合添加元素无序的根本原因是因为底层采用了哈希表存储元素。\\n\\n* JDK 1.8之前：哈希表 = 数组 + 链表  + （哈希算法）\\n* JDK 1.8之后：哈希表 = 数组 + 链表 + 红黑树  + （哈希算法）\\n\\n​    当链表长度超过阈值（8）时，将链表转换为红黑树，这样大大减少了查找时间。\\n\\n### LinkedHashSet\\n\\n是`HashSet`的子类，元素是“有序” 不重复，无索引.\\n\\n* `LinkedHashSet`底层依然是使用哈希表存储元素的，\\n* 但是每个元素都额外带一个链来维护添加顺序！！\\n* 不光增删查快，还有序。缺点是多了一个存储顺序的链会占内存空间!!而且不允许重复，无索引。\\n\\n> * 如果希望元素可以重复，又有索引，查询要快用`ArrayList`集合。（用的最多）\\n> * 如果希望元素可以重复，又有索引，增删要快要用`LinkedList`集合。（适合查询元素比较少的情况，经常要首尾操作元素的情况）\\n> * 如果希望增删改查都很快，但是元素不重复以及无序无索引，那么用`HashSet`集合。\\n> * 如果希望增删改查都很快且有序，但是元素不重复以及无索引，那么用`LinkedHashSet`集合。\\n\\n### TreeSet集合\\n\\n`TreeSet`: 不重复，无索引，按照大小默认升序排序!!\\n\\n`TreeSet`集合称为排序不重复集合，可以对元素进行默认的升序排序。\\n\\n`TreeSet`集合自自排序的方式：\\n\\n* 有值特性的元素直接可以升序排序。（浮点型，整型）\\n* 字符串类型的元素会按照首字符的编号排序。\\n* 对于自定义的引用数据类型，`TreeSet`默认无法排序，执行的时候直接报错，因为人家不知道排序规则。\\n\\n自定义的引用数据类型的排序实现：\\n\\n对于自定义的引用数据类型，`TreeSet`默认无法排序\\n\\n所以我们需要定制排序的大小规则，程序员定义大小规则的方案有2种：\\n\\n* 直接为对象的类实现比较器规则接口Comparable，重写比较方法（拓展方式）\\n           // 如果程序员认为比较者大于被比较者 返回正数！\\n           // 如果程序员认为比较者小于被比较者 返回负数！\\n           // 如果程序员认为比较者等于被比较者 返回0！\\n* 直接为集合设置比较器Comparator对象,重写比较方法\\n           // 如果程序员认为比较者大于被比较者 返回正数！\\n           // 如果程序员认为比较者小于被比较者 返回负数！\\n           // 如果程序员认为比较者等于被比较者 返回0！\\n\\n> 如果类和集合都带有比较规则，优先使用集合自带的比较规则。\\n\\n```java\\n// TreeSet : 排序不重复集合。\\nSet<Double> scores = new TreeSet<>();\\nscores.add(100.0);\\nscores.add(99.9);\\nscores.add(69.5);\\nscores.add(0.1);\\nscores.add(89.3);\\nSystem.out.println(scores);\\n\\n// 字符串按照首字符的编号进行排序。\\nSet<String> names = new TreeSet<>();\\nnames.add(\\\"Jack\\\");\\nnames.add(\\\"rose\\\");\\nnames.add(\\\"Dlei\\\");\\nnames.add(\\\"about\\\");\\nnames.add(\\\"曹雪芹\\\");\\nnames.add(\\\"bozai\\\");\\nnames.add(\\\"caocao\\\");\\nnames.add(\\\"angel\\\");\\nSystem.out.println(names);\\n\\n// 引用数据类型定义TreeSet集合。\\nSet<Employee> employees = new TreeSet<>();\\nemployees.add(new Employee(\\\"播仔\\\",6500.0,21));\\nemployees.add(new Employee(\\\"播妞\\\",7500.0,19));\\nemployees.add(new Employee(\\\"乔治\\\",4500.0,23));\\nSystem.out.println(employees);\\n\\n\\n// public TreeSet(Comparator<? super E> comparator)\\n// 集合自带比较器对象\\n// 如果类和集合都存在大小规则，默认使用集合自带的规则进行大小排序！！\\nSet<Employee> employees1 = new TreeSet<>(new Comparator<Employee>() {\\n    @Override\\n    public int compare(Employee o1, Employee o2) {\\n        // o1比较者   o2被比较者\\n        // 如果程序员认为比较者大于被比较者 返回正数！\\n        // 如果程序员认为比较者小于被比较者 返回负数！\\n        // 如果程序员认为比较者等于被比较者 返回0！\\n        return o1.getAge() - o2.getAge();\\n    }\\n});\\nemployees1.add(new Employee(\\\"播仔\\\",6500.0,21));\\nemployees1.add(new Employee(\\\"播妞\\\",7500.0,19));\\nemployees1.add(new Employee(\\\"乔治\\\",4500.0,23));\\nSystem.out.println(employees1);\\n```\\n\\n## 第五章 Collections工具类\\n\\n`Collections`并不属于集合，而是用来操作集合的工具类\\n\\n`Collections`有几个常用的API:\\n\\n- `public static <T> boolean addAll(Collection<? super T> c, T... elements)`\\n  \\n    给集合对象批量添加元素！\\n    \\n- `public static void shuffle(List<?> list)`\\n\\n    打乱集合顺序。\\n\\n- `public static <T> void sort(List<T> list)`\\n\\n    将集合中元素按照默认规则排序。\\n\\n- `public static <T> void sort(List<T> list，Comparator<? super T> )`\\n\\n    将集合中元素按照指定规则排序。\\n\\n```java\\n// 1.给集合批量添加元素\\nCollection<String> names = new ArrayList<>();\\n/**\\n* 参数一：被添加元素的集合\\n* 参数二：可变参数，一批元素\\n*/\\nCollections.addAll(names,\\\"曹操\\\",\\\"贾乃亮\\\",\\\"王宝强\\\",\\\"陈羽凡\\\");\\nSystem.out.println(names);\\n\\n// 2.打乱集合的顺序：public static void shuffle(List<?> list)\\n// 注意：只能打乱有序的List集合。\\nList<String> newnames = new ArrayList<>();\\nCollections.addAll(newnames,\\\"曹操\\\",\\\"贾乃亮\\\",\\\"王宝强\\\",\\\"陈羽凡\\\");\\nCollections.shuffle(newnames); // 打乱顺序\\nSystem.out.println(newnames);\\n\\n// 3.public static <T> void sort(List<T> list)：给List集合升序排序。\\nList<Double> scores = new ArrayList<>();\\nCollections.addAll(scores, 98.5, 66.5 , 59.5 , 66.5 , 99.5 );\\nCollections.sort(scores); // 默认升序排序！\\nSystem.out.println(scores);\\n```\\n\\n引用类型的排序\\n\\n字符串按照首字符的编号升序排序！\\n\\n自定义类型的比较方法API:\\n- `public static <T> void sort(List<T> list)`\\n\\n     集合中元素按照默认规则排序。\\n\\n     对于自定义的引用类型的排序人家根本不知道怎么排，直接报错！\\n\\n     如果希望自定义的引用类型排序不报错，可以给类提供比较规则:Comparable。\\n\\n- `public static <T> void sort(List<T> list，Comparator<? super T> c)`\\n\\n     将集合中元素按照指定规则排序,自带比较器\\n\\n     注意：如果类有比较规则，而这里有比较器，优先使用比较器。\\n\\n```java\\n// 自定义类型如何排序！\\nList<Orange> oranges = new ArrayList<>();\\nOrange o1 = new Orange(\\\"红橘子\\\",654.0 ,\\\"贼便宜~\\\");\\nOrange o2 = new Orange(\\\"黄橘子\\\",454.0 ,\\\"贼便宜~\\\");\\nOrange o3 = new Orange(\\\"黄橘子\\\",454.0 ,\\\"贼便宜~\\\");\\nOrange o4 = new Orange(\\\"青橘子\\\",456.0 ,\\\"贼便宜~\\\");\\nCollections.addAll(oranges,o1,o2,o3,o4);\\nCollections.sort(oranges); // 排序，按照类实现的比较规则进行排序！！\\nSystem.out.println(oranges);\\n\\n\\nList<Orange> oranges1 = new ArrayList<>();\\nOrange o11 = new Orange(\\\"红橘子\\\",654.0 ,\\\"贼便宜~\\\");\\nOrange o22 = new Orange(\\\"黄橘子\\\",454.0 ,\\\"贼便宜~\\\");\\nOrange o33 = new Orange(\\\"黄橘子\\\",454.0 ,\\\"贼便宜~\\\");\\nOrange o44 = new Orange(\\\"青橘子\\\",456.0 ,\\\"贼便宜~\\\");\\nCollections.addAll(oranges1,o11,o22,o33,o44);\\n// 优先用方法自带的比较器对象Comparator而不会用类的比较规则！！\\nCollections.sort(oranges1, new Comparator<Orange>() {\\n    @Override\\n    public int compare(Orange o1, Orange o2) {\\n        if(o1.getWeight() > o2.getWeight()) return -1;\\n        if(o1.getWeight() < o2.getWeight()) return 1;\\n        return 0;\\n    }\\n});\\nSystem.out.println(oranges1);\\n```\\n\\n## 第六章 可变参数\\n\\n可变参数用在形参中可以接收多个数据。\\n\\n可变参数的格式：数据类型... 参数名称\\n\\n可变参数的作用：\\n\\n- 传输参数非常灵活，方便。\\n- 可以不传输参数。\\n- 可以传输一个参数。\\n- 可以传输多个参数。\\n- 可以传输一个数组。\\n\\n可变参数在方法内部本质上就是一个数组。\\n\\n可变参数的注意事项：\\n\\n* 一个形参列表中可变参数只能有一个！！\\n* 可变参数必须放在形参列表的最后面！！\\n\\n```java\\npublic static void main(String[] args) {\\n    sum(); // 可以不传输参数。\\n    sum(10); // 可以传输一个参数。\\n    sum(10,20,30); // 可以传输多个参数。\\n    sum(new int[]{10,30,50,70,90}); // 可以传输一个数组。\\n}\\n\\npublic static void sum(int...nums){\\n    // 可变参数在方法内部本质上就是一个数组。\\n    System.out.println(\\\"元素个数：\\\"+nums.length);\\n    System.out.println(\\\"元素内容：\\\"+ Arrays.toString(nums));\\n    System.out.println(\\\"--------------------------\\\");\\n}\\n```\\n\\n# day6-Map\\n\\n## 第一章 Map\\n\\n### Map集合的概述\\n\\n`Map`集合是另一个集合体系。\\n\\n`Collection`是单值集合体系。\\n\\n`Map`集合是一种双列集合，每个元素包含两个值。\\n\\n`Map`集合的每个元素的格式：`key=value`(键值对元素)。\\n\\n`Map`集合也被称为“键值对集合”。\\n\\n`Map`集合的完整格式：`{key1=value1 , key2=value2 , key3=value3 , ...}`\\n\\n\\n\\n* `Map`集合的特点都是由键决定的。\\n* `Map`集合的键是无序,不重复的，无索引的，`Map`集合后面重复的键对应的元素会覆盖前面的整个元素！\\n* `Map`集合的值无要求。\\n* `Map`集合的键值对都可以为`null`。\\n\\n`HashMap`:元素按照键是无序，不重复，无索引，值不做要求。\\n`LinkedHashMap`:元素按照键是有序，不重复，无索引，值不做要求。\\n\\n### Map集合的API\\n\\n- `public V put(K key, V value)`:  把指定的键与指定的值添加到`Map`集合中。\\n- `public V remove(Object key)`: 把指定的键 所对应的键值对元素 在`Map`集合中删除，返回被删除元素的值。\\n- `public V get(Object key)` 根据指定的键，在`Map`集合中获取对应的值。\\n- `public Set<K> keySet()`: 获取`Map`集合中所有的键，存储到`Set`集合中。\\n- `public Set<Map.Entry<K,V>> entrySet()`: 获取到`Map`集合中所有的键值对对象的集合(`Set`集合)。\\n- `public boolean containKey(Object key)`:判断该集合中是否有此键。\\n\\n```java\\nMap<String , Integer> maps = new HashMap<>();\\n// 1.添加元素: 无序，不重复，无索引。\\nmaps.put(\\\"iphoneX\\\",10);\\nmaps.put(\\\"娃娃\\\",30);\\nmaps.put(\\\"iphoneX\\\",100);//  Map集合后面重复的键对应的元素会覆盖前面重复的整个元素！\\nmaps.put(\\\"huawei\\\",1000);\\nmaps.put(\\\"生活用品\\\",10);\\nmaps.put(\\\"手表\\\",10);\\n// {huawei=1000, 手表=10, 生活用品=10, iphoneX=100, 娃娃=30}\\nSystem.out.println(maps);\\n\\n// 2.清空集合\\n//maps.clear();\\n//System.out.println(maps);\\n\\n// 3.判断集合是否为空，为空返回true ,反之！\\nSystem.out.println(maps.isEmpty());\\n\\n// 4.根据键获取对应值。\\n//Integer value = maps.get(\\\"娃娃\\\");\\n//System.out.println(value);\\nSystem.out.println(maps.get(\\\"娃娃\\\"));\\n\\n// 5.根据键删除整个元素。(删除键会返回键的值)\\nmaps.remove(\\\"iphoneX\\\");\\nSystem.out.println(maps);\\n\\n// 6.判断是否包含某个键 ，包含返回true ,反之\\nSystem.out.println(maps.containsKey(\\\"手表\\\")); // true\\nSystem.out.println(maps.containsKey(10)); // false\\n\\n// 7.判断是否包含某个值。\\nSystem.out.println(maps.containsValue(1000)); // true\\nSystem.out.println(maps.containsValue(10)); // true\\nSystem.out.println(maps.containsValue(\\\"30\\\")); // false 包含的是整数30不是字符串。\\n\\n// 8.获取全部键的集合：public Set<K> keySet()\\n// Map集合的键是无序不重复的，所以返回的是一个Set集合。\\nSet<String> keys = maps.keySet();\\nfor (String key : keys) {\\n    System.out.println(key);\\n}\\n\\n// 9.获取全部值的集合：Collection<V> values();\\n// Map集合的值是不做要求的，可能重复，所以值要用Collection集合接收!\\nCollection<Integer> values = maps.values();\\nfor (Integer value : values) {\\n    System.out.println(value);\\n}\\n\\n// 10.集合的大小\\nSystem.out.println(maps.size());\\n\\n// 11.合并其他Map集合。(拓展)\\nMap<String,Integer> maps2 = new HashMap<>();\\nmaps2.put(\\\"xiaoMi\\\" , 1);\\nmaps2.put(\\\"🔨手机\\\" , 10);\\nmaps2.put(\\\"手表\\\" , 10000);\\nmaps.putAll(maps2); // 把Map集合maps2的数据全部倒入到maps集合中去\\nSystem.out.println(maps);\\n```\\n\\n### Map集合的遍历\\n\\n`Map`集合的遍历方式有3种：\\n\\n* **键找值**的方式遍历：先获取`Map`集合全部的键，再根据遍历键找值\\n* **键值对**的方式遍历\\n* JDK1.8之后支持`Lambda`表达式\\n\\n首先是**键找值**遍历方式\\n\\n* 先获取`Map`集合的全部键的`Set`集合\\n* 遍历键的`Set`集合，然后通过键找值\\n\\n```java\\nSet<String> keys = maps.keySet();\\nfor (String key : keys) {\\n    // 过键取对应的值\\n    Integer value = maps.get(key);\\n    System.out.println(key + \\\"=\\\" + value);\\n}\\n```\\n\\n然后是**键值对**的方式遍历\\n\\n* 把`Map`集合转换成一个`Set`集合:`Set<Map.Entry<K, V>> entrySet();`\\n* 此时键值对元素的类型就确定了，类型是键值对实体类型：`Map.Entry<K, V>`\\n* 接下来就可以用`foreach`遍历这个`Set`集合，类型用`Map.Entry<K, V>`\\n\\n```java\\nSet<Map.Entry<String,Integer>> entries = maps.entrySet();\\nfor (Map.Entry<String, Integer> entry : entries) {\\n    String key = entry.getKey();\\n    Integer value = entry.getValue();\\n    System.out.println(key + \\\"=>\\\" + value);\\n}\\n```\\n\\n最后是简介的`Lambda`表达式\\n\\n```java\\nmaps.forEach((k , v) -> {\\n    System.out.println(k+\\\"==>\\\"+v);\\n});\\n```\\n\\n### Map集合存储自定义类型\\n\\n`Map`集合的键和值都可以存储自定义类型\\n\\n如果`Map`集合认为自定义类型的键对象重复了，必须重写对象的`hashCode()`和`equals()`方法\\n\\n`Orange.java`\\n\\n```java\\npublic class Orange {\\n    private String name;\\n    private double weight;\\n    private String price;\\n\\n\\n    public Orange() {\\n    }\\n\\n    public Orange(String name, double weight, String price) {\\n        this.name = name;\\n        this.weight = weight;\\n        this.price = price;\\n    }\\n\\n    @Override\\n    public boolean equals(Object o) {\\n        if (this == o) return true;\\n        if (o == null || getClass() != o.getClass()) return false;\\n        Orange orange = (Orange) o;\\n        return Double.compare(orange.weight, weight) == 0 &&\\n                Objects.equals(name, orange.name) &&\\n                Objects.equals(price, orange.price);\\n    }\\n\\n    @Override\\n    public int hashCode() {\\n        return Objects.hash(name, weight, price);\\n    }\\n    \\n    //...\\n}\\n```\\n\\n`Map`使用自定义存储类型\\n\\n```java\\nMap<Orange,String> maps = new HashMap<>();\\nOrange o1 = new Orange(\\\"黄橘子\\\",20.3 , \\\"贼便宜！\\\");\\nOrange o2 = new Orange(\\\"黑橘子\\\",30.3 , \\\"坏了\\\");\\nOrange o3 = new Orange(\\\"青橘子\\\",34.3 , \\\"9.9包邮\\\");\\nOrange o4 = new Orange(\\\"黄橘子\\\",20.3 , \\\"贼便宜！\\\");\\n\\nmaps.put(o1 , \\\"江西\\\\n\\\");\\nmaps.put(o2 , \\\"赣州\\\\n\\\");\\nmaps.put(o3 , \\\"广州\\\\n\\\");\\nmaps.put(o4 , \\\"广西\\\\n\\\");\\n\\nSystem.out.println(maps);\\n```\\n\\n### LinkedHashMap的特点\\n\\n`LinkedHashMap`是`HashMap`的子类，添加的元素按照键有序，不重复的。\\n\\n`HashSet`集合相当于是`HashMap`集合的键都不带值。\\n\\n`LinkedHashSet`集合相当于是`LinkedHashMap`集合的键都不带值。\\n\\n底层原理完全一样，都是基于哈希表按照键存储数据的，\\n\\n只是`HashMap`或者`LinkedHashMap`的键都多一个附属值。\\n\\n```java\\nMap<String , Integer> maps = new LinkedHashMap<>();\\nmaps.put(\\\"iphoneX\\\",10);\\nmaps.put(\\\"娃娃\\\",30);\\nmaps.put(\\\"iphoneX\\\",100); // 依然是保留前面的位置，只是替换其值！\\nmaps.put(\\\"huawei\\\",1000);\\nmaps.put(\\\"生活用品\\\",10);\\nmaps.put(\\\"手表\\\",10);\\nSystem.out.println(maps);\\n```\\n\\n* `HashMap`集合是无序不重复的键值对集合。\\n* `LinkedHashMap`集合是有序不重复的键值对集合。\\n* 他们都是基于哈希表存储数据,增删改查都很好。\\n\\n### TreeMap集合应用\\n\\n* `TreeMap`集合按照键是可排序不重复的键值对集合。(默认升序)\\n* `TreeMap`集合按照键排序的特点与`TreeSet`是完全一样的\\n\\n> `TreeMap`集合和`TreeSet`集合都是排序不重复集合\\n>\\n> `TreeSet`集合的底层是基于`TreeMap`，只是键没有附属值而已。\\n>\\n> 所以`TreeMap`集合指定大小规则有2种方式：\\n>\\n> * 直接为对象的类实现比较器规则接口`Comparable`，重写比较方法（拓展方式）\\n> * 直接为集合设置比较器`Comparator`对象,重写比较方法\\n\\n类实现`Comparable`\\n\\n```java\\n// 比较者： this\\n// 被比较者： o\\n// 需求：按照价格排序！\\n@Override\\npublic int compareTo(Object o) {\\n    // 浮点型的大小比较建议使用Java自己的API:\\n    // public static int compare(double d1, double d2)\\n    return  -Double.compare(this.price , ((Pig)o).price);\\n}\\n```\\n\\n集合设置`Comparator`\\n\\n```java\\nMap<Pig,String> pigs1 = new TreeMap<>(new Comparator<Pig>() {\\n    @Override\\n    public int compare(Pig p1, Pig p2) {\\n        return Double.compare(p1.getWeight() , p2.getWeight());\\n    }\\n});\\n```\\n\\n## 第二章 排序算法\\n\\n### 冒泡排序算法\\n\\n```java\\nint[] arr = new int[] {55, 22, 99, 88};\\n// 1.定义一个循环控制总共需要冒泡几轮：数组的长度-1\\nfor(int i = 0 ;  i < arr.length - 1 ; i++ ){\\n    // i = 0   j = 0 1 2\\n    // i = 1   j = 0 1\\n    // i = 2   j = 0\\n    // 2.控制每轮比较几次。\\n    for(int j = 0 ; j < arr.length - i - 1 ; j++ ){\\n        // 如果当前元素大于后一个元素\\n        if(arr[j] > arr[j+1]){\\n            // 交换位置。大的元素必须后移！\\n            // 定义一个临时变量存储后一个元素\\n            int temp = arr[j+1];\\n            arr[j+1] = arr[j];\\n            arr[j] = temp;\\n        }\\n    }\\n}\\n```\\n\\n## 选择排序算法\\n\\n```java\\nint[] arr = {5 , 1 , 3 , 2};\\n// 1.定义一个循环控制选择几轮\\nfor(int i = 0 ; i < arr.length - 1 ; i++ ){\\n    // 2.定义一个循环控制每轮比较几次，一定是以当前位置与后面元素比较\\n    // i =0  j = 1 2 3\\n    // i =1  j = 2 3\\n    // i =2  j = 3\\n    // 遍历后面的元素\\n    for(int j = i+1 ; j < arr.length ; j++ ){\\n        // 拿当前位置与j指定的元素进行大小比较，后面的较小就交换位置\\n        if(arr[j] < arr[i]){\\n            int temp = arr[i];\\n            arr[i] = arr[j];\\n            arr[j] = temp;\\n        }\\n    }\\n}\\n```\\n\\n## 第三章 二分查找\\n\\n**二分查找的前提**：对数组是有要求的,数组必须已经排好序。\\n\\n每次先与中间的元素进行比较，如果大于往右边找，如果小于往左边找，如果等于就返回该元素索引位置！\\n\\n如果没有该元素，返回-1。综合性能比较好！！\\n\\n```java\\n/**\\n     *\\n     * @param arr  被检索的数组\\n     * @param number 被检索的元素值\\n     * @return  返回元素在数组中的索引值，不存在该元素返回-1\\n     */\\npublic static int binarySerach(int[] arr , int number){\\n    // 3.记录当前区间搜索的开始索引和结束索引。\\n    int start = 0 ;\\n    int end = arr.length - 1;\\n    // 4.定义一个循环，反复去循环元素。\\n    while(start <= end){\\n        // 5.取中间索引位置\\n        int middleIndex = (start + end) / 2 ;\\n        // 6.判断当前元素与中间元素的大小\\n        if(number < arr[middleIndex]){\\n            // 7.往左边继续寻找，结束索引应该-1\\n            end = middleIndex - 1;\\n        }else if(number > arr[middleIndex]){\\n            start = middleIndex + 1;\\n        }else if(number == arr[middleIndex]){\\n            return middleIndex;\\n        }\\n    }\\n    // 如果上述循环执行完毕还没有返回索引，说明根本不存在该元素值，直接返回-1\\n    return -1;\\n}\\n```\\n\\n# day7-异常、线程\\n\\n## 第一章 异常\\n\\n### 异常的概述和体系\\n\\n**异常**：指的是程序在执行过程中，出现的非正常的情况，最终会导致JVM的非正常停止\\n\\n* 在`Java`等面向对象的编程语言中，异常本身是一个类，产生异常就是创建异常对象并抛出了一个异常对象。`Java`处理异常的方式是中断处理。\\n* `Java`会为常见的代码异常都设计一个类来代表\\n* `Java`中异常继承的根类是：`Throwable`\\n\\n<img src=\\\"http://47.108.219.199:81/articles/image-20220603140634079.png\\\" alt=\\\"image-20220603140634079\\\" style=\\\"zoom: 80%;\\\" />\\n\\n`Error `: 错误的意思，严重错误`Error`，无法通过处理的错误，一旦出现，程序员无能为力了，\\n\\n* 只能重启系统，优化项目。\\n* 比如内存奔溃，`JVM`本身的奔溃。这个程序员无需理会。\\n\\n`Exception`:才是异常类，它才是开发中代码在编译或者执行的过程中可能出现的错误，\\n\\n* 它是需要提前处理的。以便程序更健壮！\\n\\n`Exception`异常的分类:\\n\\n* **编译时异常**：继承自`Exception`的异常或者其子类，编译阶段就会报错，必须程序员处理的。否则代码编译就不能通过\\n* **运行时异常**: 继承自`RuntimeException`的异常或者其子类，编译阶段是不会出错的，它是在运行时阶段可能出现，运行时异常可以处理也可以不处理，编译阶段是不会出错的，但是运行阶段可能出现，还是建议提前处理\\n\\n### 常见的运行时异常==面试热点==\\n\\n继承自`RuntimeException`的异常或者其子类，编译阶段是不会出错的，它是在运行时阶段可能出现的错误，运行时异常编译阶段可以处理也可以不处理,代码编译都能通过\\n\\n* 数组索引越界异常: `ArrayIndexOutOfBoundsException`\\n* 空指针异常 : `NullPointerException`\\n  直接输出没有问题。但是调用空指针的变量的功能就会报错\\n* 类型转换异常：`ClassCastException`\\n* 迭代器遍历没有此元素异常：`NoSuchElementException`\\n* 数学操作异常：`ArithmeticException`\\n* 数字转换异常： `NumberFormatException`\\n\\n### 编译时异常\\n\\n编译时异常：继承自`Exception`的异常或者其子类，没有继承`RuntimeException`\\n\\n* \\\"编译时异常是编译阶段就会报错\\\"，\\n* 必须程序员编译阶段就处理的。否则代码编译就报错\\n\\n编译时异常的作用是什么：\\n\\n* 是担心程序员的技术不行，在编译阶段就爆出一个错误, 目的在于提醒\\n* 提醒程序员这里很可能出错，请检查并注意不要出bug\\n\\n## 第二章 异常的处理\\n\\n### 异常的产生、处理的默认过程\\n\\n* 默认会在出现异常的代码那里自动的创建一个异常对象：`ArithmeticException`。\\n* 异常会从方法中出现的点这里抛出给调用者，调用者最终抛出给`JVM`虚拟机。\\n* 虚拟机接收到异常对象后，先在控制台直接输出异常栈信息数据。\\n* 直接从当前执行的异常点干掉当前程序。\\n* 后续代码没有机会执行了，因为程序已经死亡。\\n\\n### 编译时异常处理机制\\n\\n方法一\\n\\n* 在出现编译时异常的地方层层把异常抛出去给调用者，调用者最终抛出给JVM虚拟机。\\n* JVM虚拟机输出异常信息，直接干掉程序，这种方式与默认方式是一样的。\\n\\n抛出异常格式：\\n\\n```java\\n\\n方法 throws 异常1 ,  异常2 , ..{\\n\\n}\\n建议抛出异常的方式：代表可以抛出一切异常，\\n方法 throws Exception{\\n\\n}\\n```\\n\\n虽然可以解决代码编译时的错误，但是一旦运行时真的出现异常，程序还是会立即死亡\\n\\n方法二\\n\\n在出现异常的地方自己处理，谁出现谁处理\\n\\n```java\\ntry{\\n    // 监视可能出现异常的代码！\\n}catch(异常类型1 变量){\\n    // 处理异常\\n}catch(异常类型2 变量){\\n    // 处理异常\\n}...\\n```\\n\\n> 第二种方式，可以处理异常，并且出现异常后代码也不会死亡。这种方案还是可以的。但是从理论上来说，这种方式不是最好的，上层调用者不能直接知道底层的执行情况\\n\\n```java\\ntry{\\n    SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy/MM-dd HH:mm:ss\\\");\\n    Date d = sdf.parse(time);\\n    System.out.println(d);\\n\\n    InputStream is = new FileInputStream(\\\"D:/meinv.png\\\");\\n} catch (FileNotFoundException e) {\\n    System.err.println(\\\"文件根本不存在！\\\");\\n} catch (ParseException e) {\\n    System.err.println(\\\"解析有问题，请检查代码！\\\");\\n}\\n```\\n\\n方法三\\n\\n在出现异常的地方吧异常一层一层的抛出给最外层调用者，最外层调用者集中捕获处理==规范做法==\\n\\n> 这种方案最外层调用者可以知道底层执行的情况，同时程序在出现异常后也不会立即死亡，这是\\n> 理论上最好的方案\\n\\n\\n\\n```java\\npublic static void main(String[] args) {\\n    System.out.println(\\\"程序开始。。。。\\\");\\n    try {\\n        parseDate(\\\"2013-03-23 10:19:23\\\");\\n        System.out.println(\\\"功能成功执行！！\\\");\\n    } catch (Exception e) {\\n        e.printStackTrace();\\n        System.out.println(\\\"功能执行失败！！\\\");\\n    }\\n    System.out.println(\\\"程序结束。。。。。\\\");\\n}\\n\\n// 可以拦截所以异常!\\npublic static void parseDate(String time) throws Exception {\\n    SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\");\\n    Date d = sdf.parse(time);\\n    System.out.println(d);\\n\\n    InputStream is = new FileInputStream(\\\"D:/meinv.png\\\");\\n}\\n```\\n\\n### 运行时异常的处理机制\\n\\n运行时异常在编译阶段是不会报错，在运行阶段才会出错。运行时异常在编译阶段不处理也不会报错，但是运行时如果出错了程序还是会死亡。所以运行时异常也建议要处理。\\n\\n运行时异常是自动往外抛出的，不需要我们手工抛出。\\n\\n运行时异常的处理规范：直接在最外层捕获处理即可，底层会自动抛出\\n\\n```java\\npublic static void main(String[] args) {\\n        System.out.println(\\\"程序开始。。。。\\\");\\n        try{\\n            chu(10 , 0);\\n            System.out.println(\\\"操作成功！\\\");\\n        }catch (Exception e){\\n            e.printStackTrace();\\n            System.out.println(\\\"操作失败！\\\");\\n        }\\n        System.out.println(\\\"程序结束。。。。\\\");\\n    }\\n\\n    public static void chu(int a , int b)  {\\n        System.out.println( a / b );\\n    }\\n```\\n\\n### finally关键字\\n\\n用在捕获处理的异常格式中的，放在最后面\\n\\n无论代码是出现异常还是正常执行，最终一定要执行这里的代码\\n\\n```java\\ntry{\\n    // 可能出现异常的代码！\\n}catch(Exception e){\\n    e.printStackTrace();\\n}finally{\\n    // 无论代码是出现异常还是正常执行，最终一定要执行这里的代码！！\\n}\\n```\\n\\n`finally`的作用: 可以在代码执行完毕以后进行资源的释放操作。\\n\\n```java\\ntry{\\n    //System.out.println(10/0);\\n    is = new FileInputStream(\\\"D:/cang.png\\\");\\n    System.out.println(10 / 0 );\\n\\n}catch (Exception e){\\n    e.printStackTrace();\\n}finally {\\n    System.out.println(\\\"==finally被执行===\\\");\\n    // 回收资源。用于在代码执行完毕以后进行资源的回收操作！\\n    try {\\n        if(is!=null)is.close();\\n    } catch (Exception e) {\\n        e.printStackTrace();\\n    }\\n}\\n```\\n\\n### 异常的注意事项\\n\\n- 运行时异常被抛出可以不处理。可以自动抛出,编译时异常必须处理.按照规范都应该处理!\\n- 重写方法申明抛出的异常，**应该与父类被重写方法申明抛出的异常一样或者范围更小**\\n- 方法默认都可以自动抛出运行时异常！  `throws RuntimeException`可以省略不写!!\\n- 当多异常处理时，捕获处理，**前边的异常类不能是后边异常类的父类**。\\n- 在`try/catch`后可以追加`finally`代码块，其中的代码一定会被执行，通常用于资源回收操作。\\n\\n## 第三章 自定义异常\\n\\n自定义**编译时异常**\\n\\n- 定义一个异常类继承`Exception`\\n- 重写构造器\\n- 在出现异常的地方用`throw new `自定义对象抛出\\n- 编译时异常是编译阶段就报错，提醒更加强烈，一定需要处理\\n\\n```java\\npublic class ItheimaAgeIllegalException extends Exception {\\n    public ItheimaAgeIllegalException() {\\n    }\\n\\n    public ItheimaAgeIllegalException(String message) {\\n        super(message);\\n    }\\n\\n    public ItheimaAgeIllegalException(String message, Throwable cause) {\\n        super(message, cause);\\n    }\\n\\n    public ItheimaAgeIllegalException(Throwable cause) {\\n        super(cause);\\n    }\\n\\n    public ItheimaAgeIllegalException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\\n        super(message, cause, enableSuppression, writableStackTrace);\\n    }\\n}\\n```\\n\\n自定义**运行时异常**\\n\\n- 定义一个异常类继承`RuntimeException`\\n- 重写构造器\\n- 在出现异常的地方用`throw new`自定义对象抛出\\n- 提醒不强烈，编译阶段不报错，运行时才可能出现\\n\\n```java\\npublic class ItheimaAgeIllegalRuntimeException extends RuntimeException {\\n    public ItheimaAgeIllegalRuntimeException() {\\n    }\\n\\n    public ItheimaAgeIllegalRuntimeException(String message) {\\n        super(message);\\n    }\\n\\n    public ItheimaAgeIllegalRuntimeException(String message, Throwable cause) {\\n        super(message, cause);\\n    }\\n\\n    public ItheimaAgeIllegalRuntimeException(Throwable cause) {\\n        super(cause);\\n    }\\n\\n    public ItheimaAgeIllegalRuntimeException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\\n        super(message, cause, enableSuppression, writableStackTrace);\\n    }\\n}\\n```\\n\\n异常的作用：\\n\\n* 可以处理代码问题，防止程序出现异常后的死亡\\n* 提高了程序的健壮性和安全性\\n\\n```java\\ntry{\\n    Scanner sc = new Scanner(System.in);\\n    System.out.println(\\\"请您输入您的年年龄：\\\");\\n    int age = sc.nextInt();\\n    System.out.println(\\\"您是：\\\"+age);\\n    break;\\n}catch (Exception e){\\n    System.err.println(\\\"您的年龄是瞎输入的！\\\");\\n}\\n```\\n\\n## 第四章 多线程\\n\\n### 进程与线程\\n\\n- **进程**：是指一个内存中运行的应用程序，每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程；进程也是程序的一次执行过程，是系统运行程序的基本单位；系统运行一个程序即是一个进程从创建、运行到消亡的过程。\\n- **线程**：是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程。一个进程中是可以有多个线程的，这个应用程序也可以称之为多线程程序。\\n\\n进程的三个特征：\\n\\n- 动态性 ： 进程是运行中的程序，要动态的占用内存，CPU和网络等资源。\\n\\n- 独立性 ： 进程与进程之间是相互独立的，彼此有自己的独立内存区域。\\n\\n- 并发性 ： 假如`CPU`是单核，同一个时刻其实内存中只有一个进程在被执行。\\n\\n  `CPU`会分时轮询切换依次为每个进程服务，因为切换的速度非常快，给我们的感觉这些进程在同时执行，这就是并发性。\\n\\n线程的作用\\n\\n- 可以提高程序的效率，线程也支持并发性，可以有更多机会得到CPU。\\n- 多线程可以解决很多业务模型。\\n- 大型高并发技术的核心技术。\\n- 设计到多线程的开发可能都比较难理解。\\n\\n### 线程常用方法\\n\\n线程开启我们需要用到了`java.lang.Thread`类，API中该类中定义了有关线程的一些方法，具体如下：\\n\\n**构造方法：**\\n\\n- `public Thread()`:分配一个新的线程对象。\\n- `public Thread(String name)`:分配一个指定名字的新的线程对象。\\n- `public Thread(Runnable target)`:分配一个带有指定目标新的线程对象。\\n- `public Thread(Runnable target,String name)`:分配一个带有指定目标新的线程对象并指定名字。\\n\\n**常用方法：**\\n\\n- `public void setName(String name)`：给当前线程取名字\\n- `public String getName()`:获取当前线程名称。\\n- `public void start()`:导致此线程开始执行; Java虚拟机调用此线程的run方法。\\n- `public void run()`:此线程要执行的任务在此处定义代码。\\n- `public static void sleep(long millis)`:使当前正在执行的线程以指定的毫秒数暂停（暂时停止执行）。\\n- `public static Thread currentThread()  `:返回对当前正在执行的线程对象的引用。\\n\\n翻阅API后得知创建线程的方式总共有两种，一种是继承Thread类方式，一种是实现Runnable接口方式，方式一我们上一天已经完成，接下来讲解方式二实现的方式。\\n\\n### 线程的创建方式一-继承方式\\n\\nJava使用`java.lang.Thread`类代表**线程**，所有的线程对象都必须是Thread类或其子类的实例。每个线程的作用是完成一定的任务，实际上就是执行一段程序流即一段顺序执行的代码。Java使用线程执行体来代表这段程序流。Java中通过继承Thread类来**创建**并**启动多线程**的步骤如下：\\n\\n1. 定义Thread类的子类，并重写该类的run()方法，该run()方法的方法体就代表了线程需要完成的任务,因此把run()方法称为线程执行体。\\n2. 创建Thread子类的实例，即创建了线程对象\\n3. 调用线程对象的start()方法来启动该线程\\n\\n```java\\npublic class ThreadDemo {\\n    // 启动后的ThreadDemo当成一个进程。\\n    // main方法是由主线程执行的，理解成main方法就是一个主线程\\n    public static void main(String[] args) {\\n        // 3.创建一个线程对象\\n        Thread t = new MyThread();\\n        // 4.调用线程对象的start()方法启动线程,最终还是执行run()方法！\\n        t.start();\\n\\n        for(int i = 0 ; i < 100 ; i++ ){\\n            System.out.println(\\\"main线程输出：\\\"+i);\\n        }\\n    }\\n}\\n\\n// 1.定义一个线程类继承Thread类。\\nclass MyThread extends Thread{\\n    // 2.重写run()方法\\n    @Override\\n    public void run() {\\n        // 线程的执行方法。\\n        for(int i = 0 ; i < 100 ; i++ ){\\n            System.out.println(\\\"子线程输出：\\\"+i);\\n        }\\n    }\\n}\\n```\\n\\n> * 线程的启动必须调用`start()`方法，否则当成普通类处理\\n>   * 如果线程直接调用`run()`方法，相当于变成了普通类的执行，此时只有主线程在执行他们\\n>   * `start()`方法底层其实是给CPU注册当前线程，并且触发`run()`方法执行\\n> * 建议线程先创建子线程，主线程的任务放在之后，否则主线程永远是先执行完\\n\\n### 线程创建方式二-实现方式\\n\\n采用`java.lang.Runnable`也是非常常见的一种，我们只需要重写run方法即可。\\n\\n步骤如下：\\n\\n1. 定义Runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。\\n2. 创建Runnable实现类的实例，并以此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。\\n3. 调用线程对象的start()方法来启动线程。\\n\\n```java\\npublic class ThreadDemo {\\n    public static void main(String[] args) {\\n        // 3.创建一个线程任务对象(注意：线程任务对象不是线程对象，只是执行线程的任务的)\\n        Runnable target = new MyRunnable();\\n        // 4.把线程任务对象包装成线程对象.且可以指定线程名称\\n        // Thread t = new Thread(target);\\n        Thread t = new Thread(target,\\\"1号线程\\\");\\n        // 5.调用线程对象的start()方法启动线程\\n        t.start();\\n\\n        Thread t2 = new Thread(target);\\n        // 调用线程对象的start()方法启动线程\\n        t2.start();\\n\\n        for(int i = 0 ; i < 10 ; i++ ){\\n            System.out.println(Thread.currentThread().getName()+\\\"==>\\\"+i);\\n        }\\n    }\\n}\\n\\n// 1.创建一个线程任务类实现Runnable接口。\\nclass MyRunnable implements Runnable{\\n    // 2.重写run()方法\\n    @Override\\n    public void run() {\\n        for(int i = 0 ; i < 10 ; i++ ){\\n            System.out.println(Thread.currentThread().getName()+\\\"==>\\\"+i);\\n        }\\n    }\\n}\\n```\\n\\n### 匿名内部类方式\\n\\n这种方式是实现方式的匿名内部类写法，代码更加简洁\\n\\n```java\\npublic class NoNameInnerClassThread {\\n   \\tpublic static void main(String[] args) {\\t   \\t\\n//\\t\\tnew Runnable(){\\n//\\t\\t\\tpublic void run(){\\n//\\t\\t\\t\\tfor (int i = 0; i < 20; i++) {\\n//\\t\\t\\t\\t\\tSystem.out.println(\\\"张宇:\\\"+i);\\n//\\t\\t\\t\\t}\\n//\\t\\t\\t}  \\n//\\t   \\t}; //---这个整体  相当于new MyRunnable()\\n        Runnable r = new Runnable(){\\n            public void run(){\\n                for (int i = 0; i < 20; i++) {\\n                  \\tSystem.out.println(\\\"张宇:\\\"+i);\\n                }\\n            }  \\n        };\\n        new Thread(r).start();\\n\\n        for (int i = 0; i < 20; i++) {\\n          \\tSystem.out.println(\\\"费玉清:\\\"+i);\\n        }\\n   \\t}\\n}\\n```\\n\\n### 线程创建方式三-实现Callable接口\\n\\n\\n\\n- 定义一个线程任务类实现Callable接口 ， 申明线程执行的结果类型。\\n- 重写线程任务类的call方法，这个方法可以直接返回执行的结果。\\n- 创建一个Callable的线程任务对象。\\n- 把Callable的线程任务对象包装成一个未来任务对象。\\n- 把未来任务对象包装成线程对象。\\n- 调用线程的start()方法启动线程\\n\\n这样做的优点是：\\n\\n- 线程任务类只是实现了Callable接口，可以继续继承其他类，而且可以继续实现其他接口（避免了单继承的局限性）\\n- 同一个线程任务对象可以被包装成多个线程对象\\n- 适合多个多个线程去共享同一个资源（后面内容）\\n- 实现解耦操作，线程任务代码可以被多个线程共享，线程任务代码和线程独立。\\n- 线程池可以放入实现Runable或Callable线程任务对象。(后面了解)\\n- 能直接得到线程执行的结果！\\n\\n```java\\npublic class ThreadDemo {\\n    public static void main(String[] args) {\\n        // 3.创建一个Callable的线程任务对象\\n        Callable call = new MyCallable();\\n        // 4.把Callable任务对象包装成一个未来任务对象\\n        //      -- public FutureTask(Callable<V> callable)\\n        // 未来任务对象是啥，有啥用？\\n        //      -- 未来任务对象其实就是一个Runnable对象:这样就可以被包装成线程对象！\\n        //      -- 未来任务对象可以在线程执行完毕之后去得到线程执行的结果。\\n        FutureTask<String> task = new FutureTask<>(call);\\n        // 5.把未来任务对象包装成线程对象\\n        Thread t = new Thread(task);\\n        // 6.启动线程对象\\n        t.start();\\n\\n        for(int i = 1 ; i <= 10 ; i++ ){\\n            System.out.println(Thread.currentThread().getName()+\\\" => \\\" + i);\\n        }\\n\\n        // 在最后去获取线程执行的结果,如果线程没有结果，让出CPU等线程执行完再来取结果\\n        try {\\n            String rs = task.get(); // 获取call方法返回的结果（正常/异常结果）\\n            System.out.println(rs);\\n        }  catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n\\n    }\\n}\\n\\n// 1.创建一个线程任务类实现Callable接口，申明线程返回的结果类型\\nclass MyCallable implements Callable<String>{\\n    // 2.重写线程任务类的call方法！\\n    @Override\\n    public String call() throws Exception {\\n        // 需求：计算1-10的和返回\\n        int sum = 0 ;\\n        for(int i = 1 ; i <= 10 ; i++ ){\\n            System.out.println(Thread.currentThread().getName()+\\\" => \\\" + i);\\n            sum+=i;\\n        }\\n        return Thread.currentThread().getName()+\\\"执行的结果是：\\\"+sum;\\n    }\\n}\\n```\\n\\n## 第五章 线程安全\\n\\n线程安全问题：多个线程同时操作同一个共享资源的时候可能会出现线程安全问题\\n\\n### 同步代码块\\n\\n- **同步代码块**：`synchronized`关键字可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。\\n\\n格式: \\n\\n```java\\nsynchronized(同步锁){\\n     需要同步操作的代码\\n}\\n```\\n\\n**同步锁**:\\n\\n对象的同步锁只是一个概念,可以想象为在对象上标记了一个锁.\\n\\n1. 锁对象 可以是任意类型。\\n2. 多个线程对象  要使用同一把锁。\\n\\n> 注意:在任何时候,最多允许一个线程拥有同步锁,谁拿到锁就进入代码块,其他的线程只能在外等着(BLOCKED)。\\n\\n使用同步代码块解决代码：\\n\\n```java\\npublic class Ticket implements Runnable{\\n\\tprivate int ticket = 100;\\n\\t\\n\\tObject lock = new Object();\\n\\t/*\\n\\t * 执行卖票操作\\n\\t */\\n\\t@Override\\n\\tpublic void run() {\\n\\t\\t//每个窗口卖票的操作 \\n\\t\\t//窗口 永远开启 \\n\\t\\twhile(true){\\n\\t\\t\\tsynchronized (lock) {\\n\\t\\t\\t\\tif(ticket>0){//有票 可以卖\\n\\t\\t\\t\\t\\t//出票操作\\n\\t\\t\\t\\t\\t//使用sleep模拟一下出票时间 \\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tThread.sleep(50);\\n\\t\\t\\t\\t\\t} catch (InterruptedException e) {\\n\\t\\t\\t\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t//获取当前线程对象的名字 \\n\\t\\t\\t\\t\\tString name = Thread.currentThread().getName();\\n\\t\\t\\t\\t\\tSystem.out.println(name+\\\"正在卖:\\\"+ticket--);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n```\\n\\n### 同步方法\\n\\n- **同步方法**:使用synchronized修饰的方法,就叫做同步方法,保证A线程执行该方法的时候,其他线程只能在方法外等着。\\n\\n格式：\\n\\n```java\\npublic synchronized void method(){\\n   \\t可能会产生线程安全问题的代码\\n}\\n```\\n\\n> 同步锁是谁?\\n>\\n> ​      对于非static方法,同步锁就是this。  \\n>\\n> ​      对于static方法,我们使用当前方法所在类的字节码对象(类名.class)。\\n\\n使用同步方法代码如下：\\n\\n```java\\npublic class Ticket implements Runnable{\\n\\tprivate int ticket = 100;\\n\\t/*\\n\\t * 执行卖票操作\\n\\t */\\n\\t@Override\\n\\tpublic void run() {\\n\\t\\t//每个窗口卖票的操作 \\n\\t\\t//窗口 永远开启 \\n\\t\\twhile(true){\\n\\t\\t\\tsellTicket();\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/*\\n\\t * 锁对象 是 谁调用这个方法 就是谁 \\n\\t *   隐含 锁对象 就是  this\\n\\t *    \\n\\t */\\n\\tpublic synchronized void sellTicket(){\\n        if(ticket>0){//有票 可以卖\\t\\n            //出票操作\\n            //使用sleep模拟一下出票时间 \\n            try {\\n              \\tThread.sleep(100);\\n            } catch (InterruptedException e) {\\n              \\t// TODO Auto-generated catch block\\n              \\te.printStackTrace();\\n            }\\n            //获取当前线程对象的名字 \\n            String name = Thread.currentThread().getName();\\n            System.out.println(name+\\\"正在卖:\\\"+ticket--);\\n        }\\n\\t}\\n}\\n```\\n\\n### Lock锁\\n\\n`java.util.concurrent.locks.Lock`机制提供了比**synchronized**代码块和**synchronized**方法更广泛的锁定操作,同步代码块/同步方法具有的功能Lock都有,除此之外更强大\\n\\nLock锁也称同步锁，加锁与释放锁方法化了，如下：\\n\\n- `public void lock() `:加同步锁。\\n- `public void unlock()`:释放同步锁。\\n\\n使用如下：\\n\\n```java\\npublic class Ticket implements Runnable{\\n\\tprivate int ticket = 100;\\n\\t\\n\\tLock lock = new ReentrantLock();\\n\\t/*\\n\\t * 执行卖票操作\\n\\t */\\n\\t@Override\\n\\tpublic void run() {\\n\\t\\t//每个窗口卖票的操作 \\n\\t\\t//窗口 永远开启 \\n\\t\\twhile(true){\\n\\t\\t\\tlock.lock();\\n\\t\\t\\tif(ticket>0){//有票 可以卖\\n\\t\\t\\t\\t//出票操作 \\n\\t\\t\\t\\t//使用sleep模拟一下出票时间 \\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tThread.sleep(50);\\n\\t\\t\\t\\t} catch (InterruptedException e) {\\n\\t\\t\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t//获取当前线程对象的名字 \\n\\t\\t\\t\\tString name = Thread.currentThread().getName();\\n\\t\\t\\t\\tSystem.out.println(name+\\\"正在卖:\\\"+ticket--);\\n\\t\\t\\t}\\n\\t\\t\\tlock.unlock();\\n\\t\\t}\\n\\t}\\n}\\n```\\n\\n# day8-线程状态、volatile关键字、原子性、并发包、死锁、线程池\\n\\n## 第一章 线程状态\\n\\n### 线程状态概述\\n\\n当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。在线程的生命周期中，有几种状态呢？在API中`java.lang.Thread.State`这个枚举中给出了六种线程状态：\\n\\n这里先列出各个线程状态发生的条件，下面将会对每种状态进行详细解析\\n\\n| 线程状态                | 导致状态发生条件                                             |\\n| ----------------------- | ------------------------------------------------------------ |\\n| NEW(新建)               | 线程刚被创建，但是并未启动。还没调用start方法。MyThread t = new MyThread只有线程对象，没有线程特征。 |\\n| Runnable(可运行)        | 线程可以在java虚拟机中运行的状态，可能正在运行自己代码，也可能没有，这取决于操作系统处理器。调用了t.start()方法   ：就绪（经典教法） |\\n| Blocked(锁阻塞)         | 当一个线程试图获取一个对象锁，而该对象锁被其他的线程持有，则该线程进入Blocked状态；当该线程持有锁时，该线程将变成Runnable状态。 |\\n| Waiting(无限等待)       | 一个线程在等待另一个线程执行一个（唤醒）动作时，该线程进入Waiting状态。进入这个状态后是不能自动唤醒的，必须等待另一个线程调用notify或者notifyAll方法才能够唤醒。 |\\n| Timed Waiting(计时等待) | 同waiting状态，有几个方法有超时参数，调用他们将进入Timed Waiting状态。这一状态将一直保持到超时期满或者接收到唤醒通知。带有超时参数的常用方法有Thread.sleep 、Object.wait。 |\\n| Teminated(被终止)       | 因为run方法正常退出而死亡，或者因为没有捕获的异常终止了run方法而死亡。 |\\n\\n### 睡眠方法\\n\\n我们看到状态中有一个状态叫做计时等待，可以通过Thread类的方法来进行演示.\\n\\n`public static void  sleep(long time)`  让当前线程进入到睡眠状态，到毫秒后自动醒来继续执行\\n\\n```java\\npublic class Test{\\n  public static void main(String[] args){\\n    for(int i = 1;i<=5;i++){\\n      \\tThread.sleep(1000);\\n        System.out.println(i)   \\n    } \\n  }\\n}\\n```\\n\\n这时我们发现主线程执行到sleep方法会休眠1秒后再继续执行。\\n\\n### 等待和唤醒\\n\\nObject类的方法\\n\\n`public void wait()` : 让当前线程进入到等待状态 此方法必须锁对象调用.\\n\\n```java\\npublic class Demo1_wait {\\n    public static void main(String[] args) throws InterruptedException {\\n\\t   // 步骤1 : 子线程开启,进入无限等待状态, 没有被唤醒,无法继续运行.\\n        new Thread(() -> {\\n            try {\\n\\n                System.out.println(\\\"begin wait ....\\\");\\n                synchronized (\\\"\\\") {\\n                    \\\"\\\".wait();\\n                }\\n                System.out.println(\\\"over\\\");\\n            } catch (Exception e) {\\n            }\\n        }).start();\\n    }\\n```\\n\\n`public void notify()` : 唤醒当前锁对象上等待状态的线程  此方法必须锁对象调用.\\n\\n```java\\npublic class Demo2_notify {\\n    public static void main(String[] args) throws InterruptedException {\\n\\t   // 步骤1 : 子线程开启,进入无限等待状态, 没有被唤醒,无法继续运行.\\n        new Thread(() -> {\\n            try {\\n\\n                System.out.println(\\\"begin wait ....\\\");\\n                synchronized (\\\"\\\") {\\n                    \\\"\\\".wait();\\n                }\\n                System.out.println(\\\"over\\\");\\n            } catch (Exception e) {\\n            }\\n        }).start();\\n\\n        //步骤2:  加入如下代码后, 3秒后,会执行notify方法, 唤醒wait中线程.\\n        Thread.sleep(3000);\\n        new Thread(() -> {\\n            try {\\n                synchronized (\\\"\\\") {\\n                    System.out.println(\\\"唤醒\\\");\\n                    \\\"\\\".notify();\\n                }\\n            } catch (Exception e) {\\n            }\\n        }).start();\\n    }\\n}\\n```\\n\\n## 第二章 线程通信\\n\\n- 多个线程因为在同一个进程中，所以互相通信比较容易\\n- 线程通信一定是多个线程在操作同一个资源才需要进行通信\\n- 线程通信必须先保证线程安全，否则毫无意义\\n\\n线程通信的核心方法：\\n\\n- `public void wait()`: 让当前线程进入到等待状态 此方法必须锁对象调用.\\n- `public void notify()` : 唤醒当前锁对象上等待状态的某个线程  此方法必须锁对象调用\\n- `public void notifyAll()` : 唤醒当前锁对象上等待状态的全部线程  此方法必须锁对象调用\\n\\n## 第三章 线程池\\n\\n线程池:其实就是一个容纳多个线程的容器,其中的线程可以反复的使用，省去了频繁创建和销毁线程对象的操作,无需反复创建线程而消耗过多资源。\\n\\n合理利用线程池能够带来三个好处\\n\\n1. 降低资源消耗。\\n   减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。\\n2. 提高响应速度\\n   不需要频繁的创建线程，如果有线程可以直接用，不会出现系统僵死！\\n3. 提高线程的可管理性（线程池可以约束系统最多只能有多少个线程，不会因为线程过多而死机）\\n\\n>  线程池的核心思想：线程复用，同一个线程可以被重复使用，来处理多个任务。\\n\\n### 创建线程池\\n\\n线程池在Java中的代表类：ExecutorService(接口)。\\n\\nJava在Executors类下提供了一个静态方法得到一个线程池的对象：\\n`public static ExecutorService newFixedThreadPool(int nThreads)`：创建一个线程池返回。\\n\\n- ExecutorService提交线程任务对象执行的方法：\\n  `Future<?> submit(Runnable task)`:提交一个Runnable的任务对象给线程池执行。\\n- `Future<?> submit(Callable task)`:提交一个Callable的任务对象给线程池执行。\\n\\n> * `pools.shutdown();` // 等待任务执行完毕以后才会关闭线程池\\n> * `pools.shutdownNow();` // 立即关闭线程池的代码，无论任务是否执行完毕\\n> * 线程池中的线程可以被复用，线程用完以后可以继续去执行其他任务。\\n\\n`Runnable`任务对象给线程池执行\\n\\n```java\\nimport java.util.concurrent.ExecutorService;\\nimport java.util.concurrent.Executors;\\n\\npublic class ThreadPoolsDemo02 {\\n    public static void main(String[] args) {\\n        // a.创建一个线程池，指定线程的固定数量是3.\\n        // new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue());\\n        ExecutorService pools = Executors.newFixedThreadPool(3);\\n        // b.创建线程的任务对象。\\n        Runnable target = new MyRunnable();\\n        // c.把线程任务放入到线程池中去执行。\\n        pools.submit(target); // 提交任务，此时会创建一个新线程,自动启动线程执行！\\n        pools.submit(target); // 提交任务，此时会创建一个新线程,自动启动线程执行！\\n        pools.submit(target); // 提交任务，此时会创建一个新线程,自动启动线程执行！\\n        pools.submit(target); // 不会再创建新线程，会复用之前的线程来处理这个任务\\n\\n        pools.shutdown(); // 等待任务执行完毕以后才会关闭线程池\\n        //pools.shutdownNow(); // 立即关闭线程池的代码，无论任务是否执行完毕！\\n    }\\n}\\n\\nclass MyRunnable implements Runnable{\\n    @Override\\n    public void run() {\\n        for(int i  = 0 ; i < 5 ; i++ ){\\n            System.out.println(Thread.currentThread().getName()+\\\" => \\\"+i);\\n        }\\n    }\\n}\\n```\\n\\n`Callable`任务对象给线程池执行\\n\\n```java\\npublic class ThreadPoolsDemo03 {\\n    public static void main(String[] args) {\\n        // a.创建一个线程池，指定线程的固定数量是3.\\n        // new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue());\\n        ExecutorService pools = Executors.newFixedThreadPool(3);\\n        Future<String> t1 = pools.submit(new MyCallable(10)); // 提交任务，此时会创建一个新线程,自动启动线程执行！\\n        Future<String> t2 = pools.submit(new MyCallable(20)); // 提交任务，此时会创建一个新线程,自动启动线程执行！\\n        Future<String> t3 = pools.submit(new MyCallable(30)); // 提交任务，此时会创建一个新线程,自动启动线程执行！\\n        Future<String> t4 = pools.submit(new MyCallable(40)); // 复用之前的某个线程\\n\\n        try{\\n            // b.可以得到线程池执行的任务结构\\n            String rs1 = t1.get();\\n            String rs2 = t2.get();\\n            String rs3 = t3.get();\\n            String rs4 = t4.get();\\n            System.out.println(rs1);\\n            System.out.println(rs2);\\n            System.out.println(rs3);\\n            System.out.println(rs4);\\n        }catch (Exception e){\\n            e.printStackTrace();\\n        }\\n    }\\n}\\n\\n// 1.定义一个线程任务类实现Callable接口 ， 申明线程执行的结果类型。\\nclass MyCallable implements Callable<String>{\\n    private int n;\\n    public MyCallable(int n){\\n        this.n = n;\\n    }\\n    // 2.重写线程任务类的call方法，这个方法可以直接返回执行的结果。\\n    @Override\\n    public String call() throws Exception {\\n        int sum = 0 ;\\n        for(int i = 1 ; i <= n ; i++){\\n            System.out.println(Thread.currentThread().getName()+\\\" => \\\"+i);\\n            sum += i ;\\n        }\\n        return Thread.currentThread().getName()+\\\"计算1-\\\"+n+\\\"的和：\\\"+sum;\\n    }\\n}\\n```\\n\\n## 第四章 死锁\\n\\n死锁是这样一种情形：多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于线程被无限期地阻塞，因此程序不可能正常终止。\\n\\njava 死锁产生的四个必要条件：\\n\\n* **互斥使用**，即当资源被一个线程使用(占有)时，别的线程不能使用\\n* **不可抢占**，资源请求者不能强制从资源占有者手中夺取资源，资源只能由资源占有者主动释放\\n* **求和保持**，即当资源请求者在请求其他的资源的同时保持对原有资源的占有\\n* **循环等待**，即存在一个等待循环队列：p1要p2的资源，p2要p1的资源。这样就形成了一个等待环路\\n\\n​    当上述四个条件都成立的时候，便形成死锁。当然，死锁的情况下如果打破上述任何一个条件，便可让死锁消失\\n\\n## 第五章 volatile关键字\\n\\n**问题**：线程修改了某个成员变量的值，但是在主线程中读取到的还是之前的值修改后的值无法读取到。\\n\\n**原因**：按照JMM模型，所有的成员变量和静态变量都存在于主内存中，主内存中的变量可以被多个线程共享。每个线程都存在一个专属于自己的工作内存，工作内存一开始存储的是成员变量的副本。所以线程很多时候都是直接访问自己工作内存中的该变量，其他线程对主内存变量值的修改将不可见\\n\\n![image-20220606111513140](http://47.108.219.199:81/articles/image-20220606111513140.png)\\n\\n希望所有线程对于主内存的成员变量修改，其他线程是可见的。\\n\\n* **加锁**：可以实现其他线程对变量修改的可见性\\n  某一个线程进入`synchronized`代码块前后，执行过程入如下：\\n  * 线程获得锁\\n  * 清空工作内存\\n  * 从主内存拷贝共享变量最新的值到工作内存成为副本\\n* 可以给成员变量加上一个`volatile`关键字，立即就实现了成员变量多线程修改的可见性\\n\\n> `volatile`与`synchronized`的区别。\\n>\\n> - `volatile`只能修饰实例变量和静态变量，而`synchronized`可以修饰方法，以及代码块。\\n> - `volatile`保证数据的可见性，但是不保证原子性(多线程进行写操作，不保证线程安全);而`synchronized`是一种排他（互斥）的机制，\\n\\n```java\\npublic class VolatileDemo01 {\\n    public  static void main(String[] args) {\\n        // 1.启动线程，把线程对象中的flag改为true。\\n        VolatileThread t = new VolatileThread();\\n        t.start();\\n\\n        // 2.定义一个死循环\\n        while(true){\\n            // 这里读取到了flag值一直是false,虽然线程已经把它的值改成了true。\\n            if(t.isFlag()){\\n                System.out.println(\\\"执行了循环一次~~~~~~~\\\");\\n            }\\n        }\\n       /* while(true){\\n            synchronized (\\\"ddd\\\"){\\n                // 这里读取到了flag值一直是false,虽然线程已经把它的值改成了true。\\n                if(t.isFlag()){\\n                    System.out.println(\\\"执行了循环一次~~~~~~~\\\");\\n                }\\n            }\\n        }*/\\n    }\\n}\\n// 线程类。\\nclass VolatileThread extends Thread {\\n    // 定义成员变量\\n    // volatile可以实现变量一旦被子线程修改，其他线程可以马上看到它修改后的最新值！\\n    private volatile boolean flag = false ;\\n    public boolean isFlag() {\\n        return flag;\\n    }\\n\\n    @Override\\n    public void run() {\\n        try {\\n            Thread.sleep(1000);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n\\n        // 将flag的值更改为true\\n        this.flag = true ;\\n        System.out.println(\\\"线程修改了flag=\\\" + flag);\\n    }\\n}\\n```\\n\\n## 第六章 原子性\\n\\n**原子性**是指在一次操作或者多次操作中，所有的操作全部都得到了执行并且不会受到任何因素的干扰。最终结果要保证线程安全。\\n\\n> 在多线程环境下，`volatile`关键字可以保证共享数据的可见性，但是并不能保证对数据操作的原子性（在多线程环境下volatile修饰的变量也是线程不安全的）。\\n>   `volatile`的使用场景\\n>\\n> - 开关控制\\n>      用可见性特点，控制某一段代码执行或者关闭\\n>\\n> - 多个线程操作共享变量，但是是有一个线程对其进行写操作，其他的线程都是读\\n>\\n>   此时加上更好，其他线程可以立即读取到最新值。`volatile`不能保证变量操作的原子性（安全性）。\\n\\n### 解决方法一-加锁\\n\\n```java\\npublic class VolatileAtomicThread implements Runnable {\\n    // 定义一个int类型的遍历\\n    private volatile int count = 0 ;\\n    @Override\\n    public void run() {\\n        // 对该变量进行++操作，100次\\n        for(int x = 0 ; x < 100 ; x++) {\\n           synchronized (this){\\n               count++ ;\\n               System.out.println(Thread.currentThread().getName() + \\\"count =========>>>> \\\" + count);\\n           }\\n        }\\n    }\\n}\\n\\nclass VolatileAtomicThreadDemo {\\n    public static void main(String[] args) {\\n        // 创建VolatileAtomicThread对象\\n        Runnable target = new VolatileAtomicThread() ;\\n        // 开启100个线程对执行这一个任务。\\n        for(int x = 0 ; x < 100 ; x++) {\\n            new Thread(target).start();\\n        }\\n    }\\n\\n}\\n```\\n\\n> 这种方法虽然安全性得到了保证，但是性能不好\\n\\n### 解决方法二-基于CAS方式的原子类\\n\\nJava已经提供了一些本身即可实现原子性（线程安全）的类。\\n\\n- 概述：java从JDK1.5开始提供了java.util.concurrent.atomic包(简称Atomic包)，这个包中的原子操作类提供了一种用法简单，性能高效，线程安全地更新一个变量的方式。\\n- 操作整型的原子类\\n  - `public AtomicInteger()`：           初始化一个默认值为0的原子型`Integer`\\n  - `public AtomicInteger(int initialValue)`： 初始化一个指定值的原子型`Integer`\\n  - `int get()`:                                        获取值\\n  - `int getAndIncrement()`:               以原子方式将当前值加1，注意，这里返回的是自增前的值。\\n  - `int incrementAndGet()`:               以原子方式将当前值加1，注意，这里返回的是自增后的值。\\n  - `int addAndGet(int data)`:            以原子方式将输入的数值与实例中的值（`AtomicInteger`里的value）相加，并返回结果。\\n  - `int getAndSet(int value)`:            以原子方式设置为`newValue`的值，并返回旧值。\\n\\n```java\\npublic class VolatileAtomicThread implements Runnable {\\n    // 原子类中封装好了整型变量，默认值是0\\n    private AtomicInteger atomicInteger = new AtomicInteger();\\n    @Override\\n    public void run() {\\n        // 对该变量进行++操作，100次\\n        for(int x = 0 ; x < 100 ; x++) {\\n            int count = atomicInteger.incrementAndGet(); // 底层变量+1且返回！\\n            System.out.println(\\\"count =========>>>> \\\" + count);\\n        }\\n    }\\n}\\n\\nclass VolatileAtomicThreadDemo {\\n    public static void main(String[] args) {\\n        // 创建VolatileAtomicThread对象\\n        Runnable target = new VolatileAtomicThread() ;\\n        // 开启100个线程对执行这一个任务。\\n        for(int x = 0 ; x < 100 ; x++) {\\n            new Thread(target).start();\\n        }\\n    }\\n\\n}\\n```\\n\\n>  **CAS与Synchronized总结**\\n>\\n> `Synchronized`是从悲观的角度出发：总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁（**共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程**）。因此`Synchronized`我们也将其称之为**悲观锁**。jdk中的`ReentrantLock`也是一种悲观锁。性能较差\\n>\\n> `CAS`是从乐观的角度出发:总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据。CAS这种机制我们也可以将其称之为**乐观锁**。综合性能较好\\n\\n## 第七章 并发包\\n\\n并发包的来历：\\n在实际开发中如果不需要考虑线程安全问题，大家不需要做线程安全，因为如果做了反而性能不好！\\n但是开发中有很多业务是需要考虑线程安全问题的，此时就必须考虑了。否则业务出现问题。\\nJava为很多业务场景提供了性能优异，且线程安全的并发包，程序员可以选择使用！\\n\\n### ConcurrentHashMap\\n\\n`Map`集合中的经典集合：`HashMap`它是线程不安全的，性能好，如果在要求线程安全的业务情况下就不能用这个集合做Map集合，否则业务会崩溃\\n\\n为了保证线程安全，可以使用`Hashtable`。注意：线程中加入了计时，`Hashtable`是线程安全的`Map`集合，但是性能较差！(已经被淘汰了，虽然安全，但是性能差)\\n\\n为了保证线程安全，再看`ConcurrentHashMap`（不止线程安全，而且效率高，性能好，最新最好用的线程安全的Map集合）`ConcurrentHashMap`保证了线程安全，综合性能较好！\\n\\n> * `HashMap`是线程不安全的。\\n> *  `Hashtable`线程安全基于`synchronized`，综合性能差,被淘汰了。\\n> * `ConcurrentHashMap`：线程安全的，分段式锁，综合性能最好，线程安全开发中推荐使用\\n\\n```java\\npublic class ConcurrentHashMapDemo {\\n    // 定义一个静态的HashMap集合，只有一个容器。\\n    // public static Map<String,String> map = new HashMap<>();\\n     public static Map<String,String> map = new Hashtable<>();\\n    //public static Map<String,String> map = new ConcurrentHashMap<>();\\n\\n    public static void main(String[] args) throws InterruptedException {\\n        // HashMap线程不安全演示。\\n        // 需求：多个线程同时往HashMap容器中存入数据会出现安全问题。\\n        // 具体需求：提供2个线程分别给map集合加入50万个数据！\\n        new AddMapDataThread().start();\\n        new AddMapDataThread().start();\\n\\n        //休息10秒，确保两个线程执行完毕\\n        Thread.sleep(1000 * 4);\\n        //打印集合大小\\n        System.out.println(\\\"Map大小：\\\" + map.size());\\n    }\\n}\\n\\nclass AddMapDataThread extends Thread{\\n    @Override\\n    public void run() {\\n        for(int i = 0 ; i < 1000000 ; i++ ){\\n            ConcurrentHashMapDemo.map.put(Thread.currentThread().getName()+\\\"键：\\\"+i , \\\"值\\\"+i);\\n        }\\n    }\\n}\\n```\\n\\n### CountDownLatch\\n\\n`CountDownLatch`允许一个或多个线程等待其他线程完成操作，再执行自己。\\n\\n例如：\\n\\n线程1要执行打印：A和C，线程2要执行打印：B，但线程1在打印A后，要线程2打印B之后才能打印C，所以：线程1在打印A后，必须等待线程2打印完B之后才能继续执行\\n\\n需求：\\n\\n提供A线程，打印 A , C\\n提供B线程，打印 B\\n\\n构造器：\\n\\n`public CountDownLatch(int count)`// 初始化唤醒需要的down几步。\\n\\n方法：\\n`public void await() throws InterruptedException`// 让当前线程等待，必须down完初始化的数字才可以被唤醒，否则进入无限等待\\n`public void countDown()`    // 计数器进行减1 （down 1）\\n\\n```java\\npublic class CountDownLatchDemo {\\n    public static void main(String[] args) {\\n        //创建1个计数器：用来控制 A , B线程的执行流程的。\\n        CountDownLatch down = new CountDownLatch(1);\\n        new ThreadA(down).start();\\n        new ThreadB(down).start();\\n    }\\n}\\n\\nclass ThreadA extends Thread{\\n    private CountDownLatch down;\\n    public ThreadA(CountDownLatch down){\\n        this.down = down;\\n    }\\n    @Override\\n    public void run() {\\n        System.out.println(\\\"A\\\");\\n        try {\\n            down.await(); // A线程你进入等待，让B线程执行自己！\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n        System.out.println(\\\"C\\\");\\n    }\\n}\\n\\nclass ThreadB extends Thread{\\n    private CountDownLatch down;\\n    public ThreadB(CountDownLatch down){\\n        this.down = down;\\n    }\\n    @Override\\n    public void run() {\\n        System.out.println(\\\"B\\\");\\n        down.countDown(); // 这里相当于是-1，代表自己执行完毕了。A线程被唤醒！！\\n    }\\n}\\n```\\n\\n### CyclicBarrier\\n\\n`CyclicBarrier`作用：某个线程任务必须等待其他线程执行完毕以后才能最终触发自己执行。\\n\\n例如：公司召集5名员工开会，等5名员工都到了，会议开始。我们创建5个员工线程，1个开会任务，几乎同时启动。使用`CyclicBarrier`保证5名员工线程全部执行后，再执行开会线程。\\n\\n构造器：\\n`public CyclicBarrier(int parties, Runnable barrierAction)`\\n     // 用于在线程到达屏障5时，优先执行`barrierAction`，方便处理更复杂的业务场景\\n方法：\\n   `  public int await()`\\n     // 每个线程调用await方法告诉`CyclicBarrier`我已经到达了屏障，然后当前线程被阻塞\\n\\n> - 可以实现多线程中，某个任务在等待其他线程执行完毕以后触发。\\n> - 循环屏障可以实现达到一组屏障就触发一个任务执行！\\n\\n```java\\npublic class CyclicBarrierDemo {\\n    public static void main(String[] args) {\\n        // 1.创建一个任务循环屏障对象。\\n        /**\\n         * 参数一：代表多少个线程的执行。\\n         * 参数二：到达执行屏障就开始触发的线程任务。\\n         */\\n        CyclicBarrier cb = new CyclicBarrier(5 , new MeetingRunnable());\\n        new PeopleThread(cb).start();\\n        new PeopleThread(cb).start();\\n        new PeopleThread(cb).start();\\n        new PeopleThread(cb).start();\\n        new PeopleThread(cb).start();\\n\\n        new PeopleThread(cb).start();\\n        new PeopleThread(cb).start();\\n        new PeopleThread(cb).start();\\n        new PeopleThread(cb).start();\\n        new PeopleThread(cb).start();\\n\\n    }\\n}\\n\\n// 任务类：开始开会的任务\\nclass MeetingRunnable implements Runnable{\\n    @Override\\n    public void run() {\\n        System.out.println(\\\"人员到齐了开始由\\\"+Thread.currentThread().getName()+\\\"主持会议！\\\");\\n    }\\n}\\n\\n// 员工类\\nclass PeopleThread extends Thread{\\n    private CyclicBarrier cb ;\\n    public PeopleThread(CyclicBarrier cb) {\\n        this.cb = cb;\\n    }\\n\\n    @Override\\n    public void run() {\\n        try {\\n            Thread.sleep(1000);\\n            System.out.println(\\\"员工：\\\"+Thread.currentThread().getName()+\\\"进入会议室\\\");\\n            cb.await(); // 自己做完了，告诉循环屏障我结束了！\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}\\n```\\n\\n### Semaphore\\n\\n- `Semaphore`（发信号）的主要作用是控制线程的并发数量。\\n  \\n- `synchronized`可以起到\\\"锁\\\"的作用，但某个时间段内，只能有一个线程允许执行。\\n- `Semaphore`可以设置同时允许几个线程执行。\\n- `Semaphore`字面意思是信号量的意思，它的作用是控制访问特定资源的线程数目。\\n\\n`Semaphore`的构造器：\\n\\n- `public Semaphore(int permits)`：    permits 表示许可线程的数量\\n- `public Semaphore(int permits, boolean fair)`：fair 表示公平性，如果这个设为 true 的话，下次执行的线程会是等待最久的线程\\n\\n`Semaphore`的方法：\\n\\n- `public void acquire() throws InterruptedException` 表示获取许可\\n- `public void release() release()` 表示释放许可\\n\\n```java\\npublic class SemaphoreDemo {\\n    public static void main(String[] args) {\\n        Service service = new Service();\\n        for(int i = 1 ; i <= 5 ; i++ ){\\n            new MyThread(service,\\\"线程：\\\"+i).start();\\n        }\\n    }\\n}\\n// 执行的任务。\\nclass Service{\\n    // 可以同时支持多个线程进入共享资源区执行。\\n    private Semaphore semaphore = new Semaphore(2);\\n    public void showMethod(){\\n        try {\\n            semaphore.acquire();\\n            long startTimer = System.currentTimeMillis();\\n            System.out.println(\\\"进入时间：\\\"+startTimer);\\n            System.out.println(Thread.currentThread().getName()+\\\"进入资源执行\\\");\\n            Thread.sleep(1000);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n        long endTimer = System.currentTimeMillis();\\n        System.out.println(\\\"结束时间：\\\"+endTimer);\\n        semaphore.release();\\n        //acquire()和release()方法之间的代码为\\\"同步代码\\\"\\n    }\\n}\\n\\n// 线程类。\\nclass MyThread extends Thread{\\n    private Service service;\\n    public MyThread(Service service , String name){\\n        super(name);\\n        this.service = service;\\n    }\\n    @Override\\n    public void run() {\\n        service.showMethod();\\n    }\\n}\\n```\\n\\n### Exchanger\\n\\nExchanger（交换者）是一个用于线程间协作的工具类。Exchanger用于进行线程间的数据交换。这两个线程通过exchange方法交换数据，如果第一个线程先执行exchange()方法，它会一直等待第二个线程也执行exchange方法，当两个线程都到达同步点时，这两个线程就可以交换数据，将本线程生产出来的数据传递给对方。\\n\\n Exchanger构造方法：public Exchanger()\\n\\n Exchanger重要方法：public V exchange(V x)\\n\\n 分析：\\n    （1）需要2个线程\\n    （2）需要一个交换对象负责交换两个线程执行的结果。\\n\\n> - Exchanger可以实现线程间的数据交换。\\n> - 一个线程如果等不到对方的数据交换就会一直等待。\\n> - 我们也可以控制一个线程等待的时间。\\n> - 必须双方都进行交换才可以正常进行数据的交换。\\n\\n```java\\npublic class ExchangerDemo {\\n    public static void main(String[] args) {\\n        // 创建交换对象（信使）\\n        Exchanger<String> exchanger = new Exchanger<>();\\n        // 创建2给线程对象。\\n        new ThreadA(exchanger).start();\\n        new ThreadB(exchanger).start();\\n    }\\n}\\n\\nclass ThreadA extends Thread{\\n    private Exchanger<String> exchanger;\\n    public ThreadA(Exchanger<String> exchanger) {\\n        this.exchanger = exchanger;\\n    }\\n    @Override\\n    public void run() {\\n        try {\\n            // 礼物A\\n            System.out.println(\\\"线程A,做好了礼物A,等待线程B送来的礼物B.....\\\");\\n            // 开始交换礼物。参数是送给其他线程的礼物!\\n            // System.out.println(\\\"线程A收到线程B的礼物：\\\"+exchanger.exchange(\\\"礼物A\\\"));\\n            // 如果等待了5s还没有交换它就去死（抛出异常）！\\n            System.out.println(\\\"线程A收到线程B的礼物：\\\"+exchanger.exchange(\\\"礼物A\\\", 5 , TimeUnit.SECONDS));\\n        } catch (Exception e) {\\n            System.out.println(\\\"线程A等待了5s，没有收到礼物,最终就执行结束了!\\\");\\n        }\\n    }\\n}\\n\\nclass ThreadB extends Thread{\\n    private Exchanger<String> exchanger;\\n    public ThreadB(Exchanger<String> exchanger) {\\n        this.exchanger = exchanger;\\n    }\\n    @Override\\n    public void run() {\\n        try {\\n            // 礼物B\\n             System.out.println(\\\"线程B,做好了礼物B,等待线程A送来的礼物A.....\\\");\\n            // 开始交换礼物。参数是送给其他线程的礼物!\\n             System.out.println(\\\"线程B收到线程A的礼物：\\\"+exchanger.exchange(\\\"礼物B\\\"));\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}\\n```\\n\\n# day9-方法引用、Lambda表达式、Stream流\\n\\n## 第一章 方法引用\\n\\n### 方法引用概述\\n\\n方法引用是为了进一步简化Lambda表达式的写法。\\n\\n方法引用的格式：类型或者对象::引用的方法。\\n\\n方法引用有四种形式：\\n\\n- 静态方法的引用\\n- 实例方法的引用\\n- 特定类型方法的引用\\n- 构造器引用\\n\\n```java\\nist<String> lists = new ArrayList<>();\\nlists.add(\\\"java1\\\");\\nlists.add(\\\"java2\\\");\\nlists.add(\\\"java3\\\");\\n\\nlists.forEach( s -> System.out.println(s));\\n// 方法引用！\\nlists.forEach(System.out::println);\\n```\\n\\n### 静态方法引用\\n\\n引用格式：类名::静态方法\\n\\n简化步骤：定义一个静态方法，把需要简化的代码放到一个静态方法中去。\\n\\n静态方法引用的注意事项：**被引用的方法的参数列表要和函数式接口中的抽象方法的参数列表一致**\\n\\n`Student`\\n\\n```java\\npublic class Student {\\n    private String name ;\\n    private int age ;\\n    private char sex ;\\n\\n    public static int compareByAge(Student o1 , Student o2){\\n        return  o1.getAge() - o2.getAge();\\n    }\\n    // ...\\n}\\n```\\n\\n排序\\n\\n```java\\nList<Student> lists = new ArrayList<>();\\nStudent s1 = new Student(\\\"李铭\\\",18,\'男\');\\nStudent s2 = new Student(\\\"冯龙\\\",23,\'男\');\\nStudent s3 = new Student(\\\"王乐乐\\\",21,\'男\');\\nCollections.addAll(lists , s1 , s2 , s3);\\n\\nCollections.sort(lists, ( o1, o2) -> Student.compareByAge(o1 , o2));\\n// 如果前后参数是一样的，而且方法是静态方法，既可以使用静态方法引用\\nCollections.sort(lists, Student::compareByAge);\\n```\\n\\n### 实例方法引用\\n\\n格式： 对象::实例方法\\n\\n简化步骤：定义一个实例方法，把需要的代码放到实例方法中去。\\n\\n实例方法引用的注意事项：**被引用的方法的参数列表要和函数式接口中的抽象方法的参数列表一致**\\n\\n```java\\nList<String> lists = new ArrayList<>();\\nlists.add(\\\"java1\\\");\\nlists.add(\\\"java2\\\");\\nlists.add(\\\"java3\\\");\\n\\n// 对象是 System.out = new PrintStream();\\n// 实例方法：println()\\n// 前后参数正好都是一个\\nlists.forEach(s -> System.out.println(s));\\nlists.forEach(System.out::println);\\n```\\n\\n### 特定类型方法的引用\\n\\n特定类型：String ,任何类型\\n\\n格式：特定类型::方法\\n\\n注意：如果第一个参数列表中的形参中的第一个参数作为了后面的方法的调用者，并且其余参数作为后面方法的形参，那么就可以用特定类型方法引用了\\n\\n```java\\nString[] strs = new String[]{\\\"James\\\", \\\"AA\\\", \\\"John\\\",\\n                             \\\"Patricia\\\",\\\"Dlei\\\" , \\\"Robert\\\",\\\"Boom\\\", \\\"Cao\\\" ,\\\"black\\\" ,\\n                             \\\"Michael\\\", \\\"Linda\\\",\\\"cao\\\",\\\"after\\\",\\\"sBBB\\\"};\\n\\n// public static <T> void sort(T[] a, Comparator<? super T> c)\\n// 需求：按照元素的首字符(忽略大小写)升序排序！！！\\nArrays.sort(strs, new Comparator<String>() {\\n    @Override\\n    public int compare(String s1, String s2) {\\n        return s1.compareToIgnoreCase(s2);// 按照元素的首字符(忽略大小写)比较。\\n    }\\n});\\nArrays.sort(strs, (String s1, String s2) -> {\\n    return s1.compareToIgnoreCase(s2);// 按照元素的首字符(忽略大小写)比较。\\n});\\n\\nArrays.sort(strs, ( s1,  s2 ) ->  s1.compareToIgnoreCase(s2));\\n\\n// 特定类型的方法引用：\\nArrays.sort(strs,  String::compareToIgnoreCase);\\n\\nSystem.out.println(Arrays.toString(strs));\\n```\\n\\n### 构造器引用\\n\\n格式是：类名::new\\n\\n注意点：前后参数一致的情况下，又在创建对象就可以使用构造器引用`s -> new Student(s) => Student::new`\\n\\n```java\\nList<String> lists = new ArrayList<>();\\nlists.add(\\\"java1\\\");\\nlists.add(\\\"java2\\\");\\nlists.add(\\\"java3\\\");\\n\\n// 集合默认只能转成Object类型的数组。\\nObject[] objs = lists.toArray();\\nSystem.out.println(\\\"Object类型的数组：\\\"+ Arrays.toString(objs));\\n\\n// 我们想指定转换成字符串类型的数组！！\\n// 最新的写法可以结合构造器引用实现 。\\n// default <T> T[] toArray(IntFunction<T[]> generator)\\nString[] strs = lists.toArray(new IntFunction<String[]>() {\\n    @Override\\n    public String[] apply(int value) {\\n        return new String[value];\\n    }\\n});\\n\\nString[] strs1 = lists.toArray(s -> new String[s] );\\n\\nString[] strs2 = lists.toArray(String[]::new);\\n\\nSystem.out.println(\\\"String类型的数组：\\\"+ Arrays.toString(strs2));\\n```\\n\\n## 第二章 Lambda表达式\\n\\nLambda表达式是JDK1.8开始之后的新技术，是一种代码的新语法，作用是为了简化匿名内部类的代码写法\\n\\nLambda表达式的格式\\n\\n```java\\n(匿名内部类被重写方法的形参列表) -> {\\n\\t// 被重写方法的方法代码\\n}\\n```\\n\\nLambda表达式的使用前提：\\n\\n* Lambda表达式并不能简化所有匿名内部类的写法。\\n* Lambda表达式只能简化接口中只有一个抽象方法的匿名内部类形式。\\n\\nLambda表达式**只能简化函数式接口的匿名内部类写法**：\\n\\n- 首先必须是接口\\n- 接口中只能有一个抽象方法\\n\\n### Lambda表达式简化Runnable接口匿名内部类\\n\\n`@FunctionalInterface`函数式接口注解：一旦某个接口加上了这个注解，这个接口只能有且仅有一个抽象方法。\\n   这个接口就可以被Lambda表达式简化。\\n\\n```java\\nThread t = new Thread(new Runnable() {\\n    @Override\\n    public void run() {\\n        System.out.println(Thread.currentThread().getName()+\\\":执行~~~\\\");\\n    }\\n});\\nt.start();\\n\\nThread t1 = new Thread(() -> {\\n    System.out.println(Thread.currentThread().getName()+\\\":执行~~~\\\");\\n});\\nt1.start();\\n\\nnew Thread(() -> {\\n    System.out.println(Thread.currentThread().getName()+\\\":执行~~~\\\");\\n}).start();\\n\\nnew Thread(() -> System.out.println(Thread.currentThread().getName()+\\\":执行~~~\\\")).start();\\n```\\n\\n### Lambda表达式简化Comparator接口匿名内部类写法\\n\\n```java\\nList<Student> lists = new ArrayList<>();\\nStudent s1 = new Student(\\\"李铭\\\",18,\'男\');\\nStudent s2 = new Student(\\\"冯龙\\\",23,\'男\');\\nStudent s3 = new Student(\\\"王乐乐\\\",21,\'男\');\\nCollections.addAll(lists , s1 , s2 , s3);\\n\\n// 按照年龄进行升序排序！\\nCollections.sort(lists, new Comparator<Student>() {\\n    @Override\\n    public int compare(Student s1, Student s2) {\\n        return s1.getAge() - s2.getAge();\\n    }\\n});\\n\\n// 简化写法\\nCollections.sort(lists ,(Student t1, Student t2) -> {\\n    return t1.getAge() - t2.getAge();\\n});\\n\\nCollections.sort(lists ,(Student t1, Student t2) -> t1.getAge() - t2.getAge());\\n\\n// 参数类型可以省略\\nCollections.sort(lists ,( t1,  t2) -> t1.getAge() - t2.getAge());\\n\\nSystem.out.println(lists);\\n```\\n\\n### Lambda表达式的省略写法\\n\\nLambda表达式的省略写法（进一步在Lambda表达式的基础上继续简化）\\n\\n- 如果Lambda表达式的方法体代码只有一行代码。可以省略大括号不写,同时要省略分号\\n- 如果Lambda表达式的方法体代码只有一行代码。可以省略大括号不写。此时，如果这行代码是return语句，必须省略return不写，同时也必须省略\\\";\\\"不写\\n- 参数类型可以省略不写\\n- 如果只有一个参数，参数类型可以省略，同时()也可以省略\\n\\n```java\\nList<String> names = new ArrayList<>();\\nnames.add(\\\"胡伟光\\\");\\nnames.add(\\\"甘挺\\\");\\nnames.add(\\\"洪磊\\\");\\n\\nnames.forEach(new Consumer<String>() {\\n    @Override\\n    public void accept(String s) {\\n        System.out.println(s);\\n    }\\n});\\n\\nnames.forEach((String s) -> {\\n    System.out.println(s);\\n});\\n\\nnames.forEach((s) -> {\\n    System.out.println(s);\\n});\\n\\nnames.forEach(s -> {\\n    System.out.println(s);\\n});\\n\\nnames.forEach(s -> System.out.println(s) );\\n\\nnames.forEach(System.out::println);\\n```\\n\\n## 第三章 Stream流\\n\\n### Stream流概述\\n\\n在Java 8中，得益于Lambda所带来的函数式编程，引入了一个全新的Stream流概念 ，用于解决已有集合/数组类库有的弊端。\\n\\nStream流能解决什么问题：\\n\\n- 可以解决已有集合类库或者数组API的弊端。\\n- Stream认为集合和数组操作的API很不好用，所以采用了Stream流简化集合和数组的操作\\n\\n```java\\nList<String> list = new ArrayList<>();\\nlist.add(\\\"张无忌\\\");\\nlist.add(\\\"周芷若\\\");\\nlist.add(\\\"赵敏\\\");\\nlist.add(\\\"张强\\\");\\nlist.add(\\\"张三丰\\\");\\n\\nlist.stream().filter(s -> s.startsWith(\\\"张\\\")).filter( s -> s.length()== 3 )\\n    .forEach(System.out::println);\\n```\\n\\n### Stream流的获取\\n\\nStream流式思想的核心：\\n\\n- 是先得到集合或者数组的Stream流（就是一根传送带）\\n- 然后就用这个Stream流操作集合或者数组的元素\\n- 然后用Stream流简化替代集合操作的API\\n\\n```java\\ndefault Stream<E> stream();\\n```\\n\\n```java\\nCollection<String> c = new ArrayList<>();\\nStream<String> ss = c.stream();\\n\\n/** --------------------Map集合获取流-------------------------------   */\\nMap<String, Integer> map = new HashMap<>();\\n// 先获取键的Stream流。\\nStream<String> keyss = map.keySet().stream();\\n// 在获取值的Stream流\\nStream<Integer> valuess = map.values().stream();\\n// 获取键值对的Stream流（key=value： Map.Entry<String,Integer>）\\nStream<Map.Entry<String,Integer>> keyAndValues = map.entrySet().stream();\\n\\n/** ---------------------数组获取流------------------------------   */\\n// 数组也有Stream流。\\nString[] arrs = new String[]{\\\"Java\\\", \\\"JavaEE\\\" ,\\\"Spring Boot\\\"};\\nStream<String> arrsSS1 = Arrays.stream(arrs);\\nStream<String> arrsSS2 = Stream.of(arrs);\\n```\\n\\n### Stream流的常用API\\n\\n- `forEach `: 逐一处理(遍历)\\n\\n- `count`：统计个数\\n\\n  `long count();`\\n\\n- `filter`: 过滤元素\\n\\n- `Stream<T> filter(Predicate<? super T> predicate)`\\n\\n- `limit`: 取前几个元素\\n\\n- `skip`: 跳过前几个\\n\\n- `map` : 加工方法\\n\\n  把原来的元素加工以后，重新放上去\\n\\n  ```java\\n  <R> Stream<R> map(Function<? super T, ? extends R> mapper);\\n  ```\\n\\n- `concat `: 合并流\\n\\n  ```java\\n  public static <T> Stream<T> concat(Stream<? extends T> a, Stream<? extends T> b)\\n  ```\\n\\n```java\\nList<String> list = new ArrayList<>();\\nlist.add(\\\"张无忌\\\");\\nlist.add(\\\"周芷若\\\");\\nlist.add(\\\"赵敏\\\");\\nlist.add(\\\"张强\\\");\\nlist.add(\\\"张三丰\\\");\\nlist.add(\\\"张三丰\\\");\\n\\nlist.stream().filter( s -> s.length() == 3 ).filter( s -> s.startsWith(\\\"张\\\"))\\n    .forEach( System.out::println);\\n// 统计数量\\nlong count = list.stream().filter( s -> s.length() == 3 )\\n    .filter( s -> s.startsWith(\\\"张\\\")).count();\\nSystem.out.println(count);\\n// 取前2个\\nlist.stream().filter(s -> s.length() == 3).limit(2)\\n    .forEach(System.out::println);\\n// 跳过前2个\\nlist.stream().filter(s -> s.length() == 3).skip(2)\\n    .forEach(System.out::println);\\n// 把名称加工成学生对象放入list中\\nlist.stream().map(Student::new).forEach(System.out::println);\\n```\\n\\n合并流\\n\\n```java\\nList<String> list = new ArrayList<>();\\nlist.add(\\\"张无忌\\\");\\nlist.add(\\\"周芷若\\\");\\nlist.add(\\\"赵敏\\\");\\nlist.add(\\\"张强\\\");\\nlist.add(\\\"张三丰\\\");\\nlist.add(\\\"张三丰\\\");\\n\\n// 数组流\\nStream<Integer> s1 = Stream.of(10, 20 ,30 ,40);\\n// 集合流\\nStream<String> s2 = list.stream();\\n// 合并流\\nStream<Object> s3 = Stream.concat(s1,s2);\\ns3.forEach(System.out::println);\\n```\\n\\n### Stream流的综合应用\\n\\n\\n\\n```java\\nList<String> one = new ArrayList<>();\\none.add(\\\"迪丽热巴\\\");\\none.add(\\\"宋远桥\\\");\\none.add(\\\"苏星河\\\");\\none.add(\\\"老子\\\");\\none.add(\\\"庄子\\\");\\none.add(\\\"孙子\\\");\\none.add(\\\"洪七公\\\");\\n\\nList<String> two = new ArrayList<>();\\ntwo.add(\\\"古力娜扎\\\");\\ntwo.add(\\\"张无忌\\\");\\ntwo.add(\\\"张三丰\\\");\\ntwo.add(\\\"赵丽颖\\\");\\ntwo.add(\\\"张二狗\\\");\\ntwo.add(\\\"张天爱\\\");\\ntwo.add(\\\"张三\\\");\\n\\n/**\\n         * 1. 第一个队伍只要名字为3个字的成员姓名；\\n         * 2. 第一个队伍筛选之后只要前3个人；\\n         */\\nStream<String> oneStream =\\n    one.stream().filter(s -> s.length() == 3).limit(3);\\n\\n/**\\n         * 3. 第二个队伍只要姓张的成员姓名；\\n         * 4. 第二个队伍筛选之后不要前2个人；\\n         * 5. 将两个队伍合并为一个队伍；\\n         */\\nStream<String> twoStream =\\n    two.stream().filter(s -> s.startsWith(\\\"张\\\")).skip(2);\\n\\nStream<String> allStream = Stream.concat(oneStream , twoStream);\\n\\n/**\\n         * 6. 根据姓名创建`Student`对象； (加工)\\n         * 7. 打印整个队伍的Student对象信息。\\n         */\\n//allStream.map(s -> new Student(s)).forEach(System.out::println);\\nallStream.map(Student::new).forEach(System.out::println);\\n```\\n\\n### Stream流的终结与非终结方法\\n\\n一旦Stream调用了终结方法，流的操作就全部终结了，不能继续使用，只能创建新的Stream操作。\\n\\n终结方法： `foreach `, `count`\\n\\n非终结方法：每次调用完成以后返回一个新的流对象，可以继续使用，支持链式编程！\\n\\n```java\\nList<String> list = new ArrayList<>();\\nlist.add(\\\"张无忌\\\");\\nlist.add(\\\"周芷若\\\");\\nlist.add(\\\"赵敏\\\");\\nlist.add(\\\"张强\\\");\\nlist.add(\\\"张三丰\\\");\\nlist.add(\\\"张三丰\\\");\\n\\n// foreach终结方法\\nlist.stream().filter(s -> s.startsWith(\\\"张\\\"))\\n    .filter(s -> s.length() == 3).forEach(System.out::println);\\n\\nlong count =  list.stream().filter(s -> s.startsWith(\\\"张\\\"))\\n    .filter(s -> s.length() == 3).count();\\nSystem.out.println(count);\\n```\\n\\n### 收集Stream流\\n\\n收集Stream流:把Stream流的数据转回成集合。\\n\\nStream的作用是：把集合转换成一根传送带，借用Stream流的强大功能进行的操作。但是实际开发中数据最终的形式还是应该是集合，最终Stream流操作完毕以后还是要转换成集合。这就是收集Stream流。\\n\\n收集Stream流的含义：就是把Stream流的数据转回到集合中去。\\n\\n```java\\nList<String> list = new ArrayList<>();\\nlist.add(\\\"张无忌\\\");\\nlist.add(\\\"周芷若\\\");\\nlist.add(\\\"赵敏\\\");\\nlist.add(\\\"张强\\\");\\nlist.add(\\\"张三丰\\\");\\nlist.add(\\\"张三丰\\\");\\n\\nStream<String> zhangLists = list.stream().filter(s -> s.startsWith(\\\"张\\\"));\\n// 把stream流转换成Set集合。\\nSet<String> sets = zhangLists.collect(Collectors.toSet());\\nSystem.out.println(sets);\\n\\n// 把stream流转换成List集合。\\nStream<String> zhangLists1 = list.stream().filter(s -> s.startsWith(\\\"张\\\"));\\nList<String> lists= zhangLists1.collect(Collectors.toList());\\nSystem.out.println(lists);\\n\\n// 把stream流转换成数组。\\nStream<String> zhangLists2 = list.stream().filter(s -> s.startsWith(\\\"张\\\"));\\nObject[] arrs = zhangLists2.toArray();\\n// 可以借用构造器引用申明转换成的数组类型！！！\\n//String[] arrs1 = zhangLists2.toArray(String[]::new);\\n```\\n\\n## 第四章 File类\\n\\n### File类的概述\\n\\nFile类：代表操作系统的文件对象\\n\\nFile类：是用来操作操作系统的文件对象的，删除文件，获取文件信息，创建文件（文件夹）...\\n\\n广义来说操作系统认为文件包含（文件和文件夹）\\n\\nFile类的创建文件对象的API:\\n\\n* 包：`java.io.File`\\n* 构造器：\\n  * `public File(String pathname)`:根据路径获取文件对象\\n  * `public File(String parent, String child)`:根据父路径和文件名称获取文件对象！\\n\\nFile类创建文件对象的格式:\\n\\n* `File f = new File(\\\"绝对路径/相对路径\\\");`\\n  * **绝对路径**：从磁盘的的盘符一路走到目的位置的路径。\\n    * 绝对路径依赖具体的环境，一旦脱离环境，代码可能出错！！\\n    * 一般是定位某个操作系统中的某个文件对象。\\n  * **相对路径**：不带盘符的。（重点）\\n    * 默认是直接相对到工程目录下寻找文件的。\\n    * 相对路径只能用于寻找工程下的文件。\\n    * 能用相对路径就应该尽量使用，可以跨平台！\\n* `File f = new File(\\\"文件对象/文件夹对象\\\");`\\n  广义来说：文件是包含文件和文件夹的。\\n\\n> * 创建文件对象可以用绝对路径也可以用相对路径。\\n> * 相对路径只能用于寻找工程下的文件。\\n> * 文件对象可以表示文件也可以表示文件夹！\\n\\n```java\\nFile f1 = new File(\\\"D:\\\\\\\\itcast\\\\\\\\图片资源\\\\\\\\beautiful.jpg\\\");\\nSystem.out.println(f1.length()); // 获取文件的大小，字节大小\\n\\n// 2.创建文件对象：使用相对路径\\nFile f2 = new File(\\\"Day09Demo/src/dlei01.txt\\\");\\nSystem.out.println(f2.length());\\n\\n// 3.创建文件对象：代表文件夹。\\nFile f3 = new File(\\\"D:\\\\\\\\itcast\\\\\\\\图片资源\\\");\\nSystem.out.println(f3.exists());// 判断路径是否存在！！\\n```\\n\\n### File类的获取功能的方法\\n\\n- `public String getAbsolutePath()`  ：返回此File的绝对路径名字符串。\\n- `public String getPath()`  ： 获取创建文件对象的时候用的路径\\n- `public String getName()`  ： 返回由此File表示的文件或目录的名称。\\n- `public long length()`  ：    返回由此File表示的文件的长度。\\n\\n```java\\n// 1.绝对路径创建一个文件对象\\nFile f1 = new File(\\\"D:/itcast/图片资源/meinv.jpg\\\");\\n// a.获取它的绝对路径。\\nSystem.out.println(f1.getAbsolutePath());\\n// b.获取文件定义的时候使用的路径。\\nSystem.out.println(f1.getPath());\\n// c.获取文件的名称：带后缀。\\nSystem.out.println(f1.getName());\\n// d.获取文件的大小：字节个数。\\nSystem.out.println(f1.length());\\n\\nSystem.out.println(\\\"------------------------\\\");\\n\\n// 2.相对路径\\nFile f2 = new File(\\\"Day09Demo/src/dlei01.txt\\\");\\n// a.获取它的绝对路径。\\nSystem.out.println(f2.getAbsolutePath());\\n// b.获取文件定义的时候使用的路径。\\nSystem.out.println(f2.getPath());\\n// c.获取文件的名称：带后缀。\\nSystem.out.println(f2.getName());\\n// d.获取文件的大小：字节个数。\\nSystem.out.println(f2.length());\\n```\\n\\n### File类的判断功能的方法\\n\\n- `public boolean exists()` ：此File表示的文件或目录是否实际存在。\\n- `public boolean isDirectory()`：此File表示的是否为目录。\\n- `public boolean isFile()` ：此File表示的是否为文件\\n\\n```java\\n// 1.文件对象。\\nFile f1 = new File(\\\"D:\\\\\\\\itcast\\\\\\\\图片资源\\\\\\\\meinv.jpg\\\");\\n// a.判断文件路径是否存在\\nSystem.out.println(f1.exists()); // true\\n// b.判断文件对象是否是文件,是文件返回true ,反之\\nSystem.out.println(f1.isFile()); // true\\n// c.判断文件对象是否是文件夹,是文件夹返回true ,反之\\nSystem.out.println(f1.isDirectory()); // false\\n\\n// 1.文件对象。\\nFile f2 = new File(\\\"D:\\\\\\\\itcast\\\\\\\\图片资源\\\");\\n// a.判断文件路径是否存在\\nSystem.out.println(f2.exists()); // true\\n// b.判断文件对象是否是文件,是文件返回true ,反之\\nSystem.out.println(f2.isFile()); // false\\n// c.判断文件对象是否是文件夹,是文件夹返回true ,反之\\nSystem.out.println(f2.isDirectory()); // true\\n```\\n\\n### File类的创建和删除方法\\n\\n- `public boolean createNewFile()` ：当且仅当具有该名称的文件尚不存在时，\\n         创建一个新的空文件。 （几乎不用的，因为以后文件都是自动创建的！）\\n- `public boolean delete()` ：删除由此File表示的文件或目录。 （只能删除空目录）\\n- `public boolean mkdir()` ：创建由此File表示的目录。（只能创建一级目录）\\n- `public boolean mkdirs()` ：可以创建多级目录（建议使用的）\\n\\n```java\\nFile f = new File(\\\"Day09Demo/src/dlei02.txt\\\");\\n// a.创建新文件，创建成功返回true ,反之\\nSystem.out.println(f.createNewFile());\\n\\n// b.删除文件或者空文件夹\\nSystem.out.println(f.delete());\\n// 不能删除非空文件夹，只能删除空文件夹\\nFile f1 = new File(\\\"D:/itcast/aaaaa\\\");\\nSystem.out.println(f1.delete());\\n\\n// c.创建一级目录\\nFile f2 = new File(\\\"D:/itcast/bbbb\\\");\\nSystem.out.println(f2.mkdir());\\n\\n// d.创建多级目录\\nFile f3 = new File(\\\"D:/itcast/e/a/d/ds/fas/fas/fas/fas/fas/fas\\\");\\nSystem.out.println(f3.mkdirs());\\n```\\n\\n### File目录的遍历\\n\\n- `public String[] list()`\\n    获取当前目录下所有的\\\"一级文件名称\\\"到一个字符串数组中去返回。\\n- `public File[] listFiles()`==常用==\\n    获取当前目录下所有的\\\"一级文件对象\\\"到一个文件对象数组中去返回（重点）\\n\\n```java\\nFile dir = new File(\\\"day09/src/com/itheima\\\");\\n// a.获取当前目录对象下的全部一级文件名称到一个字符串数组返回。\\nString[] names = dir.list();\\nfor (String name : names) {\\n    System.out.println(name);\\n}\\n// b.获取当前目录对象下的全部一级文件对象到一个File类型的数组返回。\\nFile[] files = dir.listFiles();\\nfor (File file : files) {\\n    System.out.println(file.getAbsolutePath());\\n}\\n\\n// ---------拓展------------\\nFile f1 = new File(\\\"C:\\\\\\\\Users\\\\\\\\Administrator\\\\\\\\Documents\\\\\\\\codes\\\\\\\\notes\\\\\\\\java-notes\\\\\\\\java补充知识点\\\\\\\\codes\\\\\\\\seniorJava\\\\\\\\day09\\\\\\\\src\\\\\\\\com\\\\\\\\itheima\\\\\\\\_20File目录的遍历\\\\\\\\FileDemo.java\\\");\\nlong time = f1.lastModified(); // 最后修改时间！\\nSimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\");\\nSystem.out.println(sdf.format(time));\\n```\\n\\n## 第五章 递归\\n\\n### 递归的概述\\n\\n方法在方法中又调用了自己\\n\\n* 直接递归：自己的方法调用自己\\n* 间接递归：自己的方法调用别的方法，别的方法又调用自己\\n\\n> - 递归是自己调用自己。\\n> - 递归如果控制的不恰当，会形成递归的死循环，从而导致栈内存溢出错误！！\\n> - 递归应该防止进入递归的死循环！\\n\\n一个简单的例子，计算\\n$$\\nf(x) = f(x-1) + 1\\n$$\\n\\n```java\\npublic class RecursionDemo02 {\\n    public static void main(String[] args) {\\n        System.out.println(f(10));\\n    }\\n\\n    public static int f(int x){\\n        if(x == 1) {\\n            return 1;\\n        }else{\\n            return f(x - 1) + 1 ;\\n        }\\n    }\\n}\\n```\\n\\n### 递归的核心\\n\\n递归算法分为三个要素：\\n\\n* 递归公式\\n  $$\\n  f(x)=f(x)+1\\n  $$\\n\\n* 递归终结点\\n  $$\\n  f(1)=1\\n  $$\\n\\n* 递归方向\\n\\n  必须走向终结点\\n\\n必须满足三要素，否则递归会出现死亡\\n\\n### 递归实现文件搜索\\n\\n这是一个非规律递归，实现步骤是：\\n\\n* 定义一个方法用于做搜索\\n* 进入方法中进行业务搜索分析\\n\\n```java\\n/**\\n     * 去某个目录下搜索某个文件\\n     * @param dir 搜索文件的目录。\\n     * @param fileName 搜索文件的名称。\\n     */\\npublic static void searchFiles(File dir , String fileName){\\n    // 1.判断是否存在该路径，是否是文件夹\\n    if(dir.exists() && dir.isDirectory()){\\n        // 2.提取当前目录下的全部一级文件对象\\n        File[] files = dir.listFiles(); // null/[]\\n        // 3.判断是否存在一级文件对象（判断是否不为空目录）\\n        if(files!=null && files.length > 0){\\n            // 4.判断一级文件对象\\n            for (File f : files) {\\n                // 5.判断file是文件还是文件夹\\n                if(f.isFile()){\\n                    // 6.判断该文件是否为我要找的文件对象\\n                    if(f.getName().contains(fileName)){\\n                        System.out.println(f.getAbsolutePath());\\n                        try {\\n                            // 启动它（拓展）\\n                            Runtime r = Runtime.getRuntime();\\n                            r.exec(f.getAbsolutePath());\\n                        } catch (IOException e) {\\n                            e.printStackTrace();\\n                        }\\n                    }\\n                }else{\\n                    // 7.该文件是文件夹，文件夹要递归进入继续寻找\\n                    searchFiles(f ,fileName);\\n                }\\n            }\\n        }\\n    }\\n}\\n```\\n\\n## 第六章 字节流\\n\\n### 字符集\\n\\n字符集：各个国家为自己国家的字符取的一套编号规则。计算机的底层是不能直接存储字符的。计算机的底层只能存储二进制。010101二进制就是可以转成10进制的。10进制就是整数编号。101 = 1*2^0 + 0*2^1 + 1*2^2 = 5\\n\\n* 中国用的编码：GBK编码\\n* 美国用的编码：ACSII编码\\n\\n### IO流读写数据\\n\\nIO输入输出流：输入/输出流。\\n\\n* Input:输入。\\n* Output:输出。\\n\\n引入：\\nFile类只能操作文件对象本身，不能读写文件对象的内容。\\n读写数据内容，应该使用IO流。\\n\\nIO流是一个水流模型：IO理解成水管，把数据理解成水流。\\n\\nIO流的分类\\n\\n按照流的方向分为：输入流，输出流。\\n\\n* 输出流：以内存为基准，把内存中的数据写出到磁盘文件或者网络介质中去的流称为输出流。\\n  输出流的作用：写数据到文件，或者写数据发送给别人。\\n* 输入流：以内存为基准，把磁盘文件中的数据或者网络中的数据读入到内存中去的流称为输入流。\\n  输入流的作用：读取数据到内存。\\n\\n按照流的内容分为: 字节流，字符流。\\n\\n* 字节流：流中的数据的最小单位是一个一个的字节，这个流就是字节流。\\n* 字符流：流中的数据的最小单位是一个一个的字符，这个流就是字符流。(针对于文本内容)\\n\\n所以流大体分为四大类:\\n\\n* 字节输入流：以内存为基准，把磁盘文件中的数据或者网络中的数据以一个一个的字节的形式读入到内存中去的流称为字节输入流。\\n* 字节输出流：以内存为基准，把内存中的数据以一个一个的字节写出到磁盘文件或者网络介质中去的流称为字节输出流。\\n* 字符输入流：以内存为基准，把磁盘文件中的数据或者网络中的数据以一个一个的字符的形式读入到内存中去的流称为字符输入流。\\n* 字符输出流：以内存为基准，把内存中的数据以一个一个的字符写出到磁盘文件或者网络介质中去的流称为字符输出流。\\n\\n>  IO流是读写传输数据的，IO流有很多种，每种流有自己的功能特点。\\n\\n### 字节流的使用\\n\\nIO流的体系\\n\\n|     字节流      |      字节流      |   字符流   |         字符流         |\\n| :-------------: | :--------------: | :--------: | :--------------------: |\\n|   字节输入流    |    字节输出流    | 字符输入流 |       字符输出流       |\\n|   InputStream   |   OutputStream   |   Reader   |     Writer(抽象类)     |\\n| FileInputStream | FileOutputStream | FileReader | FileWriter(子类实现类) |\\n\\n#### 输入流\\n\\nFileInputStream文件字节输入流\\n\\n作用：以内存为基准，把磁盘文件中的数据按照字节的形式读入到内存中的流，简单的来说，就是按照字节读取文件数据到内存\\n\\n构造器\\n\\n* `public FileInputStream(File path)`:创建一个字节输入流管道与源文件对象接通\\n* `public FileInputStream(String pathName)`:创建一个字节输入流管道与文件路径对接\\n\\n方法\\n\\n* `public int read()` 每次读取一个直接返回，读取完毕会返回`-1`\\n* `public int read(byte[] buffer)` 从字节输入流中读取字节到字节数组中去，返回读取的字节数量，没有字节可读返回`-1`\\n\\n> - 一个一个字节读取英文和数字没有问题。\\n> - 但是一旦读取中文输出无法避免乱码，因为会截断中文的字节。\\n> - 一个一个字节的读取数据，性能也较差，所以禁止使用此方案！\\n\\n```java\\n// 1.创建文件对象定位dlei01.txt\\nFile file = new File(\\\"Day09Demo/src/dlei01.txt\\\");\\n// 2.创建一个字节输入流管道与源文件接通\\nInputStream is = new FileInputStream(file);\\n// 3.读取一个字节的编号返回，读取完毕返回-1\\n//        int code1 = is.read(); // 读取一滴水，一个字节\\n//        System.out.println((char)code1);\\n//\\n//        int code2 = is.read(); // 读取一滴水，一个字节\\n//        System.out.println((char)code2);\\n//\\n//        int code3 = is.read(); // 读取一滴水，一个字节\\n//        System.out.println((char)code3);\\n//\\n//        int code4 = is.read(); // 读取一滴水，一个字节 ,读取没有字节返回-1\\n//        System.out.println(code4);\\n\\n// 4.使用while读取字节数\\n// 定义一个整数变量存储字节\\nint ch = 0 ;\\nwhile((ch = is.read())!= -1){\\n    System.out.print((char) ch);\\n}\\n\\n// 读法优化，必须使用循环     // abc xyz i\\n// a.定义一个字节数组代表桶   // ooo ooo o\\nbyte[] buffer = new byte[3];\\nint len ; // 存储每次读取的字节数。\\nwhile((len = is.read(buffer)) != -1){\\n    // 读取了多少就倒出多少！\\n    String rs = new String(buffer , 0 , len);\\n    System.out.print(rs);\\n}\\n```\\n\\n解决中文乱码\\n\\n定义一个字节数组与文件的大小刚刚一样大，然后一桶水读取全部字节数据再输出\\n\\n```java\\n// 0.定位文件对象\\nFile f = new File(\\\"C:\\\\\\\\Users\\\\\\\\Administrator\\\\\\\\Documents\\\\\\\\codes\\\\\\\\notes\\\\\\\\java-notes\\\\\\\\java补充知识点\\\\\\\\codes\\\\\\\\seniorJava\\\\\\\\day09\\\\\\\\src\\\\\\\\com\\\\\\\\itheima\\\\\\\\_25字节流的使用\\\\\\\\FileInputStreamDemo03.java\\\");\\n// 1.定义一个字节输入流通向源文件路径，简化写法！\\nInputStream is = new FileInputStream(f);\\n\\n// 2.定义一个字节数组与文件的大小刚刚一样大\\n//        System.out.println(\\\"文件大小：\\\"+f.length());\\n//        byte[] buffer = new byte[(int) f.length()];\\n//        int len = is.read(buffer);\\n//        System.out.println(\\\"读取了：\\\"+len);\\n//        String rs = new String(buffer);\\n//        System.out.println(rs);\\n\\nbyte[] buffer = is.readAllBytes();\\nString rs = new String(buffer);\\nSystem.out.println(rs);\\n```\\n\\n#### 输出流\\n\\n`FileOutputStream`文件字节输出流\\n\\n作用：以内存为基准，把内存中的数据，按照字节的形式写出到磁盘文件中去。简单来说，把内存数据按照字节写出到磁盘文件中去。\\n\\n构造器：\\n\\n- `public FileOutputStream(File file)`:创建一个字节输出流管道通向目标文件对象。\\n- `public FileOutputStream(String file)`:创建一个字节输出流管道通向目标文件路径。\\n- `public FileOutputStream(File file , boolean append)`:创建一个追加数据的字节输出流管道通向目标文件对象。\\n- `public FileOutputStream(String file , boolean append)`:创建一个追加数据的字节输出流管道通向目标文件路径。\\n\\n方法：\\n\\n- `public void write(int a)`:写一个字节出去 。\\n\\n- `public void write(byte[] buffer)`:写一个字节数组出去。\\n\\n- `public void write(byte[] buffer , int pos , int len)`:写一个字节数组的一部分出去。\\n\\n  参数一，字节数组；参数二：起始字节索引位置，参数三：写多少个字节数出去。\\n\\n> * 字节输出流只能写字节出去\\n> * 字节输出流默认是覆盖数据管道\\n> * 换行用： `os.write(\\\"\\\\r\\\\n\\\".getBytes());`\\n> * 关闭和刷新：刷新流可以继续使用，关闭包含刷新数据但是流就不能使用了！\\n\\n`FileOutputStream`字节输出流每次启动写数据的时候都会先清空之前的全部数据\\n\\n### 字节流做文件复制\\n\\n字节是计算机中一切文件的组成，所以字节流适合做一切文件的复制。\\n\\n复制是把源文件的全部字节一字不漏的转移到目标文件，只要文件前后的格式一样，绝对不会有问题。\\n\\n复制步骤：\\n\\n- 创建一个字节输入流管道与源文件接通。\\n- 创建一个字节输出流与目标文件接通。\\n- 创建一个字节数组作为桶\\n- 从字节输入流管道中读取数据，写出到字节输出流管道即可。\\n- 关闭资源！\\n\\n```java\\nInputStream is = null ;\\nOutputStream os = null ;\\ntry{\\n    /** （1）创建一个字节输入流管道与源文件接通。 */\\n    is = new FileInputStream(\\\"D:\\\\\\\\itcast\\\\\\\\图片资源\\\\\\\\meinv.jpg\\\");\\n    /** （2）创建一个字节输出流与目标文件接通。*/\\n    os = new FileOutputStream(\\\"D:\\\\\\\\itcast\\\\\\\\meimei.jpg\\\");\\n    /** （3）创建一个字节数组作为桶*/\\n    byte[] buffer = new byte[1024];\\n    /** （4）从字节输入流管道中读取数据，写出到字节输出流管道即可。*/\\n    int len = 0;\\n    while((len = is.read(buffer)) != -1){\\n        // 读取多少就倒出多少\\n        os.write(buffer, 0 , len);\\n    }\\n    System.out.println(\\\"复制完成！\\\");\\n}catch (Exception e){\\n    e.printStackTrace();\\n} finally {\\n    /**（5）关闭资源！ */\\n    try{\\n        if(os!=null)os.close();\\n        if(is!=null)is.close();\\n    }catch (Exception e){\\n        e.printStackTrace();\\n    }\\n}\\n```\\n\\nJDK1.7 开始之后释放资源的新方式\\n\\ntry-with-resources:\\n\\n```java\\ntry(\\n    // 这里只能放置资源对象，用完会自动调用close()关闭\\n){\\n\\n}catch(Exception e){\\n    e.printStackTrace();\\n}\\n```\\n\\n什么是资源？\\n\\n* 资源类一定是实现了Closeable接口，实现这个接口的类就是资源\\n* 有close()方法，try-with-resources会自动调用它的close()关闭资源。\\n\\n```java\\ntry(\\n    /** （1）创建一个字节输入流管道与源文件接通。 */\\n    InputStream is  = new FileInputStream(\\\"D:\\\\\\\\itcast\\\\\\\\图片资源\\\\\\\\meinv.jpg\\\");\\n    /** （2）创建一个字节输出流与目标文件接通。*/\\n    OutputStream os = new FileOutputStream(\\\"D:\\\\\\\\itcast\\\\\\\\meimei.jpg\\\");\\n    /** （5）关闭资源！是自动进行的 */\\n){\\n    /** （3）创建一个字节数组作为桶*/\\n    byte[] buffer = new byte[1024];\\n    /** （4）从字节输入流管道中读取数据，写出到字节输出流管道即可。*/\\n    int len = 0;\\n    while((len = is.read(buffer)) != -1){\\n        // 读取多少就倒出多少\\n        os.write(buffer, 0 , len);\\n    }\\n    System.out.println(\\\"复制完成！\\\");\\n}catch (Exception e){\\n    e.printStackTrace();\\n}\\n```\\n\\n# day10-缓冲流、转换流、序列流\\n\\n## 第一章 字符流\\n\\n`FileReader`:文件字符输入流。\\n\\n作用：以内存为基准，把磁盘文件的数据以字符的形式读入到内存。简单来说，读取文本文件内容到内存中去。\\n\\n构造器：\\n\\n* `public FileReader(File file)`:创建一个字符输入流与源文件对象接通。\\n* `public FileReader(String filePath)`:创建一个字符输入流与源文件路径接通。\\n\\n方法：\\n\\n- `public int read()`: 读取一个字符的编号返回！ 读取完毕返回-1\\n- `public int read(char[] buffer)`:读取一个字符数组，读取多少个字符就返回多少个数量，读取完毕返回-1\\n\\n- \\n  字符流一个一个字符的读取文本内容输出，可以解决中文读取输出乱码的问题。\\n- 字符流很适合操作文本文件内容。\\n- 但是：一个一个字符的读取文本内容性能较差！！\\n\\n```java\\n// 1.创建一个文件对象定位源文件\\n// File f = new File(\\\"Day10Demo/src/dlei01.txt\\\");\\n// 2.创建一个字符输入流管道与源文件接通\\n// Reader fr = new FileReader(f);\\n// 3.简化写法：创建一个字符输入流管道与源文件路径接通\\nReader fr = new FileReader(\\\"Day10Demo/src/dlei01.txt\\\");\\n// 4.按照字符读取，每次读取一个字符的编号返回。\\n//        int code1 = fr.read();\\n//        System.out.print((char)code1);\\n//        int code2 = fr.read();\\n//        System.out.print((char)code2);\\n//        int code3 = fr.read();\\n//        System.out.print((char)code3);\\n//        int code4 = fr.read(); // 读取完毕返回-1\\n//        System.out.print(code4);\\n\\n// 5.while循环一个一个字符读取。\\n// 定义一个变量存储一个字符的编号\\nint ch ;\\nwhile ((ch = fr.read()) != -1){\\n    System.out.print((char)ch);\\n}\\n\\n// a.按照字符数组读取数据使用循环\\nchar[] buffer = new char[1024]; // 1K\\n// b.定义一个整数记录每次桶读取的字符数据量。\\nint len;\\nwhile((len = fr.read(buffer)) != -1 ) {\\n    // 读取多少倒出多少字符\\n    System.out.print(new String(buffer, 0 , len));\\n}\\n```\\n\\n`FileWriter`文件字符输出流的使用。\\n\\n作用：以内存为基准，把内存中的数据按照字符的形式写出到磁盘文件中去。简单来说，就是把内存的数据以字符写出到文件中去。\\n\\n构造器：\\n\\n- `public FileWriter(File file)`:创建一个字符输出流管道通向目标文件对象。\\n- `public FileWriter(String filePath)`:创建一个字符输出流管道通向目标文件路径。\\n- `public FileWriter(File file,boolean append`):创建一个追加数据的字符输出流管道通向目标文件对象。\\n- `public FileWriter(String filePath,boolean append)`:创建一个追加数据的字符输出流管道通向目标文件路径。\\n\\n方法：\\n\\n- `public void write(int c)`:写一个字符出去\\n- `public void write(String c)` 写一个字符串出去：\\n- `public void write(char[] buffer)`:写一个字符数组出去\\n- `public void write(String c ,int pos ,int len)`:写字符串的一部分出去\\n- `public void write(char[] buffer ,int pos ,int len)`:写字符数组的一部分出去\\n\\n小结：\\n\\n字符输出流可以写字符数据出去，总共有5个方法写字符。\\n\\n覆盖管道：\\n\\n`Writer fw = new FileWriter(\\\"Day10Demo/src/dlei03.txt\\\"); // 覆盖数据管道`\\n\\n追加数据管道：\\n\\n`Writer fw = new FileWriter(\\\"Day10Demo/src/dlei03.txt\\\",true); // 追加数据管道`\\n\\n换行：\\n\\n`fw.write(\\\"\\\\r\\\\n\\\"); // 换行` \\n\\n读写字符文件数据建议使用字符流。\\n\\n```java\\n// 1.创建一个字符输出流管道通向目标文件路径\\n//Writer fw = new FileWriter(\\\"Day10Demo/src/dlei03.txt\\\"); // 覆盖数据管道\\nWriter fw = new FileWriter(\\\"Day10Demo/src/dlei03.txt\\\",true); // 追加数据管道\\n\\n// 2.写一个字符出去：public void write(int c):写一个字符出去\\nfw.write(97);   // 字符a\\nfw.write(\'b\');  // 字符b\\nfw.write(\'磊\'); // 字符磊，此时没有任何问题。\\nfw.write(\\\"\\\\r\\\\n\\\"); // 换行\\n\\n// 3.写一个字符串出去：public void write(String c)写一个字符串出去：\\nfw.write(\\\"Java是最优美的语言！\\\");\\nfw.write(\\\"我们在黑马学习它！\\\");\\nfw.write(\\\"\\\\r\\\\n\\\"); // 换行\\n\\n// 4.写一个字符数组出去：public void write(char[] buffer):写一个字符数组出去\\nfw.write(\\\"我爱中国\\\".toCharArray());\\nfw.write(\\\"\\\\r\\\\n\\\"); // 换行\\n\\n// 5.写字符串的一部分出去: public void write(String c ,int pos ,int len):写字符串的一部分出去\\nfw.write(\\\"Java是最优美的语言！\\\",0,9);\\nfw.write(\\\"\\\\r\\\\n\\\"); // 换行\\n\\n// 6.写字符数组的一部分出去：public void write(char[] buffer ,int pos ,int len):写字符数组的一部分出去\\nfw.write(\\\"我爱中国\\\".toCharArray(),0 ,2);\\nfw.write(\\\"\\\\r\\\\n\\\"); // 换行\\n\\nfw.close();\\n```\\n\\n## 第二章 IO资源的处理\\n\\n...\\n\\n\\n\\n\\n\\n## 第三章 属性集\\n\\n`Properties`：属性集对象。\\n\\n其实就是一个Map集合。也就是一个键值对集合。但是我们一般不会当集合使用，\\n\\n因为有HashMap。\\n\\n`Properties`核心作用：\\n\\nProperties代表的是一个属性文件，可以把键值对的数据存入到一个属性文件中去。\\n\\n属性文件：后缀是.properties结尾的文件,里面的内容都是 key=value。\\n\\n大家在后期学的很多大型框架技术中，属性文件都是很重要的系统配置文件。\\n\\n```java\\nusers.properties\\nadmin=123456\\ndlei=dlei\\n```\\n\\n 需求：使用Properties对象生成一个属性文件，里面存入用户名和密码信息。\\n\\nProperties的方法：\\n\\n- `public Object setProperty(String key, String value)` ： 保存一对属性。\\n- `public String getProperty(String key)` ：使用此属性列表中指定的键搜索属性值\\n- `public Set<String> stringPropertyNames()` ：所有键的名称的集合\\n- `public void store(OutputStream out, String comments)`：保存数据到属性文件中去\\n- `public void store(Writer fw, String comments)`：保存数据到属性文件中去\\n- `public synchronized void load(InputStream inStream)`:加载属性文件的数据到属性集对象中去\\n- `public synchronized void load(Reader fr)`:加载属性文件的数据到属性集对象中去\\n\\n```java\\nProperties properties = new Properties();\\nproperties.setProperty(\\\"admin\\\" , \\\"123456\\\");\\nproperties.setProperty(\\\"dlei\\\" , \\\"101333\\\");\\nSystem.out.println(properties);\\n\\n// b.把属性集对象的数据存入到属性文件中去（重点）\\nOutputStream os = new FileOutputStream(\\\"Day10Demo/src/users.properties\\\");\\n/**\\n         * 参数一：被保存数据的输出管道\\n         * 参数二：保存心得。就是对象保存的数据进行解释说明！\\n         */\\nproperties.store(os , \\\"i am very happy!!我快乐的保存了用户数据!\\\");\\n```\\n\\n导入属性\\n\\n```java\\n// 1.创建一个属性集对象\\nProperties properties = new Properties();\\nSystem.out.println(properties);\\n\\n// 2.字节输入流加载属性文件的数据到属性集对象properties中去。\\nproperties.load(new FileInputStream(\\\"Day10Demo/src/users.properties\\\"));\\nSystem.out.println(properties);\\n\\nSystem.out.println(properties.getProperty(\\\"dlei\\\"));\\nSystem.out.println(properties.getProperty(\\\"admin\\\"));\\n```\\n\\n## 第四章 缓冲流\\n\\n### 缓冲流的概述和分类\\n\\n什么是缓冲流：缓冲流可以提高字节流和字符流的读写数据的性能\\n\\n缓冲流分为四类：\\n\\n- `BufferedInputStream`：字节缓冲输入流，可以提高字节输入流读数据的性能。\\n- `BufferedOutStream`：  字节缓冲输出流，可以提高字节输出流写数据的性能。\\n- `BufferedReader`：  字符缓冲输入流，可以提高字符输入流读数据的性能。\\n- `BufferedWriter`：  字符缓冲输出流，可以提高字符输出流写数据的性能。\\n\\n### 字节缓冲流\\n\\n字节缓冲输入流：`BufferedInputStream`\\n\\n作用：可以把低级的字节输入流包装成一个高级的缓冲字节输入流管道，从而提高字节输入流读数据的性能。\\n\\n构造器: `public BufferedInputStream(InputStream in)`\\n\\n原理：缓冲字节输入流管道自带了一个8KB的缓冲池，每次可以直接借用操作系统的功能最多提取8KB的数据到缓冲池中去，以后我们直接从缓冲池读取数据，所以性能较好！\\n\\n> * 字节缓冲输入流：`BufferedInputStream`\\n> * 可以把低级的字节输入流包装成一个高级的缓冲字节输入流管道,从而提高字节输入流读数据的性能。\\n> * 功能几乎无变化。\\n\\n```java\\n// 1.定义一个低级的字节输入流与源文件接通\\nInputStream is = new FileInputStream(\\\"Day10Demo/src/dlei04.txt\\\");\\n\\n// 3.把低级的字节输入流包装成一个高级的缓冲字节输入流。\\nBufferedInputStream bis = new BufferedInputStream(is);\\n\\n// 2.定义一个字节数组按照循环读取。\\nbyte[] buffer = new byte[3];\\nint len ;\\nwhile((len = is.read(buffer)) != -1){\\n    String rs = new String(buffer, 0 , len);\\n    System.out.print(rs);\\n}\\n```\\n\\n字节缓冲输出流：`BufferedOutputStream`\\n\\n作用：可以把低级的字节输出流包装成一个高级的缓冲字节输出流，从而提高写数据的性能。\\n\\n构造器：`public BufferedOutputStream(OutputStream os)`\\n\\n原理：缓冲字节输出流自带了8KB缓冲池,数据就直接写入到缓冲池中去，性能极高了！\\n\\n> * 字节缓冲输出流可以把低级的字节输出流包装成一个高级的缓冲字节输出流，从而提高写数据的性能。\\n> * 功能几乎不变。\\n\\n```java\\n// 1.写一个原始的字节输出流\\nOutputStream os = new FileOutputStream(\\\"Day10Demo/src/dlei05.txt\\\");\\n// 3.把低级的字节输出流包装成一个高级的缓冲字节输出流\\nBufferedOutputStream bos =  new BufferedOutputStream(os);\\n// 2.写数据出去\\nbos.write(\'a\');\\nbos.write(100);\\nbos.write(\'b\');\\nbos.write(\\\"我爱中国\\\".getBytes());\\nbos.close();\\n```\\n\\n> 高级的字节缓冲流按照一个一个字节数组的形式复制性能极高，建议以后使用\\n\\n### 字符缓冲流\\n\\n字符缓冲输入流：`BufferedReader`\\n\\n作用：字符缓冲输入流可以把字符输入流包装成一个高级的缓冲字符输入流，可以提高字符输入流读数据的性能。\\n\\n构造器：`public BufferedReader(Reader reader)`\\n\\n原理：缓冲字符输入流默认会有一个8K的字符缓冲池,可以提高读字符的性能。缓冲字符输入流除了提高了字符输入流的读数据性能，缓冲字符输入流还多了一个按照行读取数据的功能（重点）:`public String readLine()`: 读取一行数据返回，读取完毕返回`null`;\\n\\n字符缓冲输入流可以把字符输入流包装成一个高级的缓冲字符输入流，\\n\\n可以提高字符输入流读数据的性能。\\n\\n除此之外多了一个按照行读取数据的功能：\\n\\n`public String readLine()`: 读取一行数据返回，读取完毕返回`null`;\\n\\n```java\\n// 1.定义一个原始的字符输入流读取源文件\\nReader fr = new FileReader(\\\"Day10Demo/src/dlei06.txt\\\");\\n\\n// 3.把低级的字符输入流管道包装成一个高级的缓冲字符输入流管道\\nBufferedReader br = new BufferedReader(fr);\\n// 定义一个字符串变量存储每行数据\\nString line;\\n// 使用一个循环读取数据(经典代码)\\nwhile((line = br.readLine())!=null){\\n    System.out.println(line);\\n}\\n\\n//        // 2.定义一个字符数组循环读取\\n//        char[] buffer = new char[1024];\\n//        int len ;\\n//        while((len = br.read(buffer))!=-1){\\n//            System.out.println(new String(buffer , 0 , len));\\n//        }\\n\\nbr.close();\\n```\\n\\n字符缓冲输出流：`BufferedWriter`\\n\\n作用：把字符输出流包装成一个高级的缓冲字符输出流，提高写字符数据的性能。\\n\\n构造器：`public BufferedWriter(Writer writer)`:\\n\\n原理：高级的字符缓冲输出流多了一个8k的字符缓冲池，写数据性能极大提高了!\\n\\n字符缓冲输出流除了提高字符输出流写数据的性能，还多了一个换行的特有功能：`public void newLine()`：新建一行。\\n\\n缓冲字符输出流可以把低级的字符输出流进行包装。提高了写字符的性能。\\n\\n多了一个换行的功能：public void newLine()：新建一行。\\n\\n```java\\n// 1.定义一个低级的字符输出流写数据出去\\nWriter fw = new FileWriter(\\\"Day10Demo/src/dlei07.txt\\\",true);\\n\\n// 3.把低级的字符输出流包装成高级的缓冲字符输出流\\nBufferedWriter bw = new BufferedWriter(fw);\\n\\n// 2.写字符输出\\nbw.write(\\\"我在黑马学IO流~~~~\\\");\\nbw.newLine(); // 换行\\nbw.write(\\\"我在黑马学IO流~~~~\\\");\\nbw.newLine();// 换行\\n\\nbw.close();\\n```\\n\\n### 不同编码读取乱码问题\\n\\n- 如果代码编码和读取的文件编码一致。字符流读取的时候不会乱码。\\n- 如果代码编码和读取的文件编码不一致。字符流读取的时候会乱码。\\n\\n```java\\n// 1.定义一个原始的字符输入流读取源文件\\n//  代码UTF-8  文件UTF-8 不会出现乱码！\\n// Reader fr = new FileReader(\\\"Day10Demo/src/dlei06.txt\\\");\\n//  代码UTF-8  文件GBK   会出现乱码！\\nReader fr = new FileReader(\\\"D:\\\\\\\\itcast\\\\\\\\网络编程公开课\\\\\\\\Netty.txt\\\");\\n// 2.把低级的字符输入流管道包装成一个高级的缓冲字符输入流管道\\nBufferedReader br = new BufferedReader(fr);\\n// 3.定义一个字符串变量存储每行数据\\nString line;\\n// 使用一个循环读取数据(经典代码)\\nwhile((line = br.readLine())!=null){\\n    System.out.println(line);\\n}\\n```\\n\\n## 第五章 转换流\\n\\n字符输入转换流`InputStreamReader`\\n\\n作用\\n\\n- 可以解决字符流读取不同编码乱码的问题。\\n- 可以把原始的字节流按照当前默认的代码编码转换成字符输入流。\\n- 也可以把原始的字节流按照指定编码转换成字符输入流\\n\\n构造器：\\n\\n- public InputStreamReader(InputStream is)：可以使用当前代码默认编码转换成字符流，几乎不用！\\n- public InputStreamReader(InputStream is,String charset):可以指定编码把字节流转换成字符流\\n\\n\\n字符输入转换流可以把字节输入流按照默认编码转换成字符输入流。\\n\\nReader isr = new InputStreamReader(is); // 使用当前代码默认编码UTF-8转换成字符流，几乎不用！\\n\\n字符输入转换流也可以指定编码把字节输入流转换成字符输入流。\\n\\nReader isr = new InputStreamReader(is,\\\"GBK\\\"); // 指定编码把字节流转换成字符流\\n\\n字符输入转换流可以解决不同编码读取乱码的问题！\\n\\n```java\\n// 代码：UTF-8    文件：GBK(ab我爱你： o o [oo] [oo] [oo])\\n// 1.提取GBK文件的原始字节流\\nInputStream is = new FileInputStream(\\\"D:\\\\\\\\itcast\\\\\\\\网络编程公开课\\\\\\\\Netty.txt\\\");\\n// 2.把原始字节输入流通过转换流，转换成 字符输入转换流InputStreamReader\\n//Reader isr = new InputStreamReader(is); // 使用当前代码默认编码UTF-8转换成字符流，几乎不用！\\nReader isr = new InputStreamReader(is,\\\"GBK\\\"); // 指定编码把字节流转换成字符流\\n// 3.包装成缓冲流\\nBufferedReader br = new BufferedReader(isr);\\n// 4.定义一个字符串变量存储每行数据\\nString line;\\n// 使用一个循环读取数据(经典代码)\\nwhile((line = br.readLine())!=null){\\n    System.out.println(line);\\n}\\n```\\n\\n字符输出转换流：`OutputStreamWriter`\\n\\n作用：可以指定编码把字节输出流转换成字符输出流。可以指定写出去的字符的编码。\\n\\n构造器：\\n\\n- `public OutputStreamWriter(OutputStream os) `:   用当前默认编码UTF-8把字节输出流转换成字符输出流\\n- `public OutputStreamWriter(OutputStream os , String charset)`:指定编码把字节输出流转换成字符输出流\\n\\n```java\\n// 1.写一个字节输出流通向文件\\nOutputStream os = new FileOutputStream(\\\"Day10Demo/src/dlei07.txt\\\");\\n\\n// 2.把字节输出流转换成字符输出流。\\n// Writer fw = new OutputStreamWriter(os); // .把字节输出流按照默认编码UTF-8转换成字符输出流。\\nWriter fw = new OutputStreamWriter(os,\\\"GBK\\\"); // .  把字节输出流按照指定编码GBK转换成字符输出流。\\nfw.write(\\\"abc我是中国人\\\");\\nfw.close();\\n```\\n\\n## 第六章 序列流\\n\\n**对象序列化**：就是把Java对象数据直接存储到文件中去。           对象 => 文件中\\n\\n**对象反序列化**：就是把Java对象的文件数据恢复到Java对象中。     文件中 => 对象\\n\\n对象序列化流（对象字节输出流）：`ObjectOutputStream`\\n\\n**作用**：把内存中的Java对象数据保存到文件中去。\\n\\n构造器：   `public ObjectOutputStream(OutputStream out)`\\n\\n序列化方法：`public final void writeObject(Object obj)`\\n\\n> 对象如果想参与序列化，对象必须实现序列化接口 implements Serializable ，否则序列化失败！\\n\\n```java\\n// 1.创建User用户对象\\nUser user = new User(\\\"tsgz\\\",\\\"003197\\\",\\\"铁扇公主\\\");\\n// 2.创建低级的字节输出流通向目标文件\\nOutputStream os = new FileOutputStream(\\\"Day10Demo/src/obj.dat\\\");\\n// 3.把低级的字节输出流包装成高级的对象字节输出流ObjectOutputStream\\nObjectOutputStream oos = new ObjectOutputStream(os);\\n// 4.通过对象字节输出流序列化对象：\\noos.writeObject(user);\\n// 6.释放资源\\noos.close();\\nSystem.out.println(\\\"序列化对象成功~~~~\\\");\\n```\\n\\n对象反序列化（对象字节输入流）：`ObjectInputStream`\\n\\n作用：读取序列化的对象文件恢复到Java对象中。\\n\\n构造器：`public ObjectInputStream(InputStream is)`\\n\\n方法：`public final Object readObject()`\\n\\n如果一个字段不想参数序列化：`transient`修饰该成员变量，它将不参与序列化！\\n\\n序列化版本号：\\n\\nprivate static final long serialVersionUID = 2L;\\n\\n必须序列化使用的版本号和反序列化使用的版本号一致才可以正常反序列化！否则报错！\\n\\n```java\\n// 1.定义一个低级的字节输入流通向源文件\\nInputStream is = new FileInputStream(\\\"Day10Demo/src/obj.dat\\\");\\n// 2.把字节输入流包装成高的对象字节输入流\\nObjectInputStream ois = new ObjectInputStream(is);\\n// 3.反序列化\\nUser user = (User) ois.readObject();\\nSystem.out.println(user);\\nSystem.out.println(\\\"反序列化完成！\\\");\\n```\\n\\n## 第七章 打印流\\n\\n打印流 `PrintStream `/ `PrintWriter`\\n\\n打印流的作用：\\n\\n可以方便，快速的写数据出去。\\n\\n可以实现打印啥出去，就是啥出去。\\n\\n打印流的构造器：\\n\\n- `public PrintStream(OutputStream os)`\\n- `public PrintStream(String filepath)`\\n\\n```java\\n// 1.打印流PrintStream\\n//OutputStream os = new FileOutputStream(\\\"Day10Demo/src/dlei08.txt\\\");\\n//PrintStream ps = new PrintStream(os);\\nPrintStream ps = new  PrintStream(\\\"Day10Demo/src/dlei08.txt\\\");\\n//PrintWriter pw = new  PrintWriter(\\\"Day10Demo/src/dlei08.txt\\\");\\n\\nps.println(97); // 写97\\nps.println(110); // 写110\\nps.println(\\\"我在黑马快乐的调皮~~\\\");\\nps.println(99.8);\\nps.println(false);\\nps.println(\'徐\');\\n\\n// 写字节数据出去\\n// ps.write(\\\"我爱你\\\".getBytes());\\n\\nps.close();\\n```\\n\\n`public static void setOut(PrintStream out)` :让系统的输出流向打印流。\\n\\n```java\\nSystem.out.println(\\\"==itheima0==\\\");\\nPrintStream ps = new PrintStream(\\\"Day10Demo/src/log.txt\\\");\\nSystem.setOut(ps); // 让系统的输出流向打印流。\\n\\nSystem.out.println(\\\"==itheima1==\\\");\\nSystem.out.println(\\\"==itheima2==\\\");\\nSystem.out.println(\\\"==itheima3==\\\");\\nSystem.out.println(\\\"==itheima4==\\\");\\nSystem.out.println(\\\"==itheima5==\\\");\\n```\\n\\n# day11-网络编程和NIO\\n\\n## 第一章 网络编程\\n\\n通信一定是基于软件结构实现的\\n\\n* C/S结构 ：全称为Client/Server结构，是指客户端和服务器结构。常见程序有ＱＱ、迅雷，IDEA等软件\\n* B/S结构 ：全称为Browser/Server结构，是指浏览器和服务器结构。常见浏览器有谷歌、火狐等、软件：博学谷、京东、淘宝。（开发中的重点，基于网页设计界面，界面效果可以更丰富: Java Web开发）\\n\\n两种架构各有优势，但是无论哪种架构，都离不开网络的支持。网络编程，就是在一定的协议下，实现两台计算机的通信的技术\\n\\n### 网络通信的三要素\\n\\n1. 协议：计算机网络客户端与服务端通信必须事先约定和彼此遵守的通信规则。\\n   HTTP , FTP , TCP , UDP , SSH , SMTP。\\n\\n2. IP地址：指互联网协议地址（Internet Protocol Address），俗称IP。\\n\\n   IP地址用来给一个网络中的计算机设备做唯一的编号\\n\\n   IPv4: **4个字节，32位组成**。  192.168.70.70\\n\\n   局域网：公司内部用\\n\\n   城域网\\n\\n   广域网（公网）：可以在任何地方访问\\n\\n   IPv6: 可以实现为所有设备分配IP  **128位**\\n\\n   ipconfig：查看本机的IP\\n\\n   ping 检查本机与某个IP指定的机器是否联通，或者说是检测对方是否在线。\\n\\n   ping 空格 IP地址\\n\\n   ping 220.181.57.216\\n\\n   ping www.baidu.com\\n\\n   注意：特殊的IP地址： 本机IP地址.(不受环境的影响，任何时候都存在这两个ip,可以直接找本机！)\\n\\n   127.0.0.1 == localhost。\\n\\n3. 端口：端口号就可以唯一标识设备中的进程（应用程序）了\\n\\n   端口号：用两个字节表示的整数，它的取值范围是0~65535。\\n\\n   * 0~1023之间的端口号用于一些知名的网络服务和应用。\\n   * 普通的应用程序需要使用1024以上的端口号。\\n   * 如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败。报出端口被占用异常！！\\n\\n利用`协议`+`IP地址`+`端口号` 三元组合，就可以标识网络中的进程了，那么进程间的通信就可以利用这个标识与其它进程进行交互。\\n\\n### 网络通信的分层和协议\\n\\n网络通信协议：通信协议是对计算机必须遵守的规则，只有遵守这些规则，计算机之间才能进行通信\\n\\n```\\n-------------------------------------------------------------------------------\\n应用层  ：应用程序（QQ,微信,浏览器）,可能用到的协议（HTTP,FTP,SMTP）   通常程序员只需要关心这一层\\n------------------------------------------------------------------------------\\n传输层  ：TCP/IP协议 - UDP协议    计算机网络工程师需要精通的协议，有些技术我们也需要精通这一层协议，\\n-----------------------------------------------------------------\\n网络层  ：IP协议  封装自己的IP和对方的IP和端口\\n-----------------------------------------------------------------\\n数据链路层 ： 进入到硬件（网）\\n-----------------------------------------------------------------\\n```\\n\\n* TCP/IP协议：传输控制协议 (Transmission Control Protocol)。\\n\\n  TCP协议是**面向连接**的安全的可靠的传输通信协议。\\n\\n  1. 在通信之前必须确定对方在线并且连接成功才可以通信。\\n  2. 例如下载文件、浏览网页等(要求可靠传输)\\n\\n* UDP：用户数据报协议(User Datagram Protocol)。\\n\\n  UDP协议是一个**面向无连接**的不可靠传输的协议。\\n\\n  1. 直接发消息给对方，不管对方是否在线，发消息后也不需要确认。\\n  2. 无线（视频会议，通话），性能好，可能丢失一些数据！！\\n\\n### InetAddress类概述\\n\\n`InetAddress`类的对象就代表一个IP地址对象。\\n\\n`InetAddress`类成员方法：\\n\\n* 获得本地主机IP地址对象\\n\\n     `static InetAddress getLocalHost()`\\n\\n* 根据IP地址字符串或主机名获得对应的IP地址对象\\n\\n     `static InetAddress getByName(String host)`\\n\\n* 获得主机名\\n\\n     `String getHostName()`\\n\\n* 获得IP地址字符串\\n\\n     `String getHostAddress()`\\n\\n```java\\n// 1.获取本机地址对象。\\nInetAddress ip = InetAddress.getLocalHost();\\nSystem.out.println(ip.getHostName());\\nSystem.out.println(ip.getHostAddress());\\n// 2.获取域名ip对象\\nInetAddress ip2 = InetAddress.getByName(\\\"www.baidu.com\\\");\\nSystem.out.println(ip2.getHostName());\\nSystem.out.println(ip2.getHostAddress());\\n\\n// 3.获取公网IP对象。\\nInetAddress ip3 = InetAddress.getByName(\\\"182.61.200.6\\\");\\nSystem.out.println(ip3.getHostName());\\nSystem.out.println(ip3.getHostAddress());\\n\\n// 4.判断是否能通： ping  5s之前测试是否可通\\nSystem.out.println(ip2.isReachable(5000)); // ping\\n```\\n\\n## 第二章 UDP通信\\n\\nUDP协议的特点\\n\\n* **面向无连接**的协议\\n* 发送端只管发送，不确认对方是否能收到\\n* 基于数据包进行数据传输\\n* 发送数据的包的大小限制**64KB以内**\\n* **因为面向无连接，速度快，但是不可靠。会丢失数据！**\\n\\nUDP协议的使用场景\\n* 在线视频\\n* 网络语音电话\\n\\nUDP协议相关的两个类\\n* `DatagramPacket`\\n     * 数据包对象\\n     * 作用：用来封装要发送或要接收的数据，比如：集装箱\\n* `DatagramSocket`\\n     * 发送对象\\n     * 作用：用来发送或接收数据包，比如：码头\\n\\n`DatagramPacket`类构造器\\n\\n发送端用：`new DatagramPacket(byte[] buf, int length, InetAddress address, int port)` 创建发送端数据包对象\\n\\n* `buf`：要发送的内容，字节数组\\n* `length`：要发送内容的长度，单位是字节\\n* `address`：接收端的IP地址对象\\n* `port`：接收端的端口号\\n\\n接收端用：`new DatagramPacket(byte[] buf, int length)`\\n* 创建接收端的数据包对象\\n* `buf`：用来存储接收到内容\\n* `length`：能够接收内容的长度\\n\\n`DatagramPacket`类常用方法\\n\\n    * `int getLength()` 获得实际接收到的字节个数\\n\\n`DatagramSocket`类构造方法\\n\\n* `DatagramSocket()` 创建发送端的Socket对象，系统会随机分配一个端口号。\\n* `DatagramSocket(int port)` 创建接收端的Socket对象并指定端口号\\n\\n`DatagramSocket`类成员方法\\n\\n* `void send(DatagramPacket dp)` 发送数据包\\n* `void receive(DatagramPacket p)` 接收数据包\\n\\n需求：使用UDP实现客户端发，服务端收。(了解)\\n\\n客户端\\n\\n```java\\nSystem.out.println(\\\"===启动客户端===\\\");\\n// 1.创建一个集装箱对象，用于封装需要发送的数据包!\\n/**\\n         new DatagramPacket(byte[] buf, int length, InetAddress address, int port)\\n         参数一：封装数据的字节数组。\\n         参数二：发送数据的长度!\\n         参数三：服务端的IP地址\\n         参数四：服务端程序的端口号码。\\n         */\\nbyte[] buffer = \\\"今晚，约吗？\\\".getBytes();\\nDatagramPacket packet = new DatagramPacket(buffer, buffer.length,  InetAddress.getLocalHost(), 6666);\\n\\n// 2.创建一个码头对象\\n// 参数可以申明客户端端口，可以有可以没有，默认会给一个端口。\\nDatagramSocket socket = new DatagramSocket();\\n\\n// 3.开始发送数据包对象\\nsocket.send(packet);\\n\\nsocket.close();\\n```\\n\\n服务端\\n\\n```java\\nSystem.out.println(\\\"==启动服务端程序==\\\");\\n// 1.创建一个接收客户都端的数据包对象（集装箱）\\n/**\\n         * new DatagramPacket(byte[] buffer ,int lenght):\\n         * 参数一：接收数据的数组。\\n         * 参数二：接收数据的数组的长度！\\n         */\\nbyte[] buffer = new byte[1024*64];\\nDatagramPacket packet = new DatagramPacket(buffer, buffer.length);\\n\\n// 2.创建一个接收端的码头对象\\nDatagramSocket socket = new DatagramSocket(6666);\\n\\n// 3.开始接收\\nsocket.receive(packet);\\n\\n// 4.从集装箱中获取本次读取的数据量\\nint len = packet.getLength();\\n\\n// 5.输出数据\\nString rs = new String(buffer , 0 , len);\\nSystem.out.println(rs);\\n\\n// 6.服务端还可以获取发来信息的客户端的IP和端口。\\nString ip = packet.getAddress().getHostAddress();\\nint port = packet.getPort();\\nSystem.out.println(\\\"对方：\\\"+ip+\\\":\\\"+port);\\nsocket.close();\\n```\\n\\n## 第三章 TCP通信\\n\\nTCP/IP协议 ==> Transfer Control Protocol ==> 传输控制协议\\nTCP/IP协议的特点\\n\\n* **面向连接**的协议\\n* 只能由客户端主动发送数据给服务器端，服务器端接收到数据之后，可以给客户端响应数据。\\n* 通过**三次握手建立连接**，连接成功形成数据传输通道。\\n* 通过**四次挥手断开连接**\\n* 基于IO流进行数据传输\\n* 传输数据大小没有限制\\n* 因为**面向连接的协议，速度慢，但是是可靠的协议**。\\n\\nTCP协议的使用场景\\n* 文件上传和下载\\n* 邮件发送和接收\\n* 远程登录\\n\\nTCP协议相关的类\\n* `Socket`\\n\\n     一个该类的对象就代表一个客户端程序\\n\\n* `ServerSocket`\\n\\n     一个该类的对象就代表一个服务器端程序\\n\\nTCP通信也叫`Socket`网络编程，只要代码基于`Socket`开发，底层就是基于了可靠传输的TCP通信。\\n\\n`Socket`类构造方法\\n\\n    * `Socket(String host, int port)`\\n        \\n    根据ip地址字符串和端口号创建客户端Socket对象\\n          \\n          > 只要执行该方法，就会立即连接指定的服务器程序，如果连接不成功，则会抛出异常。如果连接成功，则表示三次握手通过。\\n\\n`Socket`类常用方法\\n\\n* `OutputStream getOutputStream()`; 获得字节输出流对象\\n* `InputStream getInputStream()`;获得字节输入流对象\\n\\n**客户端的开发流程**\\n\\n1. 客户端要请求于服务端的`socket`管道连接。\\n2. 从`socket`通信管道中得到一个字节输出流\\n3. 通过字节输出流给服务端写出数据。\\n\\n**服务端的开发流程**\\n\\n1. 注册端口。\\n2. 接收客户端的`Socket`管道连接。\\n3. 从`socket`通信管道中得到一个字节输入流。\\n4. 从字节输入流中读取客户端发来的数据。\\n\\n需求：客户端发送一行数据，服务端接收一行数据！！\\n\\n> 1. 客户端用`Socket`连接服务端。\\n> 2. 服务端用`ServerSocket`注册端口，接收客户端的`Socket`连接。\\n> 3. 通信是很严格的，对方怎么发，你就应该怎么收，对方发多少你就只能收多少。\\n> 4. 实现的面向连接的`socket`端到端的通信管道，一方如果出现对象，另一方会出现异常！\\n\\n### TCP通信的第一个入门案例\\n\\n简单的发送一条信息\\n\\n客户端\\n\\n```java\\n// 1.客户端要请求于服务端的socket管道连接。\\n// Socket(String host, int port)\\nSocket socket = new Socket(\\\"127.0.0.1\\\" , 9999);\\n// 2.从socket通信管道中得到一个字节输出流\\nOutputStream os = socket.getOutputStream();\\n// 3.把低级的字节输出流包装成高级的打印流。\\nPrintStream ps = new PrintStream(os);\\n// 4.开始发消息出去\\nps.println(\\\"我是客户端，喜欢你很久了，第一次给你发消息，只想说：约吗？\\\");\\nps.flush();\\nSystem.out.println(\\\"客户端发送完毕~~~~\\\");\\n```\\n\\n服务端\\n\\n```java\\nSystem.out.println(\\\"----服务端启动----\\\");\\n// 1.注册端口: public ServerSocket(int port)\\nServerSocket serverSocket = new ServerSocket(9999);\\n// 2.开始等待接收客户端的Socket管道连接。\\nSocket socket = serverSocket.accept();\\n// 3.从socket通信管道中得到一个字节输入流。\\nInputStream is = socket.getInputStream();\\n// 4.把字节输入流转换成字符输入流\\nReader isr = new InputStreamReader(is);\\n// 5.把字符输入流包装成缓冲字符输入流。\\nBufferedReader br = new BufferedReader(isr);\\n// 6.按照行读取消息 。\\nString line ;\\nif((line = br.readLine())!=null){\\n    System.out.println(line);\\n}\\n```\\n\\n### TCP通信的第二个案例-循环发送\\n\\n客户端可以反复发送数据，服务端可以反复接受数据\\n\\n客户端\\n\\n```java\\n// 1.客户端要请求于服务端的socket管道连接。\\n// Socket(String host, int port)\\nSocket socket = new Socket(\\\"127.0.0.1\\\" , 9999);\\n// 2.从socket通信管道中得到一个字节输出流\\nOutputStream os = socket.getOutputStream();\\n// 3.把低级的字节输出流包装成高级的打印流。\\nPrintStream ps = new PrintStream(os);\\n// 4.开始发消息出去\\nwhile(true){\\nScanner sc = new Scanner(System.in);\\nSystem.out.print(\\\"请说：\\\");\\nps.println(sc.nextLine());\\nps.flush();\\n}\\n```\\n\\n服务端\\n\\n```java\\nSystem.out.println(\\\"----服务端启动----\\\");\\n// 1.注册端口: public ServerSocket(int port)\\nServerSocket serverSocket = new ServerSocket(9999);\\n// 2.开始等待接收客户端的Socket管道连接。\\nSocket socket = serverSocket.accept();\\n// 3.从socket通信管道中得到一个字节输入流。\\nInputStream is = socket.getInputStream();\\n// 4.把字节输入流转换成字符输入流\\nReader isr = new InputStreamReader(is);\\n// 5.把字符输入流包装成缓冲字符输入流。\\nBufferedReader br = new BufferedReader(isr);\\n// 6.按照行读取消息 。\\nString line ;\\nwhile((line = br.readLine())!=null){\\n\\tSystem.out.println(line);\\n}\\n```\\n\\n### TCP通信的第三个案例-一个服务端同时接受多个客户端消息\\n\\n需要在服务端引入多线程。每接收一个客户端的Socket通道，就为它分配一个独立的线程来处理它的消息。如此便可实现：一个服务端可以同时接收多个客户端的消息。\\n\\n服务端\\n\\n```java\\npublic class ServerDemo02 {\\n    public static void main(String[] args) throws Exception {\\n        System.out.println(\\\"----服务端启动----\\\");\\n        // 1.注册端口: public ServerSocket(int port)\\n        ServerSocket serverSocket = new ServerSocket(9999);\\n        // 2.定义一个循环不断的接收客户端的连接请求\\n        while(true){\\n            // 3.开始等待接收客户端的Socket管道连接。\\n            Socket socket = serverSocket.accept();\\n            // 4.每接收到一个客户端必须为这个客户端管道分配一个独立的线程来处理与之通信。\\n            new ServerReaderThread(socket).start();\\n        }\\n    }\\n}\\n\\nclass ServerReaderThread extends Thread{\\n    private Socket socket ;\\n    public ServerReaderThread(Socket socket){\\n        this.socket = socket;\\n    }\\n\\n    @Override\\n    public void run() {\\n        try{\\n            // 3.从socket通信管道中得到一个字节输入流。\\n            InputStream is = socket.getInputStream();\\n            // 4.把字节输入流转换成字符输入流\\n            Reader isr = new InputStreamReader(is);\\n            // 5.把字符输入流包装成缓冲字符输入流。\\n            BufferedReader br = new BufferedReader(isr);\\n            // 6.按照行读取消息 。\\n            String line ;\\n            while((line = br.readLine())!=null){\\n                System.out.println(socket.getRemoteSocketAddress()+\\\"说：\\\"+line);\\n            }\\n        }catch (Exception e){\\n            System.out.println(socket.getRemoteSocketAddress()+\\\"下线了~~~~~~\\\");\\n        }\\n    }\\n}\\n```\\n\\n客户端\\n\\n```java\\n// 1.客户端要请求于服务端的socket管道连接。\\n// Socket(String host, int port)\\nSocket socket = new Socket(\\\"127.0.0.1\\\" , 9999);\\n// 2.从socket通信管道中得到一个字节输出流\\nOutputStream os = socket.getOutputStream();\\n// 3.把低级的字节输出流包装成高级的打印流。\\nPrintStream ps = new PrintStream(os);\\n// 4.开始发消息出去\\nwhile(true){\\n    Scanner sc = new Scanner(System.in);\\n    System.out.print(\\\"请说：\\\");\\n    ps.println(sc.nextLine());\\n    ps.flush();\\n}\\n```\\n\\n### TCP通信的第四个案例-线程池\\n\\n\\n\\n我们之前引入的线程解决一个服务端可以接收多个客户端消息。客户端与服务端的线程模型是： N-N的关系。 一个客户端要一个线程。这种模型是不行的，并发越高，系统瘫痪的越快\\n\\n我们可以在服务端引入**线程池**，使用线程池来处理与客户端的消息通信，线程池不会引起出现过多的线程而导致系统死机\\n\\n客户端\\n\\n```java\\ntry {\\n    // 1.客户端要请求于服务端的socket管道连接。\\n    // Socket(String host, int port)\\n    Socket socket = new Socket(\\\"127.0.0.1\\\" , 9999);\\n    // 2.从socket通信管道中得到一个字节输出流\\n    OutputStream os = socket.getOutputStream();\\n    // 3.把低级的字节输出流包装成高级的打印流。\\n    PrintStream ps = new PrintStream(os);\\n    Scanner sc = new Scanner(System.in);\\n    while(true){\\n        System.out.print(\\\"请说：\\\");\\n        String msg = sc.nextLine();\\n        ps.println(msg);\\n        ps.flush();\\n    }\\n} catch (Exception e) {\\n    e.printStackTrace();\\n}\\n```\\n\\n服务端主程序\\n\\n```java\\ntry {\\n    System.out.println(\\\"----------服务端启动成功------------\\\");\\n    ServerSocket ss = new ServerSocket(9999);\\n\\n    // 一个服务端只需要对应一个线程池\\n    HandlerSocketThreadPool handlerSocketThreadPool =\\n        new HandlerSocketThreadPool(3, 100);\\n\\n    // 客户端可能有很多个\\n    while(true){\\n        Socket socket = ss.accept() ;\\n        System.out.println(\\\"有人上线了！！\\\");\\n        // 每次收到一个客户端的socket请求，都需要为这个客户端分配一个\\n        // 独立的线程 专门负责对这个客户端的通信！！\\n        handlerSocketThreadPool.execute(new ReaderClientRunnable(socket));\\n    }\\n\\n} catch (Exception e) {\\n    e.printStackTrace();\\n}\\n```\\n\\n`HandlerSocketThreadPool`\\n\\n```java\\n// 线程池处理类\\npublic class HandlerSocketThreadPool {\\n\\t\\n\\t// 线程池 \\n\\tprivate ExecutorService executor;\\n\\t// 线程池：3个线程  100个\\n\\tpublic HandlerSocketThreadPool(int maxPoolSize, int queueSize){\\n\\t\\texecutor = new ThreadPoolExecutor(\\n\\t\\t\\t\\tmaxPoolSize,\\n\\t\\t\\t\\tmaxPoolSize,\\n\\t\\t\\t\\t120L, \\n\\t\\t\\t\\tTimeUnit.SECONDS,\\n\\t\\t\\t\\tnew ArrayBlockingQueue<Runnable>(queueSize) );\\n\\t}\\n\\t\\n\\tpublic void execute(Runnable task){\\n\\t\\tthis.executor.execute(task);\\n\\t}\\n}\\n```\\n\\n`ReaderClientRunnable`\\n\\n```java\\nclass ReaderClientRunnable implements Runnable {\\n\\tprivate Socket socket ;\\n\\n\\tpublic ReaderClientRunnable(Socket socket) {\\n\\t\\tthis.socket = socket;\\n\\t}\\n\\n\\t@Override\\n\\tpublic void run() {\\n\\t\\ttry {\\n\\t\\t\\t// 读取一行数据\\n\\t\\t\\tInputStream is = socket.getInputStream() ;\\n\\t\\t\\t// 转成一个缓冲字符流\\n\\t\\t\\tReader fr = new InputStreamReader(is);\\n\\t\\t\\tBufferedReader br = new BufferedReader(fr);\\n\\t\\t\\t// 一行一行的读取数据\\n\\t\\t\\tString line = null ;\\n\\t\\t\\twhile((line = br.readLine())!=null){ // 阻塞式的！！\\n\\t\\t\\t\\tSystem.out.println(\\\"服务端收到了数据：\\\"+line);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tSystem.out.println(\\\"有人下线了\\\");\\n\\t\\t}\\n\\t}\\n}\\n```\\n\\n### 即时通信\\n\\n`ClientChat`\\n\\n```java\\nimport javax.swing.*;\\nimport java.awt.*;\\nimport java.awt.event.ActionEvent;\\nimport java.awt.event.ActionListener;\\nimport java.io.DataInputStream;\\nimport java.io.DataOutputStream;\\nimport java.net.Socket;\\n\\n/**\\n * @Author xlei(徐磊)\\n * 客户端界面\\n */\\npublic class ClientChat implements ActionListener {\\n\\t/** 1.设计界面  */\\n\\tprivate JFrame win = new JFrame();\\n\\t/** 2.消息内容框架 */\\n\\tpublic JTextArea smsContent =new JTextArea(23 , 50);\\n\\t/** 3.发送消息的框  */\\n\\tprivate JTextArea smsSend = new JTextArea(4,40);\\n\\t/** 4.在线人数的区域  */\\n\\t/** 存放人的数据 */\\n\\t/** 展示在线人数的窗口 */\\n\\tpublic JList<String> onLineUsers = new JList<>();\\n\\n\\t// 是否私聊按钮\\n\\tprivate JCheckBox isPrivateBn = new JCheckBox(\\\"私聊\\\");\\n\\t// 消息按钮\\n\\tprivate JButton sendBn  = new JButton(\\\"发送\\\");\\n\\n\\t// 登录界面\\n\\tprivate JFrame loginView;\\n\\n\\tprivate JTextField ipEt , nameEt , idEt;\\n\\n\\tprivate Socket socket ;\\n\\n\\tpublic static void main(String[] args) {\\n\\t\\tnew ClientChat().initView();\\n\\n\\t}\\n\\n\\tprivate void initView() {\\n\\t\\t/** 初始化聊天窗口的界面 */\\n\\t\\twin.setSize(650, 600);\\n\\n\\t\\t/** 展示登录界面  */\\n\\t\\tdisplayLoginView();\\n\\n\\t\\t/** 展示聊天界面 */\\n\\t\\t//displayChatView();\\n\\n\\n\\t}\\n\\n\\tprivate void displayChatView() {\\n\\n\\t\\tJPanel bottomPanel = new JPanel(new BorderLayout());\\n\\t\\t//-----------------------------------------------\\n\\t\\t// 将消息框和按钮 添加到窗口的底端\\n\\t\\twin.add(bottomPanel, BorderLayout.SOUTH);\\n\\t\\tbottomPanel.add(smsSend);\\n\\t\\tJPanel btns = new JPanel(new FlowLayout(FlowLayout.LEFT));\\n\\t\\tbtns.add(sendBn);\\n\\t\\tbtns.add(isPrivateBn);\\n\\t\\tbottomPanel.add(btns, BorderLayout.EAST);\\n\\t\\t//-----------------------------------------------\\n\\t\\t// 给发送消息按钮绑定点击事件监听器\\n\\t\\t// 将展示消息区centerPanel添加到窗口的中间\\n\\t\\tsmsContent.setBackground(new Color(0xdd,0xdd,0xdd));\\n\\t\\t// 让展示消息区可以滚动。\\n\\t\\twin.add(new JScrollPane(smsContent), BorderLayout.CENTER);\\n\\t\\tsmsContent.setEditable(false);\\n\\t\\t//-----------------------------------------------\\n\\t\\t// 用户列表和是否私聊放到窗口的最右边\\n\\t\\tBox rightBox = new Box(BoxLayout.Y_AXIS);\\n\\t\\tonLineUsers.setFixedCellWidth(120);\\n\\t\\tonLineUsers.setVisibleRowCount(13);\\n\\t\\trightBox.add(new JScrollPane(onLineUsers));\\n\\t\\twin.add(rightBox, BorderLayout.EAST);\\n\\t\\t//-----------------------------------------------\\n\\t\\t// 关闭窗口退出当前程序\\n\\t\\twin.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\\n\\t\\twin.pack();  // swing 加上这句 就可以拥有关闭窗口的功能\\n\\t\\t/** 设置窗口居中,显示出来  */\\n\\t\\tsetWindowCenter(win,650,600,true);\\n\\t\\t// 发送按钮绑定点击事件\\n\\t\\tsendBn.addActionListener(this);\\n\\t}\\n\\n\\tprivate void displayLoginView(){\\n\\n\\t\\t/** 先让用户进行登录\\n\\t\\t *  服务端ip\\n\\t\\t *  用户名\\n\\t\\t *  id\\n\\t\\t *  */\\n\\t\\t/** 显示一个qq的登录框     */\\n\\t\\tloginView = new JFrame(\\\"登录\\\");\\n\\t\\tloginView.setLayout(new GridLayout(3, 1));\\n\\t\\tloginView.setSize(400, 230);\\n\\n\\t\\tJPanel ip = new JPanel();\\n\\t\\tJLabel label = new JLabel(\\\"   IP:\\\");\\n\\t\\tip.add(label);\\n\\t\\tipEt = new JTextField(20);\\n\\t\\tip.add(ipEt);\\n\\t\\tloginView.add(ip);\\n\\n\\t\\tJPanel name = new JPanel();\\n\\t\\tJLabel label1 = new JLabel(\\\"姓名:\\\");\\n\\t\\tname.add(label1);\\n\\t\\tnameEt = new JTextField(20);\\n\\t\\tname.add(nameEt);\\n\\t\\tloginView.add(name);\\n\\n\\t\\tJPanel btnView = new JPanel();\\n\\t\\tJButton login = new JButton(\\\"登陆\\\");\\n\\t\\tbtnView.add(login);\\n\\t\\tJButton cancle = new JButton(\\\"取消\\\");\\n\\t\\tbtnView.add(cancle);\\n\\t\\tloginView.add(btnView);\\n\\t\\t// 关闭窗口退出当前程序\\n\\t\\tloginView.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\\n\\t\\tsetWindowCenter(loginView,400,260,true);\\n\\n\\t\\t/** 给登录和取消绑定点击事件 */\\n\\t\\tlogin.addActionListener(this);\\n\\t\\tcancle.addActionListener(this);\\n\\n\\t}\\n\\n\\tprivate static void setWindowCenter(JFrame frame, int width , int height, boolean flag) {\\n\\t\\t/** 得到所在系统所在屏幕的宽高 */\\n\\t\\tDimension ds = frame.getToolkit().getScreenSize();\\n\\n\\t\\t/** 拿到电脑的宽 */\\n\\t\\tint width1 = ds.width;\\n\\t\\t/** 高 */\\n\\t\\tint height1 = ds.height ;\\n\\n\\t\\tSystem.out.println(width1 +\\\"*\\\" + height1);\\n\\t\\t/** 设置窗口的左上角坐标 */\\n\\t\\tframe.setLocation(width1/2 - width/2, height1/2 -height/2);\\n\\t\\tframe.setVisible(flag);\\n\\t}\\n\\n\\t@Override\\n\\tpublic void actionPerformed(ActionEvent e) {\\n\\t\\t/** 得到点击的事件源 */\\n\\t\\tJButton btn = (JButton) e.getSource();\\n\\t\\tswitch(btn.getText()){\\n\\t\\t\\tcase \\\"登陆\\\":\\n\\t\\t\\t\\tString ip = ipEt.getText().toString();\\n\\t\\t\\t\\tString name = nameEt.getText().toString();\\n\\t\\t\\t\\t// 校验参数是否为空\\n\\t\\t\\t\\t// 错误提示\\n\\t\\t\\t\\tString msg = \\\"\\\" ;\\n\\t\\t\\t\\t// 12.1.2.0\\n\\t\\t\\t\\t// \\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\\\n\\t\\t\\t\\tif(ip==null || !ip.matches(\\\"\\\\\\\\d{1,3}\\\\\\\\.\\\\\\\\d{1,3}\\\\\\\\.\\\\\\\\d{1,3}\\\\\\\\.\\\\\\\\d{1,3}\\\")){\\n\\t\\t\\t\\t\\tmsg = \\\"请输入合法的服务端ip地址\\\";\\n\\t\\t\\t\\t}else if(name==null || !name.matches(\\\"\\\\\\\\S{1,}\\\")){\\n\\t\\t\\t\\t\\tmsg = \\\"姓名必须1个字符以上\\\";\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif(!msg.equals(\\\"\\\")){\\n\\t\\t\\t\\t\\t/** msg有内容说明参数有为空 */\\n\\t\\t\\t\\t\\t// 参数一：弹出放到哪个窗口里面\\n\\t\\t\\t\\t\\tJOptionPane.showMessageDialog(loginView, msg);\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\t// 参数都合法了\\n\\t\\t\\t\\t\\t\\t// 当前登录的用户,去服务端登陆\\n\\t\\t\\t\\t\\t\\t/** 先把当前用户的名称展示到界面 */\\n\\t\\t\\t\\t\\t\\twin.setTitle(name);\\n\\t\\t\\t\\t\\t\\t// 去服务端登陆连接一个socket管道\\n\\t\\t\\t\\t\\t\\tsocket = new Socket(ip, Constants.PORT);\\n\\n\\t\\t\\t\\t\\t\\t//为客户端的socket分配一个线程 专门负责收消息\\n\\t\\t\\t\\t\\t\\tnew ClientReader(this,socket).start();\\n\\n\\t\\t\\t\\t\\t\\t// 带上用户信息过去\\n\\t\\t\\t\\t\\t\\tDataOutputStream dos = new DataOutputStream(socket.getOutputStream());\\n\\t\\t\\t\\t\\t\\tdos.writeInt(1); // 登录消息\\n\\t\\t\\t\\t\\t\\tdos.writeUTF(name.trim());\\n\\t\\t\\t\\t\\t\\tdos.flush();\\n\\n\\t\\t\\t\\t\\t\\t// 关系当前窗口 弹出聊天界面\\n\\t\\t\\t\\t\\t\\tloginView.dispose(); // 登录窗口销毁\\n\\t\\t\\t\\t\\t\\tdisplayChatView(); // 展示了聊天窗口了\\n\\n\\n\\t\\t\\t\\t\\t} catch (Exception e1) {\\n\\t\\t\\t\\t\\t\\te1.printStackTrace();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"取消\\\":\\n\\t\\t\\t\\t/** 退出系统 */\\n\\t\\t\\t\\tSystem.exit(0);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"发送\\\":\\n\\t\\t\\t\\t// 得到发送消息的内容\\n\\t\\t\\t\\tString msgSend = smsSend.getText().toString();\\n\\t\\t\\t\\tif(!msgSend.trim().equals(\\\"\\\")){\\n\\t\\t\\t\\t\\t/** 发消息给服务端 */\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\t// 判断是否对谁发消息\\n\\t\\t\\t\\t\\t\\tString selectName = onLineUsers.getSelectedValue();\\n\\t\\t\\t\\t\\t\\tint flag = 2 ;// 群发 @消息\\n\\t\\t\\t\\t\\t\\tif(selectName!=null&&!selectName.equals(\\\"\\\")){\\n\\t\\t\\t\\t\\t\\t\\tmsgSend =(\\\"@\\\"+selectName+\\\",\\\"+msgSend);\\n\\t\\t\\t\\t\\t\\t\\t/** 判断是否选中了私法 */\\n\\t\\t\\t\\t\\t\\t\\tif(isPrivateBn.isSelected()){\\n\\t\\t\\t\\t\\t\\t\\t\\t/** 私法 */\\n\\t\\t\\t\\t\\t\\t\\t\\tflag = 3 ;//私发消息\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tDataOutputStream dos = new DataOutputStream(socket.getOutputStream());\\n\\t\\t\\t\\t\\t\\tdos.writeInt(flag); // 群发消息  发送给所有人\\n\\t\\t\\t\\t\\t\\tdos.writeUTF(msgSend);\\n\\t\\t\\t\\t\\t\\tif(flag == 3){\\n\\t\\t\\t\\t\\t\\t\\t// 告诉服务端我对谁私发\\n\\t\\t\\t\\t\\t\\t\\tdos.writeUTF(selectName.trim());\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tdos.flush();\\n\\n\\t\\t\\t\\t\\t} catch (Exception e1) {\\n\\t\\t\\t\\t\\t\\te1.printStackTrace();\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tsmsSend.setText(null);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t}\\n\\n\\t}\\n}\\n\\nclass ClientReader extends Thread {\\n\\n\\tprivate Socket socket;\\n\\tprivate ClientChat clientChat ;\\n\\n\\tpublic ClientReader(ClientChat clientChat, Socket socket) {\\n\\t\\tthis.clientChat = clientChat;\\n\\t\\tthis.socket = socket;\\n\\t}\\n\\n\\t@Override\\n\\tpublic void run() {\\n\\t\\ttry {\\n\\t\\t\\tDataInputStream dis = new DataInputStream(socket.getInputStream());\\n\\t\\t\\t/** 循环一直等待客户端的消息 */\\n\\t\\t\\twhile(true){\\n\\t\\t\\t\\t/** 读取当前的消息类型 ：登录,群发,私聊 , @消息 */\\n\\t\\t\\t\\tint flag = dis.readInt();\\n\\t\\t\\t\\tif(flag == 1){\\n\\t\\t\\t\\t\\t// 在线人数消息回来了\\n\\t\\t\\t\\t\\tString nameDatas = dis.readUTF();\\n\\t\\t\\t\\t\\t// 展示到在线人数的界面\\n\\t\\t\\t\\t\\tString[] names = nameDatas.split(Constants.SPILIT);\\n\\n\\t\\t\\t\\t\\tclientChat.onLineUsers.setListData(names);\\n\\t\\t\\t\\t}else if(flag == 2){\\n\\t\\t\\t\\t\\t// 群发消息\\n\\t\\t\\t\\t\\tString msg = dis.readUTF() ;\\n\\t\\t\\t\\t\\tclientChat.smsContent.append(msg);\\n\\t\\t\\t\\t\\t//滾動到底端\\n\\t\\t\\t\\t\\tclientChat.smsContent.setCaretPosition(clientChat.smsContent.getText().length());\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\n\\t}\\n}\\n```\\n\\n`User`\\n\\n```java\\npublic class User {\\n\\tprivate Integer id ;\\n\\tprivate String name ;\\n\\t\\n\\tpublic User(Integer id, String name) {\\n\\t\\tthis.id = id;\\n\\t\\tthis.name = name;\\n\\t}\\n\\t\\n\\tpublic Integer getId() {\\n\\t\\treturn id;\\n\\t}\\n\\tpublic void setId(Integer id) {\\n\\t\\tthis.id = id;\\n\\t}\\n\\tpublic String getName() {\\n\\t\\treturn name;\\n\\t}\\n\\tpublic void setName(String name) {\\n\\t\\tthis.name = name;\\n\\t}\\n\\t@Override\\n\\tpublic String toString() {\\n\\t\\treturn \\\"User [id=\\\" + id + \\\", name=\\\" + name + \\\"]\\\";\\n\\t}\\n\\t\\n\\t\\n}\\n```\\n\\n`ServerChat`\\n\\n```java\\n/**\\n * @Author\\n * @Email dlei0009@163.com\\n */\\npublic class ServerChat {\\n\\n\\t/** 定义一个集合存放所有在线的socket  */\\n\\tpublic static Map<Socket, String> onLineSockets = new HashMap<>();\\n\\n\\tpublic static void main(String[] args) {\\n\\t\\ttry {\\n\\t\\t\\t/** 注册端口   */\\n\\t\\t\\tServerSocket serverSocket = new ServerSocket(Constants.PORT);\\n\\n\\t\\t\\t/** 循环一直等待所有可能的客户端连接 */\\n\\t\\t\\twhile(true){\\n\\t\\t\\t\\tSocket socket = serverSocket.accept();\\n\\t\\t\\t\\t/** 把客户端的socket管道单独配置一个线程来处理 */\\n\\t\\t\\t\\tnew ServerReader(socket).start();\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t}\\n}\\n\\nclass ServerReader extends Thread {\\n\\n\\tprivate Socket socket;\\n\\n\\tpublic ServerReader(Socket socket) {\\n\\t\\tthis.socket = socket;\\n\\t}\\n\\n\\t@Override\\n\\tpublic void run() {\\n\\t\\tDataInputStream dis = null;\\n\\t\\ttry {\\n\\t\\t\\tdis = new DataInputStream(socket.getInputStream());\\n\\t\\t\\t/** 循环一直等待客户端的消息 */\\n\\t\\t\\twhile(true){\\n\\t\\t\\t\\t/** 读取当前的消息类型 ：登录,群发,私聊 , @消息 */\\n\\t\\t\\t\\tint flag = dis.readInt();\\n\\t\\t\\t\\tif(flag == 1){\\n\\t\\t\\t\\t\\t/** 先将当前登录的客户端socket存到在线人数的socket集合中   */\\n\\t\\t\\t\\t\\tString name = dis.readUTF() ;\\n\\t\\t\\t\\t\\tSystem.out.println(name+\\\"---->\\\"+socket.getRemoteSocketAddress());\\n\\t\\t\\t\\t\\tServerChat.onLineSockets.put(socket, name);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\twriteMsg(flag,dis);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tSystem.out.println(\\\"--有人下线了--\\\");\\n\\t\\t\\t// 从在线人数中将当前socket移出去  \\n\\t\\t\\tServerChat.onLineSockets.remove(socket);\\n\\t\\t\\ttry {\\n\\t\\t\\t\\t// 从新更新在线人数并发给所有客户端 \\n\\t\\t\\t\\twriteMsg(1,dis);\\n\\t\\t\\t} catch (Exception e1) {\\n\\t\\t\\t\\te1.printStackTrace();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n\\n\\tprivate void writeMsg(int flag, DataInputStream dis) throws Exception {\\n//\\t\\tDataOutputStream dos = new DataOutputStream(socket.getOutputStream()); \\n\\t\\t// 定义一个变量存放最终的消息形式 \\n\\t\\tString msg = null ;\\n\\t\\tif(flag == 1){\\n\\t\\t\\t/** 读取所有在线人数发给所有客户端去更新自己的在线人数列表 */\\n\\t\\t\\t/** onlineNames = [徐磊,zhangsan,李刚]*/\\n\\t\\t\\tStringBuilder rs = new StringBuilder();\\n\\t\\t\\tCollection<String> onlineNames = ServerChat.onLineSockets.values();\\n\\t\\t\\t// 判断是否存在在线人数 \\n\\t\\t\\tif(onlineNames != null && onlineNames.size() > 0){\\n\\t\\t\\t\\tfor(String name : onlineNames){\\n\\t\\t\\t\\t\\trs.append(name+ Constants.SPILIT);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// 徐磊003197♣♣㏘♣④④♣zhangsan003197♣♣㏘♣④④♣李刚003197♣♣㏘♣④④♣\\n\\t\\t\\t\\t// 去掉最后的一个分隔符 \\n\\t\\t\\t\\tmsg = rs.substring(0, rs.lastIndexOf(Constants.SPILIT));\\n\\n\\t\\t\\t\\t/** 将消息发送给所有的客户端 */\\n\\t\\t\\t\\tsendMsgToAll(flag,msg);\\n\\t\\t\\t}\\n\\t\\t}else if(flag == 2 || flag == 3){\\n\\t\\t\\t// 读到消息  群发的 或者 @消息\\n\\t\\t\\tString newMsg = dis.readUTF() ; // 消息\\n\\t\\t\\t// 得到发件人 \\n\\t\\t\\tString sendName = ServerChat.onLineSockets.get(socket);\\n\\n\\t\\t\\t// 李刚 时间\\n\\t\\t\\t//    内容--\\n\\t\\t\\tStringBuilder msgFinal = new StringBuilder();\\n\\t\\t\\t// 时间  \\n\\t\\t\\tSimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss EEE\\\");\\n\\t\\t\\tif(flag == 2){\\n\\t\\t\\t\\tmsgFinal.append(sendName).append(\\\"  \\\").append(sdf.format(System.currentTimeMillis())).append(\\\"\\\\r\\\\n\\\");\\n\\t\\t\\t\\tmsgFinal.append(\\\"    \\\").append(newMsg).append(\\\"\\\\r\\\\n\\\");\\n\\t\\t\\t\\tsendMsgToAll(flag,msgFinal.toString());\\n\\t\\t\\t}else if(flag == 3){\\n\\t\\t\\t\\tmsgFinal.append(sendName).append(\\\"  \\\").append(sdf.format(System.currentTimeMillis())).append(\\\"对您私发\\\\r\\\\n\\\");\\n\\t\\t\\t\\tmsgFinal.append(\\\"    \\\").append(newMsg).append(\\\"\\\\r\\\\n\\\");\\n\\t\\t\\t\\t// 私发 \\n\\t\\t\\t\\t// 得到给谁私发 \\n\\t\\t\\t\\tString destName = dis.readUTF();\\n\\t\\t\\t\\tsendMsgToOne(destName,msgFinal.toString());\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t/**\\n\\t * @param destName 对谁私发 \\n\\t * @param msg 发的消息内容 \\n\\t * @throws Exception\\n\\t */\\n\\tprivate void sendMsgToOne(String destName, String msg) throws Exception {\\n\\t\\t// 拿到所有的在线socket管道 给这些管道写出消息\\n\\t\\tSet<Socket> allOnLineSockets = ServerChat.onLineSockets.keySet();\\n\\t\\tfor(Socket sk :  allOnLineSockets){\\n\\t\\t\\t// 得到当前需要私发的socket \\n\\t\\t\\t// 只对这个名字对应的socket私发消息\\n\\t\\t\\tif(ServerChat.onLineSockets.get(sk).trim().equals(destName)){\\n\\t\\t\\t\\tDataOutputStream dos = new DataOutputStream(sk.getOutputStream());\\n\\t\\t\\t\\tdos.writeInt(2); // 消息类型\\n\\t\\t\\t\\tdos.writeUTF(msg);\\n\\t\\t\\t\\tdos.flush();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n\\n\\tprivate void sendMsgToAll(int flag, String msg) throws Exception {\\n\\t\\t// 拿到所有的在线socket管道 给这些管道写出消息\\n\\t\\tSet<Socket> allOnLineSockets = ServerChat.onLineSockets.keySet();\\n\\t\\tfor(Socket sk :  allOnLineSockets){\\n\\t\\t\\tDataOutputStream dos = new DataOutputStream(sk.getOutputStream());\\n\\t\\t\\tdos.writeInt(flag); // 消息类型\\n\\t\\t\\tdos.writeUTF(msg);\\n\\t\\t\\tdos.flush();\\n\\t\\t}\\n\\t}\\n}\\n```\\n\\n`Constants`\\n\\n```java\\npublic class Constants {\\n\\t/** 常量 */\\n\\tpublic static final int PORT = 7778 ;\\n\\t\\n\\t/** 协议分隔符 */\\n\\tpublic static final String SPILIT = \\\"003197♣♣㏘♣④④♣\\\";\\n}\\n```\\n\\n### 文件上传\\n\\n实现客户端上传图片给服务端保存起来\\n\\n服务端实现：\\n\\n* 接受多个客户端传输来的图片数据存储到服务器路径\\n* 响应一个成功的消息给当前客户端\\n\\n`ClientDemo`\\n\\n```java\\npublic class ClientDemo {\\n    // 本地图片路径、\\n    public static void main(String[] args) throws Exception {\\n        // 1.请求于服务端的Socket管道连接。\\n        Socket socket = new Socket(Constants.SERVER_IP , Constants.SERVER_PORT);\\n        // 2.从socket管道中得到一个字节输出流包装成缓冲字节输出流\\n        BufferedOutputStream bos = new BufferedOutputStream(socket.getOutputStream());\\n        // 3.提取本机的图片上传给服务端\\n        // 4.得到一个缓冲字节输入流与本地图片接通\\n        BufferedInputStream bis =\\n                new BufferedInputStream(new FileInputStream(Constants.SRC_IMAGE));\\n        // 5.定义一个字节数组\\n        byte[] buffer = new byte[1024];\\n        int len ;\\n        while((len = bis.read(buffer)) != -1) {\\n            bos.write(buffer, 0 ,len);\\n        }\\n        bos.flush(); // 刷新图片数据到服务端！！\\n        socket.shutdownOutput(); // 告诉服务端我的数据已经发送完毕，请不要在等我了！\\n        bis.close(); // 可以关闭\\n\\n        // 6.等待着服务端的响应数据！！\\n        BufferedReader  br = new BufferedReader(new InputStreamReader(socket.getInputStream()));\\n        System.out.println(\\\"收到服务端响应：\\\"+br.readLine());\\n    }\\n}\\n```\\n\\n`Constants`\\n\\n```java\\n/**\\n * 客户端常量包\\n */\\npublic class Constants {\\n    public static final String SRC_IMAGE = \\\"D:\\\\\\\\itcast\\\\\\\\图片资源\\\\\\\\beautiful.jpg\\\";\\n    public static final String SERVER_DIR = \\\"D:\\\\\\\\itcast\\\\\\\\约吧图片服务器\\\\\\\\\\\";\\n    public static final String SERVER_IP = \\\"127.0.0.1\\\";\\n    public static final int SERVER_PORT = 8888;\\n\\n}\\n```\\n\\n`ServerDemo`\\n\\n```java\\n/**\\n      功能点：\\n      1.接收多个客户端传输来的图片数据存储到服务器路径：\\n      2.响应一个成功的消息给当前客户端。\\n */\\npublic class ServerDemo {\\n    public static void main(String[] args) throws Exception {\\n        System.out.println(\\\"----服务端启动----\\\");\\n        // 1.注册端口: public ServerSocket(int port)\\n        ServerSocket serverSocket = new ServerSocket(Constants.SERVER_PORT);\\n        // 2.定义一个循环不断的接收客户端的连接请求\\n        while(true){\\n            // 3.开始等待接收客户端的Socket管道连接。\\n            Socket socket = serverSocket.accept();\\n            // 4.每接收到一个客户端必须为这个客户端管道分配一个独立的线程来处理与之通信。\\n            new ServerReaderThread(socket).start();\\n        }\\n    }\\n}\\n\\nclass ServerReaderThread extends Thread{\\n    private Socket socket ;\\n    public ServerReaderThread(Socket socket){\\n        this.socket = socket;\\n    }\\n\\n    @Override\\n    public void run() {\\n        try{\\n            // 1.从socket通信管道中得到一个字节输入流读取客户端发来的图片数据！\\n            InputStream is = socket.getInputStream();\\n            // 2.包装成高级的缓冲字节输入流\\n            BufferedInputStream bis = new BufferedInputStream(is);\\n            // 3.定义一个缓冲字节输出流通向目标路径（服务端路径）\\n            BufferedOutputStream bos =\\n                    new BufferedOutputStream(new FileOutputStream(Constants.SERVER_DIR+ UUID.randomUUID().toString()+\\\".jpg\\\"));\\n            byte[] buffer = new byte[1024];\\n            int len ;\\n            while((len = bis.read(buffer)) != -1) {\\n                bos.write(buffer, 0 ,len);\\n            }\\n            bos.close();\\n            System.out.println(\\\"服务端接收完毕了！\\\");\\n\\n            // 4.响应数据给客户端\\n            PrintStream ps = new PrintStream(socket.getOutputStream());\\n            ps.println(\\\"您好，已成功接收您上传的图片！\\\");\\n            ps.flush();\\n\\n            Thread.sleep(100000); // 等消失发送完毕被客户端接收后死亡！\\n        }catch (Exception e){\\n            System.out.println(socket.getRemoteSocketAddress()+\\\"下线了~~~~~~\\\");\\n        }\\n    }\\n}\\n```\\n\\n## 第四章 BS架构 \\n\\n之前客户端和服务端都需要自己开发。也就是CS架构。接下来模拟一下BS架构。\\n\\n客户端：浏览器。（无需开发）\\n\\n服务端：自己开发。\\n\\n需求：在浏览器中请求本程序，响应一个网页文字给浏览器显示。\\n\\n```java\\nclass ServerReaderThread extends Thread{\\n    private Socket socket;\\n    public ServerReaderThread(Socket socket) {\\n        this.socket = socket;\\n    }\\n    @Override\\n    public void run() {\\n        try {\\n            // 响应消息数据给浏览器显示。\\n            // 浏览器是基于HTTP协议通信！响应格式必须满足HTTP协议数据格式的要求，浏览器\\n            // 才能够识别，否则响应消息浏览器根本不认识。\\n            PrintStream ps = new PrintStream(socket.getOutputStream());\\n            ps.println(\\\"HTTP/1.1 200 OK\\\"); // 响应数据的响应头数据！\\n            ps.println(\\\"Content-Type:text/html;charset=UTF-8\\\");//响应数据的类型。网页或者文本内容！\\n            ps.println(); // 必须换一行\\n            // 以下开始响应真实的数据！！\\n            ps.println(\\\"<span style=\'color:green;font-size:100px;\'>Hello, world<span>\\\");\\n\\n            Thread.sleep(4000);\\n            ps.close();\\n\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}\\n```\\n\\n## 第五章 基本通信模型\\n\\n1. BIO通信模式：同步阻塞式通信。（Socket网络编程也就是上面的通信架构）\\n\\n   同步：当前线程要自己进行数据的读写操作。（自己去银行取钱）\\n\\n   异步: 当前线程可以去做其他事情，（委托一小弟拿银行卡到银行取钱，然后给你）\\n\\n   阻塞： 在数据没有的情况下，还是要继续等待着读。（排队等待）\\n\\n   非阻塞：在数据没有的情况下，会去做其他事情，一旦有了数据再来获取。（柜台取款，取个号，然后坐在椅子上做其它事，等号广播会通知你办理）\\n\\n   > * BIO表示同步阻塞式IO，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，当然可以通过线程池机制改善。\\n   > * 同步阻塞式性能极差：大量线程，大量阻塞。\\n\\n2. 伪异步通信：引入了线程池。\\n\\n   不需要一个客户端一个线程，可以实现1个线程复用来处理很多个客户端！\\n\\n   这种架构，可以避免系统的死机，因为不会出现很多线程，线程可控。\\n\\n   但是高并发下性能还是很差：a.线程数量少，数据依然是阻塞的。数据没有来线程还是要等待！\\n\\n3. NIO表示同步非阻塞IO，服务器实现模式为请求对应一个线程，\\n\\n   即客户端发送的连接请求都会注册到多路复用器上，\\n\\n   多路复用器轮询到连接有I/O请求时才启动一个线程进行处理。\\n\\n   > 1个主线程专门负责接收客户端：\\n   >\\n   > 1个线程[c1 ,s2 ,c3,c4, ,s2 ,c3,c4,,c3,c4, ,s2 ,c3,c4]轮询所有的客户端，发来了数据才会开启线程处理\\n   >\\n   > 这种架构性能还可以！！\\n   >\\n   > **同步**：线程还是要不断的接收客户端连接，以及处理数据。\\n   >\\n   > **非阻塞**：如果一个管道没有数据，不需要等待，可以轮询下一个管道是否有数据！\\n\\n4. AIO表示异步非阻塞IO，服务器实现模式为一个有效请求一个线程，\\n\\n   客户端的I/O请求都是由操作系统先完成IO操作后再通知服务器应用来启动线程进行处理。\\n\\n   异步：服务端线程接收到了客户端管道以后就交给底层处理它的io通信。\\n\\n   自己可以做其他事情。\\n\\n   非阻塞：底层也是客户端有数据才会处理，有了数据以后处理好通知服务器应用来启动线程进行处理。\\n\\n各种模型应用场景：\\n\\nBIO适用于连接数目比较小且固定的架构，该方式对服务器资源要求比较高，JDK 1.4以前的唯一选择。\\n\\nNIO适用于连接数目多且连接比较短（轻操作）的架构，如聊天服务器，编程复杂，\\n\\nJDK 1.4开始支持。\\n\\nAIO适用于连接数目多且连接比较长（重操作）的架构，如相册服务器，充分调用操作系统参与并发操作，编程复杂，JDK 1.7开始支持。\\n\\n# day12-JUnit单元测试、反射、注解、动态代理\\n\\n## 第一章 单元测试\\n\\n单元测试是指程序员写的测试代码给自己的类中的方法进行预期正确性的验证。\\n\\n单元测试一旦写好了这些测试代码，就可以一直使用，可以实现一定程度上的自动化测试。\\n\\n单元测试一般要使用框架进行。\\n什么是框架？\\n框架是前人或者一些牛逼的技术公司在实战或者研发中设计的一些优良的设计方案或者成型的 代码功能，作为一个完整的技术体系发行出来称为框架。\\n\\n框架可以让程序员快速拥有一个强大的解决方案，可以快速的开发功能，提高效率并且直接就有了很好的性能。\\n\\n单元测试的经典框架：`Junit`\\n\\n`Junit`是什么\\n\\n*  `Junit`是Java语言编写的第三方单元测试框架\\n*  `Junit`框架的方案可以帮助我们方便且快速的测试我们的代码的正确性。\\n\\n单元测试概念\\n* 单元：在Java中，一个类就是一个单元\\n* 单元测试：程序猿用`Junit`编写的一小段代码，用来对某个类中的某个方法进行功能测试或业务逻辑测试。\\n\\n`Junit`单元测试框架的作用\\n\\n* 用来对类中的方法功能进行有目的的测试，以保证程序的正确性和稳定性。\\n* 能够独立的测试某个方法或者所有方法的预期正确性。\\n\\nJunit框架的使用步骤:\\n\\n1. 下载这个框架。（别人设计好的技术体系）\\n\\n   框架一般是jar包的形式，jar包里面都是class文件。（Java工程的最终形式）class文件就是我们调用的核心代码\\n\\n   现在不需要大家去官网下载，因为很多知名框架其实IDEA工具早就整合好了，程序员可以直接使用。\\n\\n   Junit已经被IDEA下载好了，可以直接导入到项目使用的。\\n\\n2. 直接用Junit测试代码即可\\n   * 先模拟业务代码\\n   * 写测试类\\n     * 测试类的命名规范：以Test开头，以业务类类名结尾，使用驼峰命名法\\n     * 业务名称是：UserService\\n     * 测试这个业务类的测试类：TestUserService/UserServiceTest\\n   * 在测试类中写测试方法\\n     * 测试方法的命名规则：以test开头，以业务方法名结尾\\n     * 比如被测试业务方法名为：login，那么测试方法名就应该叫：testLogin\\n   * 测试方法注意事项\\n     * 必须是`public`修饰的，没有返回值，没有参数\\n     * 必须使注解`@Test`修饰\\n\\n3. 如何运行测试方法\\n\\n   * 选中方法名 --> 右键 --> Run \'测试方法名\'  运行选中的测试方法\\n   * 选中测试类名 --> 右键 --> Run \'测试类类名\'  运行测试类中所有测试方法\\n\\n   * 选中模块名 --> 右键 --> Run \'All Tests\'  运行模块中的所有测试类的所有测试方法\\n\\n\\n​    如何查看测试结果\\n   * 绿色：表示测试通过\\n   * 红色：表示测试失败，有问题\\n\\n​    `Junit`常用注解(Junit 4.xxxx版本)\\n* `@Test` 测试方法！\\n* `@Before`：用来修饰实例方法，该方法会在每一个测试方法执行之前执行一次。\\n* `@After`：用来修饰实例方法，该方法会在每一个测试方法执行之后执行一次。\\n* `@BeforeClass`：用来静态修饰方法，该方法会在所有测试方法之前只执行一次。\\n* `@AfterClass`：用来静态修饰方法，该方法会在所有测试方法之后只执行一次。\\n\\n开始执行的方法:初始化资源。\\n\\n执行完之后的方法:释放资源。\\n\\nJunit常用注解(Junit5.xxxx版本)\\n* `@Test` 测试方法！\\n* `@BeforeEach`：用来修饰实例方法，该方法会在每一个测试方法执行之前执行一次。\\n* `@AfterEach`：用来修饰实例方法，该方法会在每一个测试方法执行之后执行一次。\\n* `@BeforeAll`：用来静态修饰方法，该方法会在所有测试方法之前只执行一次。\\n* `@AfterAll`：用来静态修饰方法，该方法会在所有测试方法之后只执行一次。\\n\\n```java\\npublic class UserServiceTest {\\n    // @Before：用来修饰实例方法，该方法会在每一个测试方法执行之前执行一次。\\n    @Before\\n    public void before(){\\n        System.out.println(\\\"===before===\\\");\\n    }\\n    // @After：用来修饰实例方法，该方法会在每一个测试方法执行之后执行一次。\\n    @After\\n    public void after(){\\n        System.out.println(\\\"===after===\\\");\\n    }\\n\\n    // @BeforeClass：用来静态修饰方法，该方法会在所有测试方法之前只执行一次。\\n    @BeforeClass\\n    public static void beforeClass(){\\n        System.out.println(\\\"===beforeClass===\\\");\\n    }\\n\\n    // @AfterClass：用来静态修饰方法，该方法会在所有测试方法之后只执行一次。\\n    @AfterClass\\n    public static void afterClass(){\\n        System.out.println(\\\"===afterClass===\\\");\\n    }\\n\\n\\n    /**\\n     * 测试方法的要求：\\n     *  1.必须public修饰\\n     *  2.没有返回值没有参数\\n     *  3. 必须使注解@Test修饰\\n     */\\n    @Test\\n    public void testLogin(){\\n        UserService userService = new UserService();\\n        String rs = userService.login(\\\"admin\\\",\\\"123456\\\");\\n        // 断言预期结果的正确性。\\n        /**\\n         * 参数一：测试失败的提示信息。\\n         * 参数二：期望值。\\n         * 参数三：实际值\\n         */\\n        // public static void assertEquals(String message, Object expected, Object actual)\\n        Assert.assertEquals(\\\"登录业务功能方法有错误，请检查！\\\",\\\"success\\\",rs);\\n    }\\n\\n    @Test\\n    public void testChu(){\\n        UserService userService = new UserService();\\n        userService.chu(10 , 2);\\n    }\\n}\\n```\\n\\n## 第二章 反射\\n\\n### 反射的概述\\n\\n反射，注解，代理，泛型是Java的高级技术，是以后框架的底层原理必须使用到的技术。\\n\\n反射：是Java独有的技术。是Java技术显著的特点。\\n\\n反射是指对于任何一个类，在\\\"运行的时候\\\"都可以直接得到这个类全部成分。\\n\\n- 在运行时,可以直接得到这个类的构造器对象。（Constructor）\\n- 在运行时,可以直接得到这个类的成员变量对象。（Field）\\n- 在运行时,可以直接得到这个类的成员方法对象。（Method）\\n\\n反射的核心思想和关键就是得到：编译以后的class文件对象。\\n\\n反射提供了一个Class类型，就是可以得到编译以后的class类对象。\\n\\n```java\\nHelloWorld.java -> javac -> HelloWorld.class\\n\\nClass c = HelloWorld.class;\\n```\\n\\n> 反射是工作在运行时的技术，因为只有运行之后才会有class类对象\\n>\\n> 反射的核心思想和关键就是得到：编译以后的class文件对象\\n>\\n> 反射是在运行时获取类的字节码文件对象：然后可以解析类中的全部成分\\n\\n### 获取Class类对象\\n\\n反射是通过先得到编译以后的Class类对象：字节码文件。然后才可以得到类中的全部成分，进行一些功能设计。\\n\\n反射为一个类的全部成分都设计了一个类型来代表这个对象：\\n\\n- `Class `: 字节码文件的类型\\n- `Constructor `: 构造器的类型\\n- `Field` : 成员变量的类型\\n- `Method `: 方法的类型\\n\\n反射技术的第一步永远是先得到Class类对象:有三种方式获取\\n\\n1. 类名.class\\n\\n2. 通过类的对象.getClass()方法\\n\\n3. Class.forName(\\\"类的全限名\\\")\\n\\n   ```java\\n   public static Class<?> forName(String className)\\n   ```\\n\\nClass类下的方法：\\n\\n- String getSimpleName(); 获得类名字符串：类名\\n- String getName();  获得类全名：包名+类名\\n- T newInstance() ;  创建Class对象关联类的对象,其实底层也是调用无参数构造器，已经被淘汰。\\n\\nClass类对象的获取有三种方式：\\n\\n1. 类名.class。\\n2. 通过类的对象.getClass()方法。\\n3. Class.forName(\\\"类的全限名\\\")。\\n4. Class类的方法：\\n   * `String getSimpleName();` 获得类名字符串：类名\\n   * `String getName(); ` 获得类全名：包名+类名\\n\\n```java\\n// 反射的第一步永远是先得到类的Class文件对象: 字节码文件。\\n// 1.类名.class\\nClass c1 = Student.class;\\nSystem.out.println(c1);\\n\\n// 2.对象.getClass()\\nStudent swk = new Student();\\nClass c2 = swk.getClass();\\nSystem.out.println(c2);\\n\\n// 3.Class.forName(\\\"类的全限名\\\")\\n// 直接去加载该类的class文件。\\nClass c3 = Class.forName(\\\"com.itheima._03反射_获取Class类对象.Student\\\");\\nSystem.out.println(c3);\\n\\nSystem.out.println(c1.getSimpleName()); // 获取类名本身（简名）\\nSystem.out.println(c1.getName()); // 获取类的全限名\\n// Student s1 = (Student) c1.newInstance(); // 调用无参数构造器得到对象，被淘汰了！\\n```\\n\\n### 获取Constructor构造器对象\\n\\n反射中Class类型获取构造器提供了很多的API:\\n     1. `Constructor getConstructor(Class... parameterTypes)`\\n        根据参数匹配获取某个构造器，只能拿public修饰的构造器，几乎不用！\\n     2. `Constructor getDeclaredConstructor(Class... parameterTypes)`\\n  根据参数匹配获取某个构造器，只要申明就可以定位，不关心权限修饰符，建议使用！\\n     3. `Constructor[] getConstructors()`\\n  获取所有的构造器，只能拿public修饰的构造器。几乎不用！！太弱了！\\n     4. `Constructor[] getDeclaredConstructors()`\\n  获取所有声明的构造器，只要你写我就能拿到，无所谓权限。建议使用！！\\n\\n\\n获取类的全部构造器对象：` Constructor[] getDeclaredConstructors()`\\n\\n获取所有申明的构造器，只要你写我就能拿到，无所谓权限。建议使用！！\\n\\n获取类的某个构造器对象：`Constructor getDeclaredConstructor(Class... parameterTypes)`\\n\\n根据参数匹配获取某个构造器，只要申明就可以定位，不关心权限修饰符，建议使用！\\n\\n对于类`Student`来说\\n\\n```java\\npublic class Student {\\n    private String name ;\\n    private int age ;\\n\\n    private Student(){\\n        System.out.println(\\\"无参数构造器被执行~~~~\\\");\\n    }\\n\\n    public Student(String name, int age) {\\n        System.out.println(\\\"有参数构造器被执行~~~~\\\");\\n        this.name = name;\\n        this.age = age;\\n    }\\n    //...\\n}\\n```\\n\\n获取该类运行时的构造器可以用一下代码实现\\n\\n```java\\npublic class TestStudent {\\n    // 1. getConstructors:\\n    // 获取全部的构造器：只能获取public修饰的构造器。\\n    // Constructor[] getConstructors()\\n    @Test\\n    public void getConstructors(){\\n        // a.反射第一步先得到Class类对象\\n        Class c = Student.class ;\\n        // b.getConstructors()：定位全部构造器，只能拿public修饰的！\\n        Constructor[] cons = c.getConstructors();\\n        // c.遍历这些构造器\\n        for (Constructor con : cons) {\\n            System.out.println(con.getName()+\\\"===>\\\"+con.getParameterCount());\\n        }\\n    }\\n\\n    // 2.getDeclaredConstructors():\\n    // 获取全部的构造器：只要你敢写，这里就能拿到，无所谓权限是否可及。\\n    @Test\\n    public void getDeclaredConstructors(){\\n        // a.反射第一步先得到Class类对象\\n        Class c = Student.class ;\\n        // b.getDeclaredConstructors()：定位全部构造器，只要申明了就可以拿到\\n        Constructor[] cons = c.getDeclaredConstructors();\\n        // c.遍历这些构造器\\n        for (Constructor con : cons) {\\n            System.out.println(con.getName()+\\\"===>\\\"+con.getParameterCount());\\n        }\\n    }\\n\\n    // 3.getConstructor(Class... parameterTypes)\\n    // 获取某个构造器：只能拿public修饰的某个构造器\\n    @Test\\n    public void getConstructor() throws Exception {\\n        // a.反射第一步先得到Class类对象\\n        Class c = Student.class ;\\n        // b.getConstructor()：定位某个构造器，根据参数匹配，只能拿public修饰的！\\n        // Constructor con = c.getConstructor(); // 报错!\\n        Constructor con = c.getConstructor(String.class  ,int.class); // 有参数的！!\\n        // c.构造器名称和参数\\n        System.out.println(con.getName()+\\\"===>\\\"+con.getParameterCount());\\n    }\\n\\n    // 4.getDeclaredConstructor\\n    // 获取某个构造器：只要你敢写，这里就能拿到，无所谓权限是否可及。\\n    @Test\\n    public void getDeclaredConstructor() throws Exception {\\n        // a.反射第一步先得到Class类对象\\n        Class c = Student.class ;\\n        // b.getDeclaredConstructor()：定位某个构造器，根据参数匹配，只要申明了就可以获取\\n        Constructor con = c.getDeclaredConstructor(); // 可以拿到！定位无参数构造器！\\n        //Constructor con = c.getDeclaredConstructor(String.class  , int.class); // 有参数的！!\\n        // c.构造器名称和参数\\n        System.out.println(con.getName()+\\\"===>\\\"+con.getParameterCount());\\n    }\\n}\\n```\\n\\n获取到构造器之后，可以通过该构造器初始化对象\\n\\n反射获取`Class`中构造器对象`Constructor`的作用，就是用来初始化并得到类的一个对象返回\\n\\n`Constructor`的API\\n\\n* `T newInstance(Object... initargs)`\\n\\n  创建对象，注入构造器需要的数据\\n\\n* `void setAccessible(true)`\\n\\n  修改访问权限，`true`代表暴力攻破权限，`false`表示保留不可访问权限\\n\\n```java\\npublic class TestStudent02 {\\n    // 1.调用无参数构造器得到一个类的对象返回。\\n    @Test\\n    public void createObj01() throws Exception {\\n        // a.反射第一步是先得到Class类对象\\n        Class c = Student.class ;\\n        // b.定位无参数构造器对象\\n        Constructor constructor = c.getDeclaredConstructor();\\n        // c.暴力打开私有构造器的访问权限\\n        constructor.setAccessible(true);\\n        // d.通过无参数构造器初始化对象返回\\n        Student swk = (Student) constructor.newInstance(); // 最终还是调用无参数构造器的！\\n        System.out.println(swk);\\n    }\\n\\n    // 2.调用有参数构造器得到一个类的对象返回。\\n    @Test\\n    public void createObj02() throws Exception {\\n        // a.反射第一步是先得到Class类对象\\n        Class c = Student.class ;\\n        // b.定位有参数构造器对象\\n        Constructor constructor = c.getDeclaredConstructor(String.class , int.class);\\n        // c.通过无参数构造器初始化对象返回\\n        Student swk = (Student) constructor.newInstance(\\\"孙悟空\\\",10000); // 最终还是调用有参数构造器的！\\n        System.out.println(swk);\\n    }\\n}\\n```\\n\\n### 获取Field成员变量对象\\n\\n* `Field getField(String name);`\\n  根据成员变量名获得对应Field对象，只能获得public修饰\\n* `Field getDeclaredField(String name);`\\n  根据成员变量名获得对应Field对象，只要申明了就可以得到\\n* `Field[] getFields();`\\n  获得所有的成员变量对应的Field对象，只能获得public的\\n* `Field[] getDeclaredFields();`\\n  获得所有的成员变量对应的Field对象，只要申明了就可以得到\\n\\n对于`Dog`类\\n\\n```java\\npublic class Dog {\\n    private String name;\\n    private int age ;\\n    private String color ;\\n    public static String school;\\n    public static final String SCHOOL_1 = \\\"宠物学校\\\";\\n\\n    public Dog() {\\n    }\\n    // ...\\n}\\n```\\n\\n获取其成员变量\\n\\n```java\\npublic class FieldDemo {\\n    /**\\n     * 1.获取全部的成员变量。\\n     */\\n    @Test\\n    public void getDeclaredFields(){\\n        // a.先获取class类对象\\n        Class c = Dog.class;\\n        // b.获取全部申明的成员变量对象\\n        Field[] fields = c.getDeclaredFields();\\n        for (Field field : fields) {\\n            System.out.println(field.getName()+\\\"===>\\\"+field.getType());\\n        }\\n    }\\n\\n    /**\\n        2.获取某个成员变量对象\\n     */\\n    @Test\\n    public void getDeclaredField() throws Exception {\\n        // a.先获取class类对象\\n        Class c = Dog.class;\\n        // b.定位某个成员变量对象 :根据名称定位！！\\n        Field ageF = c.getDeclaredField(\\\"age\\\");\\n        System.out.println(ageF.getName()+\\\"--->\\\"+ageF.getType());\\n    }\\n\\n}\\n```\\n\\n给成员变量取值和复制\\n\\n- `void set(Object obj, Object value)`：给对象注入某个成员变量数据\\n- `Object get(Object obj)` ：获取对象的成员变量的值。\\n- `void setAccessible(true)` ：暴力反射，设置为可以直接访问私有类型的属性。\\n- `Class getType()`：获取属性的类型，返回Class对象。\\n- `String getName()`：获取属性的名称。\\n\\n```java\\npublic class FieldDemo02 {\\n    @Test\\n    public void setField() throws Exception {\\n        // a.反射的第一步获取Class类对象\\n        Class c = Dog.class ;\\n        // b.定位name成员变量\\n        Field nameF = c.getDeclaredField(\\\"name\\\");\\n        // c.为这个成员变量赋值！\\n        Dog taiDi = new Dog();\\n        nameF.setAccessible(true); // 暴力反射！\\n        /**\\n         * 参数一：被赋值的对象。\\n         * 参数二：该成员变量的值。\\n         */\\n        nameF.set(taiDi , \\\"勇敢的泰迪\\\");\\n        System.out.println(taiDi);\\n\\n        // d.获取成员变量的值\\n        String value = nameF.get(taiDi)+\\\"\\\";\\n        System.out.println(value);\\n    }\\n}\\n```\\n\\n### 获取Method方法\\n\\n反射获取类的Method方法对象：\\n\\n* `Method getMethod(String name,Class...args)`：根据方法名和参数类型获得对应的方法对象，只能获得public的\\n* `Method getDeclaredMethod(String name,Class...args)`：根据方法名和参数类型获得对应的方法对象，包括private的\\n* `Method[] getMethods()`：获得类中的所有成员方法对象，返回数组，只能获得public修饰的且包含父类的\\n* `Method[] getDeclaredMethods()`：获得类中的所有成员方法对象，返回数组,只获得本类申明的方法\\n\\nMethod的方法执行：\\n`Object invoke(Object obj, Object... args)`\\n\\n* 参数一：触发的是哪个对象的方法执行\\n* 参数二： args：调用方法时传递的实际参数\\n\\n`Dog`类\\n\\n```java\\npublic class Dog {\\n\\n    private String name ;\\n\\n    public Dog(){\\n    }\\n\\n    public Dog(String name) {\\n        this.name = name;\\n    }\\n\\n    public void run(){\\n        System.out.println(\\\"狗跑的贼快~~\\\");\\n    }\\n\\n    private void eat(){\\n        System.out.println(\\\"狗吃骨头\\\");\\n    }\\n\\n    private void eat(String name){\\n        System.out.println(\\\"狗吃\\\"+name);\\n    }\\n\\n    public static void inAddr(){\\n        System.out.println(\\\"在吉山区有一只单身狗！\\\");\\n    }\\n\\n    public String getName() {\\n        return name;\\n    }\\n\\n    public void setName(String name) {\\n        this.name = name;\\n    }\\n}\\n```\\n\\n反射获取方法\\n\\n```java\\npublic class MethodDemo01 {\\n    /**\\n     * 1.获得类中的所有成员方法对象\\n     */\\n    @Test\\n    public void getDeclaredMethods(){\\n        // a.先获取class类对象\\n        Class c = Dog.class ;\\n        // b.获取全部申明的方法!\\n        Method[] methods = c.getDeclaredMethods();\\n        // c.遍历这些方法\\n        for (Method method : methods) {\\n            System.out.println(method.getName()+\\\"====>\\\"\\n                    + method.getParameterCount()+\\\"===>\\\" + method.getReturnType());\\n        }\\n\\n    }\\n    /**\\n     * 2. 获取某个方法对象\\n     */\\n    @Test\\n    public void getDeclardMethod() throws Exception {\\n        // a.先获取class类对象\\n        Class c = Dog.class;\\n        // b.定位它的某个方法\\n        Method run = c.getDeclaredMethod(\\\"run\\\");\\n        // c.触发方法执行!\\n        Dog jinMao = new Dog();\\n        Object rs = run.invoke(jinMao); // 触发jinMao对象的run()方法执行！\\n        System.out.println(rs);// 如果方法没有返回值，结果是null\\n\\n        /**\\n         * 参数一：方法名称\\n         * 参数二：方法的参数个数和类型(可变参数！)\\n         */\\n        Method eat = c.getDeclaredMethod(\\\"eat\\\",String.class);\\n        eat.setAccessible(true); // 暴力反射！\\n        /**\\n         * 参数一：被触发方法所在的对象\\n         * 参数二：方法需要的入参值\\n         */\\n        Object rs1 = eat.invoke(jinMao,\\\"肉\\\");\\n        System.out.println(rs1);// 如果方法没有返回值，结果是null\\n    }\\n}\\n```\\n\\n### 暴力攻击集合泛型\\n\\n* 反射可以破坏面向对象的封装性（暴力反射）\\n* 同时可以破坏泛型的约束性\\n\\n```java\\n// 泛型只能工作在编译阶段，运行阶段泛型就消失了，\\n// 反射工作在运行时阶段。\\nList<Double> scores = new ArrayList<>();\\nscores.add(99.3);\\nscores.add(199.3);\\nscores.add(89.5);\\n\\n// 拓展：通过反射暴力的注入一个其他类型的数据进去。\\n// a.先得到集合对象的Class文件对象\\nClass c = scores.getClass();\\n// b.从ArrayList的Class对象中定位add方法\\nMethod add = c.getDeclaredMethod(\\\"add\\\", Object.class);\\n// c.触发scores集合对象中的add执行（运行阶段，泛型不能约束了）\\nadd.invoke(scores,\\\"波仔\\\");\\n\\nSystem.out.println(scores);\\n```\\n\\n### 反射作用\\n\\n* 可以在运行时得到一个类的全部成分然后操作。\\n* 可以破坏封装性。\\n* 也可以破坏泛型的约束性。\\n\\n更重要的用途是适合：做Java高级框架，基本上主流框架都会基于反射设计一些通用技术功能。\\n\\nMybatis框架：\\n\\n你给任何一个对象数据我都可以直接帮你解析字段并且把对应数据保存起来。\\n\\nStudent (注册，把信息字段都存储起来)\\n\\nTeacher (注册，把信息字段都存储起来)\\n\\nManager (注册，把信息字段都存储起来)\\n\\n我现在用反射技术开发一个框架实现：\\n\\n任何对象只要给我，我就可以把信息和字段都解析并存储起来。\\n\\n> 反射适合做通用技术框架的底层实现，在框架的底层源码中我们经常看到反射的影子!!\\n\\n## 第三章 注解\\n\\n### 注解的概念\\n\\n- 用在类上，方法上，成员变量，构造器，...上对成分进行编译约束，标记等操作的。\\n- 注解是JDK1.5的新特性。\\n- 注解相当一种标记，是类的组成部分，可以给类携带一些额外的信息。\\n- 注解是给编译器或JVM看的，编译器或JVM可以根据注解来完成对应的功能。\\n\\n```java\\npublic class AnnotationDemo01 {\\n\\n}\\n\\n@FunctionalInterface\\ninterface A{\\n    void test();\\n}\\n```\\n\\n### 自定义注解\\n\\n自定义注解的格式：\\n\\n```java\\n修饰符 @interface 注解名{\\n// 注解属性\\n}\\n```\\n\\n> * 自定义注解用@interface关键字。\\n> * 使用注解的格式：@注解名称。\\n> * 注解默认可以标记很多地方。\\n\\n```java\\n@Book\\n@MyTest\\npublic class MyBook {\\n    @Book\\n    @MyTest\\n    private MyBook(){\\n\\n    }\\n    @Book\\n    @MyTest\\n    public static void main(@MyTest String[] args) {\\n        @MyTest\\n        @Book\\n        int age = 12;\\n    }\\n}\\n\\n@interface Book{\\n}\\n\\n@interface MyTest{\\n\\n}\\n```\\n\\n### 注解的属性\\n\\n属性的格式\\n   - 格式1：数据类型 属性名();\\n   - 格式2：数据类型 属性名() default 默认值;\\n\\n属性适用的数据类型:\\n\\n* 八种基本数据类型`(int, short, long, double, byte, char, boolean, float)`\\n* `String，Class`\\n* 以上类型的数组形式都支持\\n\\n> * 注解可以有属性，属性名必须带()\\n> * 在用注解的时候，属性必须赋值，除非这个属性有默认值\\n\\n```java\\n@MyBook(name=\\\"《精通Java基础》\\\",authors = {\\\"播仔\\\",\\\"Dlei\\\",\\\"播妞\\\"} , price = 99.9 )\\npublic class AnnotationDemo01 {\\n    @MyBook(name=\\\"《精通MySQL数据库入门到删库跑路》\\\",authors = {\\\"小白\\\",\\\"小黑\\\"} ,\\n            price = 19.9 , address = \\\"北京\\\")\\n    public static void main(String[] args) {\\n\\n    }\\n}\\n\\n// 自定义一个注解\\n@interface MyBook{\\n    String name();\\n    String[] authors(); // 数组\\n    double price();\\n    String address() default \\\"广州\\\";\\n}\\n```\\n\\n### 注解的特殊属性-value\\n\\n* 如果只有一个value属性的情况下，使用value属性的时候可以省略value名称不写\\n* 但是如果有多个属性,且多个属性没有默认值，那么value是不能省略的。\\n\\n```java\\n//@Book(value = \\\"/deleteBook.action\\\")\\n//@Book(\\\"/deleteBook.action\\\")\\n//@Book(value = \\\"/deleteBook.action\\\" , age = 12)\\n//@Book(\\\"/deleteBook.action\\\")\\n\\npublic class AnnotationDemo01{\\n}\\n\\n@interface Book{\\n    String value();\\n    int age() default 10;\\n}\\n```\\n\\n### 元注解\\n\\n- 元注解是sun公司提供的。\\n- 元注解是用在自定义注解上的注解。\\n- 元注解是用来注解自定义注解的。\\n\\n元注解有两个：\\n\\n* `@Target`:约束自定义注解只能在哪些地方使用，但是默认的注解可以在类，方法，构造器，成员变量，... 使用。\\n* `@Retention`：声明注解的生命周期\\n  申明注解的作用范围：编译时，运行时。\\n\\n`@Target`\\n\\n   * 作用：用来标识注解使用的位置，如果没有使用该注解标识，则自定义的注解可以使用在任意位置。\\n   * 可使用的值定义在ElementType枚举类中，常用值如下\\n        * TYPE，类，接口\\n        * FIELD, 成员变量\\n        * METHOD, 成员方法\\n        * PARAMETER, 方法参数\\n        * CONSTRUCTOR, 构造器\\n        * LOCAL_VARIABLE, 局部变量\\n\\n\\n`@Retention`\\n\\n* 作用：用来标识注解的生命周期(有效存活范围)\\n* 可使用的值定义在RetentionPolicy枚举类中，常用值如下\\n  * SOURCE：注解只作用在源码阶段，生成的字节码文件中不存在\\n  * CLASS：注解作用在源码阶段，字节码文件阶段，运行阶段不存在，默认值.\\n  * RUNTIME：注解作用在源码阶段，字节码文件阶段，运行阶段（开发常用）\\n\\n> * `@Target`约束自定义注解可以标记的范围。\\n> * `@Retention`用来约束自定义注解的存活范围。\\n\\n```java\\npublic class AnnotationDemo01{\\n    // @MyTest\\n    private String name;\\n\\n    @MyTest\\n    public static void main( String[] args) {\\n    }\\n\\n    @MyTest\\n    public void testRun(){\\n\\n    }\\n}\\n\\n//@Target({ElementType.METHOD , ElementType.FIELD}) // 申明只能注解方法和成员变量！\\n@Target(ElementType.METHOD ) // 申明只能注解方法\\n@Retention(RetentionPolicy.RUNTIME) // 申明注解从写代码一直到运行还在，永远存活！！\\n@interface MyTest{\\n}\\n```\\n\\n### 注解解析\\n\\n我们会使用注解注释一个类的成分，那么就设计到要解析出这些注解的数据。开发中经常要知道一个类的成分上面到底有哪些注解，注解有哪些属性数据，这都需要进行注解的解析。\\n\\n与注解解析相关的接口\\n        1. `Annotation`: 注解类型，该类是所有注解的父类。注解都是一个`Annotation`的对象\\n     1. `AnnotatedElement`:该接口定义了与注解解析相关的方法\\n          2所有的类成分Class, Method , Field , Constructor：都实现了`AnnotatedElement`接口，他们都拥有解析注解的能力：\\n       * `Annotation[] getDeclaredAnnotations()`\\n          获得当前对象上使用的所有注解，返回注解数组。\\n        * `T getDeclaredAnnotation(Class<T> annotationClass)`\\n          根据注解类型获得对应注解对象\\n        * `boolean isAnnotationPresent(Class<Annotation> annotationClass)`\\n          判断当前对象是否使用了指定的注解，如果使用了则返回true，否则false\\n\\n解析注解数据的原理\\n* 注解在哪个成分上，我们就先拿哪个成分对象。\\n* 比如注解作用成员方法，则要获得该成员方法对应的Method对象，再来拿上面的注解\\n* 比如注解作用在类上，则要该类的Class对象，再来拿上面的注解\\n* 比如注解作用在成员变量上，则要获得该成员变量对应的Field对象，再来拿上面的注解\\n\\n```java\\npublic class AnnotationDemo01 {\\n    @Test\\n    public void parseClass(){\\n        // 1.定位Class类对象\\n        Class c = BookStore.class ;\\n        // 2.判断这个类上是否使用了某个注解\\n        if(c.isAnnotationPresent(Book.class)){\\n            // 3.获取这个注解对象\\n            Book book = (Book) c.getDeclaredAnnotation(Book.class);\\n            System.out.println(book.value());\\n            System.out.println(book.price());\\n            System.out.println(Arrays.toString(book.authors()));\\n        }\\n    }\\n\\n    @Test\\n    public void parseMethod() throws Exception {\\n        // 1.定位Class类对象\\n        Class c = BookStore.class ;\\n        // 2.定位方法对象\\n        Method run = c.getDeclaredMethod(\\\"run\\\");\\n        // 3.判断这个方法上是否使用了某个注解\\n        if(run.isAnnotationPresent(Book.class)){\\n            // 3.获取这个注解对象\\n            Book book = (Book) run.getDeclaredAnnotation(Book.class);\\n            System.out.println(book.value());\\n            System.out.println(book.price());\\n            System.out.println(Arrays.toString(book.authors()));\\n        }\\n    }\\n}\\n\\n@Book(value = \\\"《Java基础到精通》\\\" , price = 99.5 , authors = {\\\"波仔\\\",\\\"波妞\\\"})\\nclass BookStore{\\n    @Book(value = \\\"《Mybatis持久层框架》\\\" , price = 199.5 , authors = {\\\"dlei\\\",\\\"播客\\\"})\\n    public void run(){\\n    }\\n}\\n\\n@Target({ElementType.TYPE,ElementType.METHOD}) // 类和成员方法上使用\\n@Retention(RetentionPolicy.RUNTIME) // 注解永久存活\\n@interface Book{\\n    String value();\\n    double price() default 100;\\n    String[] authors();\\n}\\n\\n```\\n\\n### 注解模拟Junit框架\\n\\n需求：定义若干个方法，只要加了MyTest注解，就可以被自动触发执行。\\n\\n分析：\\n\\n1. 定义一个自定义注解MyTest.\\n   只能注解方法。\\n   存活范围一直都在。\\n2. 定义若干个方法，只要有`@MyTest`注解的方法就能被触发执行！！\\n   没有这个注解的方法不能执行\\n\\n> * 注解和反射可以配合解决一些框架思想\\n> * 注解可以实现标记的成分做特殊处理!!\\n\\n```java\\npublic class TestDemo{\\n    @MyTest\\n    public void test01(){\\n        System.out.println(\\\"===test01===\\\");\\n    }\\n\\n    public void test02(){\\n        System.out.println(\\\"===test02===\\\");\\n    }\\n\\n    @MyTest\\n    public void test03(){\\n        System.out.println(\\\"===test03===\\\");\\n    }\\n\\n    @MyTest\\n    public void test04(){\\n        System.out.println(\\\"===test04===\\\");\\n    }\\n    public static void main(String[] args) throws Exception {\\n        TestDemo t = new TestDemo();\\n        // 模拟测试类的启动按钮，实现有注解标记的方法就要触发执行。\\n        // 1.得到类对象\\n        Class c = TestDemo.class;\\n        // 2.获取类中全部方法对象\\n        Method[] methods = c.getDeclaredMethods();\\n        // 3.遍历全部方法，有注解就触发执行\\n        for (Method method : methods) {\\n            if(method.isAnnotationPresent(MyTest.class)){\\n                // 触发此方法执行。\\n                method.invoke(t);\\n            }\\n        }\\n    }\\n}\\n\\n@Target(ElementType.METHOD) // 只能注解方法！\\n@Retention(RetentionPolicy.RUNTIME) // 一直都活着\\n@interface MyTest{\\n}\\n```\\n\\n## 第四章 动态代理\\n\\n* 代理就是被代理者没有能力或者不愿意去完成某件事情，需要找个人代替自己去完成这件事。\\n* 动态代理只能为实现接口的实现类对象做代理(也可以只为接口做代理对象)\\n\\n引入：\\n\\n* 在业务开发中经常存在很多重复的方法代码，他们前后的代码形式是一样的\\n* 只有中间部分代码有差别！！这种时候代码冗余读很高\\n* 有没有一种方法可以直接省略前后重复的代码就可以完成功能，这时候用动态代理。\\n\\n开发步骤：\\n\\n* 必须有接口。\\n* 实现类要实现接口，定义自己的业务功能代码。\\n* 为业务功能做代理对象（动态代理，难点）\\n\\n> * 动态代理非常的灵活，可以为任意的接口实现类对象做代理\\n> * 动态代理可以为被代理对象的所有接口的所有方法做代理，\\n> * 动态代理可以在不改变方法源码的情况下，实现对方法功能的增强，\\n> * 动态代理类不仅简化了编程工作，而且提高了软件系统的可扩展性，因为Java 反射机制可以生成任意类型的动态代理类。\\n> * 动态代理同时也提高了开发效率。\\n> * 缺点：只能针对接口或者接口的实现类对象做代理对象，普通类是不能做代理对象的。\\n\\n```java\\npublic class ProxyUtil {\\n    /**\\n     * 做一个被代理的业务对象返回!\\n     * @param obj\\n     * @return\\n     */\\n    public static <T> T getProxy(Object obj) {\\n        /**\\n         参数一：类加载器:负责加载到时候做好的业务代理对象！\\n         参数二：被代理业务对象的全部实现的接口，以便代理对象可以知道要为哪些方法做代理。\\n         参数三：代理真正的执行方法，也就是代理的处理逻辑！\\n         */\\n        return (T) Proxy.newProxyInstance(obj.getClass().getClassLoader(),\\n                obj.getClass().getInterfaces(), new InvocationHandler() {\\n                    @Override\\n                    public Object invoke(Object proxy, Method method, Object[] params) throws Throwable {\\n                        // proxy : 业务代理对象本身。用不到\\n                        // method: 代表当前正在被代理执行的方法！！\\n                        // params: 代表的是执行方法的参数，数组的形式!\\n                        long startTime = System.currentTimeMillis();\\n\\n                        // 真正触发真实的方法执行\\n                        Object rs = method.invoke(obj,params);\\n\\n                        long endTime = System.currentTimeMillis();\\n                        System.out.println(method.getName()+\\\"方法耗时：\\\"+(endTime - startTime)/1000.0+\\\"s\\\");\\n                        return rs; // 返回方法执行的结果！！\\n                    }\\n                });\\n    }\\n}\\n```\\n\\n# day13-XML和Dom4j、装饰模式、工厂模式、commons-io工具包\\n\\n## 第一章 Dom4j\\n\\n### Dom4j获取Document对象和根元素\\n\\ndom4j属于第三方技术，必须导入该框架！！\\n\\ndom4j安装步骤：\\n\\n- 去dom4j官网下载dom4j的框架：都是一些jar包。\\n- 把dom4j的核心jar包导入到当前项目中去。\\n- 在项目中创建一个文件夹：lib\\n- 将dom4j-2.1.1.jar文件复制到 lib 文件夹\\n- 在jar文件上点右键，选择 Add as Library -> 点击OK\\n- 在类中导包使用\\n\\nJava提供了Class下的一个方法：\\n\\n`public InputStream getResourceAsStream(String path)`\\n\\n 用于加载文件成为一个字节输入流返回！！\\n\\nDocument文档：\\n`Element getRootElement()`：获取根元素。\\n\\n> * 先导入dom4j框架\\n> * 创建一个dom4j的解析对象：SAXReader\\n> * 通过解析对象把xml文件解析成Document文档对象。\\n> * 从Document文档对象中获取我们想要的xml信息。\\n\\n```java\\n// 需求：解析books.xml文件成为一个Document文档树对象，得到根元素对象。\\n// 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\nSAXReader saxReader = new SAXReader();\\n\\n// 2.第一种方式（简单）：通过解析器对象去加载xml文件数据，成为一个Document文档树对象。\\n//Document document = saxReader.read(new File(\\\"Day13Demo/src/books.xml\\\"));\\n\\n// 3.第二种方式（代码多点）先把xml文件读成一个字节输入流\\n// 这里的“/”是直接去src类路径下寻找文件。\\nInputStream is = Dom4JDemo01.class.getResourceAsStream(\\\"/books.xml\\\");\\nDocument document = saxReader.read(is);\\n\\nSystem.out.println(document);\\n\\n// 4.从document文档树对象中提取根元素对象\\nElement root = document.getRootElement();\\nSystem.out.println(root.getName());\\n```\\n\\nElement元素的API:\\n\\n- `String getName()`:取元素的名称。\\n- `List<Element> elements()`:获取当前元素下的全部子元素（一级）\\n- `List<Element> elements(String name)`:获取当前元素下的指定名称的全部子元素（一级）\\n- `Element element(String name)`:获取当前元素下的指定名称的某个子元素，默认取第一个（一级）\\n\\n```java\\n// 需求：解析books.xml文件成为一个Document文档树对象，得到根元素对象。\\n// 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\nSAXReader saxReader = new SAXReader();\\n\\n// 2.第一种方式（简单）：通过解析器对象去加载xml文件数据，成为一个Document文档树对象。\\nDocument document = saxReader.read(new File(\\\"Day13Demo/src/books.xml\\\"));\\n\\n// 3.获取根元素对象\\nElement root = document.getRootElement();\\nSystem.out.println(root.getName());\\n\\n// 4.获取根元素下的全部子元素\\nList<Element> sonElements = root.elements();\\nfor (Element sonElement : sonElements) {\\n    System.out.println(sonElement.getName());\\n}\\n\\nSystem.out.println(\\\"-------------------\\\");\\n// 5.获取根源下的全部book子元素\\nList<Element> sonElements1 = root.elements(\\\"book\\\");\\nfor (Element sonElement : sonElements1) {\\n    System.out.println(sonElement.getName());\\n}\\nSystem.out.println(\\\"-------------------\\\");\\n// 6.获取根源下的指定的某个元素\\nElement son = root.element(\\\"user\\\");\\nSystem.out.println(son.getName());\\n\\n// 默认会提取第一个名称一样的子元素对象返回！\\nElement son1 = root.element(\\\"book\\\");\\nSystem.out.println(son1.attributeValue(\\\"id\\\"));\\n```\\n\\n### Dom4j获取属性信息\\n\\nElement元素的API:\\n\\n- `List<Attribute> attributes()`: 获取元素的全部属性对象。\\n- `Attribute attribute(String name)`:根据名称获取某个元素的属性对象。\\n- `String attributeValue(String var1)`:直接获取某个元素的某个属性名称的值。\\n\\nAttribute对象的API:\\n\\n- `String getName()`:  获取属性名称。\\n- `String getValue()`: 获取属性值。\\n\\n```java\\n// 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\nSAXReader saxReader = new SAXReader();\\n\\n// 2.第一种方式（简单）：通过解析器对象去加载xml文件数据，成为一个Document文档树对象。\\nDocument document = saxReader.read(new File(\\\"day13/src/books.xml\\\"));\\n\\n// 3.获取根元素对象。\\nElement root = document.getRootElement();\\n\\n// 4.获取book子元素\\nElement bookEle = root.element(\\\"book\\\");\\n\\n// 5.获取book元素的全部属性对象\\nList<Attribute> attributes = bookEle.attributes();\\nfor (Attribute attribute : attributes) {\\n    System.out.println(attribute.getName()+\\\"=>\\\"+attribute.getValue());\\n}\\n\\n// 6.获取Book元素的某个属性对象\\nAttribute descAttr = bookEle.attribute(\\\"desc\\\");\\nSystem.out.println(descAttr.getName()+\\\"--->\\\"+descAttr.getValue());\\n\\n// 7.可以直接获取元素的属性值\\nSystem.out.println(bookEle.attributeValue(\\\"id\\\"));\\nSystem.out.println(bookEle.attributeValue(\\\"desc\\\"));\\n```\\n\\n### Dom4j获取XML文本\\n\\n- `String elementText(String name)`: 可以直接获取当前元素的子元素的文本内容\\n- `String elementTextTrim(String name)`: 去前后空格,直接获取当前元素的子元素的文本内容\\n- `String getText()`:直接获取当前元素的文本内容。\\n- `String getTextTrim()`:去前后空格,直接获取当前元素的文本内容。\\n\\n```java\\n// 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\nSAXReader saxReader = new SAXReader();\\n\\n// 2.第一种方式（简单）：通过解析器对象去加载xml文件数据，成为一个Document文档树对象。\\nDocument document = saxReader.read(new File(\\\"Day13Demo/src/books.xml\\\"));\\n\\n// 3.获取根元素对象。\\nElement root = document.getRootElement();\\n\\n// 4.得到第一个子元素book\\nElement bookEle = root.element(\\\"book\\\");\\n\\n// 5.直接拿到当前book元素下的子元素文本值\\nSystem.out.println(bookEle.elementText(\\\"name\\\"));\\nSystem.out.println(bookEle.elementTextTrim(\\\"name\\\")); // 去前后空格\\nSystem.out.println(bookEle.elementText(\\\"author\\\"));\\nSystem.out.println(bookEle.elementTextTrim(\\\"author\\\")); // 去前后空格\\nSystem.out.println(bookEle.elementText(\\\"sale\\\"));\\nSystem.out.println(bookEle.elementTextTrim(\\\"sale\\\")); // 去前后空格\\n\\n// 6.先获取到子元素对象，再获取该文本值\\nElement bookNameEle = bookEle.element(\\\"name\\\");\\nSystem.out.println(bookNameEle.getText());\\nSystem.out.println(bookNameEle.getTextTrim());// 去前后空格\\n```\\n\\n### Dom4j解析案例\\n\\nContacts.xml 解析成===>` List<Contact>`\\n\\n首先定义一个`Contact`类\\n\\n```java\\n/**\\n <contact id=\\\"1\\\" vip=\\\"true\\\">\\n     <name>潘金莲</name>\\n     <gender>女</gender>\\n     <email>panpan@itcast.cn</email>\\n </contact>\\n */\\npublic class Contact {\\n    private int id ;\\n    private boolean vip;\\n    private String name ;\\n    private char sex ;\\n    private String email ;\\n\\n    public Contact() {\\n    }\\n\\n    public Contact(int id, boolean vip, String name, char sex, String email) {\\n        this.id = id;\\n        this.vip = vip;\\n        this.name = name;\\n        this.sex = sex;\\n        this.email = email;\\n    }\\n\\n    /**\\n     * 获取\\n     * @return id\\n     */\\n    public int getId() {\\n        return id;\\n    }\\n\\n    /**\\n     * 设置\\n     * @param id\\n     */\\n    public void setId(int id) {\\n        this.id = id;\\n    }\\n\\n    /**\\n     * 获取\\n     * @return vip\\n     */\\n    public boolean isVip() {\\n        return vip;\\n    }\\n\\n    /**\\n     * 设置\\n     * @param vip\\n     */\\n    public void setVip(boolean vip) {\\n        this.vip = vip;\\n    }\\n\\n    /**\\n     * 获取\\n     * @return name\\n     */\\n    public String getName() {\\n        return name;\\n    }\\n\\n    /**\\n     * 设置\\n     * @param name\\n     */\\n    public void setName(String name) {\\n        this.name = name;\\n    }\\n\\n    /**\\n     * 获取\\n     * @return sex\\n     */\\n    public char getSex() {\\n        return sex;\\n    }\\n\\n    /**\\n     * 设置\\n     * @param sex\\n     */\\n    public void setSex(char sex) {\\n        this.sex = sex;\\n    }\\n\\n    /**\\n     * 获取\\n     * @return email\\n     */\\n    public String getEmail() {\\n        return email;\\n    }\\n\\n    /**\\n     * 设置\\n     * @param email\\n     */\\n    public void setEmail(String email) {\\n        this.email = email;\\n    }\\n\\n    public String toString() {\\n        return \\\"Contact{id = \\\" + id + \\\", vip = \\\" + vip + \\\", name = \\\" + name + \\\", sex = \\\" + sex + \\\", email = \\\" + email + \\\"}\\\";\\n    }\\n}\\n```\\n\\n解析代码\\n\\n```java\\n// 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\nSAXReader saxReader = new SAXReader();\\n\\n// 2.第一种方式（简单）：通过解析器对象去加载xml文件数据，成为一个Document文档树对象。\\nDocument document = saxReader.read(new File(\\\"day13/src/Contacts.xml\\\"));\\n\\n// 3.获取根元素对象。\\nElement root = document.getRootElement();\\n\\n// 4.获取根元素下的全部子元素\\nList<Element> sonElements = root.elements();\\n\\n// 5.遍历子元素 封装成List集合对象\\nList<Contact> contactList = new ArrayList<>();\\nif(sonElements != null && sonElements.size() > 0) {\\n    for (Element sonElement : sonElements) {\\n        Contact contact = new Contact();\\n        contact.setId(Integer.valueOf(sonElement.attributeValue(\\\"id\\\")));\\n        contact.setVip(Boolean.valueOf(sonElement.attributeValue(\\\"vip\\\")));\\n        contact.setName(sonElement.elementText(\\\"name\\\"));\\n        contact.setSex(sonElement.elementText(\\\"gender\\\").charAt(0));\\n        contact.setEmail(sonElement.elementText(\\\"email\\\"));\\n        contactList.add(contact);\\n    }\\n}\\nSystem.out.println(contactList);\\n```\\n\\n### Xpath表达式\\n\\n用于检索XML中的某些信息\\n\\nXPath使用步骤：\\n\\n1. 导入dom4j框架。（XPath依赖于Dom4j技术,必须先倒入dom4j框架！）\\n1. 导入XPath独有的框架包。jaxen-1.1.2.jar\\n\\nXPath常用API:\\n\\n- `List<Node> selectNodes(String var1)`：检索出一批节点集合。\\n- `Node selectSingleNode(String var1)`：检索出一个节点返回。\\n\\nXPath提供的四种检索数据的写法：\\n\\n1. 绝对路径\\n2. 相对路径\\n3. 全文搜索\\n4. 属性查找\\n\\n> 1. 绝对路径： /根元素/子元素/子元素。\\n> 2. 相对路径： ./子元素/子元素。 (.代表了当前元素)\\n> 3. 全文搜索：\\n>    `//元素`  在全文找这个元素\\n>    `//元素1/元素2`  在全文找元素1下面的一级元素2\\n>    `//元素1//元素2  `在全文找元素1下面的全部元素2\\n> 4. 属性查找。\\n>    `//@属性名称`  在全文检索属性对象。\\n>    `//元素[@属性名称]`  在全文检索包含该属性的元素对象。\\n>    `//元素[@属性名称=值]`  在全文检索包含该属性的元素且属性值为该值的元素对象。\\n\\n```java\\npublic class XPathDemo {\\n\\n    //  1.绝对路径： /根元素/子元素/子元素。\\n    @Test\\n    public void path01() throws Exception {\\n        // 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\n        SAXReader saxReader = new SAXReader();\\n\\n        // 2.第二种方式（代码多点）先把xml文件读成一个字节输入流\\n        // 这里的“/”是直接去src类路径下寻找文件。\\n        InputStream is = Dom4JDemo01.class.getResourceAsStream(\\\"/Contact.xml\\\");\\n        Document document = saxReader.read(is);\\n        // 3.使用绝对路径定位全部的name名称\\n        List<Node> nameNodes = document.selectNodes(\\\"/contactList/contact/name\\\");\\n        for (Node nameNode : nameNodes) {\\n            System.out.println(nameNode.getText());\\n        }\\n    }\\n\\n    // 2.相对路径： ./子元素/子元素。 (.代表了当前元素)\\n    @Test\\n    public void path02() throws Exception {\\n        // 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\n        SAXReader saxReader = new SAXReader();\\n\\n        // 2.第二种方式（代码多点）先把xml文件读成一个字节输入流\\n        // 这里的“/”是直接去src类路径下寻找文件。\\n        InputStream is = Dom4JDemo01.class.getResourceAsStream(\\\"/Contact.xml\\\");\\n        Document document = saxReader.read(is);\\n\\n        // 3.得到根元素对象\\n        Element root = document.getRootElement();\\n\\n        // 4.从根元素开始检索\\n        // .代表当前根元素对象路径！直接找其下的contact下的name\\n        List<Node> nameNodes = root.selectNodes(\\\"./contact/name\\\");\\n        for (Node nameNode : nameNodes) {\\n            System.out.println(nameNode.getText());\\n        }\\n    }\\n\\n    // 3.全文搜索：\\n    //                \\\"//元素\\\"  在全文找这个元素\\n    //                \\\"//元素1/元素2\\\"  在全文找元素1下面的一级元素2\\n    //                \\\"//元素1//元素2\\\"  在全文找元素1下面的全部元素2\\n    @Test\\n    public void path03() throws Exception {\\n        // 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\n        SAXReader saxReader = new SAXReader();\\n\\n        // 2.第二种方式（代码多点）先把xml文件读成一个字节输入流\\n        // 这里的“/”是直接去src类路径下寻找文件。\\n        InputStream is = Dom4JDemo01.class.getResourceAsStream(\\\"/Contact.xml\\\");\\n        Document document = saxReader.read(is);\\n\\n        // 3.//name是指在整个xml文件中检索name节点！\\n        List<Node> nameNodes = document.selectNodes(\\\"//name\\\");\\n        for (Node nameNode : nameNodes) {\\n            System.out.println(nameNode.getText());\\n        }\\n        System.out.println(\\\"-----------------\\\");\\n        // 4.在全文中检索所有contact下的直接name节点\\n        List<Node> nameNodes1 = document.selectNodes(\\\"//contact/name\\\");\\n        for (Node nameNode : nameNodes1) {\\n            System.out.println(nameNode.getText());\\n        }\\n        System.out.println(\\\"-----------------\\\");\\n        // 5.在全文中检索所有contact下的所有name节点\\n        List<Node> nameNodes2 = document.selectNodes(\\\"//contact//name\\\");\\n        for (Node nameNode : nameNodes2) {\\n            System.out.println(nameNode.getText());\\n        }\\n    }\\n\\n    //   4.属性查找。\\n    //         //@属性名称  在全文检索属性对象。\\n    //          //元素[@属性名称]  在全文检索包含该属性的元素对象。\\n    //          //元素[@属性名称=值]  在全文检索包含该属性的元素且属性值为该值的元素对象。\\n    @Test\\n    public void path04() throws Exception {\\n        // 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\n        SAXReader saxReader = new SAXReader();\\n\\n        // 2.第二种方式（代码多点）先把xml文件读成一个字节输入流\\n        // 这里的“/”是直接去src类路径下寻找文件。\\n        InputStream is = Dom4JDemo01.class.getResourceAsStream(\\\"/Contact.xml\\\");\\n        Document document = saxReader.read(is);\\n\\n        // 3.检索全部属性对象\\n        List<Node> attributs = document.selectNodes(\\\"//@id\\\");\\n        for (Node attribut : attributs) {\\n            Attribute attr = (Attribute) attribut;\\n            System.out.println(attr.getName() + \\\"--->\\\"+attr.getValue());\\n        }\\n        System.out.println(\\\"---------------\\\");\\n        // 4.//元素[@属性名称]  在全文检索包含该属性的元素对象\\n        List<Node> nodeEles = document.selectNodes(\\\"//contact[@id]\\\");\\n        for (Node nodeEle : nodeEles) {\\n            System.out.println(nodeEle.getName());\\n        }\\n\\n        System.out.println(\\\"---------------\\\");\\n        // 5. //元素[@属性名称=值]  在全文检索包含该属性的元素且属性值为该值的元素对象。\\n        Node nodeEle = document.selectSingleNode(\\\"//contact[@id=2]\\\");\\n        Element ele = (Element) nodeEle;\\n        System.out.println(ele.elementTextTrim(\\\"name\\\"));\\n    }\\n}\\n```\\n\\n### 解析Mybatis的核心配置文件信息\\n\\n```java\\npublic class ParseXMLConfig {\\n    @Test\\n    public void parseXML() throws Exception {\\n        // 1.创建一个解析器对象\\n        SAXReader saxReader = new SAXReader();\\n        // 2.加载类路径下的xml文件成为一个document文档对象。\\n        Document document = saxReader.read(ParseXMLConfig.class.getResourceAsStream(\\\"/sqlMapConfig.xml\\\"));\\n        // 3.得到根元素对象\\n        Element root = document.getRootElement();\\n        // 4.获取子元素environments\\n        Element environments = root.element(\\\"environments\\\");\\n        // 5.获取子元素environment\\n        Element environment = environments.element(\\\"environment\\\");\\n        // 6.获取子元素dataSource\\n        Element dataSource = environment.element(\\\"dataSource\\\");\\n        // 7.获取 dataSource下的全部子元素\\n        List<Element>  properties = dataSource.elements();\\n        // 8.遍历他们\\n        for (Element property : properties) {\\n            System.out.println(property.attributeValue(\\\"name\\\")\\n                    +\\\"==>\\\"+property.attributeValue(\\\"value\\\"));\\n        }\\n    }\\n}\\n```\\n\\n## 第二章 设计模式\\n\\n### 工厂设计模型\\n\\n什么是工厂设计模式？\\n\\n- 工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一\\n- 这种类型的设计模式属于创建型模式，它提供了一种创建对象的方式\\n- 之前我们创建类对象时, 都是使用`new`对象的形式创建, 除`new`对象方式以外，工厂模式也可以创建对象\\n\\n工厂设计模式的作用：\\n\\n* 对象通过工厂的方法创建返回，工厂的方法可以为该对象进行加工和数据注入。\\n* 可以实现类与类之间的**解耦操作**\\n\\n> * 优点：工厂模式的存在可以改变创建对象的方式,解决类与类之间的耦合\\n> * 缺点：工厂设计模式多了一个工厂类\\n\\n`FactoryPattern`\\n\\n```java\\npublic class FactoryPattern {\\n    // 生产对象的方法：工厂方法\\n    public static Animal createAniaml(){\\n//        Dog dog = new Dog();\\n//        return dog;\\n        return new Cat();\\n    }\\n}\\n```\\n\\n创建对象可以使用\\n\\n```java\\nAnimal a = FactoryPattern.createAniaml();\\na.run();\\n```\\n\\n之后如果需要修改创建的对象，可以直接在`FactoryPattern`中修改对象创建\\n\\n### 装饰设计模式\\n\\n装饰模式指的是在不改变原类, 动态地扩展一个类的功能。\\n\\n思想：是创建一个新类，包装原始类，从而在新类中提升原来类的功能！！\\n\\n> 装饰模式可以在不改变原类的基础上对类中的方法进行扩展增强,实现原则为:\\n>\\n> 1. 定义父类\\n> 2. 定义原始类，继承父类，定义功能。\\n> 3. 定义装饰类，继承父类，包装原始类，增强功能！！\\n\\n`InputStream`\\n\\n```java\\npublic abstract class InputStream {\\n    public abstract void read();\\n    public abstract void close();\\n}\\n```\\n\\n`FileInputStream`\\n\\n```java\\npublic class FileInputStream extends InputStream {\\n    @Override\\n    public void read() {\\n        System.out.println(\\\"读取数据~~~\\\");\\n    }\\n\\n    @Override\\n    public void close() {\\n        System.out.println(\\\"关闭流~~~\\\");\\n    }\\n}\\n\\n```\\n\\n`BufferedInputStream`\\n\\n```java\\npublic class BufferedInputStream extends InputStream {\\n    private InputStream is ;\\n    public BufferedInputStrem(InputStream is){\\n        this.is = is;\\n    }\\n    @Override\\n    public void read() {\\n        System.out.println(\\\"开启高效缓冲读取~\\\");\\n        is.read();\\n    }\\n\\n    @Override\\n    public void close() {\\n        is.close();\\n    }\\n}\\n```\\n\\n`Demo`\\n\\n```java\\nInputStream is = new BufferedInputStrem(new FileInputStream());\\nis.read();\\nis.close();\\n```\\n\\n## 第三章 Commons-io包\\n\\n什么是`Commons-io`包？\\n\\ncommons-io是apache开源基金组织提供的一组有关IO操作的类库，可以挺提高IO功能开发的效率。commons-io工具包提供了很多有关io操作的类，见下表：\\n\\n| 包   | 功能描述 |\\n| ----------------------------------- | ------------------------------------------- |\\n| org.apache.commons.io | 有关Streams、Readers、Writers、Files的工具类 |\\n| org.apache.commons.io.input | 输入流相关的实现类，包含Reader和InputStream |\\n| org.apache.commons.io.output | 输出流相关的实现类，包含Writer和OutputStream |\\n| org.apache.commons.io.serialization | 序列化相关的类 |\\n\\n步骤：\\n\\n 1. 下载commons-io相关jar包；http://commons.apache.org/proper/commons-io/\\n 2. 把commons-io-2.6.jar包复制到指定的Module的lib目录中\\n 3. 将commons-io-2.6.jar加入到classpath中\\n\\n> `IOUtils`和`FileUtils`可以方便的复制文件和文件夹\\n\\n```java\\n// 1.完成文件复制！\\nIOUtils.copy(new FileInputStream(\\\"Day13Demo/src/books.xml\\\"), new FileOutputStream(\\\"Day13Demo/new.xml\\\"));\\n// 2.完成文件复制到某个文件夹下！\\nFileUtils.copyFileToDirectory(new File(\\\"Day13Demo/src/books.xml\\\"), new File(\\\"D:/itcast\\\"));\\n// 3.完成文件夹复制到某个文件夹下！\\nFileUtils.copyDirectoryToDirectory(new File(\\\"D:\\\\\\\\itcast\\\\\\\\约吧图片服务器\\\") , new File(\\\"D:\\\\\\\\\\\"));\\n\\n//  Java从1.7开始提供了一些nio, 自己也有一行代码完成复制的技术。\\nFiles.copy(Paths.get(\\\"Day13Demo/src/books.xml\\\")\\n        , new FileOutputStream(\\\"Day13Demo/new11.txt\\\"));\\n```\\n\\n## 第四章 Base64\\n\\nBase64是网络上最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法。\\n\\n在Java 8中，Base64编码已经成为Java类库的标准。\\n\\nJava 8 内置了 Base64 编码的编码器和解码器。\\n\\nBase64工具类提供了一套静态方法获取下面三种BASE64编解码器：\\n\\n- **基本：**输出被映射到一组字符A-Za-z0-9+/，编码不添加任何行标，输出的解码仅支持A-Za-z0-9+/。\\n- **URL：**输出映射到一组字符A-Za-z0-9+_，输出是URL和文件。\\n- **MIME：**输出隐射到MIME友好格式。输出每行不超过76字符，并且使用\'\\\\r\'并跟随\'\\\\n\'作为分割。编码输出最后没有行分割。\\n\\n**内嵌类**\\n\\n| 序号 | 内嵌类 & 描述                                                |\\n| :--- | :----------------------------------------------------------- |\\n| 1    | **static class Base64.Decoder**该类实现一个解码器用于，使用 Base64 编码来解码字节数据。 |\\n| 2    | **static class Base64.Encoder**该类实现一个编码器，使用 Base64 编码来编码字节数据 |\\n\\n**方法**\\n\\n| 序号 | 方法名 & 描述                                                |\\n| :--- | :----------------------------------------------------------- |\\n| 1    | **static Base64.Decoder getDecoder()**返回一个 Base64.Decoder ，解码使用基本型 base64 编码方案。 |\\n| 2    | **static Base64.Encoder getEncoder()**返回一个 Base64.Encoder ，编码使用基本型 base64 编码方案。 |\\n| 3    | **static Base64.Decoder getMimeDecoder()**返回一个 Base64.Decoder ，解码使用 MIME 型 base64 编码方案。 |\\n| 4    | **static Base64.Encoder getMimeEncoder()**返回一个 Base64.Encoder ，编码使用 MIME 型 base64 编码方案。 |\\n| 5    | **static Base64.Encoder getMimeEncoder(int lineLength, byte[] lineSeparator)**返回一个 Base64.Encoder ，编码使用 MIME 型 base64 编码方案，可以通过参数指定每行的长度及行的分隔符。 |\\n| 6    | **static Base64.Decoder getUrlDecoder()**返回一个 Base64.Decoder ，解码使用 URL 和文件名安全型 base64 编码方案。 |\\n| 7    | **static Base64.Encoder getUrlEncoder()**返回一个 Base64.Encoder ，编码使用 URL 和文件名安全型 base64 编码方案。 |\\n\\n> **注意：**Base64 类的很多方法从 **java.lang.Object** 类继承\\n\\n```java\\ntry {\\n    // 1-1.基本编码后结果。普通文本的编码\\n    String rs1 = Base64.getEncoder().encodeToString(\\\"黑马程序员\\\".getBytes());\\n    System.out.println(rs1); // 6buR6ams56iL5bqP5ZGY\\n\\n    // 1-2.基本解码后结果。普通文本的解码\\n    byte[] buffer = Base64.getDecoder().decode(rs1);\\n    System.out.println(new String(buffer));\\n\\n    // 2-1.URL编码\\n    String rs2 = Base64.getUrlEncoder().encodeToString(\\\"?loginName=黑马&passWord=123456\\\".getBytes());\\n    System.out.println(rs2);\\n    // 2-2 URL解码\\n    byte[] buffer2 = Base64.getUrlDecoder().decode(rs2);\\n    System.out.println(new String(buffer2));\\n\\n    // 3-1 MIME编码\\n    StringBuilder sb = new StringBuilder();\\n    for (int i = 0; i < 10; ++i) {\\n        sb.append(UUID.randomUUID().toString());\\n    }\\n\\n    String rs3 = Base64.getMimeEncoder().encodeToString(sb.toString().getBytes());\\n    System.out.println(rs3);\\n\\n    // 3-2 MIME解码\\n    byte[] buffer3 = Base64.getMimeDecoder().decode(rs3);\\n    System.out.println(new String(buffer3));\\n}catch(Exception e){\\n    System.out.println(\\\"Error :\\\" + e.getMessage());\\n}\\n```\\n\\n\",\"articleCover\":\"http://47.108.219.199:81/articles/a2fc5f9fc3d6c835e4e123757f282664.jpg\",\"articleTitle\":\"Java进阶知识精华汇总\",\"categoryName\":\"Java基础\",\"id\":58,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',2,'madao','127.0.0.1','','2022-07-15 09:31:38',NULL),(1115,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"# ResNet学习笔记\\n\\n## 前言\\n\\n深度残差网络（Deep Residual Network）是cnn机器视觉史上的一件里程碑的事件，在2015年，ResNet在ImageNet和COCO数据集上获得了非常优秀的成绩。如下图所示：\\n\\n* ImageNet Classification: “Ultra-deep”`152-layer` nets\\n* ImageNet Detection: `16%` better than 2nd\\n* ImageNet Localization: `27%` better than 2nd\\n* COCO Detection: `11%` better than 2nd\\n* COCO Segmentation: `12%` better than 2nd\\n\\nResNet获得了五项第一，再一次的刷新了CNN模型在ImageNet上的历史[<sup>[1]</sup>](#ref-1)，而论文的作者[何凯明](http://kaiminghe.com/)也获得了CVPR2016最佳论文奖[<sup>[2]</sup>](#ref-2)。以下是记录了解ResNet的一些笔记，主要是来自于15年和16年何凯明所在的微软研究院发表的论文。\\n\\n## 深度网络退化问题（degradation problem of deep network）\\n\\n从`AlexNet`到`GoogLeNet`，看起来好像是网络越深越好，但是直接秉持着`We need go deeper`的思想构建神经网络，到最后会发现，随着网络越来越深，会出现**梯度消失（vanishing gradients）**和**梯度爆炸（exploding gradients）**以及**网络退化（network degradation）**：\\n\\n* **梯度消失和爆炸（vanishing/exploding gradients）**：网络层数太深引发的梯度方向传播中的连乘效应引起\\n* **网络退化（network degradation）**：较深的模型可以看作是较浅模型的超空间，理论上较深的模型可以看作是较浅模型的恒等映射，但是实际上较深模型后面添加的不是恒等映射，而是一些非线性层[<sup>[3]</sup>](#ref-3)\\n\\n对于梯度消失和爆炸的应对方法如下：\\n\\n* **改换激活函数**: 使用`relu`、`LeakyRelu`、`ELU`等激活函数可以改善梯度消散或爆炸问题。`relu`导数的正数部分恒等于1，所以不会产生梯度消失和梯度爆炸\\n* **BatchNormalization**: 对每一层的输入做scale和shift方法，将每层神经元的输入分布强行拉回均值为0、方差为1的标准正态分布，这就使得激活层输入值落入在非线性函数对输入值比较敏感的区域，使得输入的小变化会导致损失函数较大的变化，使得梯度变大，训练速度加快，且避免梯度消失问题\\n* **梯度剪切**: 该方法主要是针对梯度爆炸提出。其思想是设置一个梯度剪切阈值，更新梯度时，如果梯度超过这个阈值，那么限制其在这个范围之内\\n\\n但是随着网络的加深，可以看到的是训练误差和测试误差都开始增加，这自然不是过拟合引起的，而是网络出现退化[<sup>[4]</sup>](#ref-4)，如[figure1](#fig-1)所示：\\n\\n![fig1.png](http://47.108.219.199:81/articles/cc162f1b7ba3267c9f91b33fee48fa18.png)\\n\\n网络退化表明了并非所有系统都同样容易优化。考虑一个较深的网络和一个较浅的网络，更深的网络对应更浅的网络相当于是增加了更多的层，添加的层可以是恒等映射（identity mapping），而其他的层是相当于是更浅的模型中直接复制的，这种构造容易得到，较深的模型不会产生比较浅的模型更高的训练误差，但是实验表明，简单地加深网络模型会出现网络退化的问题。\\n\\n## 残差块（Residual block）\\n\\n![fig2.png](http://47.108.219.199:81/articles/5ab52cd9a42fd496bf83f4fe2b5a33f1.png)\\n\\n\\n网络退化出现的原因就是**现有的网络无法实现恒等映射**，将想要得到的恒等映射函数表示为 $H(x)=x$，残差块网络设计为 $H(x)=F(x)+x$，即直接将恒等映射作为网络的一部分，就可以将问题转化为学习一个残差函数 $F(x)=H(x)-x$，那么只要 $F(x)=0$，就可以构成一个恒等映射 $H(x)=x$，拟合残差比拟合恒等映射容易的多[<sup>[5]</sup>](#ref-5)。从数学上更加详细地描述残差结构，可以是：\\n\\n<div id=\\\"eqn-1\\\"></div>\\n\\n$$\\ny=F(x, W_i)+x\\n$$\\n\\n其中 $x$ 和 $y$ 表示的分别是所考虑的层的输入和输出向量，函数 $F(x, W_i)$ 表示要学习的残差映射，操作 $F(x, W_i)+x$ 是通过跳接实现，在[方程1](#eqn-1)中 $x$ 和 $F$ 的维度必须相同，否则，需要对跳接进行线性投影 $W_s$ 来匹配维度：\\n\\n<div id=\\\"eqn-2\\\"></div>\\n\\n$$\\ny=F(x, W_i)+W_s x\\n$$\\n\\n* $F(x)+x$ 的公式可以通过具有跳接（shortcut connections）的前馈神经网络来实现，跳接可以是跳过一层或者多层的连接，通过跳接在激活函数前，将上一层或几层的输出与本层输出相加，将求和结果输入到激活函数作为本层的输出，残差块示例如[figure2](#fig-2)所示\\n\\n* 跳接只是执行**恒等映射**，他们的输出被添加到堆叠层的输出中，这不会增加额外的参数，也不会增加计算复杂性\\n\\n* 添加了残差网络，可以给神经网络一个多的选择，例如**学习到的一层的参数是冗余的，那么就可以直接走跳接路线，跳过这个冗余层**，而不用去拟合参数使得输出 $H(x)=x$\\n\\n* **学习残差的计算量比学习输出等于输入小**：例如普通网络为A，残差网络为B，输入为2，输出为2，那么普通网络就是$A(2)=2$，而残差网络就是$B(2)=F(2)+2=2$，即残差网络中$F(2)=0$。一般网络会将**权重初始化为0附近的数**，所以让$F(2)$拟合0会比$A(2)=2$容易\\n\\n* **ReLU能够将负数激活为0**，正数等于输出，这相当于过滤了负数的线性变化，让$F(x)=0$变的更加容易\\n\\n![ReLU.png](http://47.108.219.199:81/articles/d2a8b07068c5d4edf86077b2a2f6eff0.png)\\n\\n* 对残差网络$H(x)=F(x)+x$求梯度，即反向传播时，得到$H\'(x)=F\'(x)+1$，**残差结构的这个常数1能够保证求梯度的时候梯度不会消失**\\n\\n* 这种结构不仅适用于全连接层，还**适用于卷积层，逐通道地对两个特征图执行元素相加**\\n\\n## 网络架构\\n\\n<div id=\\\"fig3\\\"></div>\\n\\n![fig3.png](http://47.108.219.199:81/articles/849f0bd1c2e4ce63d30090c3b2fbc253.png)\\n\\n网络结构如[figure3](#fig3)所示，从左到右分别是VGG-19（196亿次浮点运算）、34层不带残差的plain net（36亿次浮点运算）、34层的残差网络（36亿次浮点运算）\\n\\n#### plain network\\n\\n* 主要受到VGGNet的启发，遵循两个简单设计规则：\\n  * 对于相同的输出特征图大小，层具有相同数量的滤波器\\n  * 如果特征图大小减半，则过滤器的数量加倍\\n* 步长为2的卷积层直接执行下采样\\n* 网络结尾是一个整体平均池化层和一个1000路的全连接层和softmax函数\\n* 总体的带权重的层是34层\\n* 该模型比VGGNet相比具有更少的滤波器和更低的复杂度，plain net 有36亿次浮点运算，而VGG-19有196亿次浮点运算，前者是后者的18%\\n\\n#### Residual Network\\n\\n* 在plain net网络中引入了**跳接（shortcut conncetions）**，将其转换为了对应的残差版本\\n* 跳接引入有两种形式：\\n  * 实线：跳接引入的输入和输出维度相同，可以直接相加，如[公式1](#eqn-1)\\n  * 虚线：引入的维度增加时，可以有两种方式\\n    * 跳接仍然执行恒等映射，**填充零**元素保证维度相同\\n    * 利用[公式2](#eqn-2)对跳接进行**投影**来匹配维度\\n\\n## 实现细节\\n\\n* 遵循AlexNet数据预处理的方法，对图像进行裁剪和水平翻转得到224 x 224的图像，然后减去每个像素的平均值[<sup>[6]</sup>](#ref-6)\\n* 每次卷积之后和激活函数之前采用批处理标准化（batch normalization, BN）\\n* 批大小（mini-batch ）为256\\n* 学习率（learning rate） 从 0.1 开始，当误差平稳时，学习率除以10，模型训练了 $60 \\\\times 10^4$ 次迭代\\n* 权重衰减（weight decay）0.0001，动量（momentum）为 0.9\\n* 网络中没有使用到dropout\\n\\n## 实验结果\\n\\n### ImageNet分类结果\\n\\n对比了18层和34层的plain net以及对应的ResNet，可以看到如[figure4](#fig-4)所示，**残差结果确实解决了退化问题**\\n\\n![fig4.png](http://47.108.219.199:81/articles/4e81b4c3ae87e50e68e0995b5f71f4b3.png)\\n\\n![](imgs/fig4.png)\\n\\n对比了ImageNet数据集的测试结果汇总如[表3](#table-3)所示\\n\\n<div id=\\\"table-3\\\"></div>\\n\\n![table3.png](http://47.108.219.199:81/articles/8678df35b304c133111aec5685fc75a3.png)\\n\\n\\n\\n## 参考文献\\n\\n<div id=\\\"ref-1\\\"></div>\\n\\n- [1] [知乎文章：你必须要知道CNN模型：ResNet](https://zhuanlan.zhihu.com/p/31852747/)\\n\\n<div id=\\\"ref-2\\\"></div>\\n\\n- [2] [何凯明个人主页](http://kaiminghe.com/)\\n\\n<div id=\\\"ref-3\\\"></div>\\n\\n- [3] [csdn博客：网络退化、过拟合、梯度消散/爆炸](https://blog.csdn.net/c2250645962/article/details/102838830)\\n\\n<div id=\\\"ref-4\\\"></div>\\n\\n- [4] [He K ,  Zhang X ,  Ren S , et al. Deep Residual Learning for Image Recognition[J]. 2016 IEEE Conference on Computer Vision and Pattern Recognition (CVPR), 2016.](https://arxiv.org/pdf/1512.03385.pdf)\\n\\n<div id=\\\"ref-5\\\"></div>\\n\\n- [5] [知乎文章：CVPR2016:ResNet 从根本上解决深度网络退化问题](https://zhuanlan.zhihu.com/p/106764370)\\n\\n<div id=\\\"ref-6\\\"></div>\\n\\n- [6] [Krizhevsky A , Sutskever I , Hinton G . ImageNet Classification with Deep Convolutional Neural Networks[J]. Advances in neural information processing systems, 2012, 25(2).](https://proceedings.neurips.cc/paper/2012/file/c399862d3b9d6b76c8436e924a68c45b-Paper.pdf)\\n\\n\",\"articleCover\":\"http://47.108.219.199:81/articles/5ab52cd9a42fd496bf83f4fe2b5a33f1.png\",\"articleTitle\":\"ResNet学习笔记\",\"categoryName\":\"机器视觉\",\"id\":57,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',2,'madao','127.0.0.1','','2022-07-15 09:32:15',NULL),(1116,'文章模块','修改','/admin/articles','com.minzheng.blog.controller.ArticleController.updateArticleDelete','恢复或删除文章','[{\"idList\":[54],\"isDelete\":1}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',2,'madao','127.0.0.1','','2022-07-15 09:52:39',NULL),(1117,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"行内公式：$a=\\\\frac{1}{2}$\\n\\n跨行公式\\n\\n$$\\na=\\\\frac{1}{2}\\\\sum_{i=1}^n x_i\\n$$\",\"articleCover\":\"http://47.108.219.199:81/articles/7443853ef88159148435496c56b747c8.png\",\"articleTitle\":\"test-latex\",\"categoryName\":\"test\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[\"test\"],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',2,'madao','127.0.0.1','','2022-07-15 12:17:47',NULL),(1118,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"# Java进阶简介\\n\\n主要的知识点来自于黑马程序员的视频：`BV1TE41177mP`\\n\\n\\n\\n# day1-复习回顾、静态、继承、引用类型使用\\n\\n## 定义类\\n\\n- 类名的首字母应该大写，满足**驼峰写法**\\n- 一个Java文件可以定义多个类。但是只有一个类是用`public`修饰，`public`修饰的类名必须称为`Java`文件名。\\n\\n- 类中有且仅有5大成分（五大金刚）\\n\\n  - **成员变量Field**：描述类或者对象的属性信息的。\\n  - **成员方法Method**：描述类或者对象的行为的。\\n  - **构造器（构造方法,Constructor）**: 初始化类的一个对象返回。\\n    - 有参构造器\\n    - 无参构造器\\n  - **代码块**\\n\\n  - **内部类**\\n\\n## 封装\\n\\n- 面向对象的三大**特征**之一：**封装，继承，多态**。 \\n- 形成了规范，即使毫无意义还是会这样写代码！\\n- 合理隐藏，合理暴露。\\n- 封装的规范：成员变量私有，方法一般公开，提供成套的`getter`和`setter`方法暴露成员变量的取值和赋值，`public`修饰符\\n- 封装的作用：提高安全性，提高代码的组件化思想。\\n- 封装已经成为`Java`代码的规范，即使毫无意义，我们也要这样写代码（成员变量私有，方法公开）\\n\\n## this关键字\\n\\n- `this`代表了当前对象的引用。\\n- `this`可以出现在构造器和方法中。\\n- `this`出现在构造器中代表构造器正在初始化的对象。\\n- `this`出现在方法中，哪个对象调用方法，`this`就代表哪个对象。\\n- `this`可以访问对象的成员变量，区分成员变量是局部的还是对象中的成员变量。\\n\\n## static关键字\\n\\n`Java`是通过成员变量是否有`static`修饰来区分是类的还是属于对象的\\n\\n* 没有`static`修饰的方法和变量是属于每个对象的\\n* 有`static`修饰的方法和成员变量属于类的\\n\\n按照有无`static`修饰，成员变量和方法可以分为：\\n\\n**成员变量**：\\n\\n* **静态成员变量**（类变量）：有`static`修饰的成员变量称为静态成员变量也叫类变量，属于类本身的，**直接用类名访问**即可。\\n* **实例成员变量**：无`static`修饰的成员变量称为实例成员变量，属于类的每个对象的，**必须用类的对象来访问**。\\n\\n> * 同一个类中访问静态成员变量可以省略类名不写\\n> * 对象也可以访问静态成员变量，但是不推荐，静态成员变量属于类，如果用对象访问静态成员变量容易混淆\\n\\n成员变量访问内存\\n\\n![image-20220427112225577](http://47.108.219.199:81/articles/image-20220427112225577.png)\\n\\n```java\\npublic class Student{\\n    // 1.静态成员变量:有static修饰，属于类本身，直接用类名访问即可！\\n    public static String schoolName = \\\"黑马\\\";\\n    // 2.实例成员变量:无static修饰，属于类的对象的，必须用对象访问！\\n    private String name;\\n    private int age ;\\n\\n    public static void main(String[] args) {\\n        // 1.类名.静态成员变量\\n        System.out.println(Student.schoolName);\\n        // 注意：同一个类中访问静态成员变量可以省略类名不写\\n        System.out.println(schoolName);\\n\\n        // 2.对象.实例成员变量\\n        //System.out.println(Student.name); // 报错！\\n        Student swk = new Student();\\n        swk.name = \\\"孙悟空\\\";\\n        System.out.println(swk.name);\\n        System.out.println(swk.age);\\n\\n        // 3.对象.静态成员变量(不推荐)\\n        // 静态成员变量属于类，直接用类名访问即可。\\n        System.out.println(swk.schoolName);\\n    }\\n}\\n```\\n\\n**成员方法**：\\n\\n* **静态方法**：有`static`修饰的成员方法称为静态方法也叫类方法，属于类本身的，**直接用类名访问**即可。\\n* **实例方法**：无`static`修饰的成员方法称为实例方法，属于类的每个对象的，**必须用类的对象**来访问。\\n\\n> * 静态方法属于类，有static修饰，直接用类名访问即可。\\n> * 实例方法属于对象，无static修饰，必须先创建对象，然后用对象来访问。\\n> * 静态方法也可以被对象共享访问，但是不推荐，因为静态方法直接用类名访问即可。\\n\\n![image-20220427143750503](http://47.108.219.199:81/articles/image-20220427143750503.png)\\n\\n```java\\npublic class Student {\\n    // 0.实例成员变量。\\n    private String name;\\n    private int age ;\\n\\n    // 1.静态方法：有static修饰，属于类，直接用类名访问即可！\\n    public static void inAddr(){\\n        System.out.println(\\\"我们都在天河区吉山村happy的学习Java!\\\");\\n    }\\n\\n    // 2.实例方法：无static修饰，属于对象，必须用对象访问！\\n    public void eat(){\\n        System.out.println(name + \\\"已经\\\"+age+\\\"岁，在吃好吃的！！\\\");\\n    }\\n\\n    public static void main(String[] args) {\\n        // a.类名.静态方法\\n        Student.inAddr();\\n        // 注意：在同一个类中访问静态成员可以省略类名不写！！\\n        inAddr();\\n\\n        // b.对象.实例方法\\n        // Student.eat(); // 报错了！\\n        Student zbj = new Student();\\n        zbj.name = \\\"猪刚鬣\\\";\\n        zbj.age = 1000;\\n        zbj.eat();\\n\\n        // c.对象.静态方法(不推荐)\\n        zbj.inAddr();\\n    }\\n}\\n```\\n\\n关于`static`常考的八类题：\\n\\n* 实例方法是否可以直接访问实例成员变量？可以的，因为它们都属于对象。\\n* 实例方法是否可以直接访问静态成员变量？可以的，静态成员变量可以被共享访问。\\n* 实例方法是否可以直接访问实例方法? 可以的，实例方法和实例方法都属于对象。\\n* 实例方法是否可以直接访问静态方法？可以的，静态方法可以被共享访问！\\n* 静态方法是否可以直接访问实例变量？ 不可以的，实例变量必须用对象访问！！\\n* 静态方法是否可以直接访问静态变量？ 可以的，静态成员变量可以被共享访问。\\n* 静态方法是否可以直接访问实例方法? 不可以的，实例方法必须用对象访问！！\\n* 静态方法是否可以直接访问静态方法？可以的，静态方法可以被共享访问！！\\n\\n> **也就是说实例方法啥都可以访问，静态方法只能访问静态方法或者静态变量**\\n\\n## 继承\\n\\n### 继承的概述\\n\\n面向对象的三大特征：封装、继承和多态\\n\\n继承是Java中一般到特殊的关系，是一种子类到父类的关系。例如：学生类继承了人类。  猫类继承了动物类。\\n\\n被继承的类称为：父类/超类。继承父类的类称为：子类\\n\\n* 继承可以**提高代码的复用性**\\n* 子类直接继承父类，就可以直接使用父类的这些代码了（相同代码重复利用）\\n\\n子类继承了一个父类，子类就可以直接得到父类的属性（成员变量）和行为（方法）了。\\n\\n### 继承的例子\\n\\n```java\\nclass Animal{\\n\\n}\\n\\nclass Cat extends Animal{\\n\\n}\\n```\\n\\n> - 继承的优势可以把相同的代码定义在父类中，子类可以直接继承使用。\\n> - 这样就可以**提高代码的复用性**：相同代码只需要在父类中写一次就可以了。\\n\\n### 子类不能继承父类的内容\\n\\n- 子类继承父类，子类就得到了父类的属性和行为。\\n- 但是并非所有父类的属性和行为等子类都可以继承。\\n\\n**子类不能继承父类的东西**：子类不能继承父类的构造器，子类有自己的构造器。（没有争议的）\\n\\n有争议的观点（拓展）：\\n\\n**子类是否可以继承父类的私有成员**（私有成员变量，私有成员方法）?\\n\\n* **子类是可以继承父类的私有成员的，只是不能直接访问而已**。\\n* 以后可以暴力去访问继承自父类的私有成员~~~\\n\\n**子类是否可以继承父类的静态成员？**\\n\\n* **子类是不能继承父类的静态成员的**\\n* **子类只是可以访问父类的静态成员**，父类的静态成员只有一份可以被子类共享访问。\\n* **共享并非继承**\\n\\n### 成员变量的访问特点\\n\\n**就近原则**：子类有找子类，子类没有找父类，父类没有就报错\\n\\n```java\\nclass Animal{\\n    public String name = \\\"动物名称\\\";\\n}\\n\\nclass Cat extends Animal{\\n    public String name = \\\"子类名称\\\";\\n    public void show(){\\n        String name = \\\"局部名称\\\";\\n        System.out.println(name); // 局部名称\\n        System.out.println(this.name); // 子类名称\\n        System.out.println(super.name); // 父类名称\\n    }\\n}\\n```\\n\\n> - `this`代表了当前对象的引用，可以用于访问当前子类对象的成员变量。\\n> - `super`代表了父类对象的引用，可以用于访问父类中的成员变量。\\n\\n### 成员方法的访问特点\\n\\n就近原则：子类有找子类，子类没有找父类，父类没有就报错\\n\\n子类对象优先使用子类已有的方法，也就是说父类的方法被重写\\n\\n```java\\npublic class TestDemo {\\n    public static void main(String[] args) {\\n        Cat cat = new Cat();\\n        cat.run(); // 子类的\\n        cat.eat(); // 父类的\\n        // cat.go(); // 报错！\\n    }\\n}\\n\\nclass Animal{\\n    public void run(){\\n        System.out.println(\\\"动物可以跑~~~~\\\");\\n    }\\n\\n    public void eat(){\\n        System.out.println(\\\"吃东西~~~~\\\");\\n    }\\n}\\n\\nclass Cat extends Animal {\\n    public void run(){\\n        System.out.println(\\\"🐱跑的贼溜~~~~\\\");\\n    }\\n}\\n```\\n\\n### 方法重写\\n\\n子类继承了父类，子类就得到了父类的某个方法。但是子类觉得父类的这个方法不好用或者无法满足自己的需求，子类重写一个与父类申明一样的方法来覆盖父类的该方法，子类的这个方法就进行了方法重写。\\n\\n方法重写的校验注解： `@Override`\\n\\n- `Java`建议在重写的方法上面加上一个`@Override`注解。\\n- 方法一旦加了这个注解，那**就必须是成功重写父类**的方法，否则报错！\\n- `Override`优势：**可读性好，安全，优雅**\\n\\n方法重写的具体要求：\\n\\n* 子类重写方法的**名称和形参列表必须与父类被重写方法一样**。\\n* 子类重写方法的返回值类型申明要么与父类一样，要么比父类方法**返回值类型范围更小**。（以后再了解）\\n* 子类重写方法的修饰符权限应该与父类被重写方法的**修饰符权限相同或者更大**。（以后再了解）\\n* 子类重写方法申明抛出的异常应该与父类被重写方法申明抛出的**异常一样或者范围更小**！（以后再了解）\\n\\n```java\\nclass Wolf extends Animal{\\n    // 进行了方法重写！！\\n    // 子类重写方法的名称和形参列表必须与父类被重写方法一样\\n    // 子类重写方法的返回值类型申明要么与父类一样，要么比父类方法返回值类型范围更小\\n    // 子类重写方法的修饰符权限应该与父类被重写方法的修饰符权限相同或者更大\\n    @Override\\n    public void run(){\\n        System.out.println(\\\"🐺跑的贼快~~~\\\");\\n    }\\n}\\n\\nclass Animal{\\n    public void run(){\\n        System.out.println(\\\"动物可以跑步~~~\\\");\\n    }\\n}\\n```\\n\\n> - 方法重写是子类重写一个与父类申明一样的方法覆盖父类的方法。\\n> - 方法重写建议加上`@Override`注解。\\n> - 方法重写的核心要求：方法名称形参列表必须与被重写方法一致！！\\n> - 建议**申明不变，重新实现**。\\n\\n调用父类被重写的方法使用`super`\\n\\n```java\\nclass SportMan extends People{\\n    @Override\\n    public void run(){\\n        System.out.println(\\\"运动员跑的贼快~~~~~\\\");\\n    }\\n\\n    public void go(){\\n        super.run(); // 父类被重写的方法\\n        run(); // 子类的\\n    }\\n}\\n\\nclass People{\\n    public void run(){\\n        System.out.println(\\\"人会跑~\\\");\\n    }\\n}\\n```\\n\\n> `super`可以用在子类的实例方法中调用父类被重写的方法\\n\\n静态方法和私有方法**不可以**被重写\\n\\n```java\\nclass Mac extends Computer{\\n//    @Override\\n    public void go(){\\n    }\\n\\n    // @Override\\n    public static void test(){\\n    }\\n}\\n\\nclass Computer{\\n    public static void test(){\\n        System.out.println(\\\"super test\\\");\\n    }\\n\\n    private void go(){\\n\\n    }\\n}\\n```\\n\\n### 继承后构造器的特点\\n\\n子类的全部构造器默认一定会**先访问父类的无参数构造器，再执行子类自己的构造器**，主要的原因是\\n\\n* 子类的构造器的第一行默认有一个`super()`调用父类的无参数构造器，写不写都存在\\n* 子类继承父类，子类就得到了父类的属性和行为\\n* 当我们调用子类构造器初始化子类对象数据的时候，必须先调用父类构造器初始化继承自父类的属性和行为\\n\\n### super调用父类构造器\\n\\n`super(...)`可以根据参数选择调用父类的某个构造器\\n\\n```java\\nclass Monkey extends Animal{\\n\\n    public Monkey(String name, int age, char sex) {\\n        super(name , age , sex) ; // 根据参数匹配调用父类构造器\\n    }\\n\\n    public void eatBanana(){\\n        System.out.println(getName()+\\\"-->\\\"+getAge()+\\\"-->\\\"+getSex()+\\\"在吃🍌~~~\\\");\\n    }\\n}\\n\\nclass Animal{\\n    private String name;\\n    private int age;\\n    private char sex;\\n\\n    public Animal() {\\n    }\\n\\n    public Animal(String name, int age, char sex) {\\n        this.name = name;\\n        this.age = age;\\n        this.sex = sex;\\n    }\\n\\n    public String getName() {\\n        return name;\\n    }\\n\\n    public void setName(String name) {\\n        this.name = name;\\n    }\\n\\n    public int getAge() {\\n        return age;\\n    }\\n\\n    public void setAge(int age) {\\n        this.age = age;\\n    }\\n\\n    public char getSex() {\\n        return sex;\\n    }\\n\\n    public void setSex(char sex) {\\n        this.sex = sex;\\n    }\\n}\\n```\\n\\n`super`调用父类构造器的内存分布图\\n\\n![image-20220505160400907](http://47.108.219.199:81/articles/image-20220505160400907.png)\\n\\n### this和super关键字使用总结\\n\\n`this`代表了当前对象的引用（继承中指代子类对象）：\\n\\n* `this` 子类成员变量\\n* `this`子类成员方法\\n* `this(...)` 可以根据参数匹配访问本类其他构造器\\n\\n`super`代表了父类对象的引用（继承中指代了父类对象空间）\\n\\n* `super` 父类成员变量\\n* `super`父类的成员方法\\n* `super(...)`可以根据参数匹配访问父类的构造器\\n\\n`this(...)`和`super(...)`**必须放在构造器的第一行**，否则报错\\n\\n所以`this(...)`和`super(...)`**不能同时出现在构造器中**\\n\\n```java\\nclass Student{\\n    private String name ;\\n    private int age ;\\n    private String schoolName ;\\n\\n    public Student() {\\n    }\\n\\n    public Student(String name , int age){\\n        // 借用兄弟构造器的功能！\\n        this(name , age , \\\"黑马\\\");\\n    }\\n\\n    public Student(String name, int age, String schoolName) {\\n        this.name = name;\\n        this.age = age;\\n        this.schoolName = schoolName;\\n    }\\n\\n    public String getName() {\\n        return name;\\n    }\\n\\n    public void setName(String name) {\\n        this.name = name;\\n    }\\n\\n    public int getAge() {\\n        return age;\\n    }\\n\\n    public void setAge(int age) {\\n        this.age = age;\\n    }\\n\\n    public String getSchoolName() {\\n        return schoolName;\\n    }\\n\\n    public void setSchoolName(String schoolName) {\\n        this.schoolName = schoolName;\\n    }\\n}\\n```\\n\\n### 继承的特点\\n\\n* **单继承**：一个类只能继承一个直接父类\\n\\n  * 如果是多继承可能会出现类的**二义性**\\n\\n    ```java\\n    class A{\\n        public void test(){\\n            System.out.println(\\\"A\\\");\\n        }\\n    }\\n    class B{\\n        public void test(){\\n            System.out.println(\\\"B\\\");\\n        }\\n    }\\n    class C extends A , B {\\n        public static void main(String[] args){\\n            C c = new C();\\n            c.test(); // 出现了类的二义性！所以Java不能多继承！！\\n        }\\n    }\\n    ```\\n\\n* **多层继承**：一个类可以间接继承多个父类\\n\\n* 一个类可以有多个子类\\n\\n* 一个类要么默认继承了`Object`类，要么间接继承了`Object`类，`Object`类是`Java`的祖宗类\\n\\n## 引用类型作为方法参数和返回值\\n\\n* 除了基本数据类型都是引用数据类型\\n* 引用类型可以作为方法的参数类型和返回值类型\\n* 引用数据类型可以在一切可以使用类型的地方使用\\n\\n```java\\npublic class TestDemo {\\n    public static void main(String[] args) {\\n        Dog jinMao = new Dog();\\n        go(jinMao);\\n\\n        System.out.println(\\\"--------------\\\");\\n        Dog dog = createDog();\\n        dog.run();\\n    }\\n\\n    // 引用类型作为方法的返回值:创建一个狗对象返回！\\n    public static Dog createDog(){\\n//        Dog taiDi = new Dog();\\n//        return taiDi;\\n         return new Dog();\\n    }\\n\\n    // 引用类型作为方法参数: 提供一个方法让狗进入比赛~~~\\n    public static void go(Dog a){\\n        System.out.println(\\\"比赛开始。。。\\\");\\n        a.run();\\n        System.out.println(\\\"比赛结束。。。\\\");\\n    }\\n}\\n\\nclass Dog{\\n    public void run(){\\n        System.out.println(\\\"🐕跑的贼溜~~~\\\");\\n    }\\n}\\n```\\n\\n## 引用类型作为成员变量的类型\\n\\n`Address.java`\\n\\n```java\\npublic class Address {\\n    private String code;\\n    private String name;\\n    private double x;\\n    private double y;\\n\\n    public Address() {\\n    }\\n\\n    public Address(String code, String name, double x, double y) {\\n        this.code = code;\\n        this.name = name;\\n        this.x = x;\\n        this.y = y;\\n    }\\n}\\n```\\n\\n`Student.java`\\n\\n```java\\npublic class Student {\\n    private String name;\\n    private int age ;\\n    // 地址信息:复合类型。\\n    // 引用类型作为成员变量的类型\\n    private Address address;\\n}\\n```\\n\\n# day2-抽象类、接口、代码块、final、单例、枚举\\n\\n## 抽象类\\n\\n### 抽象类的概述\\n\\n父类指导之类一定要完成某个功能，但是每个之类完成的情况是不一样的。子类以后也只会用自己重写的功能，那么父类的该功能就可以定义成抽象方法，子类重写调用自己的方法。所以父类的该功能就可以定义为抽象的方法。拥有冲向方法的类必须定义为抽象类。\\n\\n> **抽象方法**：没有方法体，只有方法签名，必须用`abstract`修饰的方法就是抽象方法。\\n>\\n> **抽象类**：拥有抽象方法的类必须定义成抽象类，必须用`abstract`修饰。\\n\\n```java\\nclass Wolf extends Animal{\\n    @Override\\n    public void run(){\\n        System.out.println(\\\"🐺跑的贼贼溜~~~\\\");\\n    }\\n}\\n\\n// 抽象类：拥有了抽象方法的类必须定义成抽象类。抽象类必须加上abstract修饰。\\nabstract class Animal{\\n    // 抽象方法：没有方法体，只有方法签名，必须加上abstract修饰。\\n    public abstract void run();\\n}\\n```\\n\\n### 抽象类的使用\\n\\n抽象类是为了被子类继承\\n\\n```java\\nclass Manager extends Employee{\\n    @Override\\n    public void work() {\\n        System.out.println(\\\"班主任需要管理班级~~~~\\\");\\n    }\\n\\n     @Override\\n     public void run() {\\n\\n     }\\n }\\n\\nclass Techer extends Employee{\\n    @Override\\n    public void work() {\\n        System.out.println(\\\"老师需要授课~~~~\\\");\\n    }\\n\\n    @Override\\n    public void run() {\\n\\n    }\\n}\\n\\n// 员工（老师，班主任 ） 每个员工都要工作，但是工作内容不一样。\\nabstract class Employee{\\n    public abstract void work();\\n    public abstract void run();\\n}\\n```\\n\\n> * 一个类继承了抽象类，必须重写完抽象类的全部抽象方法，否则这个类必须定义成抽象类。\\n> * 因为拥有抽象方法的类必须定义成抽象类。\\n\\n### 抽象类的特征\\n\\n抽象类的特征是：**有得有失**\\n\\n* 抽象类得到了拥有对象的能力\\n* 抽象类失去了创建对象的能力，即抽象类不能创建对象\\n\\n> **抽象类是否有构造器，是否可以创建对象**，为什么?\\n>\\n> 抽象类作为类一定**有构造器**，而且必须有构造器。**提供给子类继承后调用父类构造器**使用的。\\n>\\n> 抽象类虽然有构造器，但是抽象类**绝对不能创建对象**。抽象类中可能存在抽象方法，**抽象方法不能执行**。抽象在学术上本身意味着不能实例化。\\n\\n### 抽象类的意义\\n\\n抽象类存在的意义有两点：\\n\\n* **被继承**：抽象类就是为了被子类继承，否则抽象类将毫无意义\\n* 抽象类体现的**模板思想**：部分实现，部分抽象，可以使用抽象类设计一个模板模式\\n\\n### 抽象类设计模板模式\\n\\n**设计模式**：就是前人或者软件行业在生产实战中发现的优秀软件设计架构和思想。后来者可以直接用这些架构或者思想就可以设计出优秀的软件，提高开发效率，提高软件可扩展性和可维护性。\\n\\n模板设计模式就是一种经典的设计模式思想\\n\\n**模板设计模型的作用**：优化代码架构，提高代码的复用性，相同功能的重复代码无需重复书写。可以做到部分实现，部分抽象，抽象的东西交给使用模板的人重写实现\\n\\n```java\\nclass Teacher extends Template{\\n    @Override\\n    public String writeMain() {\\n        return \\\"\\\\t\\\\t我爸就是好，有多好，做他儿子才能懂~~~\\\";\\n    }\\n}\\n\\nclass Student extends Template{\\n    @Override\\n    public String writeMain() {\\n        return \\\"\\\\t\\\\t我爸爸很牛，我爸爸是马云，就是爽，很有钱~~~~\\\";\\n    }\\n}\\n// 1.写一个模板类：代表了作文模板。\\nabstract class Template{\\n    private String title = \\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t《我的爸爸》\\\";\\n    private String one = \\\"\\\\t\\\\t我的爸爸很牛逼，到底有多牛呢，请看如下说明：\\\";\\n    private String last = \\\"\\\\t\\\\t以上就是我的爸爸，简直太好了，下辈子还要做他儿子！\\\";\\n\\n    // 2.提供一个写作文方法\\n    public void write(){\\n        System.out.println(title);\\n        System.out.println(one);\\n        // 正文：正文部分模板是不知道怎么写的！应该把正文部分定义成抽象方法\\n        // 交给使用模板的子类重写！\\n        System.out.println(writeMain());\\n        System.out.println(last);\\n    }\\n\\n    // 正文部分定义成抽象方法，交给子类重写！！\\n    public abstract String writeMain();\\n}\\n```\\n\\n### 抽象类的注意事项\\n\\n1. 抽象类不能创建对象，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象。\\n   理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。\\n\\n2. 抽象类一定有而且是必须有构造器，是供子类创建对象时，初始化父类成员使用的。\\n   理解：子类的构造器中，有默认的super()，需要访问父类构造器。\\n\\n3. 抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。\\n\\n4. 抽象类的子类，必须重写抽象父类中所有的抽象方法，否则子类也必须定义成抽象类。\\n\\n5. 抽象类存在的意义是为了被子类继承，抽象类体现的是模板思想。\\n   理解：抽象类中已经实现的是模板中确定的成员，\\n   抽象类不确定如何实现的定义成抽象方法，交给具体的子类去实现。\\n\\n## 接口\\n\\n### 接口的概述\\n\\n接口体现的是规范思想，实现接口的子类必须重写完接口的全部抽象方法\\n\\n接口是更加彻底的抽象，在JDK 1.8之前接口中只能是抽象方法和常量\\n\\n定义格式\\n\\n```java\\n修饰符 interface 接口名称{\\n\\t// 在JDK 1.8 之前接口中只能是抽象方法和常量\\n}\\n```\\n\\n成分研究（JDK 1.8之前）\\n\\n* 接口中抽象方法默认加上`public abstract`修饰，可以省略不写\\n\\n* 常量是指有`public static final`修饰的成员变量，**有且仅能被复制一次**，值不能改变\\n\\n  常量名称规范要求全部大写，多个单词下划线连接\\n\\n  常量修饰`public static final`可以省略不写，默认会加上\\n\\n```java\\npublic interface InterfaceDemo {\\n     // 2.常量\\n     // 只有一份，在执行的过程中其值必须有，但是不能改变！\\n     // 常量是public static final修饰\\n     // 常量的名称建议字母全部大写，多个单词用“_”连接\\n     // 在接口中常量可以省略public static final不写，默认会加上该三个修饰符！\\n     //public static final String SCHOOL_NAME = \\\"黑马\\\";\\n     String SCHOOL_NAME = \\\"黑马\\\";\\n\\n\\n     // 1.抽象方法\\n     // public abstract void run();\\n     // 接口中的抽象方法默认会加上public abstract修饰,所以可以省略不写。\\n     void run();\\n     void work();\\n}\\n```\\n\\n### 接口的基本实现\\n\\n子类和父类是继承，实现类和接口是实现关系。接口是用来被类实现的，实现接口的类是实现类\\n\\n子类–>继承–>父类\\n\\n实现类–>实现–>接口\\n\\n类实现接口的格式：\\n\\n```java\\n修饰符 class 实现类名称 implements 接口1,接口2,接口3,....{\\n\\n}\\n```\\n\\n例如\\n\\n```java\\n// 实现类 实现 SportMan接口\\n// 一个类实现接口必须重写完接口中全部抽象方法，否则这个类必须定义成抽象类！！\\nclass PingPongMan implements SportMan{\\n    private String name;\\n    public PingPongMan(String name){\\n        this.name = name;\\n    }\\n    @Override\\n    public void run() {\\n        System.out.println(name+\\\"必须天天运动。正在🏃训练~~~‍\\\");\\n    }\\n\\n    @Override\\n    public void win() {\\n        System.out.println(name+\\\"参加比赛中~~~‍\\\");\\n    }\\n}\\n\\n// 定义一个接口：表示运动员的规范\\ninterface SportMan{\\n    void run(); // 跑步\\n    void win(); // 比赛得奖\\n}\\n```\\n\\n> * 接口的使命就是要求实现接口的类必须有`run()`和`win()`方法\\n> * 接口可以多实现\\n> * 一个类实现接口必须重写完接口中全部抽象方法，否则这个类必须定义成抽象类\\n\\n### 接口的多实现\\n\\n* 类与类是单继承\\n* 类和接口是多实现\\n\\n一个类如果实现了多个接口，必须重写完全部接口中的全部抽象方法，否则这个类必须定义为抽象类\\n\\n```java\\nclass PingPongMan implements SportMan , Law{\\n\\n    @Override\\n    public void rule() {\\n\\n    }\\n\\n    @Override\\n    public void run() {\\n\\n    }\\n\\n    @Override\\n    public void win() {\\n\\n    }\\n}\\n\\ninterface Law{\\n    void rule();\\n    void run();\\n}\\n\\ninterface SportMan{\\n    void run();\\n    void win();\\n}\\n```\\n\\n### 接口与接口的多继承\\n\\n* 类与类是单继承关系：一个类只能继承一个直接父类\\n* 类与接口是多继承关系：一个类可以同时实现多个接口\\n* 接口与接口是多继承关系：一个接口可以同时继承多个接口\\n\\n接口与接口的多继承，用一个接口合并多个接口\\n\\n```java\\nclass PingPongMan implements SportMan{\\n\\n    @Override\\n    public void eat() {\\n\\n    }\\n\\n    @Override\\n    public void rule() {\\n\\n    }\\n\\n    @Override\\n    public void run() {\\n\\n    }\\n\\n    @Override\\n    public void goAbroad() {\\n\\n    }\\n}\\n\\ninterface Food{\\n    void eat();\\n}\\n\\ninterface Law{\\n    void rule();\\n}\\n\\n// 接口与接口的多继承！\\ninterface SportMan extends Law , Food {\\n    void run();\\n    void goAbroad();\\n}\\n```\\n\\n### JDK1.8之后接口新增的方法\\n\\nJDK1.8开始之后接口新增的三个方法，了解即可\\n\\n* **默认方法**\\t就是之前写的实例方法\\n  * 必须用`default`修饰\\n  * 默认会加`public`修饰\\n  * 只能用接口的实现类的对象来调用\\n* **静态方法**\\n  * 可以直接加`static`修饰\\n  * 默认会加`public`修饰\\n  * 接口的静态方法只能用接口的类名称调用\\n* **私有方法**    从JDK 1.9开始才支持的\\n  * 其实就是私有的实例方法，必须加`private`修饰\\n  * 只能在**本接口**被其他的默认方法或者私有方法访问\\n\\n```java\\npublic class InterfaceDemo {\\n    public static void main(String[] args) {\\n        // 1.默认方法调用：必须用接口的实现类对象调用。\\n        PingPongMan zjk = new PingPongMan();\\n        zjk.run();\\n        zjk.work();\\n\\n        // 2.接口的静态方法必须用接口的类名本身来调用。\\n        InterfaceJDK8.inAddr();\\n    }\\n}\\n\\nclass PingPongMan implements InterfaceJDK8{\\n    @Override\\n    public void work() {\\n        System.out.println(\\\"工作中。。。\\\");\\n    }\\n}\\n\\ninterface InterfaceJDK8{\\n    // 之前的抽象方法！！\\n    void work();\\n\\n    // a.默认方法（就是之前写的普通实例方法）\\n    // 必须用接口的实现类的对象来调用。\\n    default void run(){\\n        go();\\n        System.out.println(\\\"开始跑步🏃‍~~~~\\\");\\n    }\\n\\n    // b.静态方法\\n    // 注意：接口的静态方法必须用接口的类名本身来调用\\n    static void inAddr(){\\n        System.out.println(\\\"我们在吉山区~~~~\\\");\\n    }\\n\\n    // c.私有方法（就是私有的实例方法）: JDK 1.9才开始有的。\\n    //  -- 只能在本接口中被其他的默认方法或者私有方法访问。\\n    private void go(){\\n        System.out.println(\\\"开始。。\\\");\\n    }\\n}\\n```\\n\\n### 接口的注意事项\\n\\n* 如果实现了多个接口，多个接口存在同名的**静态方法**并不会从冲突，原因是只能通过各自接口方法访问各自静态方法\\n* 当一个类，即继承一个父类，又实现若干个接口时，父类的成员方法与接口中的默认方法重名时，之类**就近**选择执行父类的成员方法\\n* 当一个类实现多个接口时，多个接口存在同名的默认方法，实现类必须重写这个方法\\n\\n## 代码块\\n\\n代码块按照有无`static`修饰可以分为：静态代码块、实例代码块\\n\\n### 静态代码块\\n\\n静态代码块：必须用`static`修饰，必须放在类下，与类一起优先加载执行\\n\\n静态代码块可以用于执行类的方法之前进行静态资源的初始化操作\\n\\n```java\\npublic class CodeDemo01 {\\n    public static String schoolName ;\\n    public static ArrayList<String> lists = new ArrayList<>();\\n\\n    // 静态代码块,属于类，与类一起加载一次!\\n    static {\\n        System.out.println(\\\"静态代码块被触发执行~~~~~~~\\\");\\n        // 在静态代码块中进行静态资源的初始化操作\\n        schoolName = \\\"黑马\\\";\\n        lists.add(\\\"3\\\");\\n        lists.add(\\\"4\\\");\\n        lists.add(\\\"5\\\");\\n    }\\n\\n    public static void main(String[] args) {\\n        System.out.println(schoolName);\\n        System.out.println(lists);\\n    }\\n}\\n```\\n\\n### 实例代码块\\n\\n* 实例代码块直接用`{}`括起来，无需`static`修饰\\n* 会和类的对象一起加载，每次创建对象的时候，实例代码块会被加载且自动执行一次\\n* 实例代码块的代码在底层实际上是提取到每个构造器中去执行的，**实例代码块属于对象**\\n* 实例代码块可以在创建对象之前进行实例资源的初始化操作\\n\\n```java\\npublic class CodeDemo02 {\\n    private String name;\\n    private ArrayList<String> lists = new ArrayList<>();\\n    // 实例代码块！属于对象！与对象一起加载!\\n    {\\n        name = \\\"小手\\\";\\n        lists.add(\\\"东\\\");\\n        lists.add(\\\"南\\\");\\n        lists.add(\\\"西\\\");\\n        lists.add(\\\"北\\\");\\n        System.out.println(\\\"实例代码块被触发执行一次~~~~~~~~\\\");\\n    }\\n\\n    public CodeDemo02(){\\n\\n    }\\n    public CodeDemo02(String name){\\n\\n    }\\n\\n    public static void main(String[] args) {\\n        CodeDemo02 c = new CodeDemo02();\\n        System.out.println(c.name);\\n        System.out.println(c.lists);\\n        new CodeDemo02();\\n        new CodeDemo02();\\n    }\\n}\\n```\\n\\n## final关键词\\n\\n`final`可以用于修饰类、方法、变量\\n\\n* `final`修饰类：类不能被继承了\\n* `final`修饰方法：方法不能被重写\\n* `final`修饰变量：变量有且仅能被赋值一次\\n  * 局部变量-只能赋值一次，不能在更改\\n  * 实例成员变量\\n    * 显示初始化，在定义成员变量的时候立马赋值\\n    * 实例代码块中赋值一次\\n    * 构造器初始化，在构造器中赋值一次\\n\\n`final`和`abstract`的关系\\n\\n互斥关系，不能同时修饰类或者同时修饰方法\\n\\n**常量**：有`public static final`修饰，名称字母全部大写，多个单词用下划线连接\\n\\n## 单例设计模式\\n\\n**单例**的意思是一个类永远只存在一个对象，不能创建多个对象\\n\\n* 开发中有很多类的对象我们只需要一个对象，例如虚拟机，任务管理器对象\\n* 对象越多越占内存，有时候只需要一个对象就可以实现业务，单例可以节约内存，提高性能\\n\\n### 饿汉单例设计模式\\n\\n通过类获取单例对象的时候，对象已经提前准备做好了\\n\\n设计步骤：\\n\\n* 定义一个类，把**构造器私有**\\n* 定义一个静态变量存储一个对象\\n* 提供一个返回单例对象的方法\\n\\n```java\\n// 饿汉单例设计模式\\nclass Singleton01{\\n    //  b.定义一个静态变量存储一个对象( 在用类获取对象的时候，对象已经提前为你创建好了。)\\n    private static final Singleton01 INSTANCE = new Singleton01();\\n    //  a.定义一个类，把构造器私有。\\n    private Singleton01(){\\n    }\\n    // c.提供一个返回单例对象的方法。\\n    public static Singleton01 getInstance(){\\n        return INSTANCE;\\n    }\\n}\\n```\\n\\n### 懒汉单例设计模式\\n\\n通过类获取单例对象的时候发现没有对象才会去创建一个对象\\n\\n设计步骤：\\n\\n* 定义一个类，把**构造器私有**\\n* 定义一个静态成员变量用于存储一个对象\\n* 提供一个返回单例对象的方法，判断对象不存在才创建一次，存在直接返回\\n\\n```java\\n// 懒汉单例设计模式\\nclass Singleton02{\\n    //  b.定义一个静态变量存储一个对象(这里不能创建对象，需要的时候才创建，这里只是一个变量用于存储对象！)\\n    public static Singleton02  instance ;\\n\\n    //   a.定义一个类，把构造器私有。\\n    private Singleton02(){\\n\\n    }\\n    //  c.提供一个返回单例对象的方法。\\n    public static Singleton02 getInstance(){\\n        if(instance == null){\\n            // 第一次来拿单例对象！需要创建一次对象，以后直接返回！！\\n            instance = new Singleton02();\\n        }\\n        return instance;\\n    }\\n}\\n```\\n\\n## 枚举\\n\\n枚举类的作用：是为了做信息的标志和信息分类\\n\\n### 枚举类基本语法\\n\\n```java\\n修饰符 enum 枚举名称{\\n\\t// 第一行罗列的必须的枚举类的对象名称\\n}\\n```\\n\\n例如\\n\\n```java\\nenum Sex{\\n    BOY , GIRL;\\n}\\n\\n// 枚举\\nenum Season {\\n    SPRING , SUMMER , AUTUMN , WINTER;\\n}\\n```\\n\\n枚举类反编译以后的源代码\\n\\n```Java\\npublic final class Season extends java.lang.Enum<Season> {\\n    public static final Season SPRING = new Season();\\n    public static final Season SUMMER = new Season();\\n    public static final Season AUTUMN = new Season();\\n    public static final Season WINTER = new Season();\\n\\n    public static Season[] values();\\n    public static Season valueOf(java.lang.String);\\n}\\n```\\n\\n### 枚举类的特点\\n\\n* 枚举类是`final`修饰的，不能被继承\\n* 枚举类默认继承了枚举类型`java.lang.Enum`\\n* 枚举类的第一行罗列的是枚举类的对象，而且是用常量存储的\\n* 所以枚举类的第一行写的都是常量名称，默认存储了枚举对象\\n* 枚举类的构造器默认是私有的\\n* 枚举类相当于是多例设计模式\\n\\n> `Java`建议做信息标志和信息分类应该使用**枚举**实现，比较优雅，可以实现可读性，而且入参受限制，不能乱输入\\n\\n# day3-多态、包、权限修饰符、内部类、object类、Date类\\n\\n## 多态==重点==\\n\\n面向对象的三大特征：封装、继承、多态\\n\\n多态的形式：\\n\\n```java\\n父类类型 变量名 = new 子类/实现类构造器;\\n变量名.方法名();\\n```\\n\\n```java\\npublic class PolymorphicDemo {\\n    public static void main(String[] args) {\\n        //  父类类型 对象名称 = new 子类构造器;\\n        Animal dlam = new Cat();\\n        dlam.run(); // 对于方法的调用：编译看左边，运行看右边。\\n        System.out.println(dlam.name); // 对于变量的调用：编译看左边，运行看左边。\\n\\n        Animal taiDi = new Dog();\\n        taiDi.run(); // 对于方法的调用：编译看左边，运行看右边。\\n        System.out.println(taiDi.name); // 对于变量的调用：编译看左边，运行看左边。\\n    }\\n}\\n\\nclass Dog extends Animal{\\n    public String name = \\\"🐶名称Dog\\\";\\n    @Override\\n    public void run(){\\n        System.out.println(\\\"🐕跑的贼快~~~~！\\\");\\n    }\\n}\\n\\nclass Cat extends Animal{\\n    public String name = \\\"🐱名称Cat\\\";\\n    @Override\\n    public void run(){\\n        System.out.println(\\\"🐱跑的飞快~~~~！\\\");\\n    }\\n}\\n\\nclass Animal{\\n    public String name = \\\"动物名称Animal\\\";\\n    public void run(){\\n        System.out.println(\\\"动物跑！\\\");\\n    }\\n}\\n```\\n\\n**多态的概念：**同一个类型的对象，执行同一个行为，在不同的状态下会表现出不同的行为特征\\n\\n**多态的识别技巧：**\\n\\n* 对于方法的调用：编译看左边，运行看右边\\n* 对于变量的调用：编译看左边，运行看左边\\n\\n**多态的使用前提**\\n\\n* 必须存在继承或者实现关系\\n* 必须存在父类类型的变量引用子类类型的对象\\n* 需要存在方法重写\\n\\n### 多态的优劣势\\n\\n优势：\\n\\n* 在多态形式下，右边对象可以实现组件化切换，业务功能也随之改变，便于扩展和维护。可以实现类与类之间的解耦\\n* 实际开发中，父类类型作为方法形式参数，传递之类对象给方法，可以传递一切子类对象进行方法的调用，更能体现出多态的扩展性与便利\\n\\n劣势：\\n\\n* **多态形式下，不能直接调用子类特有的功能**。编译看左边！！左边父类没有子类独有的功能，所以代码在编译阶段就直接报错了\\n\\n### 引用类型自动类型转换\\n\\n基本数据类型的转换\\n\\n* 小范围类型的变量或者值可以**直接赋值**给大范围类型的变量。\\n* 大范围类型的变量或者值**必须强制类型转换**给小范围类型的变量。\\n\\n所以引用类型转换的思想也一样\\n\\n子类类型的对象或者变量可以自动类型转换赋值给父类类型的变量\\n\\n> 引用类型的自动类型转换并不能解决多态的劣势\\n\\n### 引用类型的强制类型转换\\n\\n父类类型的变量或者对象必须强制类型转换成子类类型的变量，否则报错!\\n\\n```java\\n类型 变量名称 = (类型)(对象或者变量)\\n```\\n\\n注意：有**继承/实现关系**的两个类型就可以进行强制类型转换，编译阶段一定不报错！但是运行阶段可能出现：类型转换**异常** `ClassCastException`\\n\\nJava建议在进行强制类型转换之前先判断变量的真实类型，再强制类型转换!\\n\\n`变量 instanceof 类型`： 判断前面的变量是否是后面的类型或者其子类类型才会返回`true`\\n\\n```java\\npublic class PolymorphicDemo {\\n    public static void main(String[] args) {\\n        Animal a = new Wolf();\\n        a.run();\\n        // a.catchSheep(); // 报错！\\n\\n        // 1.把动物类型的变量a 转换成 真实的狼类型\\n        Wolf w = (Wolf) a;\\n        w.catchSheep();\\n\\n        // 2.多态下类型转换异常问题研究（重点）\\n        Animal a1 = new Cat();\\n        //Wolf w1 = (Wolf) a1; // 编译阶段没有报错！在运行阶段出现ClassCastException类型转换成！\\n\\n        if(a1 instanceof Cat){\\n            Cat c1 = (Cat) a1;\\n            c1.catchMouse();\\n        }else if(a1 instanceof Wolf){\\n            Wolf w1 = (Wolf) a1;\\n            w1.catchSheep();\\n        }\\n    }\\n}\\n\\nclass Wolf extends Animal{\\n    @Override\\n    public void run(){\\n        System.out.println(\\\"狼跑的飞快~~~\\\");\\n    }\\n\\n    public void catchSheep(){\\n        System.out.println(\\\"🐺抓🐏\\\");\\n    }\\n}\\n\\nclass Cat extends Animal{\\n    @Override\\n    public void run(){\\n        System.out.println(\\\"猫跑的贼快~~~\\\");\\n    }\\n\\n    public void catchMouse(){\\n        System.out.println(\\\"🐱抓🐀~~\\\");\\n    }\\n}\\n\\nclass Animal{\\n    public void run(){\\n        System.out.println(\\\"动物可以跑~~\\\");\\n    }\\n}\\n```\\n\\n### 多态接口的综合案例\\n\\n```java\\npublic class Demo {\\n    public static void main(String[] args) {\\n        // 1.买一部电脑\\n        Computer c = new Computer();\\n        // 2.买一个鼠标\\n        USB xiaoMi = new Mouse(\\\"小米鼠标\\\");\\n        c.install(xiaoMi);\\n        // 3.买一个键盘\\n        KeyBoard sfy = new KeyBoard(\\\"双飞燕键盘\\\");\\n        c.install(sfy);\\n    }\\n}\\n\\nclass Computer{\\n    // 提供一个安装USB设备的入口\\n    public void install(USB usb){\\n        usb.connect();\\n\\n        // usb.dbclick();\\n        // usb可能是鼠标，也可能键盘 .....\\n        if(usb instanceof Mouse){\\n            Mouse m = (Mouse) usb;\\n            m.dbclick();\\n        }else if(usb instanceof KeyBoard){\\n            KeyBoard k = (KeyBoard) usb;\\n            k.keyDown();\\n        }\\n\\n        usb.unconnect();\\n    }\\n}\\n\\n// 定义2个USB设备：鼠标，键盘。\\nclass Mouse implements USB{\\n    private String name;\\n\\n    public Mouse(String name) {\\n        this.name = name;\\n    }\\n\\n    // 双击\\n    public void dbclick(){\\n        System.out.println(name+\\\"双击了，老铁，6666666~~~~\\\");\\n    }\\n\\n    @Override\\n    public void connect() {\\n        System.out.println(name+\\\"成功接入了设备~~~~\\\");\\n    }\\n\\n    @Override\\n    public void unconnect() {\\n        System.out.println(name+\\\"成功拔出了设备~~~~\\\");\\n    }\\n}\\n\\nclass KeyBoard implements USB{\\n    private String name;\\n\\n    public KeyBoard(String name) {\\n        this.name = name;\\n    }\\n\\n    // 按键\\n    public void keyDown(){\\n        System.out.println(name+\\\"写下了，来了，老弟~~记得点亮小💗💗....\\\");\\n    }\\n\\n    @Override\\n    public void connect() {\\n        System.out.println(name+\\\"成功接入了设备~~~~\\\");\\n    }\\n\\n    @Override\\n    public void unconnect() {\\n        System.out.println(name+\\\"成功拔出了设备~~~~\\\");\\n    }\\n}\\n\\n// 定义USB的规范，必须要完成接入和拔出的功能！！\\ninterface USB{\\n    void connect();    // 接入\\n    void unconnect();  // 拔出\\n}\\n```\\n\\n## 内部类\\n\\n内部类是类的五大成分之一：成员变量、方法、构造器、代码块、内部类\\n\\n内部类是定义在一个类里面的类\\n\\n内部类有什么用\\n\\n* 可以提供更好的封装性\\n* 内部类有更多的权限修饰符\\n* 其封装有更多的控制\\n* 可以体现出组件的思想\\n\\n内部类的分类：\\n\\n* 静态内部类\\n* 实例内部类（成员内部类）\\n* 局部内部类\\n* **匿名内部类**\\n\\n### 静态内部类\\n\\n有`static`修饰，属于外部类本身，会加载一次\\n\\n成分研究：\\n\\n* 类有的成分它都有，静态内部类属于外部类本身，只会加载一次\\n* 所以它的特点与外部类是完全一样的，只是位置在别人里面而已。\\n\\n外部类=宿主\\n\\n内部类=寄生\\n\\n静态内部类的访问格式：\\n\\n```\\n外部类名称.内部类名称\\n```\\n\\n静态内部类创建对象的格式：\\n\\n```\\n外部类名称.内部类名称 对象名称 = new 外部类名称.内部类构造器;\\n```\\n\\n静态内部类的访问拓展：\\n\\n* 静态内部类中是否可以直接访问外部类的静态成员?可以的，外部类的静态成员只有一份，可以被共享！\\n* 静态内部类中是否可以直接访问外部类的实例成员?不可以的,外部类的是成员必须用外部类对象访问！！\\n\\n```java\\nclass Outter{\\n    public static int age1 = 12;\\n    private double salary;\\n\\n    // 静态内部类：有static修饰，属于外部类本身，只会加载一次\\n    public static class Inner{\\n        private String name;\\n        private int age;\\n        public static String schoolName = \\\"黑马\\\";\\n\\n        public void show() {\\n            System.out.println(name+\\\"-->\\\"+age+\\\"岁~\\\");\\n            System.out.println(age1);\\n            //System.out.println(salary);\\n        }\\n\\n        public Inner() {\\n        }\\n\\n        public Inner(String name, int age) {\\n            this.name = name;\\n            this.age = age;\\n        }\\n\\n        public String getName() {\\n            return name;\\n        }\\n\\n        public void setName(String name) {\\n            this.name = name;\\n        }\\n\\n        public int getAge() {\\n            return age;\\n        }\\n\\n        public void setAge(int age) {\\n            this.age = age;\\n        }\\n\\n    }\\n}\\n```\\n\\n### 实例内部类（成员内部类）\\n\\n无`static`修饰的内部类，属于外部类的每个对象的，跟着对象一起加载的\\n\\n实例内部类的成分特点：\\n\\n* 实例内部类中不能定义静态成员，其他都可以定义\\n* 可以定义常量\\n\\n实例内部类的访问格式：\\n\\n```\\n外部类名称.内部类名称\\n```\\n\\n创建对象的格式：\\n\\n```\\n外部类名称.内部类名称 对象名称 = new 外部类构造器.new 内部构造器;\\n```\\n\\n拓展：\\n\\n* 实例内部类中是否可以直接访问外部类的静态成员\\n\\n  可以的，外部类的静态成员可以被共享访问\\n\\n* 实例内部类中是否可以访问外部类的实例成员\\n\\n  可以的，实例内部类属于外部类对象，可以直接访问当前外部类对象的实例成员\\n\\n> 实例内部类属于外部类对象，需要用外部类对象一起加载，**实例内部类可以访问外部类的全部成员**\\n\\n```java\\npublic class InnerClass {\\n    public static void main(String[] args) {\\n        // 实例内部类属于外部类对象。实例内部类的宿主是外部类对象！！\\n        Outter.Inner in = new Outter().new Inner();\\n        in.show();\\n    }\\n}\\n// 外部类\\nclass Outter{\\n    public static int age = 1;\\n    private double salary;\\n\\n    // 实例内部类：无static修饰，属于外部类的对象\\n    public class Inner{\\n        private String name ;\\n\\n        public static final String schoolName = \\\"黑马\\\";\\n        // 不能在实例内部类中定义静态成员！！！\\n//      public static String schoolName = \\\"黑马\\\";\\n//      public static void test(){\\n//\\n//      }\\n\\n        // 实例方法\\n        public void show(){\\n            System.out.println(name+\\\"名称！\\\");\\n            System.out.println(age);\\n            System.out.println(salary);\\n        }\\n\\n        public String getName() {\\n            return name;\\n        }\\n\\n        public void setName(String name) {\\n            this.name = name;\\n        }\\n    }\\n}\\n```\\n\\n### 局部内部类\\n\\n定义在方法中，在构造器中，代码块中，for循环中定义的内部类，就是局部内部类。\\n\\n局部内部类中的成分特点：\\n\\n* 只能定义实例成员，不能定义静态成员\\n* 可以定义常量的\\n\\n```java\\npublic class InnerClass {\\n\\n    static {\\n        abstract class A{\\n\\n        }\\n    }\\n\\n    public static void main(String[] args) {\\n        class A{\\n            private String name;\\n\\n            public void test(){\\n            }\\n            public String getName() {\\n                return name;\\n            }\\n\\n            public void setName(String name) {\\n                this.name = name;\\n            }\\n        }\\n        A a = new A();\\n        a.test();\\n    }\\n\\n    public static void test(){\\n       class Animal{\\n\\n       }\\n\\n       class Cat extends Animal{\\n\\n       }\\n    }\\n}\\n```\\n\\n### 匿名内部类\\n\\n就是一个没有名字的局部内部类\\n\\n匿名内部类目的是为了：简化代码，也是开发中常用的形式\\n\\n匿名内部类的格式：\\n\\n```java\\nnew 类名|抽象类|接口(形参){\\n方法重写。\\n}\\n```\\n\\n 匿名内部类的特点：\\n\\n* 匿名内部类是一个没有名字的内部类\\n* 匿名内部类一旦写出来，就会立即创建一个匿名内部类的对象返回\\n* 匿名内部类的对象的类型相当于是当前`new`的那个的类型的子类类型。\\n\\n```java\\npublic class Anonymity {\\n    public static void main(String[] args) {\\n        Animal a = new Animal(){\\n            @Override\\n            public void run() {\\n                System.out.println(\\\"猫跑的贼溜~~\\\");\\n            }\\n        };\\n        a.run();\\n        a.go();\\n\\n        Animal a1 = new Animal() {\\n            @Override\\n            public void run() {\\n                System.out.println(\\\"狗跑的贼快~~~\\\");\\n            }\\n        };\\n        a1.run();\\n        a.go();\\n\\n\\n    }\\n}\\nabstract class Animal{\\n    public abstract void run();\\n\\n    public void go(){\\n        System.out.println(\\\"开始go~~~\\\");\\n    }\\n}\\n```\\n\\n匿名内部类的使用形式\\n\\n```java\\npublic class Anonymity02 {\\n    public static void main(String[] args) {\\n        Swim bozai = new Swim() {\\n            @Override\\n            public void swimming() {\\n                System.out.println(\\\"老师🏊‍的贼溜~~~~\\\");\\n            }\\n        };\\n        go(bozai);\\n\\n        Swim boniu = new Swim() {\\n            @Override\\n            public void swimming() {\\n                System.out.println(\\\"波妞学生快乐的狗爬式~~~\\\");\\n            }\\n        };\\n        go(boniu);\\n\\n        go(new Swim() {\\n            @Override\\n            public void swimming() {\\n                System.out.println(\\\"波妞2学生快乐的狗爬式~~~\\\");\\n            }\\n        });\\n    }\\n\\n    // 提供一个方法让全部角色进入比赛\\n    public static void go(Swim s){\\n        System.out.println(\\\"开始。。。。\\\");\\n        s.swimming();\\n        System.out.println(\\\"结束。。。。\\\");\\n    }\\n}\\n\\ninterface Swim{\\n    void swimming();\\n}\\n```\\n\\n## 包和权限修饰符\\n\\n## 包\\n\\n* 分门别类的管理各种不同的技术。\\n* 企业的代码必须用包区分。便于管理技术，扩展技术，阅读技术。\\n\\n定义包的格式：\\n\\n`package 包名;`\\n\\n必须放在类名的最上面\\n一般工具已经帮我们做好了\\n\\n包名的命名规范：\\n\\n* 一般是公司域名的倒写+技术名称：\\n* http://www.itheima.com => com.itheima.技术名称\\n* 包名建议全部用英文，多个单词用”.“连接，必须是合法标识符，不能用关键字\\n\\n注意\\n\\n* 相同包下的类可以直接访问\\n* 不同包下的类必须导包,才可以使用\\n* 导包格式：`import 包名.类名;`\\n\\n### 权限修饰符\\n\\n权限修饰符：有四种（`private `-> `default`-> `protected `- > `public` ）\\n\\n可以修饰成员变量，修饰方法，修饰构造器，内部类，不同修饰符修饰的成员能够被访问的权限将受到限制!\\n\\n![image-20220525204748483](http://47.108.219.199:81/articles/image-20220525204748483.png)\\n\\n## Object类\\n\\n`Object`类是Java中的祖宗类\\n\\n* 一个类要么默认继承了`Object`类，要么间接继承了`Object`类\\n* `Object`类的方法是一切子类都可以直接使用的，所以我们要学习`Object`类的方法。\\n\\n`Object`类的常用方法：\\n\\n* `public String toString():`\\n\\n  * 默认是返回当前对象在堆内存中的地址信息\\n\\n    `com.itheima._12Object类的详细使用.Student@735b478`\\n\\n  * 默认的地址信息格式：类的全限名@内存地址\\n\\n  * 直接输出对象名称，默认会调用toString()方法，所以直接输出对象可以省略toString()不写。\\n\\n  * 实际开发中直接输出对象，输出对象的地址其实是没有意义的。\\n\\n  * 所以`toString`方法存在的意义是为了被子类重写，以便能够返回对象的数据内容输出。因为实际开发中我们输出对象更多的时候是希望看到对象的数据内容信息\\n\\n> * 开发中如果希望输出对象看到对象的内容，只需要重写`toString()`方法即可\\n> * 所以`toString`方法存在的意义是为了被子类重写\\n\\n* `public boolean equals(Object o)`\\n  * 默认是比较两个对象的地址是否相同。相同返回`true`，反之\\n  * 直接比较两个对象的地址是否相同完全可以用`==`替代`equals`，所以`equals`存在的意义是为了被子类重写，以便程序员可以自己来定制比较规则\\n\\n只要两个对象的内容一样，我们就认为他们是相等的。\\n\\n> `equals`存在的意义是为了被子类重写，以便程序员自己来定制比较规则\\n\\n```java\\n@Override\\n    public boolean equals(Object o) {\\n        // 1.判断是否自己和自己比较，如果是同一个对象比较直接返回true\\n        if (this == o) return true;\\n        // 2.判断被比较者是否为null ,以及是否是学生类型。\\n        if (o == null || this.getClass() != o.getClass()) return false;\\n        // 3.o一定是学生类型，强制转换成学生，开始比较内容！\\n        Student student = (Student) o;\\n        return age == student.age &&\\n                sex == student.sex &&\\n                Objects.equals(name, student.name);\\n    }\\n\\n    // 重写Object的toString()以便返回对象的内容数据\\n\\n    @Override\\n    public String toString() {\\n        return \\\"Student{\\\" +\\n                \\\"name=\'\\\" + name + \'\\\\\'\' +\\n                \\\", age=\\\" + age +\\n                \\\", sex=\\\" + sex +\\n                \'}\';\\n    }\\n```\\n\\n> idea可以自动生成`equals()`和`toString()`，直接按下快捷键`ALT+INSERT`，选择`generate`即可\\n\\n## Objects类\\n\\n* `Objects`类与`Object`还是继承关系\\n* `Objects`类是从JDK 1.7开始之后才有的。\\n\\n`Objects`的方法：\\n\\n* `public static boolean equals(Object a, Object b)`\\n\\n  * 比较两个对象的\\n\\n  * 底层进行非空判断，从而可以**避免空指针异常**。更安全，推荐使用\\n\\n    ```java\\n    public static boolean equals(Object a, Object b) {\\n    \\treturn a == b || a != null && a.equals(b);\\n    }\\n    ```\\n\\n  * `public static boolean isNull(Object obj)`\\n\\n    判断变量是否为`null`,为`null`返回`true`, 反之`false`\\n\\n## Date类\\n\\nJava是面向对象的，会用一个类代表一个事物\\n\\n`Date`类在Java中代表的是系统当前此刻日期时间对象。\\n\\n`Date`类：\\n\\n包：`java.util.Date`\\n\\n* 构造器：\\n  `public Date()` 创建当前系统的此刻日期时间对象。\\n  `public Date(long time)`\\n\\n```java\\nimport java.util.Date;\\n\\npublic class DateDemo01 {\\n    public static void main(String[] args) {\\n        // a.创建一个日期对象代表了系统此刻日期时间对象\\n        Date d = new Date();\\n        System.out.println(d);\\n\\n        // b.拿当前日期对象的时间毫秒值\\n        long time = d.getTime();\\n        System.out.println(time);\\n    }\\n}\\n```\\n\\n* 方法\\n\\n  `public long getTime()`: 返回自 1970 年 1 月 1 日 00:00:00 GMT 以来走过的总的毫秒数。\\n\\n时间记录的两种方式：\\n`Date`日期对象。\\n时间毫秒值：从1970-01-01 00:00:00开始走到此刻的总的毫秒值。 1s = 1000ms\\n\\n小结：\\n\\n* `Date`可以代表系统当前此刻日期时间对象。\\n* 时间记录的两种方式：\\n  * `Date`日期对象。\\n  * 时间毫秒值：从1970-01-01 00:00:00开始走到此刻的总的毫秒值。 1s = 1000ms\\n\\n```java\\nimport java.util.Date;\\n\\npublic class DateDemo02 {\\n    public static void main(String[] args) {\\n        // 1.拿到此刻日期时间对象的毫秒值\\n        long startTime = new Date().getTime();\\n        for(int i = 1; i < 1000000 ; i++ ){\\n            System.out.println(\\\"输出：\\\"+i);\\n        }\\n        // 2.拿到此刻日期时间对象的毫秒值\\n        long endTime = new Date().getTime();\\n        System.out.println( (endTime - startTime) / 1000.0 +\\\"s\\\");\\n    }\\n}\\n```\\n\\n`Date`类的有参数构造器的使用。\\n\\n构造器：\\n\\n* `public Date()`:创建当前系统的此刻日期时间对象。\\n* `public Date(long time)`:把时间毫秒值转换成日期对象。\\n\\n流程\\n\\n* `Date`日期对象 ->` getTime()` -> 时间毫秒值\\n* 时间毫秒值 ->` new Date(时间毫秒值)` -> `Date`日期对象\\n\\n# day4-常用API、正则表达式、泛型、Collection集合API\\n\\n## 第一章 DateFormat类\\n\\n简单日期格式化类`SimpleDateFormat`可以把日期对象格式化成我们喜欢的时间形式\\n\\n```java\\n// 1.得到此刻日期对象\\nDate d = new Date();\\nSystem.out.println(d);\\n\\n// 2.创建一个简单日期格式化对象负责格式化日期对象\\n// 注意：参数是之间的格式。\\nSimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy年MM月dd日 HH:mm:ss EEE a\\\");\\n\\n// 3.开始调用方法格式化时间得到格式化的字符串时间形式\\nString rs = sdf.format(d);\\nSystem.out.println(rs);\\n```\\n\\n也可以直接格式化时间毫秒值\\n\\n```java\\n// 1.问121s后的时间是多少。格式化输出。\\n// a.得到此刻日期对象\\nDate date = new Date();\\nSystem.out.println(date);\\n\\n// b.得到当前时间的时间毫秒值\\nlong time = date.getTime();\\ntime += 121 * 1000;\\n\\n// c.格式化时间毫秒值\\nSimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy年MM月dd日 HH:mm:ss EEE a\\\");\\nSystem.out.println(sdf.format(time));\\n```\\n\\n简单日期格式化类`SimpleDateFormat`解析字符串时间成为日期对象\\n\\n```java\\n// a.定义一个字符串时间\\nString date = \\\"2019-11-04 09:30:30\\\";\\n\\n// b.把字符串的时间解析成Date日期对象 。（重点）\\n// 1.创建一个简单日期格式化对象负责解析字符串的时间成为日期对象\\n// 注意：参数必须与被解析的时间的格式完全一致，否则执行报错！！\\nSimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\");\\n// 2.开始解析成日期对象\\nDate newDate = sdf.parse(date);\\n\\n// c.得到日期对象的时间毫秒值 + 往后走 1天15小时，30分29s\\nlong time = newDate.getTime() + (24L *60*60 + 15*60*60 + 30*60 + 29) * 1000;\\n\\n// d.把时间毫秒值格式化成喜欢的字符串的时间形式!\\nSystem.out.println(sdf.format(time));\\n```\\n\\n## 第二章 Calendar类\\n\\n`Calendar`代表了系统此刻日期对应的日历对象。\\n\\n`Calendar`是一个抽象类，不能直接创建对象。\\n\\n`Calendar`日历类创建日历对象的语法：\\n\\n```java\\nCalendar rightNow = Calendar.getInstance();\\n```\\n\\n`Calendar`的方法：\\n\\n* `public static Calendar getInstance()`: 返回一个日历类的对象。\\n* `public int get(int field)`：取日期中的某个字段信息。\\n* `public void set(int field,int value)`：修改日历的某个字段信息。\\n* `public void add(int field,int amount)`：为某个字段增加/减少指定的值\\n* `public final Date getTime()`: 拿到此刻日期对象。\\n* `public long getTimeInMillis()`: 拿到此刻时间毫秒值\\n\\n```java\\n// 1.通过调用日历类的静态方法getInstance得到一个当前此刻日期对象对应的日历对象。\\nCalendar rightNow = Calendar.getInstance();\\nSystem.out.println(rightNow);\\n\\n// 2.获取年：\\nint year = rightNow.get(Calendar.YEAR);\\nSystem.out.println(year);\\n\\nint mm = rightNow.get(Calendar.MONTH) + 1;\\nSystem.out.println(mm);\\n\\n// 3.一年中的第几天: 308\\nint days = rightNow.get(Calendar.DAY_OF_YEAR);\\nSystem.out.println(days);\\n\\n// 4.修改日历的信息\\n//rightNow.set(Calendar.YEAR , 2099);\\n//System.out.println(rightNow.get(Calendar.YEAR));\\n\\n// 5.日历可以得到此刻日期对象。\\nDate d = rightNow.getTime();\\nSystem.out.println(d);\\n\\n// 6.此刻时间毫秒值\\nlong time = rightNow.getTimeInMillis();\\nSystem.out.println(time);\\n\\n// 7.请问701天  15小时后是哪个日期\\n// 让日历的一年中的第几天往后走 701天！\\nrightNow.add(Calendar.DAY_OF_YEAR , 701);\\nrightNow.add(Calendar.HOUR , 15);\\nlong time1 = rightNow.getTimeInMillis();\\nSimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy年MM月dd日 HH:mm:ss EEE a\\\");\\nSystem.out.println(sdf.format(time1));\\n```\\n\\n## 第三章 Math类\\n\\n* `Math`用于做数学运算\\n* `Math`类中的方法全部是静态方法，直接用类名调用即可。\\n\\n常用方法\\n\\n- `public static int abs(int a)`                  获取参数a的绝对值：\\n- `public static double ceil(double a) `          向上取整\\n- `public static double floor(double a)`     向下取整\\n- `public static double pow(double a, double b) ` 获取a的b次幂        \\n- `public static long round(double a)`         四舍五入取整\\n\\n## 第四章 System类\\n\\n`System`系统类的使用，`System`代表当前系统\\n\\n静态方法：\\n\\n* `public static void exit(int status)`:终止JVM虚拟机，非0是异常终止。\\n* `public static long currentTimeMillis()`:获取当前系统此刻时间毫秒值。\\n* 可以做数组的拷贝。\\n  `arraycopy(Object var0, int var1, Object var2, int var3, int var4);`\\n     * 参数一：原数组\\n     * 参数二：从原数组的哪个位置开始赋值。\\n     * 参数三：目标数组\\n     * 参数四：赋值到目标数组的哪个位置\\n     * 参数五：赋值几个。\\n\\n## 第五章 BigDecimal类\\n\\n`BigDecimal`大数据类\\n\\n* 浮点型运算的时候直接+  * / 可能会出现数据失真（精度问题）\\n* `BigDecimal`可以解决浮点型运算数据失真的问题\\n\\n包：`java.math.`\\n创建对象的方式（最好的方式：）\\n      `public static BigDecimal valueOf(double val)` :包装浮点数成为大数据对象。\\n方法声明\\n\\n- `public BigDecimal add(BigDecimal value)`       加法运算\\n- `public BigDecimal subtract(BigDecimal value)`  减法运算 \\n- `public BigDecimal multiply(BigDecimal value) ` 乘法运算 \\n- `public BigDecimal divide(BigDecimal value)`    除法运算\\n- `public double doubleValue()`     把`BigDecimal`转换成`double`类型。\\n\\n```java\\ndouble a = 0.1 ;\\ndouble b = 0.2 ;\\n// 1.把浮点数转换成大数据对象运算\\nBigDecimal a1 = BigDecimal.valueOf(a);\\nBigDecimal b1 = BigDecimal.valueOf(b);\\n//BigDecimal c1 = a1.add(b1);  // 加法\\nBigDecimal c1 = a1.divide(b1); // 除法\\nSystem.out.println(c1);\\n\\n// 结果可能需要继续使用!!!\\n// BigDecimal只是解决精度问题的手段，double数据才是我们的目的！！\\ndouble rs = c1.doubleValue();\\nSystem.out.println(rs);\\n```\\n\\n## 第六章 包装类\\n\\n`Java`认为一切皆对象。引用数据类型就是对象了\\n\\n但是在`Java中8`基本数据类型不是对象，只是表示一种数据的类型形式,这8种数据类型显得很突兀\\n\\n`Java`为了一切皆对象的思想统一，把8种基本数据类型转换成对应的类，这个类称为基本数据类型的包装类。\\n\\n基本数据类型                    包装类（引用数据类型）\\n     byte                      \\t\\t\\tByte\\n     short                    \\t\\t\\t Short\\n     int                    \\t\\t\\t   Integer(特殊)\\n     long                    \\t\\t\\t  Long\\n\\n​     float                  \\t  \\t\\t Float\\n​     double                   \\t\\t Double\\n​     char                   \\t\\t   Character(特殊)\\n​     boolean                 \\t\\t\\t  Boolean\\n\\n* 自动装箱：可以直接把基本数据类型的值或者变量赋值给包装类\\n* 自动拆箱：可以把包装类的变量直接赋值给基本数据类型\\n\\n```java\\nint a = 12 ;\\nInteger a1 = 12 ;  // 自动装箱\\nInteger a2 = a ;   // 自动装箱\\n\\ndouble b = 99.9;\\nDouble b1 = 99.9; // 自动装箱\\nDouble b2 = b ;   // 自动装箱\\n\\nInteger c = 100 ;\\nint c1 = c ;      // 自动拆箱\\n\\nint d = 12;\\nInteger d1 = null; // 引用数据类型的默认值可以为null\\nInteger d2 = 0;\\n\\nSystem.out.println(\\\"-----------------\\\");\\nInteger it = Integer.valueOf(12);  // 手工装箱！\\n// Integer it1 = new Integer(12); // 手工装箱！\\nInteger it2 = 12;\\n\\n\\nInteger it3 = 111 ;\\nint it33 = it3.intValue(); // 手工拆箱\\nint it333 = it3;\\n```\\n\\n* Java为包装类做了一些特殊功能，以便程序员使用\\n* 包装类作为类首先拥有了`Object`类的方法\\n* 包装类作为引用类型的变量可以存储`null`值\\n\\n* 可以把基本数据类型的值转换成字符串类型的值。（没啥用）\\n  * 调用`toString()`方法\\n  * 调用`Integer.toString`(基本数据类型的值)得到字符串\\n  * 直接把基本数据类型+空字符串就得到了字符串\\n* 把字符串类型的数值转换成对应的基本数据类型的值。（真的很有用）\\n  * `Xxx.parseXxx(\\\"字符串类型的数值\\\")`\\n  * `Xxx.valueOf(\\\"字符串类型的数值\\\")` 推荐使用\\n\\n## 第七章 正则表达式\\n\\n是一些特殊字符组成的校验规则，可以校验信息的正确性，校验邮箱是否合法，例如电话号码，金额等。\\n\\n字符类\\n     \\n\\n```\\n[abc] a、b 或 c（简单类）\\n[^abc] 任何字符，除了 a、b 或 c（否定）\\n[a-zA-Z] a 到 z 或 A 到 Z，两头的字母包括在内（范围）\\n[a-d[m-p]] a 到 d 或 m 到 p：[a-dm-p]（并集）\\n[a-z&&[def23]] d、e 或 f（交集）\\n[a-z&&[^bc]] a 到 z，除了 b 和 c：[ad-z]（减去）\\n[a-z&&[^m-p]] a 到 z，而非 m 到 p：[a-lq-z]（减去）\\n```\\n\\n 预定义字符类\\n\\n```\\n. 任何字符\\n\\\\d 数字：[0-9]\\n\\\\D 非数字： [^0-9]\\n\\\\s 空白字符：[ \\\\t\\\\n\\\\x0B\\\\f\\\\r]\\n\\\\S 非空白字符：[^\\\\s]\\n\\\\w 单词字符：[a-zA-Z_0-9]\\n\\\\W 非单词字符：[^\\\\w]\\n```\\n\\n以上正则匹配只能校验单个字符。\\n\\nGreedy 数量词\\n\\n```\\nX? X，一次或一次也没有\\nX* X，零次或多次\\nX+ X，一次或多次\\nX{n} X，恰好 n 次\\nX{n,} X，至少 n 次\\nX{n,m} X，至少 n 次，但是不超过 m 次\\n```\\n\\n```java\\nprivate static void checkPhone() {\\n        Scanner sc = new Scanner(System.in);\\n        System.out.print(\\\"请您输入电话号码：\\\");\\n        String phone = sc.nextLine();\\n        if(phone.matches(\\\"0\\\\\\\\d{2,5}-?\\\\\\\\d{5,15}\\\")){\\n            System.out.println(\\\"电话号码合法了！\\\");\\n        }else{\\n            System.err.println(\\\"电话号码不正确！\\\");\\n        }\\n    }\\n\\n\\n    private static void checkTel() {\\n        Scanner sc = new Scanner(System.in);\\n        System.out.print(\\\"请您输入手机号码：\\\");\\n        String tel = sc.nextLine();\\n        if(tel.matches(\\\"1[3-9]\\\\\\\\d{9}\\\")){\\n            System.out.println(\\\"手机号码合法了！\\\");\\n        }else{\\n            System.err.println(\\\"手机号码不正确！\\\");\\n        }\\n    }\\n\\n    // 校验邮箱\\n    public static void checkEmail(){\\n        Scanner sc = new Scanner(System.in);\\n        System.out.print(\\\"请您输入邮箱：\\\");\\n        String email = sc.nextLine();\\n        // 3232323@qq.com\\n        // dlei082@163.com\\n        // dlei@pic.com.cn\\n        if(email.matches(\\\"\\\\\\\\w{1,}@\\\\\\\\w{2,10}(\\\\\\\\.\\\\\\\\w{2,10}){1,2}\\\")){\\n            System.out.println(\\\"邮箱合法了！\\\");\\n        }else{\\n            System.err.println(\\\"邮箱格式不正确！\\\");\\n        }\\n    }\\n```\\n\\n`split`可以结合正则表达式分割\\n\\n```java\\n// 1.split的基础用法\\nString names = \\\"贾乃亮,王宝强,陈羽凡\\\";\\n// 以“，”分割成字符串数组\\nString[] nameArrs = names.split(\\\",\\\");\\nfor(int i = 0 ; i < nameArrs.length ; i++ ){\\n    String name = nameArrs[i];\\n    System.out.println(name);\\n}\\n\\nSystem.out.println(\\\"----------------------\\\");\\n// 2.split集合正则表达式做分割\\nString names1 = \\\"贾乃亮lv434fda324王宝强87632fad2342423陈羽凡\\\";\\n// 以匹配正则表达式的内容为分割点分割成字符串数组\\nString[] nameArrs1 = names1.split(\\\"\\\\\\\\w+\\\");\\nfor(int i = 0 ; i < nameArrs1.length ; i++ ){\\n    String name = nameArrs1[i];\\n    System.out.println(name);\\n}\\nSystem.out.println(\\\"----------------------\\\");\\n// 3. public String replaceAll(String regex,String newStr)\\nString names2 = \\\"贾乃亮lv434fda324王宝强87632fad2342423陈羽凡\\\";\\n// 使用正则表达式定位出内容，替换成/\\nSystem.out.println(names2.replaceAll(\\\"\\\\\\\\w+\\\" , \\\"/\\\"));\\n\\nString names3 = \\\"贾乃亮,王宝强,羽凡\\\";\\nSystem.out.println(names3.replaceAll(\\\",\\\",\\\"-\\\"));\\n```\\n\\n正则表达式爬取信息中的内容\\n\\n可以通过`|`将正则表达式连接起来，是**或**的关系\\n\\n```java\\nString rs = \\\"来黑马程序学习Java,电话020-43422424，或者联系邮箱\\\" +\\n    \\\"itcast@itcast.cn,电话18762832633，0203232323\\\" +\\n    \\\"邮箱bozai@itcast.cn，400-100-3233 ，4001003232\\\";\\n// 需求：从上面的内容中爬取出 电话号码和邮箱。\\n// 1.定义爬取规则\\nString regex = \\\"(\\\\\\\\w{1,}@\\\\\\\\w{2,10}(\\\\\\\\.\\\\\\\\w{2,10}){1,2})|(1[3-9]\\\\\\\\d{9})|(0\\\\\\\\d{2,5}-?\\\\\\\\d{5,15})|400-?\\\\\\\\d{3,8}-?\\\\\\\\d{3,8}\\\";\\n// 2.编译正则表达式成为一个匹配规则对象\\nPattern pattern = Pattern.compile(regex);\\n// 3.通过匹配规则对象得到一个匹配数据内容的匹配器对象\\nMatcher matcher = pattern.matcher(rs);\\n// 4.通过匹配器去内容中爬取出信息\\nwhile(matcher.find()){\\n    System.out.println(matcher.group());\\n}\\n```\\n\\n## 第八章 泛型\\n\\n### 泛型概念\\n\\n什么是泛型\\n\\n* 泛型就是一个标签：`<数据类型>`\\n* 泛型可以在编译阶段约束只能操作某种数据类型\\n\\n> * JDK 1.7开始之后，泛型后面的申明可以省略不写\\n> * **泛型和集合都只能支持引用数据类型，不支持基本数据类型**\\n\\n### 泛型的好处\\n\\n* 泛型在编译阶段约束了操作的数据类型，从而不会出现类型转换异常\\n* 体现的是Java的严谨性和规范性，数据类型,经常需要进行统一\\n\\n### 自定义泛型\\n\\n使用了泛型定义的类就是泛型类\\n\\n```java\\nclass MyArrayList<E>{\\n\\n    private ArrayList lists = new ArrayList();\\n\\n    public void add(E e){\\n        lists.add(e);\\n    }\\n\\n    public void remove(E e){\\n        lists.remove(e);\\n    }\\n    @Override\\n    public String toString() {\\n        return lists.toString();\\n    }\\n}\\n```\\n\\n### 自定义泛型方法\\n\\n定义了泛型的方法就是泛型方法\\n\\n泛型方法定义格式\\n\\n```java\\n修饰符 <泛型变量> 返回值类型 方法名称(形参列表){\\n\\n}\\n```\\n\\n一个泛型方法的例子\\n\\n```java\\npublic static <T> String arrToString(T[] nums){\\n    StringBuilder sb = new StringBuilder();\\n    sb.append(\\\"[\\\");\\n    if(nums!=null && nums.length > 0){\\n        for(int i = 0 ; i < nums.length ; i++ ){\\n            T ele = nums[i];\\n            sb.append(i == nums.length-1 ? ele : ele+\\\", \\\");\\n        }\\n    }\\n    sb.append(\\\"]\\\");\\n    return sb.toString();\\n}\\n```\\n\\n> 泛型方法是一个通用技术\\n\\n### 泛型接口\\n\\n使用了泛型定义的接口就是泛型接口\\n\\n定义格式\\n\\n```java\\n修饰符 interface 接口名称<泛型变量>{\\n\\n}\\n```\\n\\n例如\\n\\n```java\\npublic interface Data<E> {\\n    void add(E stu);\\n    void delete(E stu);\\n    void update(E stu);\\n    E query(int id);\\n}\\n```\\n\\n> 泛型接口的核心思想，在实现接口的时候传入真实的数据类型\\n>\\n> 这样重写的方法就是对该数据类型进行操作\\n\\n### 泛型的通配符\\n\\n通配符：`?`\\n\\n* `?`可以用在**使用泛型**的时候代表一切类型\\n* `E , T , K , V`是在**定义泛型**的时候使用代表一切类型\\n\\n泛型的上下限：\\n\\n* `? extends Car` : 那么`?`必须是`Car`或者其子类。(泛型的上限)\\n* `? super  Car` :那么`?`必须是`Car`或者其父类。（泛型的下限。不是很常见）\\n\\n```java\\npublic class GenericDemo {\\n    public static void main(String[] args) {\\n        ArrayList<BMW> bmws = new ArrayList<>();\\n        bmws.add(new BMW());\\n        bmws.add(new BMW());\\n        bmws.add(new BMW());\\n        run(bmws);\\n\\n        ArrayList<BENZ> benzs = new ArrayList<>();\\n        benzs.add(new BENZ());\\n        benzs.add(new BENZ());\\n        benzs.add(new BENZ());\\n        run(benzs);\\n\\n        ArrayList<Dog> dogs = new ArrayList<>();\\n        dogs.add(new Dog());\\n        dogs.add(new Dog());\\n        dogs.add(new Dog());\\n        // run(dogs); // 就进不来了！\\n    }\\n\\n    // 定义一个方法，可以让很多汽车一起进入参加比赛\\n    public static void run(ArrayList<? extends Car> cars){\\n\\n    }\\n}\\n\\nclass Car{\\n}\\nclass BMW extends Car{\\n\\n}\\nclass BENZ extends Car{\\n\\n}\\nclass Dog{\\n\\n}\\n```\\n\\n## 第九章 Collection集合\\n\\n### 集合概述\\n\\n什么是集合\\n\\n- 集合是一个大小可变的容器\\n- 容器中的每个数据称为一个元素。数据==元素\\n- 集合的特点是：类型可以不确定，大小不固定。集合有很多种，不同的集合特点和使用场景不同\\n- 数组：类型和长度一旦定义出来就都固定了\\n\\n集合用处\\n\\n- 在开发中，很多时候元素的个数是不确定的。\\n- 而且经常要进行元素的增删该查操作，集合都是非常合适的。\\n- 开发中集合用的更多\\n\\n> - Java中集合的代表是：`Collection`\\n> - `Collection`集合是Java中集合的祖宗类\\n> - 学习Collection集合的功能，那么一切集合都可以用这些功能\\n\\n集合体系\\n\\n```\\n\\t\\t\\t\\t\\t\\t\\t\\tCollection<E>(接口)\\n                      /                                \\\\\\n                 Set<E>(接口)                            List<E>(接口)\\n                /               \\\\                       /                \\\\\\n         HashSet<E>(实现类)  TreeSet<>(实现类)     ArrayList<E>(实现类)  LinekdList<>(实现类)\\n             /\\n         LinkedHashSet<>(实现类)\\n```\\n\\n集合的特点：\\n\\n* `Set`系列集合：添加的元素是无序，不重复，无索引的\\n  * `HashSet`: 添加的元素是无序，不重复，无索引的\\n  * `LinkedHashSet`: 添加的元素是有序，不重复，无索引的\\n  * `TreeSet`: 不重复，无索引，按照大小默认升序排序\\n* `List`系列集合：添加的元素是有序，可重复，有索引\\n  * `ArrayList`：添加的元素是有序，可重复，有索引\\n  * `LinekdList`：添加的元素是有序，可重复，有索引\\n\\n```java\\n// 多态写法：\\n//  HashSet:添加的元素是无序，不重复，无索引的。\\nCollection<String> sets = new HashSet<>();\\nsets.add(\\\"MyBatis\\\");\\nsets.add(\\\"Java\\\");\\nsets.add(\\\"Java\\\");\\nsets.add(\\\"Spring\\\");\\nsets.add(\\\"MySQL\\\");\\nsets.add(\\\"MySQL\\\");\\n// [Java, MySQL, MyBatis, Spring]\\nSystem.out.println(sets);\\n\\n// ArrayList:添加的元素是有序，可重复，有索引。\\nCollection<String> lists = new ArrayList<>();\\nlists.add(\\\"MyBatis\\\");\\nlists.add(\\\"Java\\\");\\nlists.add(\\\"Java\\\");\\nlists.add(\\\"Spring\\\");\\nlists.add(\\\"MySQL\\\");\\nlists.add(\\\"MySQL\\\");\\n// [MyBatis, Java, Java, Spring, MySQL, MySQL]\\nSystem.out.println(lists);\\n```\\n\\n### 集合常用API\\n\\n`Collection`是集合的祖宗类，它的功能是全部集合都可以继承使用的，所以要学习它。\\nCollection API如下：\\n\\n- `public boolean add(E e)`：  把给定的对象添加到当前集合中 。\\n- `public void clear()` :清空集合中所有的元素。\\n- `public boolean remove(E e)`: 把给定的对象在当前集合中删除。\\n- `public boolean contains(Object obj)`: 判断当前集合中是否包含给定的对象。\\n- `public boolean isEmpty()`: 判断当前集合是否为空。\\n- `public int size()`: 返回集合中元素的个数。\\n- `public Object[] toArray()`: 把集合中的元素，存储到数组中\\n\\n```java\\n// HashSet:添加的元素是无序，不重复，无索引。\\nCollection<String> sets = new HashSet<>();\\n// 1.添加元素，添加成功返回true.\\nSystem.out.println(sets.add(\\\"贾乃亮\\\")); // true\\nSystem.out.println(sets.add(\\\"贾乃亮\\\")); // false\\nSystem.out.println(sets.add(\\\"王宝强\\\")); // true\\nsets.add(\\\"陈羽凡\\\");\\nSystem.out.println(sets); // 集合重写了toString()方法，默认打印出内容信息\\n// 2.清空集合的元素。\\n//sets.clear();\\n//System.out.println(sets);\\n\\n// 3.判断集合是否为空 是空返回true 反之\\nSystem.out.println(sets.isEmpty()); // false\\n\\n// 4.获取集合的大小\\nSystem.out.println(sets.size()); // 3\\n\\n// 5.判断集合中是否包含某个元素 。\\nSystem.out.println(sets.contains(\\\"贾乃亮\\\"));\\n\\n// 6.删除某个元素:如果有多个重复元素默认删除前面的第一个！\\nsets.remove(\\\"陈羽凡\\\");\\nSystem.out.println(sets);\\n\\n// 7.把集合转换成数组\\nObject[] arrs = sets.toArray();\\nSystem.out.println(\\\"数组：\\\"+ Arrays.toString(arrs));\\n\\nString[] arrs1 = sets.toArray(String[]::new); // 以后再了解，指定转换的数组类型！\\nSystem.out.println(\\\"数组：\\\"+ Arrays.toString(arrs1));\\n\\nSystem.out.println(\\\"---------------------拓展---------------------------\\\");\\nCollection<String> c1 = new ArrayList<>();\\nc1.add(\\\"李小璐\\\");\\nc1.add(\\\"马蓉\\\");\\n\\nCollection<String> c2 = new ArrayList<>();\\nc2.add(\\\"白百合\\\");\\n\\nc1.addAll(c2); // 把c2集合的元素全部倒入到c1\\nSystem.out.println(c1);\\n```\\n\\n# day5-迭代器、数据结构、List、Set、TreeSet集合、Collections工具类\\n\\n## 第一章 Iterator迭代器\\n\\n`Collection`集合的遍历方式\\n\\n* 迭代器\\n* `for-each`\\n* `Lambda`表达式\\n\\n### 迭代器遍历\\n\\n* `public Iterator iterator()` 获取集合对应的迭代器，用来遍历集合中的元素\\n* `E next()` 获取下一个元素值\\n* `boolean hasNext()` 判断是否有下一个元素\\n\\n```java\\nCollection<String> lists = new ArrayList<>();\\nlists.add(\\\"赵敏\\\");\\nlists.add(\\\"小昭\\\");\\nlists.add(\\\"殷素素\\\");\\nlists.add(\\\"周芷若\\\");\\nSystem.out.println(lists);\\n// 1.得到集合的迭代器对象。\\nIterator<String> it = lists.iterator();\\n\\n// 2.使用while循环遍历。\\nwhile(it.hasNext()){\\n    String ele = it.next();\\n    System.out.println(ele);\\n}\\n```\\n\\n### for-each遍历\\n\\n`for-each`遍历实际上是迭代器遍历的简化写法\\n\\n* `for-each`遍历集合或者数组很方便\\n* `for-each`遍历无法知道遍历到了哪个元素，因为没有索引\\n\\n```java\\nCollection<String> lists = new ArrayList<>();\\nlists.add(\\\"赵敏\\\");\\nlists.add(\\\"小昭\\\");\\nlists.add(\\\"殷素素\\\");\\nlists.add(\\\"周芷若\\\");\\nSystem.out.println(lists);\\n// lists = [赵敏, 小昭, 殷素素, 周芷若]\\n//  ele\\nfor (String ele : lists) {\\n    System.out.println(ele);\\n}\\n\\nint[] ages = new int[]{17 , 18 , 38 , 21};\\nfor (int age : ages) {\\n    System.out.println(age);\\n}\\n```\\n\\n### lambda表达式\\n\\n```java\\nCollection<String> lists = new ArrayList<>();\\nlists.add(\\\"赵敏\\\");\\nlists.add(\\\"小昭\\\");\\nlists.add(\\\"殷素素\\\");\\nlists.add(\\\"周芷若\\\");\\nSystem.out.println(lists);\\n//   [赵敏, 小昭, 殷素素, 周芷若]\\n//   s\\nlists.forEach(s -> {\\nSystem.out.println(s);\\n});\\n//      lists.forEach(s ->  System.out.println(s));\\n//      lists.forEach(System.out::println);\\n```\\n\\n## 第二章 Java常见数据结构种类\\n\\n队列（queue）\\n\\n- 先进先出，后进后出。\\n- 场景：各种排队。叫号系统。\\n- 有很多集合可以实现队列。\\n\\n栈（stack）\\n\\n- 后进先出，先进后出\\n  压栈 == 入栈\\n  弹栈 == 出栈\\n  场景：手枪的弹夹。\\n\\n数组\\n\\n- 数组是内存中的连续存储区域。\\n- 分成若干等分的小区域（每个区域大小是一样的）\\n- 元素存在索引\\n- 特点：查询元素快（根据索引快速计算出元素的地址，然后立即去定位）\\n             增删元素慢（创建新数组，迁移元素）\\n\\n链表\\n\\n- 元素不是内存中的连续区域存储。\\n- 元素是游离存储的。每个元素会记录下个元素的地址。\\n- 特点：查询元素慢\\n             增删元素快（针对于首尾元素，速度极快，一般是双链表）\\n\\n红黑树\\n\\n- 二叉树：binary tree 永远只有一个根节点，是每个结点不超过2个节点的树（tree） 。\\n- 查找二叉树,排序二叉树：小的左边，大的右边，但是可能树很高，性能变差。\\n- 为了做排序和搜索会进行左旋和右旋实现平衡查找二叉树，让树的高度差不大于1\\n- 红黑树（就是基于红黑规则实现了自平衡的排序二叉树）：树尽量的保证到了很矮小，但是又排好序了，性能最高的树。\\n- 红黑树的增删查改性能都好！！！\\n\\n\\n这些结构，其实Java早就通过代码实现了，我们要知道有这些结构即可!\\n\\n## 第三章 List系列集合的使用\\n\\n### ArrayList集合\\n\\n![image-20220601213800419](http://47.108.219.199:81/articles/image-20220601213800419.png)\\n\\n`Collection`集合体系的特点:\\n\\n`Set`系列集合：添加的元素，是无序，不重复，无索引的。\\n\\n- `HashSet`：添加的元素，是无序，不重复，无索引的。\\n- `LinkedHashSet`：添加的元素，是有序，不重复，无索引的。\\n\\n`List`系列集合：添加的元素，是有序，可重复，有索引的。\\n\\n- `LinkedList`： 添加的元素，是有序，可重复，有索引的。\\n- `ArrayList`： 添加的元素，是有序，可重复，有索引的。\\n- `Vector `：是线程安全的，速度慢，工作中很少使用。\\n\\n`List`集合继承了`Collection`集合的全部功能，同时因为`List`系列集合有索引，\\n\\n因为`List`集合多了索引，所以多了很多按照索引操作元素的功能\\n\\n`ArrayList`实现类集合底层基于数组存储数据的，查询快，增删慢！\\n\\n- `public void add(int index, E element)`: 将指定的元素，添加到该集合中的指定位置上。\\n- `public E get(int index)`:返回集合中指定位置的元素。\\n- `public E remove(int index)`: 移除列表中指定位置的元素, 返回的是被移除的元素。\\n- `public E set(int index, E element)`:用指定元素替换集合中指定位置的元素,返回更新前的元素值。\\n\\n> * `List`系列集合有序，可重复，有索引的。\\n> * `ArrayList`实现类集合底层基于数组存储数据的，查询快，增删慢！！\\n> * 开发中`ArrayList`集合用的最多！！\\n\\n### List集合的遍历方式\\n\\n`List`遍历方式有四种：\\n\\n* `for`循环\\n* 迭代器\\n* `for-each`\\n* lambda表达式\\n\\n```java\\nList<String> lists = new ArrayList<>();\\nlists.add(\\\"java1\\\");\\nlists.add(\\\"java2\\\");\\nlists.add(\\\"java3\\\");\\n\\n/** （1）for循环。 */\\nfor(int i = 0 ; i < lists.size() ; i++ ) {\\n    String ele = lists.get(i);\\n    System.out.println(ele);\\n}\\nSystem.out.println(\\\"-----------------------\\\");\\n\\n/** （2）迭代器。 */\\nIterator<String> it = lists.iterator();\\nwhile(it.hasNext()){\\n    System.out.println(it.next());\\n}\\nSystem.out.println(\\\"-----------------------\\\");\\n\\n/** （3）foreach。 */\\nfor(String ele : lists){\\n    System.out.println(ele);\\n}\\nSystem.out.println(\\\"-----------------------\\\");\\n\\n/** （4）JDK 1.8开始之后的Lambda表达式*/\\nlists.forEach(s -> {\\n    System.out.println(s);\\n});\\n```\\n\\n### LinkedList集合\\n\\n`LinkedList`也是`List`的实现类：底层是基于链表的，增删比较快，查询慢！！\\n`LinkedList`是支持双链表，定位前后的元素是非常快的，增删首尾的元素也是最快的\\n所以`LinkedList`除了拥有`List`集合的全部功能还多了很多操作首尾元素的特殊功能：\\n\\n- `public void addFirst(E e)`:将指定元素插入此列表的开头。\\n- `void addLast(E e)`:将指定元素添加到此列表的结尾。\\n- `public E getFirst()`:返回此列表的第一个元素。\\n- `public E getLast()`:返回此列表的最后一个元素。\\n- `public E removeFirst()`:移除并返回此列表的第一个元素。\\n- `public E removeLast()`:移除并返回此列表的最后一个元素。\\n- `public E pop()`:从此列表所表示的堆栈处弹出一个元素。\\n- `public void push(E e)`:将元素推入此列表所表示的堆栈。\\n\\n> * `LinkedList`是支持双链表，定位前后的元素是非常快的，增删首尾的元素也是最快的。\\n> * 所以提供了很多操作首尾元素的特殊API可以做栈和队列的实现。\\n> * 如果查询多而增删少用`ArrayList`集合。(用的最多的)\\n> * 如果查询少而增删首尾较多用`LinkedList`集合。\\n\\n## 第四章 Set系列集合\\n\\n研究两个问题==面试热点==\\n\\n* `Set`集合添加的元素是不重复的，是如何去重复的\\n* `Set`集合元素无序的原因是什么\\n\\n### Set系列集合元素去重复的流程\\n\\n* 对于有值特性的，`Set`集合可以直接判断进行去重复。\\n* 对于引用数据类型的类对象，Set集合是按照如下流程进行是否重复的判断。\\n  * `Set`集合会让两两对象，先调用自己的`hashCode()`方法得到彼此的哈希值（所谓的内存地址）\\n  * 然后比较两个对象的哈希值是否相同，如果不相同则直接认为两个对象不重复。\\n  * 如果哈希值相同，会继续让两个对象进行`equals`比较内容是否相同，如果相同认为真的重复了\\n  * 如果不相同认为不重复。\\n\\n```java\\nSet<Integer> sets = new HashSet<>(); // 一行经典代码！！\\nsets.add(1);\\nsets.add(1);\\nsets.add(2);\\nsets.add(2);\\nSystem.out.println(sets);\\n\\n// 存储一些自定义类型数据:无序不重复\\nSet<Apple> apples = new HashSet<>();\\nApple a1 = new Apple(\\\"红富士\\\",59.9 ,\\\"红色\\\");\\nApple a2 = new Apple(\\\"阿克苏\\\",39.9 ,\\\"青红色\\\");\\nApple a3 = new Apple(\\\"阿克苏\\\",39.9 ,\\\"青红色\\\");\\nSystem.out.println(a1.hashCode()); // 哈希值，相当于是内存地址\\nSystem.out.println(a2.hashCode()); // 哈希值，相当于是内存地址\\nSystem.out.println(a3.hashCode()); // 哈希值，相当于是内存地址\\napples.add(a1);\\napples.add(a2);\\napples.add(a3);\\nSystem.out.println(apples);\\n```\\n\\n### Set系列集合元素无序==面试必考==\\n\\n`Set`系列集合添加元素无序的根本原因是因为底层采用了哈希表存储元素。\\n\\n* JDK 1.8之前：哈希表 = 数组 + 链表  + （哈希算法）\\n* JDK 1.8之后：哈希表 = 数组 + 链表 + 红黑树  + （哈希算法）\\n\\n​    当链表长度超过阈值（8）时，将链表转换为红黑树，这样大大减少了查找时间。\\n\\n### LinkedHashSet\\n\\n是`HashSet`的子类，元素是“有序” 不重复，无索引.\\n\\n* `LinkedHashSet`底层依然是使用哈希表存储元素的，\\n* 但是每个元素都额外带一个链来维护添加顺序！！\\n* 不光增删查快，还有序。缺点是多了一个存储顺序的链会占内存空间!!而且不允许重复，无索引。\\n\\n> * 如果希望元素可以重复，又有索引，查询要快用`ArrayList`集合。（用的最多）\\n> * 如果希望元素可以重复，又有索引，增删要快要用`LinkedList`集合。（适合查询元素比较少的情况，经常要首尾操作元素的情况）\\n> * 如果希望增删改查都很快，但是元素不重复以及无序无索引，那么用`HashSet`集合。\\n> * 如果希望增删改查都很快且有序，但是元素不重复以及无索引，那么用`LinkedHashSet`集合。\\n\\n### TreeSet集合\\n\\n`TreeSet`: 不重复，无索引，按照大小默认升序排序!!\\n\\n`TreeSet`集合称为排序不重复集合，可以对元素进行默认的升序排序。\\n\\n`TreeSet`集合自自排序的方式：\\n\\n* 有值特性的元素直接可以升序排序。（浮点型，整型）\\n* 字符串类型的元素会按照首字符的编号排序。\\n* 对于自定义的引用数据类型，`TreeSet`默认无法排序，执行的时候直接报错，因为人家不知道排序规则。\\n\\n自定义的引用数据类型的排序实现：\\n\\n对于自定义的引用数据类型，`TreeSet`默认无法排序\\n\\n所以我们需要定制排序的大小规则，程序员定义大小规则的方案有2种：\\n\\n* 直接为对象的类实现比较器规则接口Comparable，重写比较方法（拓展方式）\\n           // 如果程序员认为比较者大于被比较者 返回正数！\\n           // 如果程序员认为比较者小于被比较者 返回负数！\\n           // 如果程序员认为比较者等于被比较者 返回0！\\n* 直接为集合设置比较器Comparator对象,重写比较方法\\n           // 如果程序员认为比较者大于被比较者 返回正数！\\n           // 如果程序员认为比较者小于被比较者 返回负数！\\n           // 如果程序员认为比较者等于被比较者 返回0！\\n\\n> 如果类和集合都带有比较规则，优先使用集合自带的比较规则。\\n\\n```java\\n// TreeSet : 排序不重复集合。\\nSet<Double> scores = new TreeSet<>();\\nscores.add(100.0);\\nscores.add(99.9);\\nscores.add(69.5);\\nscores.add(0.1);\\nscores.add(89.3);\\nSystem.out.println(scores);\\n\\n// 字符串按照首字符的编号进行排序。\\nSet<String> names = new TreeSet<>();\\nnames.add(\\\"Jack\\\");\\nnames.add(\\\"rose\\\");\\nnames.add(\\\"Dlei\\\");\\nnames.add(\\\"about\\\");\\nnames.add(\\\"曹雪芹\\\");\\nnames.add(\\\"bozai\\\");\\nnames.add(\\\"caocao\\\");\\nnames.add(\\\"angel\\\");\\nSystem.out.println(names);\\n\\n// 引用数据类型定义TreeSet集合。\\nSet<Employee> employees = new TreeSet<>();\\nemployees.add(new Employee(\\\"播仔\\\",6500.0,21));\\nemployees.add(new Employee(\\\"播妞\\\",7500.0,19));\\nemployees.add(new Employee(\\\"乔治\\\",4500.0,23));\\nSystem.out.println(employees);\\n\\n\\n// public TreeSet(Comparator<? super E> comparator)\\n// 集合自带比较器对象\\n// 如果类和集合都存在大小规则，默认使用集合自带的规则进行大小排序！！\\nSet<Employee> employees1 = new TreeSet<>(new Comparator<Employee>() {\\n    @Override\\n    public int compare(Employee o1, Employee o2) {\\n        // o1比较者   o2被比较者\\n        // 如果程序员认为比较者大于被比较者 返回正数！\\n        // 如果程序员认为比较者小于被比较者 返回负数！\\n        // 如果程序员认为比较者等于被比较者 返回0！\\n        return o1.getAge() - o2.getAge();\\n    }\\n});\\nemployees1.add(new Employee(\\\"播仔\\\",6500.0,21));\\nemployees1.add(new Employee(\\\"播妞\\\",7500.0,19));\\nemployees1.add(new Employee(\\\"乔治\\\",4500.0,23));\\nSystem.out.println(employees1);\\n```\\n\\n## 第五章 Collections工具类\\n\\n`Collections`并不属于集合，而是用来操作集合的工具类\\n\\n`Collections`有几个常用的API:\\n\\n- `public static <T> boolean addAll(Collection<? super T> c, T... elements)`\\n  \\n    给集合对象批量添加元素！\\n    \\n- `public static void shuffle(List<?> list)`\\n\\n    打乱集合顺序。\\n\\n- `public static <T> void sort(List<T> list)`\\n\\n    将集合中元素按照默认规则排序。\\n\\n- `public static <T> void sort(List<T> list，Comparator<? super T> )`\\n\\n    将集合中元素按照指定规则排序。\\n\\n```java\\n// 1.给集合批量添加元素\\nCollection<String> names = new ArrayList<>();\\n/**\\n* 参数一：被添加元素的集合\\n* 参数二：可变参数，一批元素\\n*/\\nCollections.addAll(names,\\\"曹操\\\",\\\"贾乃亮\\\",\\\"王宝强\\\",\\\"陈羽凡\\\");\\nSystem.out.println(names);\\n\\n// 2.打乱集合的顺序：public static void shuffle(List<?> list)\\n// 注意：只能打乱有序的List集合。\\nList<String> newnames = new ArrayList<>();\\nCollections.addAll(newnames,\\\"曹操\\\",\\\"贾乃亮\\\",\\\"王宝强\\\",\\\"陈羽凡\\\");\\nCollections.shuffle(newnames); // 打乱顺序\\nSystem.out.println(newnames);\\n\\n// 3.public static <T> void sort(List<T> list)：给List集合升序排序。\\nList<Double> scores = new ArrayList<>();\\nCollections.addAll(scores, 98.5, 66.5 , 59.5 , 66.5 , 99.5 );\\nCollections.sort(scores); // 默认升序排序！\\nSystem.out.println(scores);\\n```\\n\\n引用类型的排序\\n\\n字符串按照首字符的编号升序排序！\\n\\n自定义类型的比较方法API:\\n- `public static <T> void sort(List<T> list)`\\n\\n     集合中元素按照默认规则排序。\\n\\n     对于自定义的引用类型的排序人家根本不知道怎么排，直接报错！\\n\\n     如果希望自定义的引用类型排序不报错，可以给类提供比较规则:Comparable。\\n\\n- `public static <T> void sort(List<T> list，Comparator<? super T> c)`\\n\\n     将集合中元素按照指定规则排序,自带比较器\\n\\n     注意：如果类有比较规则，而这里有比较器，优先使用比较器。\\n\\n```java\\n// 自定义类型如何排序！\\nList<Orange> oranges = new ArrayList<>();\\nOrange o1 = new Orange(\\\"红橘子\\\",654.0 ,\\\"贼便宜~\\\");\\nOrange o2 = new Orange(\\\"黄橘子\\\",454.0 ,\\\"贼便宜~\\\");\\nOrange o3 = new Orange(\\\"黄橘子\\\",454.0 ,\\\"贼便宜~\\\");\\nOrange o4 = new Orange(\\\"青橘子\\\",456.0 ,\\\"贼便宜~\\\");\\nCollections.addAll(oranges,o1,o2,o3,o4);\\nCollections.sort(oranges); // 排序，按照类实现的比较规则进行排序！！\\nSystem.out.println(oranges);\\n\\n\\nList<Orange> oranges1 = new ArrayList<>();\\nOrange o11 = new Orange(\\\"红橘子\\\",654.0 ,\\\"贼便宜~\\\");\\nOrange o22 = new Orange(\\\"黄橘子\\\",454.0 ,\\\"贼便宜~\\\");\\nOrange o33 = new Orange(\\\"黄橘子\\\",454.0 ,\\\"贼便宜~\\\");\\nOrange o44 = new Orange(\\\"青橘子\\\",456.0 ,\\\"贼便宜~\\\");\\nCollections.addAll(oranges1,o11,o22,o33,o44);\\n// 优先用方法自带的比较器对象Comparator而不会用类的比较规则！！\\nCollections.sort(oranges1, new Comparator<Orange>() {\\n    @Override\\n    public int compare(Orange o1, Orange o2) {\\n        if(o1.getWeight() > o2.getWeight()) return -1;\\n        if(o1.getWeight() < o2.getWeight()) return 1;\\n        return 0;\\n    }\\n});\\nSystem.out.println(oranges1);\\n```\\n\\n## 第六章 可变参数\\n\\n可变参数用在形参中可以接收多个数据。\\n\\n可变参数的格式：数据类型... 参数名称\\n\\n可变参数的作用：\\n\\n- 传输参数非常灵活，方便。\\n- 可以不传输参数。\\n- 可以传输一个参数。\\n- 可以传输多个参数。\\n- 可以传输一个数组。\\n\\n可变参数在方法内部本质上就是一个数组。\\n\\n可变参数的注意事项：\\n\\n* 一个形参列表中可变参数只能有一个！！\\n* 可变参数必须放在形参列表的最后面！！\\n\\n```java\\npublic static void main(String[] args) {\\n    sum(); // 可以不传输参数。\\n    sum(10); // 可以传输一个参数。\\n    sum(10,20,30); // 可以传输多个参数。\\n    sum(new int[]{10,30,50,70,90}); // 可以传输一个数组。\\n}\\n\\npublic static void sum(int...nums){\\n    // 可变参数在方法内部本质上就是一个数组。\\n    System.out.println(\\\"元素个数：\\\"+nums.length);\\n    System.out.println(\\\"元素内容：\\\"+ Arrays.toString(nums));\\n    System.out.println(\\\"--------------------------\\\");\\n}\\n```\\n\\n# day6-Map\\n\\n## 第一章 Map\\n\\n### Map集合的概述\\n\\n`Map`集合是另一个集合体系。\\n\\n`Collection`是单值集合体系。\\n\\n`Map`集合是一种双列集合，每个元素包含两个值。\\n\\n`Map`集合的每个元素的格式：`key=value`(键值对元素)。\\n\\n`Map`集合也被称为“键值对集合”。\\n\\n`Map`集合的完整格式：`{key1=value1 , key2=value2 , key3=value3 , ...}`\\n\\n\\n\\n* `Map`集合的特点都是由键决定的。\\n* `Map`集合的键是无序,不重复的，无索引的，`Map`集合后面重复的键对应的元素会覆盖前面的整个元素！\\n* `Map`集合的值无要求。\\n* `Map`集合的键值对都可以为`null`。\\n\\n`HashMap`:元素按照键是无序，不重复，无索引，值不做要求。\\n`LinkedHashMap`:元素按照键是有序，不重复，无索引，值不做要求。\\n\\n### Map集合的API\\n\\n- `public V put(K key, V value)`:  把指定的键与指定的值添加到`Map`集合中。\\n- `public V remove(Object key)`: 把指定的键 所对应的键值对元素 在`Map`集合中删除，返回被删除元素的值。\\n- `public V get(Object key)` 根据指定的键，在`Map`集合中获取对应的值。\\n- `public Set<K> keySet()`: 获取`Map`集合中所有的键，存储到`Set`集合中。\\n- `public Set<Map.Entry<K,V>> entrySet()`: 获取到`Map`集合中所有的键值对对象的集合(`Set`集合)。\\n- `public boolean containKey(Object key)`:判断该集合中是否有此键。\\n\\n```java\\nMap<String , Integer> maps = new HashMap<>();\\n// 1.添加元素: 无序，不重复，无索引。\\nmaps.put(\\\"iphoneX\\\",10);\\nmaps.put(\\\"娃娃\\\",30);\\nmaps.put(\\\"iphoneX\\\",100);//  Map集合后面重复的键对应的元素会覆盖前面重复的整个元素！\\nmaps.put(\\\"huawei\\\",1000);\\nmaps.put(\\\"生活用品\\\",10);\\nmaps.put(\\\"手表\\\",10);\\n// {huawei=1000, 手表=10, 生活用品=10, iphoneX=100, 娃娃=30}\\nSystem.out.println(maps);\\n\\n// 2.清空集合\\n//maps.clear();\\n//System.out.println(maps);\\n\\n// 3.判断集合是否为空，为空返回true ,反之！\\nSystem.out.println(maps.isEmpty());\\n\\n// 4.根据键获取对应值。\\n//Integer value = maps.get(\\\"娃娃\\\");\\n//System.out.println(value);\\nSystem.out.println(maps.get(\\\"娃娃\\\"));\\n\\n// 5.根据键删除整个元素。(删除键会返回键的值)\\nmaps.remove(\\\"iphoneX\\\");\\nSystem.out.println(maps);\\n\\n// 6.判断是否包含某个键 ，包含返回true ,反之\\nSystem.out.println(maps.containsKey(\\\"手表\\\")); // true\\nSystem.out.println(maps.containsKey(10)); // false\\n\\n// 7.判断是否包含某个值。\\nSystem.out.println(maps.containsValue(1000)); // true\\nSystem.out.println(maps.containsValue(10)); // true\\nSystem.out.println(maps.containsValue(\\\"30\\\")); // false 包含的是整数30不是字符串。\\n\\n// 8.获取全部键的集合：public Set<K> keySet()\\n// Map集合的键是无序不重复的，所以返回的是一个Set集合。\\nSet<String> keys = maps.keySet();\\nfor (String key : keys) {\\n    System.out.println(key);\\n}\\n\\n// 9.获取全部值的集合：Collection<V> values();\\n// Map集合的值是不做要求的，可能重复，所以值要用Collection集合接收!\\nCollection<Integer> values = maps.values();\\nfor (Integer value : values) {\\n    System.out.println(value);\\n}\\n\\n// 10.集合的大小\\nSystem.out.println(maps.size());\\n\\n// 11.合并其他Map集合。(拓展)\\nMap<String,Integer> maps2 = new HashMap<>();\\nmaps2.put(\\\"xiaoMi\\\" , 1);\\nmaps2.put(\\\"🔨手机\\\" , 10);\\nmaps2.put(\\\"手表\\\" , 10000);\\nmaps.putAll(maps2); // 把Map集合maps2的数据全部倒入到maps集合中去\\nSystem.out.println(maps);\\n```\\n\\n### Map集合的遍历\\n\\n`Map`集合的遍历方式有3种：\\n\\n* **键找值**的方式遍历：先获取`Map`集合全部的键，再根据遍历键找值\\n* **键值对**的方式遍历\\n* JDK1.8之后支持`Lambda`表达式\\n\\n首先是**键找值**遍历方式\\n\\n* 先获取`Map`集合的全部键的`Set`集合\\n* 遍历键的`Set`集合，然后通过键找值\\n\\n```java\\nSet<String> keys = maps.keySet();\\nfor (String key : keys) {\\n    // 过键取对应的值\\n    Integer value = maps.get(key);\\n    System.out.println(key + \\\"=\\\" + value);\\n}\\n```\\n\\n然后是**键值对**的方式遍历\\n\\n* 把`Map`集合转换成一个`Set`集合:`Set<Map.Entry<K, V>> entrySet();`\\n* 此时键值对元素的类型就确定了，类型是键值对实体类型：`Map.Entry<K, V>`\\n* 接下来就可以用`foreach`遍历这个`Set`集合，类型用`Map.Entry<K, V>`\\n\\n```java\\nSet<Map.Entry<String,Integer>> entries = maps.entrySet();\\nfor (Map.Entry<String, Integer> entry : entries) {\\n    String key = entry.getKey();\\n    Integer value = entry.getValue();\\n    System.out.println(key + \\\"=>\\\" + value);\\n}\\n```\\n\\n最后是简介的`Lambda`表达式\\n\\n```java\\nmaps.forEach((k , v) -> {\\n    System.out.println(k+\\\"==>\\\"+v);\\n});\\n```\\n\\n### Map集合存储自定义类型\\n\\n`Map`集合的键和值都可以存储自定义类型\\n\\n如果`Map`集合认为自定义类型的键对象重复了，必须重写对象的`hashCode()`和`equals()`方法\\n\\n`Orange.java`\\n\\n```java\\npublic class Orange {\\n    private String name;\\n    private double weight;\\n    private String price;\\n\\n\\n    public Orange() {\\n    }\\n\\n    public Orange(String name, double weight, String price) {\\n        this.name = name;\\n        this.weight = weight;\\n        this.price = price;\\n    }\\n\\n    @Override\\n    public boolean equals(Object o) {\\n        if (this == o) return true;\\n        if (o == null || getClass() != o.getClass()) return false;\\n        Orange orange = (Orange) o;\\n        return Double.compare(orange.weight, weight) == 0 &&\\n                Objects.equals(name, orange.name) &&\\n                Objects.equals(price, orange.price);\\n    }\\n\\n    @Override\\n    public int hashCode() {\\n        return Objects.hash(name, weight, price);\\n    }\\n    \\n    //...\\n}\\n```\\n\\n`Map`使用自定义存储类型\\n\\n```java\\nMap<Orange,String> maps = new HashMap<>();\\nOrange o1 = new Orange(\\\"黄橘子\\\",20.3 , \\\"贼便宜！\\\");\\nOrange o2 = new Orange(\\\"黑橘子\\\",30.3 , \\\"坏了\\\");\\nOrange o3 = new Orange(\\\"青橘子\\\",34.3 , \\\"9.9包邮\\\");\\nOrange o4 = new Orange(\\\"黄橘子\\\",20.3 , \\\"贼便宜！\\\");\\n\\nmaps.put(o1 , \\\"江西\\\\n\\\");\\nmaps.put(o2 , \\\"赣州\\\\n\\\");\\nmaps.put(o3 , \\\"广州\\\\n\\\");\\nmaps.put(o4 , \\\"广西\\\\n\\\");\\n\\nSystem.out.println(maps);\\n```\\n\\n### LinkedHashMap的特点\\n\\n`LinkedHashMap`是`HashMap`的子类，添加的元素按照键有序，不重复的。\\n\\n`HashSet`集合相当于是`HashMap`集合的键都不带值。\\n\\n`LinkedHashSet`集合相当于是`LinkedHashMap`集合的键都不带值。\\n\\n底层原理完全一样，都是基于哈希表按照键存储数据的，\\n\\n只是`HashMap`或者`LinkedHashMap`的键都多一个附属值。\\n\\n```java\\nMap<String , Integer> maps = new LinkedHashMap<>();\\nmaps.put(\\\"iphoneX\\\",10);\\nmaps.put(\\\"娃娃\\\",30);\\nmaps.put(\\\"iphoneX\\\",100); // 依然是保留前面的位置，只是替换其值！\\nmaps.put(\\\"huawei\\\",1000);\\nmaps.put(\\\"生活用品\\\",10);\\nmaps.put(\\\"手表\\\",10);\\nSystem.out.println(maps);\\n```\\n\\n* `HashMap`集合是无序不重复的键值对集合。\\n* `LinkedHashMap`集合是有序不重复的键值对集合。\\n* 他们都是基于哈希表存储数据,增删改查都很好。\\n\\n### TreeMap集合应用\\n\\n* `TreeMap`集合按照键是可排序不重复的键值对集合。(默认升序)\\n* `TreeMap`集合按照键排序的特点与`TreeSet`是完全一样的\\n\\n> `TreeMap`集合和`TreeSet`集合都是排序不重复集合\\n>\\n> `TreeSet`集合的底层是基于`TreeMap`，只是键没有附属值而已。\\n>\\n> 所以`TreeMap`集合指定大小规则有2种方式：\\n>\\n> * 直接为对象的类实现比较器规则接口`Comparable`，重写比较方法（拓展方式）\\n> * 直接为集合设置比较器`Comparator`对象,重写比较方法\\n\\n类实现`Comparable`\\n\\n```java\\n// 比较者： this\\n// 被比较者： o\\n// 需求：按照价格排序！\\n@Override\\npublic int compareTo(Object o) {\\n    // 浮点型的大小比较建议使用Java自己的API:\\n    // public static int compare(double d1, double d2)\\n    return  -Double.compare(this.price , ((Pig)o).price);\\n}\\n```\\n\\n集合设置`Comparator`\\n\\n```java\\nMap<Pig,String> pigs1 = new TreeMap<>(new Comparator<Pig>() {\\n    @Override\\n    public int compare(Pig p1, Pig p2) {\\n        return Double.compare(p1.getWeight() , p2.getWeight());\\n    }\\n});\\n```\\n\\n## 第二章 排序算法\\n\\n### 冒泡排序算法\\n\\n```java\\nint[] arr = new int[] {55, 22, 99, 88};\\n// 1.定义一个循环控制总共需要冒泡几轮：数组的长度-1\\nfor(int i = 0 ;  i < arr.length - 1 ; i++ ){\\n    // i = 0   j = 0 1 2\\n    // i = 1   j = 0 1\\n    // i = 2   j = 0\\n    // 2.控制每轮比较几次。\\n    for(int j = 0 ; j < arr.length - i - 1 ; j++ ){\\n        // 如果当前元素大于后一个元素\\n        if(arr[j] > arr[j+1]){\\n            // 交换位置。大的元素必须后移！\\n            // 定义一个临时变量存储后一个元素\\n            int temp = arr[j+1];\\n            arr[j+1] = arr[j];\\n            arr[j] = temp;\\n        }\\n    }\\n}\\n```\\n\\n## 选择排序算法\\n\\n```java\\nint[] arr = {5 , 1 , 3 , 2};\\n// 1.定义一个循环控制选择几轮\\nfor(int i = 0 ; i < arr.length - 1 ; i++ ){\\n    // 2.定义一个循环控制每轮比较几次，一定是以当前位置与后面元素比较\\n    // i =0  j = 1 2 3\\n    // i =1  j = 2 3\\n    // i =2  j = 3\\n    // 遍历后面的元素\\n    for(int j = i+1 ; j < arr.length ; j++ ){\\n        // 拿当前位置与j指定的元素进行大小比较，后面的较小就交换位置\\n        if(arr[j] < arr[i]){\\n            int temp = arr[i];\\n            arr[i] = arr[j];\\n            arr[j] = temp;\\n        }\\n    }\\n}\\n```\\n\\n## 第三章 二分查找\\n\\n**二分查找的前提**：对数组是有要求的,数组必须已经排好序。\\n\\n每次先与中间的元素进行比较，如果大于往右边找，如果小于往左边找，如果等于就返回该元素索引位置！\\n\\n如果没有该元素，返回-1。综合性能比较好！！\\n\\n```java\\n/**\\n     *\\n     * @param arr  被检索的数组\\n     * @param number 被检索的元素值\\n     * @return  返回元素在数组中的索引值，不存在该元素返回-1\\n     */\\npublic static int binarySerach(int[] arr , int number){\\n    // 3.记录当前区间搜索的开始索引和结束索引。\\n    int start = 0 ;\\n    int end = arr.length - 1;\\n    // 4.定义一个循环，反复去循环元素。\\n    while(start <= end){\\n        // 5.取中间索引位置\\n        int middleIndex = (start + end) / 2 ;\\n        // 6.判断当前元素与中间元素的大小\\n        if(number < arr[middleIndex]){\\n            // 7.往左边继续寻找，结束索引应该-1\\n            end = middleIndex - 1;\\n        }else if(number > arr[middleIndex]){\\n            start = middleIndex + 1;\\n        }else if(number == arr[middleIndex]){\\n            return middleIndex;\\n        }\\n    }\\n    // 如果上述循环执行完毕还没有返回索引，说明根本不存在该元素值，直接返回-1\\n    return -1;\\n}\\n```\\n\\n# day7-异常、线程\\n\\n## 第一章 异常\\n\\n### 异常的概述和体系\\n\\n**异常**：指的是程序在执行过程中，出现的非正常的情况，最终会导致JVM的非正常停止\\n\\n* 在`Java`等面向对象的编程语言中，异常本身是一个类，产生异常就是创建异常对象并抛出了一个异常对象。`Java`处理异常的方式是中断处理。\\n* `Java`会为常见的代码异常都设计一个类来代表\\n* `Java`中异常继承的根类是：`Throwable`\\n\\n<img src=\\\"http://47.108.219.199:81/articles/image-20220603140634079.png\\\" alt=\\\"image-20220603140634079\\\" style=\\\"zoom: 80%;\\\" />\\n\\n`Error `: 错误的意思，严重错误`Error`，无法通过处理的错误，一旦出现，程序员无能为力了，\\n\\n* 只能重启系统，优化项目。\\n* 比如内存奔溃，`JVM`本身的奔溃。这个程序员无需理会。\\n\\n`Exception`:才是异常类，它才是开发中代码在编译或者执行的过程中可能出现的错误，\\n\\n* 它是需要提前处理的。以便程序更健壮！\\n\\n`Exception`异常的分类:\\n\\n* **编译时异常**：继承自`Exception`的异常或者其子类，编译阶段就会报错，必须程序员处理的。否则代码编译就不能通过\\n* **运行时异常**: 继承自`RuntimeException`的异常或者其子类，编译阶段是不会出错的，它是在运行时阶段可能出现，运行时异常可以处理也可以不处理，编译阶段是不会出错的，但是运行阶段可能出现，还是建议提前处理\\n\\n### 常见的运行时异常==面试热点==\\n\\n继承自`RuntimeException`的异常或者其子类，编译阶段是不会出错的，它是在运行时阶段可能出现的错误，运行时异常编译阶段可以处理也可以不处理,代码编译都能通过\\n\\n* 数组索引越界异常: `ArrayIndexOutOfBoundsException`\\n* 空指针异常 : `NullPointerException`\\n  直接输出没有问题。但是调用空指针的变量的功能就会报错\\n* 类型转换异常：`ClassCastException`\\n* 迭代器遍历没有此元素异常：`NoSuchElementException`\\n* 数学操作异常：`ArithmeticException`\\n* 数字转换异常： `NumberFormatException`\\n\\n### 编译时异常\\n\\n编译时异常：继承自`Exception`的异常或者其子类，没有继承`RuntimeException`\\n\\n* \\\"编译时异常是编译阶段就会报错\\\"，\\n* 必须程序员编译阶段就处理的。否则代码编译就报错\\n\\n编译时异常的作用是什么：\\n\\n* 是担心程序员的技术不行，在编译阶段就爆出一个错误, 目的在于提醒\\n* 提醒程序员这里很可能出错，请检查并注意不要出bug\\n\\n## 第二章 异常的处理\\n\\n### 异常的产生、处理的默认过程\\n\\n* 默认会在出现异常的代码那里自动的创建一个异常对象：`ArithmeticException`。\\n* 异常会从方法中出现的点这里抛出给调用者，调用者最终抛出给`JVM`虚拟机。\\n* 虚拟机接收到异常对象后，先在控制台直接输出异常栈信息数据。\\n* 直接从当前执行的异常点干掉当前程序。\\n* 后续代码没有机会执行了，因为程序已经死亡。\\n\\n### 编译时异常处理机制\\n\\n方法一\\n\\n* 在出现编译时异常的地方层层把异常抛出去给调用者，调用者最终抛出给JVM虚拟机。\\n* JVM虚拟机输出异常信息，直接干掉程序，这种方式与默认方式是一样的。\\n\\n抛出异常格式：\\n\\n```java\\n\\n方法 throws 异常1 ,  异常2 , ..{\\n\\n}\\n建议抛出异常的方式：代表可以抛出一切异常，\\n方法 throws Exception{\\n\\n}\\n```\\n\\n虽然可以解决代码编译时的错误，但是一旦运行时真的出现异常，程序还是会立即死亡\\n\\n方法二\\n\\n在出现异常的地方自己处理，谁出现谁处理\\n\\n```java\\ntry{\\n    // 监视可能出现异常的代码！\\n}catch(异常类型1 变量){\\n    // 处理异常\\n}catch(异常类型2 变量){\\n    // 处理异常\\n}...\\n```\\n\\n> 第二种方式，可以处理异常，并且出现异常后代码也不会死亡。这种方案还是可以的。但是从理论上来说，这种方式不是最好的，上层调用者不能直接知道底层的执行情况\\n\\n```java\\ntry{\\n    SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy/MM-dd HH:mm:ss\\\");\\n    Date d = sdf.parse(time);\\n    System.out.println(d);\\n\\n    InputStream is = new FileInputStream(\\\"D:/meinv.png\\\");\\n} catch (FileNotFoundException e) {\\n    System.err.println(\\\"文件根本不存在！\\\");\\n} catch (ParseException e) {\\n    System.err.println(\\\"解析有问题，请检查代码！\\\");\\n}\\n```\\n\\n方法三\\n\\n在出现异常的地方吧异常一层一层的抛出给最外层调用者，最外层调用者集中捕获处理==规范做法==\\n\\n> 这种方案最外层调用者可以知道底层执行的情况，同时程序在出现异常后也不会立即死亡，这是\\n> 理论上最好的方案\\n\\n\\n\\n```java\\npublic static void main(String[] args) {\\n    System.out.println(\\\"程序开始。。。。\\\");\\n    try {\\n        parseDate(\\\"2013-03-23 10:19:23\\\");\\n        System.out.println(\\\"功能成功执行！！\\\");\\n    } catch (Exception e) {\\n        e.printStackTrace();\\n        System.out.println(\\\"功能执行失败！！\\\");\\n    }\\n    System.out.println(\\\"程序结束。。。。。\\\");\\n}\\n\\n// 可以拦截所以异常!\\npublic static void parseDate(String time) throws Exception {\\n    SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\");\\n    Date d = sdf.parse(time);\\n    System.out.println(d);\\n\\n    InputStream is = new FileInputStream(\\\"D:/meinv.png\\\");\\n}\\n```\\n\\n### 运行时异常的处理机制\\n\\n运行时异常在编译阶段是不会报错，在运行阶段才会出错。运行时异常在编译阶段不处理也不会报错，但是运行时如果出错了程序还是会死亡。所以运行时异常也建议要处理。\\n\\n运行时异常是自动往外抛出的，不需要我们手工抛出。\\n\\n运行时异常的处理规范：直接在最外层捕获处理即可，底层会自动抛出\\n\\n```java\\npublic static void main(String[] args) {\\n        System.out.println(\\\"程序开始。。。。\\\");\\n        try{\\n            chu(10 , 0);\\n            System.out.println(\\\"操作成功！\\\");\\n        }catch (Exception e){\\n            e.printStackTrace();\\n            System.out.println(\\\"操作失败！\\\");\\n        }\\n        System.out.println(\\\"程序结束。。。。\\\");\\n    }\\n\\n    public static void chu(int a , int b)  {\\n        System.out.println( a / b );\\n    }\\n```\\n\\n### finally关键字\\n\\n用在捕获处理的异常格式中的，放在最后面\\n\\n无论代码是出现异常还是正常执行，最终一定要执行这里的代码\\n\\n```java\\ntry{\\n    // 可能出现异常的代码！\\n}catch(Exception e){\\n    e.printStackTrace();\\n}finally{\\n    // 无论代码是出现异常还是正常执行，最终一定要执行这里的代码！！\\n}\\n```\\n\\n`finally`的作用: 可以在代码执行完毕以后进行资源的释放操作。\\n\\n```java\\ntry{\\n    //System.out.println(10/0);\\n    is = new FileInputStream(\\\"D:/cang.png\\\");\\n    System.out.println(10 / 0 );\\n\\n}catch (Exception e){\\n    e.printStackTrace();\\n}finally {\\n    System.out.println(\\\"==finally被执行===\\\");\\n    // 回收资源。用于在代码执行完毕以后进行资源的回收操作！\\n    try {\\n        if(is!=null)is.close();\\n    } catch (Exception e) {\\n        e.printStackTrace();\\n    }\\n}\\n```\\n\\n### 异常的注意事项\\n\\n- 运行时异常被抛出可以不处理。可以自动抛出,编译时异常必须处理.按照规范都应该处理!\\n- 重写方法申明抛出的异常，**应该与父类被重写方法申明抛出的异常一样或者范围更小**\\n- 方法默认都可以自动抛出运行时异常！  `throws RuntimeException`可以省略不写!!\\n- 当多异常处理时，捕获处理，**前边的异常类不能是后边异常类的父类**。\\n- 在`try/catch`后可以追加`finally`代码块，其中的代码一定会被执行，通常用于资源回收操作。\\n\\n## 第三章 自定义异常\\n\\n自定义**编译时异常**\\n\\n- 定义一个异常类继承`Exception`\\n- 重写构造器\\n- 在出现异常的地方用`throw new `自定义对象抛出\\n- 编译时异常是编译阶段就报错，提醒更加强烈，一定需要处理\\n\\n```java\\npublic class ItheimaAgeIllegalException extends Exception {\\n    public ItheimaAgeIllegalException() {\\n    }\\n\\n    public ItheimaAgeIllegalException(String message) {\\n        super(message);\\n    }\\n\\n    public ItheimaAgeIllegalException(String message, Throwable cause) {\\n        super(message, cause);\\n    }\\n\\n    public ItheimaAgeIllegalException(Throwable cause) {\\n        super(cause);\\n    }\\n\\n    public ItheimaAgeIllegalException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\\n        super(message, cause, enableSuppression, writableStackTrace);\\n    }\\n}\\n```\\n\\n自定义**运行时异常**\\n\\n- 定义一个异常类继承`RuntimeException`\\n- 重写构造器\\n- 在出现异常的地方用`throw new`自定义对象抛出\\n- 提醒不强烈，编译阶段不报错，运行时才可能出现\\n\\n```java\\npublic class ItheimaAgeIllegalRuntimeException extends RuntimeException {\\n    public ItheimaAgeIllegalRuntimeException() {\\n    }\\n\\n    public ItheimaAgeIllegalRuntimeException(String message) {\\n        super(message);\\n    }\\n\\n    public ItheimaAgeIllegalRuntimeException(String message, Throwable cause) {\\n        super(message, cause);\\n    }\\n\\n    public ItheimaAgeIllegalRuntimeException(Throwable cause) {\\n        super(cause);\\n    }\\n\\n    public ItheimaAgeIllegalRuntimeException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\\n        super(message, cause, enableSuppression, writableStackTrace);\\n    }\\n}\\n```\\n\\n异常的作用：\\n\\n* 可以处理代码问题，防止程序出现异常后的死亡\\n* 提高了程序的健壮性和安全性\\n\\n```java\\ntry{\\n    Scanner sc = new Scanner(System.in);\\n    System.out.println(\\\"请您输入您的年年龄：\\\");\\n    int age = sc.nextInt();\\n    System.out.println(\\\"您是：\\\"+age);\\n    break;\\n}catch (Exception e){\\n    System.err.println(\\\"您的年龄是瞎输入的！\\\");\\n}\\n```\\n\\n## 第四章 多线程\\n\\n### 进程与线程\\n\\n- **进程**：是指一个内存中运行的应用程序，每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程；进程也是程序的一次执行过程，是系统运行程序的基本单位；系统运行一个程序即是一个进程从创建、运行到消亡的过程。\\n- **线程**：是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程。一个进程中是可以有多个线程的，这个应用程序也可以称之为多线程程序。\\n\\n进程的三个特征：\\n\\n- 动态性 ： 进程是运行中的程序，要动态的占用内存，CPU和网络等资源。\\n\\n- 独立性 ： 进程与进程之间是相互独立的，彼此有自己的独立内存区域。\\n\\n- 并发性 ： 假如`CPU`是单核，同一个时刻其实内存中只有一个进程在被执行。\\n\\n  `CPU`会分时轮询切换依次为每个进程服务，因为切换的速度非常快，给我们的感觉这些进程在同时执行，这就是并发性。\\n\\n线程的作用\\n\\n- 可以提高程序的效率，线程也支持并发性，可以有更多机会得到CPU。\\n- 多线程可以解决很多业务模型。\\n- 大型高并发技术的核心技术。\\n- 设计到多线程的开发可能都比较难理解。\\n\\n### 线程常用方法\\n\\n线程开启我们需要用到了`java.lang.Thread`类，API中该类中定义了有关线程的一些方法，具体如下：\\n\\n**构造方法：**\\n\\n- `public Thread()`:分配一个新的线程对象。\\n- `public Thread(String name)`:分配一个指定名字的新的线程对象。\\n- `public Thread(Runnable target)`:分配一个带有指定目标新的线程对象。\\n- `public Thread(Runnable target,String name)`:分配一个带有指定目标新的线程对象并指定名字。\\n\\n**常用方法：**\\n\\n- `public void setName(String name)`：给当前线程取名字\\n- `public String getName()`:获取当前线程名称。\\n- `public void start()`:导致此线程开始执行; Java虚拟机调用此线程的run方法。\\n- `public void run()`:此线程要执行的任务在此处定义代码。\\n- `public static void sleep(long millis)`:使当前正在执行的线程以指定的毫秒数暂停（暂时停止执行）。\\n- `public static Thread currentThread()  `:返回对当前正在执行的线程对象的引用。\\n\\n翻阅API后得知创建线程的方式总共有两种，一种是继承Thread类方式，一种是实现Runnable接口方式，方式一我们上一天已经完成，接下来讲解方式二实现的方式。\\n\\n### 线程的创建方式一-继承方式\\n\\nJava使用`java.lang.Thread`类代表**线程**，所有的线程对象都必须是Thread类或其子类的实例。每个线程的作用是完成一定的任务，实际上就是执行一段程序流即一段顺序执行的代码。Java使用线程执行体来代表这段程序流。Java中通过继承Thread类来**创建**并**启动多线程**的步骤如下：\\n\\n1. 定义Thread类的子类，并重写该类的run()方法，该run()方法的方法体就代表了线程需要完成的任务,因此把run()方法称为线程执行体。\\n2. 创建Thread子类的实例，即创建了线程对象\\n3. 调用线程对象的start()方法来启动该线程\\n\\n```java\\npublic class ThreadDemo {\\n    // 启动后的ThreadDemo当成一个进程。\\n    // main方法是由主线程执行的，理解成main方法就是一个主线程\\n    public static void main(String[] args) {\\n        // 3.创建一个线程对象\\n        Thread t = new MyThread();\\n        // 4.调用线程对象的start()方法启动线程,最终还是执行run()方法！\\n        t.start();\\n\\n        for(int i = 0 ; i < 100 ; i++ ){\\n            System.out.println(\\\"main线程输出：\\\"+i);\\n        }\\n    }\\n}\\n\\n// 1.定义一个线程类继承Thread类。\\nclass MyThread extends Thread{\\n    // 2.重写run()方法\\n    @Override\\n    public void run() {\\n        // 线程的执行方法。\\n        for(int i = 0 ; i < 100 ; i++ ){\\n            System.out.println(\\\"子线程输出：\\\"+i);\\n        }\\n    }\\n}\\n```\\n\\n> * 线程的启动必须调用`start()`方法，否则当成普通类处理\\n>   * 如果线程直接调用`run()`方法，相当于变成了普通类的执行，此时只有主线程在执行他们\\n>   * `start()`方法底层其实是给CPU注册当前线程，并且触发`run()`方法执行\\n> * 建议线程先创建子线程，主线程的任务放在之后，否则主线程永远是先执行完\\n\\n### 线程创建方式二-实现方式\\n\\n采用`java.lang.Runnable`也是非常常见的一种，我们只需要重写run方法即可。\\n\\n步骤如下：\\n\\n1. 定义Runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。\\n2. 创建Runnable实现类的实例，并以此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。\\n3. 调用线程对象的start()方法来启动线程。\\n\\n```java\\npublic class ThreadDemo {\\n    public static void main(String[] args) {\\n        // 3.创建一个线程任务对象(注意：线程任务对象不是线程对象，只是执行线程的任务的)\\n        Runnable target = new MyRunnable();\\n        // 4.把线程任务对象包装成线程对象.且可以指定线程名称\\n        // Thread t = new Thread(target);\\n        Thread t = new Thread(target,\\\"1号线程\\\");\\n        // 5.调用线程对象的start()方法启动线程\\n        t.start();\\n\\n        Thread t2 = new Thread(target);\\n        // 调用线程对象的start()方法启动线程\\n        t2.start();\\n\\n        for(int i = 0 ; i < 10 ; i++ ){\\n            System.out.println(Thread.currentThread().getName()+\\\"==>\\\"+i);\\n        }\\n    }\\n}\\n\\n// 1.创建一个线程任务类实现Runnable接口。\\nclass MyRunnable implements Runnable{\\n    // 2.重写run()方法\\n    @Override\\n    public void run() {\\n        for(int i = 0 ; i < 10 ; i++ ){\\n            System.out.println(Thread.currentThread().getName()+\\\"==>\\\"+i);\\n        }\\n    }\\n}\\n```\\n\\n### 匿名内部类方式\\n\\n这种方式是实现方式的匿名内部类写法，代码更加简洁\\n\\n```java\\npublic class NoNameInnerClassThread {\\n   \\tpublic static void main(String[] args) {\\t   \\t\\n//\\t\\tnew Runnable(){\\n//\\t\\t\\tpublic void run(){\\n//\\t\\t\\t\\tfor (int i = 0; i < 20; i++) {\\n//\\t\\t\\t\\t\\tSystem.out.println(\\\"张宇:\\\"+i);\\n//\\t\\t\\t\\t}\\n//\\t\\t\\t}  \\n//\\t   \\t}; //---这个整体  相当于new MyRunnable()\\n        Runnable r = new Runnable(){\\n            public void run(){\\n                for (int i = 0; i < 20; i++) {\\n                  \\tSystem.out.println(\\\"张宇:\\\"+i);\\n                }\\n            }  \\n        };\\n        new Thread(r).start();\\n\\n        for (int i = 0; i < 20; i++) {\\n          \\tSystem.out.println(\\\"费玉清:\\\"+i);\\n        }\\n   \\t}\\n}\\n```\\n\\n### 线程创建方式三-实现Callable接口\\n\\n\\n\\n- 定义一个线程任务类实现Callable接口 ， 申明线程执行的结果类型。\\n- 重写线程任务类的call方法，这个方法可以直接返回执行的结果。\\n- 创建一个Callable的线程任务对象。\\n- 把Callable的线程任务对象包装成一个未来任务对象。\\n- 把未来任务对象包装成线程对象。\\n- 调用线程的start()方法启动线程\\n\\n这样做的优点是：\\n\\n- 线程任务类只是实现了Callable接口，可以继续继承其他类，而且可以继续实现其他接口（避免了单继承的局限性）\\n- 同一个线程任务对象可以被包装成多个线程对象\\n- 适合多个多个线程去共享同一个资源（后面内容）\\n- 实现解耦操作，线程任务代码可以被多个线程共享，线程任务代码和线程独立。\\n- 线程池可以放入实现Runable或Callable线程任务对象。(后面了解)\\n- 能直接得到线程执行的结果！\\n\\n```java\\npublic class ThreadDemo {\\n    public static void main(String[] args) {\\n        // 3.创建一个Callable的线程任务对象\\n        Callable call = new MyCallable();\\n        // 4.把Callable任务对象包装成一个未来任务对象\\n        //      -- public FutureTask(Callable<V> callable)\\n        // 未来任务对象是啥，有啥用？\\n        //      -- 未来任务对象其实就是一个Runnable对象:这样就可以被包装成线程对象！\\n        //      -- 未来任务对象可以在线程执行完毕之后去得到线程执行的结果。\\n        FutureTask<String> task = new FutureTask<>(call);\\n        // 5.把未来任务对象包装成线程对象\\n        Thread t = new Thread(task);\\n        // 6.启动线程对象\\n        t.start();\\n\\n        for(int i = 1 ; i <= 10 ; i++ ){\\n            System.out.println(Thread.currentThread().getName()+\\\" => \\\" + i);\\n        }\\n\\n        // 在最后去获取线程执行的结果,如果线程没有结果，让出CPU等线程执行完再来取结果\\n        try {\\n            String rs = task.get(); // 获取call方法返回的结果（正常/异常结果）\\n            System.out.println(rs);\\n        }  catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n\\n    }\\n}\\n\\n// 1.创建一个线程任务类实现Callable接口，申明线程返回的结果类型\\nclass MyCallable implements Callable<String>{\\n    // 2.重写线程任务类的call方法！\\n    @Override\\n    public String call() throws Exception {\\n        // 需求：计算1-10的和返回\\n        int sum = 0 ;\\n        for(int i = 1 ; i <= 10 ; i++ ){\\n            System.out.println(Thread.currentThread().getName()+\\\" => \\\" + i);\\n            sum+=i;\\n        }\\n        return Thread.currentThread().getName()+\\\"执行的结果是：\\\"+sum;\\n    }\\n}\\n```\\n\\n## 第五章 线程安全\\n\\n线程安全问题：多个线程同时操作同一个共享资源的时候可能会出现线程安全问题\\n\\n### 同步代码块\\n\\n- **同步代码块**：`synchronized`关键字可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。\\n\\n格式: \\n\\n```java\\nsynchronized(同步锁){\\n     需要同步操作的代码\\n}\\n```\\n\\n**同步锁**:\\n\\n对象的同步锁只是一个概念,可以想象为在对象上标记了一个锁.\\n\\n1. 锁对象 可以是任意类型。\\n2. 多个线程对象  要使用同一把锁。\\n\\n> 注意:在任何时候,最多允许一个线程拥有同步锁,谁拿到锁就进入代码块,其他的线程只能在外等着(BLOCKED)。\\n\\n使用同步代码块解决代码：\\n\\n```java\\npublic class Ticket implements Runnable{\\n\\tprivate int ticket = 100;\\n\\t\\n\\tObject lock = new Object();\\n\\t/*\\n\\t * 执行卖票操作\\n\\t */\\n\\t@Override\\n\\tpublic void run() {\\n\\t\\t//每个窗口卖票的操作 \\n\\t\\t//窗口 永远开启 \\n\\t\\twhile(true){\\n\\t\\t\\tsynchronized (lock) {\\n\\t\\t\\t\\tif(ticket>0){//有票 可以卖\\n\\t\\t\\t\\t\\t//出票操作\\n\\t\\t\\t\\t\\t//使用sleep模拟一下出票时间 \\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tThread.sleep(50);\\n\\t\\t\\t\\t\\t} catch (InterruptedException e) {\\n\\t\\t\\t\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t//获取当前线程对象的名字 \\n\\t\\t\\t\\t\\tString name = Thread.currentThread().getName();\\n\\t\\t\\t\\t\\tSystem.out.println(name+\\\"正在卖:\\\"+ticket--);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n```\\n\\n### 同步方法\\n\\n- **同步方法**:使用synchronized修饰的方法,就叫做同步方法,保证A线程执行该方法的时候,其他线程只能在方法外等着。\\n\\n格式：\\n\\n```java\\npublic synchronized void method(){\\n   \\t可能会产生线程安全问题的代码\\n}\\n```\\n\\n> 同步锁是谁?\\n>\\n> ​      对于非static方法,同步锁就是this。  \\n>\\n> ​      对于static方法,我们使用当前方法所在类的字节码对象(类名.class)。\\n\\n使用同步方法代码如下：\\n\\n```java\\npublic class Ticket implements Runnable{\\n\\tprivate int ticket = 100;\\n\\t/*\\n\\t * 执行卖票操作\\n\\t */\\n\\t@Override\\n\\tpublic void run() {\\n\\t\\t//每个窗口卖票的操作 \\n\\t\\t//窗口 永远开启 \\n\\t\\twhile(true){\\n\\t\\t\\tsellTicket();\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/*\\n\\t * 锁对象 是 谁调用这个方法 就是谁 \\n\\t *   隐含 锁对象 就是  this\\n\\t *    \\n\\t */\\n\\tpublic synchronized void sellTicket(){\\n        if(ticket>0){//有票 可以卖\\t\\n            //出票操作\\n            //使用sleep模拟一下出票时间 \\n            try {\\n              \\tThread.sleep(100);\\n            } catch (InterruptedException e) {\\n              \\t// TODO Auto-generated catch block\\n              \\te.printStackTrace();\\n            }\\n            //获取当前线程对象的名字 \\n            String name = Thread.currentThread().getName();\\n            System.out.println(name+\\\"正在卖:\\\"+ticket--);\\n        }\\n\\t}\\n}\\n```\\n\\n### Lock锁\\n\\n`java.util.concurrent.locks.Lock`机制提供了比**synchronized**代码块和**synchronized**方法更广泛的锁定操作,同步代码块/同步方法具有的功能Lock都有,除此之外更强大\\n\\nLock锁也称同步锁，加锁与释放锁方法化了，如下：\\n\\n- `public void lock() `:加同步锁。\\n- `public void unlock()`:释放同步锁。\\n\\n使用如下：\\n\\n```java\\npublic class Ticket implements Runnable{\\n\\tprivate int ticket = 100;\\n\\t\\n\\tLock lock = new ReentrantLock();\\n\\t/*\\n\\t * 执行卖票操作\\n\\t */\\n\\t@Override\\n\\tpublic void run() {\\n\\t\\t//每个窗口卖票的操作 \\n\\t\\t//窗口 永远开启 \\n\\t\\twhile(true){\\n\\t\\t\\tlock.lock();\\n\\t\\t\\tif(ticket>0){//有票 可以卖\\n\\t\\t\\t\\t//出票操作 \\n\\t\\t\\t\\t//使用sleep模拟一下出票时间 \\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tThread.sleep(50);\\n\\t\\t\\t\\t} catch (InterruptedException e) {\\n\\t\\t\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t//获取当前线程对象的名字 \\n\\t\\t\\t\\tString name = Thread.currentThread().getName();\\n\\t\\t\\t\\tSystem.out.println(name+\\\"正在卖:\\\"+ticket--);\\n\\t\\t\\t}\\n\\t\\t\\tlock.unlock();\\n\\t\\t}\\n\\t}\\n}\\n```\\n\\n# day8-线程状态、volatile关键字、原子性、并发包、死锁、线程池\\n\\n## 第一章 线程状态\\n\\n### 线程状态概述\\n\\n当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。在线程的生命周期中，有几种状态呢？在API中`java.lang.Thread.State`这个枚举中给出了六种线程状态：\\n\\n这里先列出各个线程状态发生的条件，下面将会对每种状态进行详细解析\\n\\n| 线程状态                | 导致状态发生条件                                             |\\n| ----------------------- | ------------------------------------------------------------ |\\n| NEW(新建)               | 线程刚被创建，但是并未启动。还没调用start方法。MyThread t = new MyThread只有线程对象，没有线程特征。 |\\n| Runnable(可运行)        | 线程可以在java虚拟机中运行的状态，可能正在运行自己代码，也可能没有，这取决于操作系统处理器。调用了t.start()方法   ：就绪（经典教法） |\\n| Blocked(锁阻塞)         | 当一个线程试图获取一个对象锁，而该对象锁被其他的线程持有，则该线程进入Blocked状态；当该线程持有锁时，该线程将变成Runnable状态。 |\\n| Waiting(无限等待)       | 一个线程在等待另一个线程执行一个（唤醒）动作时，该线程进入Waiting状态。进入这个状态后是不能自动唤醒的，必须等待另一个线程调用notify或者notifyAll方法才能够唤醒。 |\\n| Timed Waiting(计时等待) | 同waiting状态，有几个方法有超时参数，调用他们将进入Timed Waiting状态。这一状态将一直保持到超时期满或者接收到唤醒通知。带有超时参数的常用方法有Thread.sleep 、Object.wait。 |\\n| Teminated(被终止)       | 因为run方法正常退出而死亡，或者因为没有捕获的异常终止了run方法而死亡。 |\\n\\n### 睡眠方法\\n\\n我们看到状态中有一个状态叫做计时等待，可以通过Thread类的方法来进行演示.\\n\\n`public static void  sleep(long time)`  让当前线程进入到睡眠状态，到毫秒后自动醒来继续执行\\n\\n```java\\npublic class Test{\\n  public static void main(String[] args){\\n    for(int i = 1;i<=5;i++){\\n      \\tThread.sleep(1000);\\n        System.out.println(i)   \\n    } \\n  }\\n}\\n```\\n\\n这时我们发现主线程执行到sleep方法会休眠1秒后再继续执行。\\n\\n### 等待和唤醒\\n\\nObject类的方法\\n\\n`public void wait()` : 让当前线程进入到等待状态 此方法必须锁对象调用.\\n\\n```java\\npublic class Demo1_wait {\\n    public static void main(String[] args) throws InterruptedException {\\n\\t   // 步骤1 : 子线程开启,进入无限等待状态, 没有被唤醒,无法继续运行.\\n        new Thread(() -> {\\n            try {\\n\\n                System.out.println(\\\"begin wait ....\\\");\\n                synchronized (\\\"\\\") {\\n                    \\\"\\\".wait();\\n                }\\n                System.out.println(\\\"over\\\");\\n            } catch (Exception e) {\\n            }\\n        }).start();\\n    }\\n```\\n\\n`public void notify()` : 唤醒当前锁对象上等待状态的线程  此方法必须锁对象调用.\\n\\n```java\\npublic class Demo2_notify {\\n    public static void main(String[] args) throws InterruptedException {\\n\\t   // 步骤1 : 子线程开启,进入无限等待状态, 没有被唤醒,无法继续运行.\\n        new Thread(() -> {\\n            try {\\n\\n                System.out.println(\\\"begin wait ....\\\");\\n                synchronized (\\\"\\\") {\\n                    \\\"\\\".wait();\\n                }\\n                System.out.println(\\\"over\\\");\\n            } catch (Exception e) {\\n            }\\n        }).start();\\n\\n        //步骤2:  加入如下代码后, 3秒后,会执行notify方法, 唤醒wait中线程.\\n        Thread.sleep(3000);\\n        new Thread(() -> {\\n            try {\\n                synchronized (\\\"\\\") {\\n                    System.out.println(\\\"唤醒\\\");\\n                    \\\"\\\".notify();\\n                }\\n            } catch (Exception e) {\\n            }\\n        }).start();\\n    }\\n}\\n```\\n\\n## 第二章 线程通信\\n\\n- 多个线程因为在同一个进程中，所以互相通信比较容易\\n- 线程通信一定是多个线程在操作同一个资源才需要进行通信\\n- 线程通信必须先保证线程安全，否则毫无意义\\n\\n线程通信的核心方法：\\n\\n- `public void wait()`: 让当前线程进入到等待状态 此方法必须锁对象调用.\\n- `public void notify()` : 唤醒当前锁对象上等待状态的某个线程  此方法必须锁对象调用\\n- `public void notifyAll()` : 唤醒当前锁对象上等待状态的全部线程  此方法必须锁对象调用\\n\\n## 第三章 线程池\\n\\n线程池:其实就是一个容纳多个线程的容器,其中的线程可以反复的使用，省去了频繁创建和销毁线程对象的操作,无需反复创建线程而消耗过多资源。\\n\\n合理利用线程池能够带来三个好处\\n\\n1. 降低资源消耗。\\n   减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。\\n2. 提高响应速度\\n   不需要频繁的创建线程，如果有线程可以直接用，不会出现系统僵死！\\n3. 提高线程的可管理性（线程池可以约束系统最多只能有多少个线程，不会因为线程过多而死机）\\n\\n>  线程池的核心思想：线程复用，同一个线程可以被重复使用，来处理多个任务。\\n\\n### 创建线程池\\n\\n线程池在Java中的代表类：ExecutorService(接口)。\\n\\nJava在Executors类下提供了一个静态方法得到一个线程池的对象：\\n`public static ExecutorService newFixedThreadPool(int nThreads)`：创建一个线程池返回。\\n\\n- ExecutorService提交线程任务对象执行的方法：\\n  `Future<?> submit(Runnable task)`:提交一个Runnable的任务对象给线程池执行。\\n- `Future<?> submit(Callable task)`:提交一个Callable的任务对象给线程池执行。\\n\\n> * `pools.shutdown();` // 等待任务执行完毕以后才会关闭线程池\\n> * `pools.shutdownNow();` // 立即关闭线程池的代码，无论任务是否执行完毕\\n> * 线程池中的线程可以被复用，线程用完以后可以继续去执行其他任务。\\n\\n`Runnable`任务对象给线程池执行\\n\\n```java\\nimport java.util.concurrent.ExecutorService;\\nimport java.util.concurrent.Executors;\\n\\npublic class ThreadPoolsDemo02 {\\n    public static void main(String[] args) {\\n        // a.创建一个线程池，指定线程的固定数量是3.\\n        // new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue());\\n        ExecutorService pools = Executors.newFixedThreadPool(3);\\n        // b.创建线程的任务对象。\\n        Runnable target = new MyRunnable();\\n        // c.把线程任务放入到线程池中去执行。\\n        pools.submit(target); // 提交任务，此时会创建一个新线程,自动启动线程执行！\\n        pools.submit(target); // 提交任务，此时会创建一个新线程,自动启动线程执行！\\n        pools.submit(target); // 提交任务，此时会创建一个新线程,自动启动线程执行！\\n        pools.submit(target); // 不会再创建新线程，会复用之前的线程来处理这个任务\\n\\n        pools.shutdown(); // 等待任务执行完毕以后才会关闭线程池\\n        //pools.shutdownNow(); // 立即关闭线程池的代码，无论任务是否执行完毕！\\n    }\\n}\\n\\nclass MyRunnable implements Runnable{\\n    @Override\\n    public void run() {\\n        for(int i  = 0 ; i < 5 ; i++ ){\\n            System.out.println(Thread.currentThread().getName()+\\\" => \\\"+i);\\n        }\\n    }\\n}\\n```\\n\\n`Callable`任务对象给线程池执行\\n\\n```java\\npublic class ThreadPoolsDemo03 {\\n    public static void main(String[] args) {\\n        // a.创建一个线程池，指定线程的固定数量是3.\\n        // new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue());\\n        ExecutorService pools = Executors.newFixedThreadPool(3);\\n        Future<String> t1 = pools.submit(new MyCallable(10)); // 提交任务，此时会创建一个新线程,自动启动线程执行！\\n        Future<String> t2 = pools.submit(new MyCallable(20)); // 提交任务，此时会创建一个新线程,自动启动线程执行！\\n        Future<String> t3 = pools.submit(new MyCallable(30)); // 提交任务，此时会创建一个新线程,自动启动线程执行！\\n        Future<String> t4 = pools.submit(new MyCallable(40)); // 复用之前的某个线程\\n\\n        try{\\n            // b.可以得到线程池执行的任务结构\\n            String rs1 = t1.get();\\n            String rs2 = t2.get();\\n            String rs3 = t3.get();\\n            String rs4 = t4.get();\\n            System.out.println(rs1);\\n            System.out.println(rs2);\\n            System.out.println(rs3);\\n            System.out.println(rs4);\\n        }catch (Exception e){\\n            e.printStackTrace();\\n        }\\n    }\\n}\\n\\n// 1.定义一个线程任务类实现Callable接口 ， 申明线程执行的结果类型。\\nclass MyCallable implements Callable<String>{\\n    private int n;\\n    public MyCallable(int n){\\n        this.n = n;\\n    }\\n    // 2.重写线程任务类的call方法，这个方法可以直接返回执行的结果。\\n    @Override\\n    public String call() throws Exception {\\n        int sum = 0 ;\\n        for(int i = 1 ; i <= n ; i++){\\n            System.out.println(Thread.currentThread().getName()+\\\" => \\\"+i);\\n            sum += i ;\\n        }\\n        return Thread.currentThread().getName()+\\\"计算1-\\\"+n+\\\"的和：\\\"+sum;\\n    }\\n}\\n```\\n\\n## 第四章 死锁\\n\\n死锁是这样一种情形：多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于线程被无限期地阻塞，因此程序不可能正常终止。\\n\\njava 死锁产生的四个必要条件：\\n\\n* **互斥使用**，即当资源被一个线程使用(占有)时，别的线程不能使用\\n* **不可抢占**，资源请求者不能强制从资源占有者手中夺取资源，资源只能由资源占有者主动释放\\n* **求和保持**，即当资源请求者在请求其他的资源的同时保持对原有资源的占有\\n* **循环等待**，即存在一个等待循环队列：p1要p2的资源，p2要p1的资源。这样就形成了一个等待环路\\n\\n​    当上述四个条件都成立的时候，便形成死锁。当然，死锁的情况下如果打破上述任何一个条件，便可让死锁消失\\n\\n## 第五章 volatile关键字\\n\\n**问题**：线程修改了某个成员变量的值，但是在主线程中读取到的还是之前的值修改后的值无法读取到。\\n\\n**原因**：按照JMM模型，所有的成员变量和静态变量都存在于主内存中，主内存中的变量可以被多个线程共享。每个线程都存在一个专属于自己的工作内存，工作内存一开始存储的是成员变量的副本。所以线程很多时候都是直接访问自己工作内存中的该变量，其他线程对主内存变量值的修改将不可见\\n\\n![image-20220606111513140](http://47.108.219.199:81/articles/image-20220606111513140.png)\\n\\n希望所有线程对于主内存的成员变量修改，其他线程是可见的。\\n\\n* **加锁**：可以实现其他线程对变量修改的可见性\\n  某一个线程进入`synchronized`代码块前后，执行过程入如下：\\n  * 线程获得锁\\n  * 清空工作内存\\n  * 从主内存拷贝共享变量最新的值到工作内存成为副本\\n* 可以给成员变量加上一个`volatile`关键字，立即就实现了成员变量多线程修改的可见性\\n\\n> `volatile`与`synchronized`的区别。\\n>\\n> - `volatile`只能修饰实例变量和静态变量，而`synchronized`可以修饰方法，以及代码块。\\n> - `volatile`保证数据的可见性，但是不保证原子性(多线程进行写操作，不保证线程安全);而`synchronized`是一种排他（互斥）的机制，\\n\\n```java\\npublic class VolatileDemo01 {\\n    public  static void main(String[] args) {\\n        // 1.启动线程，把线程对象中的flag改为true。\\n        VolatileThread t = new VolatileThread();\\n        t.start();\\n\\n        // 2.定义一个死循环\\n        while(true){\\n            // 这里读取到了flag值一直是false,虽然线程已经把它的值改成了true。\\n            if(t.isFlag()){\\n                System.out.println(\\\"执行了循环一次~~~~~~~\\\");\\n            }\\n        }\\n       /* while(true){\\n            synchronized (\\\"ddd\\\"){\\n                // 这里读取到了flag值一直是false,虽然线程已经把它的值改成了true。\\n                if(t.isFlag()){\\n                    System.out.println(\\\"执行了循环一次~~~~~~~\\\");\\n                }\\n            }\\n        }*/\\n    }\\n}\\n// 线程类。\\nclass VolatileThread extends Thread {\\n    // 定义成员变量\\n    // volatile可以实现变量一旦被子线程修改，其他线程可以马上看到它修改后的最新值！\\n    private volatile boolean flag = false ;\\n    public boolean isFlag() {\\n        return flag;\\n    }\\n\\n    @Override\\n    public void run() {\\n        try {\\n            Thread.sleep(1000);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n\\n        // 将flag的值更改为true\\n        this.flag = true ;\\n        System.out.println(\\\"线程修改了flag=\\\" + flag);\\n    }\\n}\\n```\\n\\n## 第六章 原子性\\n\\n**原子性**是指在一次操作或者多次操作中，所有的操作全部都得到了执行并且不会受到任何因素的干扰。最终结果要保证线程安全。\\n\\n> 在多线程环境下，`volatile`关键字可以保证共享数据的可见性，但是并不能保证对数据操作的原子性（在多线程环境下volatile修饰的变量也是线程不安全的）。\\n>   `volatile`的使用场景\\n>\\n> - 开关控制\\n>      用可见性特点，控制某一段代码执行或者关闭\\n>\\n> - 多个线程操作共享变量，但是是有一个线程对其进行写操作，其他的线程都是读\\n>\\n>   此时加上更好，其他线程可以立即读取到最新值。`volatile`不能保证变量操作的原子性（安全性）。\\n\\n### 解决方法一-加锁\\n\\n```java\\npublic class VolatileAtomicThread implements Runnable {\\n    // 定义一个int类型的遍历\\n    private volatile int count = 0 ;\\n    @Override\\n    public void run() {\\n        // 对该变量进行++操作，100次\\n        for(int x = 0 ; x < 100 ; x++) {\\n           synchronized (this){\\n               count++ ;\\n               System.out.println(Thread.currentThread().getName() + \\\"count =========>>>> \\\" + count);\\n           }\\n        }\\n    }\\n}\\n\\nclass VolatileAtomicThreadDemo {\\n    public static void main(String[] args) {\\n        // 创建VolatileAtomicThread对象\\n        Runnable target = new VolatileAtomicThread() ;\\n        // 开启100个线程对执行这一个任务。\\n        for(int x = 0 ; x < 100 ; x++) {\\n            new Thread(target).start();\\n        }\\n    }\\n\\n}\\n```\\n\\n> 这种方法虽然安全性得到了保证，但是性能不好\\n\\n### 解决方法二-基于CAS方式的原子类\\n\\nJava已经提供了一些本身即可实现原子性（线程安全）的类。\\n\\n- 概述：java从JDK1.5开始提供了java.util.concurrent.atomic包(简称Atomic包)，这个包中的原子操作类提供了一种用法简单，性能高效，线程安全地更新一个变量的方式。\\n- 操作整型的原子类\\n  - `public AtomicInteger()`：           初始化一个默认值为0的原子型`Integer`\\n  - `public AtomicInteger(int initialValue)`： 初始化一个指定值的原子型`Integer`\\n  - `int get()`:                                        获取值\\n  - `int getAndIncrement()`:               以原子方式将当前值加1，注意，这里返回的是自增前的值。\\n  - `int incrementAndGet()`:               以原子方式将当前值加1，注意，这里返回的是自增后的值。\\n  - `int addAndGet(int data)`:            以原子方式将输入的数值与实例中的值（`AtomicInteger`里的value）相加，并返回结果。\\n  - `int getAndSet(int value)`:            以原子方式设置为`newValue`的值，并返回旧值。\\n\\n```java\\npublic class VolatileAtomicThread implements Runnable {\\n    // 原子类中封装好了整型变量，默认值是0\\n    private AtomicInteger atomicInteger = new AtomicInteger();\\n    @Override\\n    public void run() {\\n        // 对该变量进行++操作，100次\\n        for(int x = 0 ; x < 100 ; x++) {\\n            int count = atomicInteger.incrementAndGet(); // 底层变量+1且返回！\\n            System.out.println(\\\"count =========>>>> \\\" + count);\\n        }\\n    }\\n}\\n\\nclass VolatileAtomicThreadDemo {\\n    public static void main(String[] args) {\\n        // 创建VolatileAtomicThread对象\\n        Runnable target = new VolatileAtomicThread() ;\\n        // 开启100个线程对执行这一个任务。\\n        for(int x = 0 ; x < 100 ; x++) {\\n            new Thread(target).start();\\n        }\\n    }\\n\\n}\\n```\\n\\n>  **CAS与Synchronized总结**\\n>\\n> `Synchronized`是从悲观的角度出发：总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁（**共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程**）。因此`Synchronized`我们也将其称之为**悲观锁**。jdk中的`ReentrantLock`也是一种悲观锁。性能较差\\n>\\n> `CAS`是从乐观的角度出发:总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据。CAS这种机制我们也可以将其称之为**乐观锁**。综合性能较好\\n\\n## 第七章 并发包\\n\\n并发包的来历：\\n在实际开发中如果不需要考虑线程安全问题，大家不需要做线程安全，因为如果做了反而性能不好！\\n但是开发中有很多业务是需要考虑线程安全问题的，此时就必须考虑了。否则业务出现问题。\\nJava为很多业务场景提供了性能优异，且线程安全的并发包，程序员可以选择使用！\\n\\n### ConcurrentHashMap\\n\\n`Map`集合中的经典集合：`HashMap`它是线程不安全的，性能好，如果在要求线程安全的业务情况下就不能用这个集合做Map集合，否则业务会崩溃\\n\\n为了保证线程安全，可以使用`Hashtable`。注意：线程中加入了计时，`Hashtable`是线程安全的`Map`集合，但是性能较差！(已经被淘汰了，虽然安全，但是性能差)\\n\\n为了保证线程安全，再看`ConcurrentHashMap`（不止线程安全，而且效率高，性能好，最新最好用的线程安全的Map集合）`ConcurrentHashMap`保证了线程安全，综合性能较好！\\n\\n> * `HashMap`是线程不安全的。\\n> *  `Hashtable`线程安全基于`synchronized`，综合性能差,被淘汰了。\\n> * `ConcurrentHashMap`：线程安全的，分段式锁，综合性能最好，线程安全开发中推荐使用\\n\\n```java\\npublic class ConcurrentHashMapDemo {\\n    // 定义一个静态的HashMap集合，只有一个容器。\\n    // public static Map<String,String> map = new HashMap<>();\\n     public static Map<String,String> map = new Hashtable<>();\\n    //public static Map<String,String> map = new ConcurrentHashMap<>();\\n\\n    public static void main(String[] args) throws InterruptedException {\\n        // HashMap线程不安全演示。\\n        // 需求：多个线程同时往HashMap容器中存入数据会出现安全问题。\\n        // 具体需求：提供2个线程分别给map集合加入50万个数据！\\n        new AddMapDataThread().start();\\n        new AddMapDataThread().start();\\n\\n        //休息10秒，确保两个线程执行完毕\\n        Thread.sleep(1000 * 4);\\n        //打印集合大小\\n        System.out.println(\\\"Map大小：\\\" + map.size());\\n    }\\n}\\n\\nclass AddMapDataThread extends Thread{\\n    @Override\\n    public void run() {\\n        for(int i = 0 ; i < 1000000 ; i++ ){\\n            ConcurrentHashMapDemo.map.put(Thread.currentThread().getName()+\\\"键：\\\"+i , \\\"值\\\"+i);\\n        }\\n    }\\n}\\n```\\n\\n### CountDownLatch\\n\\n`CountDownLatch`允许一个或多个线程等待其他线程完成操作，再执行自己。\\n\\n例如：\\n\\n线程1要执行打印：A和C，线程2要执行打印：B，但线程1在打印A后，要线程2打印B之后才能打印C，所以：线程1在打印A后，必须等待线程2打印完B之后才能继续执行\\n\\n需求：\\n\\n提供A线程，打印 A , C\\n提供B线程，打印 B\\n\\n构造器：\\n\\n`public CountDownLatch(int count)`// 初始化唤醒需要的down几步。\\n\\n方法：\\n`public void await() throws InterruptedException`// 让当前线程等待，必须down完初始化的数字才可以被唤醒，否则进入无限等待\\n`public void countDown()`    // 计数器进行减1 （down 1）\\n\\n```java\\npublic class CountDownLatchDemo {\\n    public static void main(String[] args) {\\n        //创建1个计数器：用来控制 A , B线程的执行流程的。\\n        CountDownLatch down = new CountDownLatch(1);\\n        new ThreadA(down).start();\\n        new ThreadB(down).start();\\n    }\\n}\\n\\nclass ThreadA extends Thread{\\n    private CountDownLatch down;\\n    public ThreadA(CountDownLatch down){\\n        this.down = down;\\n    }\\n    @Override\\n    public void run() {\\n        System.out.println(\\\"A\\\");\\n        try {\\n            down.await(); // A线程你进入等待，让B线程执行自己！\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n        System.out.println(\\\"C\\\");\\n    }\\n}\\n\\nclass ThreadB extends Thread{\\n    private CountDownLatch down;\\n    public ThreadB(CountDownLatch down){\\n        this.down = down;\\n    }\\n    @Override\\n    public void run() {\\n        System.out.println(\\\"B\\\");\\n        down.countDown(); // 这里相当于是-1，代表自己执行完毕了。A线程被唤醒！！\\n    }\\n}\\n```\\n\\n### CyclicBarrier\\n\\n`CyclicBarrier`作用：某个线程任务必须等待其他线程执行完毕以后才能最终触发自己执行。\\n\\n例如：公司召集5名员工开会，等5名员工都到了，会议开始。我们创建5个员工线程，1个开会任务，几乎同时启动。使用`CyclicBarrier`保证5名员工线程全部执行后，再执行开会线程。\\n\\n构造器：\\n`public CyclicBarrier(int parties, Runnable barrierAction)`\\n     // 用于在线程到达屏障5时，优先执行`barrierAction`，方便处理更复杂的业务场景\\n方法：\\n   `  public int await()`\\n     // 每个线程调用await方法告诉`CyclicBarrier`我已经到达了屏障，然后当前线程被阻塞\\n\\n> - 可以实现多线程中，某个任务在等待其他线程执行完毕以后触发。\\n> - 循环屏障可以实现达到一组屏障就触发一个任务执行！\\n\\n```java\\npublic class CyclicBarrierDemo {\\n    public static void main(String[] args) {\\n        // 1.创建一个任务循环屏障对象。\\n        /**\\n         * 参数一：代表多少个线程的执行。\\n         * 参数二：到达执行屏障就开始触发的线程任务。\\n         */\\n        CyclicBarrier cb = new CyclicBarrier(5 , new MeetingRunnable());\\n        new PeopleThread(cb).start();\\n        new PeopleThread(cb).start();\\n        new PeopleThread(cb).start();\\n        new PeopleThread(cb).start();\\n        new PeopleThread(cb).start();\\n\\n        new PeopleThread(cb).start();\\n        new PeopleThread(cb).start();\\n        new PeopleThread(cb).start();\\n        new PeopleThread(cb).start();\\n        new PeopleThread(cb).start();\\n\\n    }\\n}\\n\\n// 任务类：开始开会的任务\\nclass MeetingRunnable implements Runnable{\\n    @Override\\n    public void run() {\\n        System.out.println(\\\"人员到齐了开始由\\\"+Thread.currentThread().getName()+\\\"主持会议！\\\");\\n    }\\n}\\n\\n// 员工类\\nclass PeopleThread extends Thread{\\n    private CyclicBarrier cb ;\\n    public PeopleThread(CyclicBarrier cb) {\\n        this.cb = cb;\\n    }\\n\\n    @Override\\n    public void run() {\\n        try {\\n            Thread.sleep(1000);\\n            System.out.println(\\\"员工：\\\"+Thread.currentThread().getName()+\\\"进入会议室\\\");\\n            cb.await(); // 自己做完了，告诉循环屏障我结束了！\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}\\n```\\n\\n### Semaphore\\n\\n- `Semaphore`（发信号）的主要作用是控制线程的并发数量。\\n  \\n- `synchronized`可以起到\\\"锁\\\"的作用，但某个时间段内，只能有一个线程允许执行。\\n- `Semaphore`可以设置同时允许几个线程执行。\\n- `Semaphore`字面意思是信号量的意思，它的作用是控制访问特定资源的线程数目。\\n\\n`Semaphore`的构造器：\\n\\n- `public Semaphore(int permits)`：    permits 表示许可线程的数量\\n- `public Semaphore(int permits, boolean fair)`：fair 表示公平性，如果这个设为 true 的话，下次执行的线程会是等待最久的线程\\n\\n`Semaphore`的方法：\\n\\n- `public void acquire() throws InterruptedException` 表示获取许可\\n- `public void release() release()` 表示释放许可\\n\\n```java\\npublic class SemaphoreDemo {\\n    public static void main(String[] args) {\\n        Service service = new Service();\\n        for(int i = 1 ; i <= 5 ; i++ ){\\n            new MyThread(service,\\\"线程：\\\"+i).start();\\n        }\\n    }\\n}\\n// 执行的任务。\\nclass Service{\\n    // 可以同时支持多个线程进入共享资源区执行。\\n    private Semaphore semaphore = new Semaphore(2);\\n    public void showMethod(){\\n        try {\\n            semaphore.acquire();\\n            long startTimer = System.currentTimeMillis();\\n            System.out.println(\\\"进入时间：\\\"+startTimer);\\n            System.out.println(Thread.currentThread().getName()+\\\"进入资源执行\\\");\\n            Thread.sleep(1000);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n        long endTimer = System.currentTimeMillis();\\n        System.out.println(\\\"结束时间：\\\"+endTimer);\\n        semaphore.release();\\n        //acquire()和release()方法之间的代码为\\\"同步代码\\\"\\n    }\\n}\\n\\n// 线程类。\\nclass MyThread extends Thread{\\n    private Service service;\\n    public MyThread(Service service , String name){\\n        super(name);\\n        this.service = service;\\n    }\\n    @Override\\n    public void run() {\\n        service.showMethod();\\n    }\\n}\\n```\\n\\n### Exchanger\\n\\nExchanger（交换者）是一个用于线程间协作的工具类。Exchanger用于进行线程间的数据交换。这两个线程通过exchange方法交换数据，如果第一个线程先执行exchange()方法，它会一直等待第二个线程也执行exchange方法，当两个线程都到达同步点时，这两个线程就可以交换数据，将本线程生产出来的数据传递给对方。\\n\\n Exchanger构造方法：public Exchanger()\\n\\n Exchanger重要方法：public V exchange(V x)\\n\\n 分析：\\n    （1）需要2个线程\\n    （2）需要一个交换对象负责交换两个线程执行的结果。\\n\\n> - Exchanger可以实现线程间的数据交换。\\n> - 一个线程如果等不到对方的数据交换就会一直等待。\\n> - 我们也可以控制一个线程等待的时间。\\n> - 必须双方都进行交换才可以正常进行数据的交换。\\n\\n```java\\npublic class ExchangerDemo {\\n    public static void main(String[] args) {\\n        // 创建交换对象（信使）\\n        Exchanger<String> exchanger = new Exchanger<>();\\n        // 创建2给线程对象。\\n        new ThreadA(exchanger).start();\\n        new ThreadB(exchanger).start();\\n    }\\n}\\n\\nclass ThreadA extends Thread{\\n    private Exchanger<String> exchanger;\\n    public ThreadA(Exchanger<String> exchanger) {\\n        this.exchanger = exchanger;\\n    }\\n    @Override\\n    public void run() {\\n        try {\\n            // 礼物A\\n            System.out.println(\\\"线程A,做好了礼物A,等待线程B送来的礼物B.....\\\");\\n            // 开始交换礼物。参数是送给其他线程的礼物!\\n            // System.out.println(\\\"线程A收到线程B的礼物：\\\"+exchanger.exchange(\\\"礼物A\\\"));\\n            // 如果等待了5s还没有交换它就去死（抛出异常）！\\n            System.out.println(\\\"线程A收到线程B的礼物：\\\"+exchanger.exchange(\\\"礼物A\\\", 5 , TimeUnit.SECONDS));\\n        } catch (Exception e) {\\n            System.out.println(\\\"线程A等待了5s，没有收到礼物,最终就执行结束了!\\\");\\n        }\\n    }\\n}\\n\\nclass ThreadB extends Thread{\\n    private Exchanger<String> exchanger;\\n    public ThreadB(Exchanger<String> exchanger) {\\n        this.exchanger = exchanger;\\n    }\\n    @Override\\n    public void run() {\\n        try {\\n            // 礼物B\\n             System.out.println(\\\"线程B,做好了礼物B,等待线程A送来的礼物A.....\\\");\\n            // 开始交换礼物。参数是送给其他线程的礼物!\\n             System.out.println(\\\"线程B收到线程A的礼物：\\\"+exchanger.exchange(\\\"礼物B\\\"));\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}\\n```\\n\\n# day9-方法引用、Lambda表达式、Stream流\\n\\n## 第一章 方法引用\\n\\n### 方法引用概述\\n\\n方法引用是为了进一步简化Lambda表达式的写法。\\n\\n方法引用的格式：类型或者对象::引用的方法。\\n\\n方法引用有四种形式：\\n\\n- 静态方法的引用\\n- 实例方法的引用\\n- 特定类型方法的引用\\n- 构造器引用\\n\\n```java\\nist<String> lists = new ArrayList<>();\\nlists.add(\\\"java1\\\");\\nlists.add(\\\"java2\\\");\\nlists.add(\\\"java3\\\");\\n\\nlists.forEach( s -> System.out.println(s));\\n// 方法引用！\\nlists.forEach(System.out::println);\\n```\\n\\n### 静态方法引用\\n\\n引用格式：类名::静态方法\\n\\n简化步骤：定义一个静态方法，把需要简化的代码放到一个静态方法中去。\\n\\n静态方法引用的注意事项：**被引用的方法的参数列表要和函数式接口中的抽象方法的参数列表一致**\\n\\n`Student`\\n\\n```java\\npublic class Student {\\n    private String name ;\\n    private int age ;\\n    private char sex ;\\n\\n    public static int compareByAge(Student o1 , Student o2){\\n        return  o1.getAge() - o2.getAge();\\n    }\\n    // ...\\n}\\n```\\n\\n排序\\n\\n```java\\nList<Student> lists = new ArrayList<>();\\nStudent s1 = new Student(\\\"李铭\\\",18,\'男\');\\nStudent s2 = new Student(\\\"冯龙\\\",23,\'男\');\\nStudent s3 = new Student(\\\"王乐乐\\\",21,\'男\');\\nCollections.addAll(lists , s1 , s2 , s3);\\n\\nCollections.sort(lists, ( o1, o2) -> Student.compareByAge(o1 , o2));\\n// 如果前后参数是一样的，而且方法是静态方法，既可以使用静态方法引用\\nCollections.sort(lists, Student::compareByAge);\\n```\\n\\n### 实例方法引用\\n\\n格式： 对象::实例方法\\n\\n简化步骤：定义一个实例方法，把需要的代码放到实例方法中去。\\n\\n实例方法引用的注意事项：**被引用的方法的参数列表要和函数式接口中的抽象方法的参数列表一致**\\n\\n```java\\nList<String> lists = new ArrayList<>();\\nlists.add(\\\"java1\\\");\\nlists.add(\\\"java2\\\");\\nlists.add(\\\"java3\\\");\\n\\n// 对象是 System.out = new PrintStream();\\n// 实例方法：println()\\n// 前后参数正好都是一个\\nlists.forEach(s -> System.out.println(s));\\nlists.forEach(System.out::println);\\n```\\n\\n### 特定类型方法的引用\\n\\n特定类型：String ,任何类型\\n\\n格式：特定类型::方法\\n\\n注意：如果第一个参数列表中的形参中的第一个参数作为了后面的方法的调用者，并且其余参数作为后面方法的形参，那么就可以用特定类型方法引用了\\n\\n```java\\nString[] strs = new String[]{\\\"James\\\", \\\"AA\\\", \\\"John\\\",\\n                             \\\"Patricia\\\",\\\"Dlei\\\" , \\\"Robert\\\",\\\"Boom\\\", \\\"Cao\\\" ,\\\"black\\\" ,\\n                             \\\"Michael\\\", \\\"Linda\\\",\\\"cao\\\",\\\"after\\\",\\\"sBBB\\\"};\\n\\n// public static <T> void sort(T[] a, Comparator<? super T> c)\\n// 需求：按照元素的首字符(忽略大小写)升序排序！！！\\nArrays.sort(strs, new Comparator<String>() {\\n    @Override\\n    public int compare(String s1, String s2) {\\n        return s1.compareToIgnoreCase(s2);// 按照元素的首字符(忽略大小写)比较。\\n    }\\n});\\nArrays.sort(strs, (String s1, String s2) -> {\\n    return s1.compareToIgnoreCase(s2);// 按照元素的首字符(忽略大小写)比较。\\n});\\n\\nArrays.sort(strs, ( s1,  s2 ) ->  s1.compareToIgnoreCase(s2));\\n\\n// 特定类型的方法引用：\\nArrays.sort(strs,  String::compareToIgnoreCase);\\n\\nSystem.out.println(Arrays.toString(strs));\\n```\\n\\n### 构造器引用\\n\\n格式是：类名::new\\n\\n注意点：前后参数一致的情况下，又在创建对象就可以使用构造器引用`s -> new Student(s) => Student::new`\\n\\n```java\\nList<String> lists = new ArrayList<>();\\nlists.add(\\\"java1\\\");\\nlists.add(\\\"java2\\\");\\nlists.add(\\\"java3\\\");\\n\\n// 集合默认只能转成Object类型的数组。\\nObject[] objs = lists.toArray();\\nSystem.out.println(\\\"Object类型的数组：\\\"+ Arrays.toString(objs));\\n\\n// 我们想指定转换成字符串类型的数组！！\\n// 最新的写法可以结合构造器引用实现 。\\n// default <T> T[] toArray(IntFunction<T[]> generator)\\nString[] strs = lists.toArray(new IntFunction<String[]>() {\\n    @Override\\n    public String[] apply(int value) {\\n        return new String[value];\\n    }\\n});\\n\\nString[] strs1 = lists.toArray(s -> new String[s] );\\n\\nString[] strs2 = lists.toArray(String[]::new);\\n\\nSystem.out.println(\\\"String类型的数组：\\\"+ Arrays.toString(strs2));\\n```\\n\\n## 第二章 Lambda表达式\\n\\nLambda表达式是JDK1.8开始之后的新技术，是一种代码的新语法，作用是为了简化匿名内部类的代码写法\\n\\nLambda表达式的格式\\n\\n```java\\n(匿名内部类被重写方法的形参列表) -> {\\n\\t// 被重写方法的方法代码\\n}\\n```\\n\\nLambda表达式的使用前提：\\n\\n* Lambda表达式并不能简化所有匿名内部类的写法。\\n* Lambda表达式只能简化接口中只有一个抽象方法的匿名内部类形式。\\n\\nLambda表达式**只能简化函数式接口的匿名内部类写法**：\\n\\n- 首先必须是接口\\n- 接口中只能有一个抽象方法\\n\\n### Lambda表达式简化Runnable接口匿名内部类\\n\\n`@FunctionalInterface`函数式接口注解：一旦某个接口加上了这个注解，这个接口只能有且仅有一个抽象方法。\\n   这个接口就可以被Lambda表达式简化。\\n\\n```java\\nThread t = new Thread(new Runnable() {\\n    @Override\\n    public void run() {\\n        System.out.println(Thread.currentThread().getName()+\\\":执行~~~\\\");\\n    }\\n});\\nt.start();\\n\\nThread t1 = new Thread(() -> {\\n    System.out.println(Thread.currentThread().getName()+\\\":执行~~~\\\");\\n});\\nt1.start();\\n\\nnew Thread(() -> {\\n    System.out.println(Thread.currentThread().getName()+\\\":执行~~~\\\");\\n}).start();\\n\\nnew Thread(() -> System.out.println(Thread.currentThread().getName()+\\\":执行~~~\\\")).start();\\n```\\n\\n### Lambda表达式简化Comparator接口匿名内部类写法\\n\\n```java\\nList<Student> lists = new ArrayList<>();\\nStudent s1 = new Student(\\\"李铭\\\",18,\'男\');\\nStudent s2 = new Student(\\\"冯龙\\\",23,\'男\');\\nStudent s3 = new Student(\\\"王乐乐\\\",21,\'男\');\\nCollections.addAll(lists , s1 , s2 , s3);\\n\\n// 按照年龄进行升序排序！\\nCollections.sort(lists, new Comparator<Student>() {\\n    @Override\\n    public int compare(Student s1, Student s2) {\\n        return s1.getAge() - s2.getAge();\\n    }\\n});\\n\\n// 简化写法\\nCollections.sort(lists ,(Student t1, Student t2) -> {\\n    return t1.getAge() - t2.getAge();\\n});\\n\\nCollections.sort(lists ,(Student t1, Student t2) -> t1.getAge() - t2.getAge());\\n\\n// 参数类型可以省略\\nCollections.sort(lists ,( t1,  t2) -> t1.getAge() - t2.getAge());\\n\\nSystem.out.println(lists);\\n```\\n\\n### Lambda表达式的省略写法\\n\\nLambda表达式的省略写法（进一步在Lambda表达式的基础上继续简化）\\n\\n- 如果Lambda表达式的方法体代码只有一行代码。可以省略大括号不写,同时要省略分号\\n- 如果Lambda表达式的方法体代码只有一行代码。可以省略大括号不写。此时，如果这行代码是return语句，必须省略return不写，同时也必须省略\\\";\\\"不写\\n- 参数类型可以省略不写\\n- 如果只有一个参数，参数类型可以省略，同时()也可以省略\\n\\n```java\\nList<String> names = new ArrayList<>();\\nnames.add(\\\"胡伟光\\\");\\nnames.add(\\\"甘挺\\\");\\nnames.add(\\\"洪磊\\\");\\n\\nnames.forEach(new Consumer<String>() {\\n    @Override\\n    public void accept(String s) {\\n        System.out.println(s);\\n    }\\n});\\n\\nnames.forEach((String s) -> {\\n    System.out.println(s);\\n});\\n\\nnames.forEach((s) -> {\\n    System.out.println(s);\\n});\\n\\nnames.forEach(s -> {\\n    System.out.println(s);\\n});\\n\\nnames.forEach(s -> System.out.println(s) );\\n\\nnames.forEach(System.out::println);\\n```\\n\\n## 第三章 Stream流\\n\\n### Stream流概述\\n\\n在Java 8中，得益于Lambda所带来的函数式编程，引入了一个全新的Stream流概念 ，用于解决已有集合/数组类库有的弊端。\\n\\nStream流能解决什么问题：\\n\\n- 可以解决已有集合类库或者数组API的弊端。\\n- Stream认为集合和数组操作的API很不好用，所以采用了Stream流简化集合和数组的操作\\n\\n```java\\nList<String> list = new ArrayList<>();\\nlist.add(\\\"张无忌\\\");\\nlist.add(\\\"周芷若\\\");\\nlist.add(\\\"赵敏\\\");\\nlist.add(\\\"张强\\\");\\nlist.add(\\\"张三丰\\\");\\n\\nlist.stream().filter(s -> s.startsWith(\\\"张\\\")).filter( s -> s.length()== 3 )\\n    .forEach(System.out::println);\\n```\\n\\n### Stream流的获取\\n\\nStream流式思想的核心：\\n\\n- 是先得到集合或者数组的Stream流（就是一根传送带）\\n- 然后就用这个Stream流操作集合或者数组的元素\\n- 然后用Stream流简化替代集合操作的API\\n\\n```java\\ndefault Stream<E> stream();\\n```\\n\\n```java\\nCollection<String> c = new ArrayList<>();\\nStream<String> ss = c.stream();\\n\\n/** --------------------Map集合获取流-------------------------------   */\\nMap<String, Integer> map = new HashMap<>();\\n// 先获取键的Stream流。\\nStream<String> keyss = map.keySet().stream();\\n// 在获取值的Stream流\\nStream<Integer> valuess = map.values().stream();\\n// 获取键值对的Stream流（key=value： Map.Entry<String,Integer>）\\nStream<Map.Entry<String,Integer>> keyAndValues = map.entrySet().stream();\\n\\n/** ---------------------数组获取流------------------------------   */\\n// 数组也有Stream流。\\nString[] arrs = new String[]{\\\"Java\\\", \\\"JavaEE\\\" ,\\\"Spring Boot\\\"};\\nStream<String> arrsSS1 = Arrays.stream(arrs);\\nStream<String> arrsSS2 = Stream.of(arrs);\\n```\\n\\n### Stream流的常用API\\n\\n- `forEach `: 逐一处理(遍历)\\n\\n- `count`：统计个数\\n\\n  `long count();`\\n\\n- `filter`: 过滤元素\\n\\n- `Stream<T> filter(Predicate<? super T> predicate)`\\n\\n- `limit`: 取前几个元素\\n\\n- `skip`: 跳过前几个\\n\\n- `map` : 加工方法\\n\\n  把原来的元素加工以后，重新放上去\\n\\n  ```java\\n  <R> Stream<R> map(Function<? super T, ? extends R> mapper);\\n  ```\\n\\n- `concat `: 合并流\\n\\n  ```java\\n  public static <T> Stream<T> concat(Stream<? extends T> a, Stream<? extends T> b)\\n  ```\\n\\n```java\\nList<String> list = new ArrayList<>();\\nlist.add(\\\"张无忌\\\");\\nlist.add(\\\"周芷若\\\");\\nlist.add(\\\"赵敏\\\");\\nlist.add(\\\"张强\\\");\\nlist.add(\\\"张三丰\\\");\\nlist.add(\\\"张三丰\\\");\\n\\nlist.stream().filter( s -> s.length() == 3 ).filter( s -> s.startsWith(\\\"张\\\"))\\n    .forEach( System.out::println);\\n// 统计数量\\nlong count = list.stream().filter( s -> s.length() == 3 )\\n    .filter( s -> s.startsWith(\\\"张\\\")).count();\\nSystem.out.println(count);\\n// 取前2个\\nlist.stream().filter(s -> s.length() == 3).limit(2)\\n    .forEach(System.out::println);\\n// 跳过前2个\\nlist.stream().filter(s -> s.length() == 3).skip(2)\\n    .forEach(System.out::println);\\n// 把名称加工成学生对象放入list中\\nlist.stream().map(Student::new).forEach(System.out::println);\\n```\\n\\n合并流\\n\\n```java\\nList<String> list = new ArrayList<>();\\nlist.add(\\\"张无忌\\\");\\nlist.add(\\\"周芷若\\\");\\nlist.add(\\\"赵敏\\\");\\nlist.add(\\\"张强\\\");\\nlist.add(\\\"张三丰\\\");\\nlist.add(\\\"张三丰\\\");\\n\\n// 数组流\\nStream<Integer> s1 = Stream.of(10, 20 ,30 ,40);\\n// 集合流\\nStream<String> s2 = list.stream();\\n// 合并流\\nStream<Object> s3 = Stream.concat(s1,s2);\\ns3.forEach(System.out::println);\\n```\\n\\n### Stream流的综合应用\\n\\n\\n\\n```java\\nList<String> one = new ArrayList<>();\\none.add(\\\"迪丽热巴\\\");\\none.add(\\\"宋远桥\\\");\\none.add(\\\"苏星河\\\");\\none.add(\\\"老子\\\");\\none.add(\\\"庄子\\\");\\none.add(\\\"孙子\\\");\\none.add(\\\"洪七公\\\");\\n\\nList<String> two = new ArrayList<>();\\ntwo.add(\\\"古力娜扎\\\");\\ntwo.add(\\\"张无忌\\\");\\ntwo.add(\\\"张三丰\\\");\\ntwo.add(\\\"赵丽颖\\\");\\ntwo.add(\\\"张二狗\\\");\\ntwo.add(\\\"张天爱\\\");\\ntwo.add(\\\"张三\\\");\\n\\n/**\\n         * 1. 第一个队伍只要名字为3个字的成员姓名；\\n         * 2. 第一个队伍筛选之后只要前3个人；\\n         */\\nStream<String> oneStream =\\n    one.stream().filter(s -> s.length() == 3).limit(3);\\n\\n/**\\n         * 3. 第二个队伍只要姓张的成员姓名；\\n         * 4. 第二个队伍筛选之后不要前2个人；\\n         * 5. 将两个队伍合并为一个队伍；\\n         */\\nStream<String> twoStream =\\n    two.stream().filter(s -> s.startsWith(\\\"张\\\")).skip(2);\\n\\nStream<String> allStream = Stream.concat(oneStream , twoStream);\\n\\n/**\\n         * 6. 根据姓名创建`Student`对象； (加工)\\n         * 7. 打印整个队伍的Student对象信息。\\n         */\\n//allStream.map(s -> new Student(s)).forEach(System.out::println);\\nallStream.map(Student::new).forEach(System.out::println);\\n```\\n\\n### Stream流的终结与非终结方法\\n\\n一旦Stream调用了终结方法，流的操作就全部终结了，不能继续使用，只能创建新的Stream操作。\\n\\n终结方法： `foreach `, `count`\\n\\n非终结方法：每次调用完成以后返回一个新的流对象，可以继续使用，支持链式编程！\\n\\n```java\\nList<String> list = new ArrayList<>();\\nlist.add(\\\"张无忌\\\");\\nlist.add(\\\"周芷若\\\");\\nlist.add(\\\"赵敏\\\");\\nlist.add(\\\"张强\\\");\\nlist.add(\\\"张三丰\\\");\\nlist.add(\\\"张三丰\\\");\\n\\n// foreach终结方法\\nlist.stream().filter(s -> s.startsWith(\\\"张\\\"))\\n    .filter(s -> s.length() == 3).forEach(System.out::println);\\n\\nlong count =  list.stream().filter(s -> s.startsWith(\\\"张\\\"))\\n    .filter(s -> s.length() == 3).count();\\nSystem.out.println(count);\\n```\\n\\n### 收集Stream流\\n\\n收集Stream流:把Stream流的数据转回成集合。\\n\\nStream的作用是：把集合转换成一根传送带，借用Stream流的强大功能进行的操作。但是实际开发中数据最终的形式还是应该是集合，最终Stream流操作完毕以后还是要转换成集合。这就是收集Stream流。\\n\\n收集Stream流的含义：就是把Stream流的数据转回到集合中去。\\n\\n```java\\nList<String> list = new ArrayList<>();\\nlist.add(\\\"张无忌\\\");\\nlist.add(\\\"周芷若\\\");\\nlist.add(\\\"赵敏\\\");\\nlist.add(\\\"张强\\\");\\nlist.add(\\\"张三丰\\\");\\nlist.add(\\\"张三丰\\\");\\n\\nStream<String> zhangLists = list.stream().filter(s -> s.startsWith(\\\"张\\\"));\\n// 把stream流转换成Set集合。\\nSet<String> sets = zhangLists.collect(Collectors.toSet());\\nSystem.out.println(sets);\\n\\n// 把stream流转换成List集合。\\nStream<String> zhangLists1 = list.stream().filter(s -> s.startsWith(\\\"张\\\"));\\nList<String> lists= zhangLists1.collect(Collectors.toList());\\nSystem.out.println(lists);\\n\\n// 把stream流转换成数组。\\nStream<String> zhangLists2 = list.stream().filter(s -> s.startsWith(\\\"张\\\"));\\nObject[] arrs = zhangLists2.toArray();\\n// 可以借用构造器引用申明转换成的数组类型！！！\\n//String[] arrs1 = zhangLists2.toArray(String[]::new);\\n```\\n\\n## 第四章 File类\\n\\n### File类的概述\\n\\nFile类：代表操作系统的文件对象\\n\\nFile类：是用来操作操作系统的文件对象的，删除文件，获取文件信息，创建文件（文件夹）...\\n\\n广义来说操作系统认为文件包含（文件和文件夹）\\n\\nFile类的创建文件对象的API:\\n\\n* 包：`java.io.File`\\n* 构造器：\\n  * `public File(String pathname)`:根据路径获取文件对象\\n  * `public File(String parent, String child)`:根据父路径和文件名称获取文件对象！\\n\\nFile类创建文件对象的格式:\\n\\n* `File f = new File(\\\"绝对路径/相对路径\\\");`\\n  * **绝对路径**：从磁盘的的盘符一路走到目的位置的路径。\\n    * 绝对路径依赖具体的环境，一旦脱离环境，代码可能出错！！\\n    * 一般是定位某个操作系统中的某个文件对象。\\n  * **相对路径**：不带盘符的。（重点）\\n    * 默认是直接相对到工程目录下寻找文件的。\\n    * 相对路径只能用于寻找工程下的文件。\\n    * 能用相对路径就应该尽量使用，可以跨平台！\\n* `File f = new File(\\\"文件对象/文件夹对象\\\");`\\n  广义来说：文件是包含文件和文件夹的。\\n\\n> * 创建文件对象可以用绝对路径也可以用相对路径。\\n> * 相对路径只能用于寻找工程下的文件。\\n> * 文件对象可以表示文件也可以表示文件夹！\\n\\n```java\\nFile f1 = new File(\\\"D:\\\\\\\\itcast\\\\\\\\图片资源\\\\\\\\beautiful.jpg\\\");\\nSystem.out.println(f1.length()); // 获取文件的大小，字节大小\\n\\n// 2.创建文件对象：使用相对路径\\nFile f2 = new File(\\\"Day09Demo/src/dlei01.txt\\\");\\nSystem.out.println(f2.length());\\n\\n// 3.创建文件对象：代表文件夹。\\nFile f3 = new File(\\\"D:\\\\\\\\itcast\\\\\\\\图片资源\\\");\\nSystem.out.println(f3.exists());// 判断路径是否存在！！\\n```\\n\\n### File类的获取功能的方法\\n\\n- `public String getAbsolutePath()`  ：返回此File的绝对路径名字符串。\\n- `public String getPath()`  ： 获取创建文件对象的时候用的路径\\n- `public String getName()`  ： 返回由此File表示的文件或目录的名称。\\n- `public long length()`  ：    返回由此File表示的文件的长度。\\n\\n```java\\n// 1.绝对路径创建一个文件对象\\nFile f1 = new File(\\\"D:/itcast/图片资源/meinv.jpg\\\");\\n// a.获取它的绝对路径。\\nSystem.out.println(f1.getAbsolutePath());\\n// b.获取文件定义的时候使用的路径。\\nSystem.out.println(f1.getPath());\\n// c.获取文件的名称：带后缀。\\nSystem.out.println(f1.getName());\\n// d.获取文件的大小：字节个数。\\nSystem.out.println(f1.length());\\n\\nSystem.out.println(\\\"------------------------\\\");\\n\\n// 2.相对路径\\nFile f2 = new File(\\\"Day09Demo/src/dlei01.txt\\\");\\n// a.获取它的绝对路径。\\nSystem.out.println(f2.getAbsolutePath());\\n// b.获取文件定义的时候使用的路径。\\nSystem.out.println(f2.getPath());\\n// c.获取文件的名称：带后缀。\\nSystem.out.println(f2.getName());\\n// d.获取文件的大小：字节个数。\\nSystem.out.println(f2.length());\\n```\\n\\n### File类的判断功能的方法\\n\\n- `public boolean exists()` ：此File表示的文件或目录是否实际存在。\\n- `public boolean isDirectory()`：此File表示的是否为目录。\\n- `public boolean isFile()` ：此File表示的是否为文件\\n\\n```java\\n// 1.文件对象。\\nFile f1 = new File(\\\"D:\\\\\\\\itcast\\\\\\\\图片资源\\\\\\\\meinv.jpg\\\");\\n// a.判断文件路径是否存在\\nSystem.out.println(f1.exists()); // true\\n// b.判断文件对象是否是文件,是文件返回true ,反之\\nSystem.out.println(f1.isFile()); // true\\n// c.判断文件对象是否是文件夹,是文件夹返回true ,反之\\nSystem.out.println(f1.isDirectory()); // false\\n\\n// 1.文件对象。\\nFile f2 = new File(\\\"D:\\\\\\\\itcast\\\\\\\\图片资源\\\");\\n// a.判断文件路径是否存在\\nSystem.out.println(f2.exists()); // true\\n// b.判断文件对象是否是文件,是文件返回true ,反之\\nSystem.out.println(f2.isFile()); // false\\n// c.判断文件对象是否是文件夹,是文件夹返回true ,反之\\nSystem.out.println(f2.isDirectory()); // true\\n```\\n\\n### File类的创建和删除方法\\n\\n- `public boolean createNewFile()` ：当且仅当具有该名称的文件尚不存在时，\\n         创建一个新的空文件。 （几乎不用的，因为以后文件都是自动创建的！）\\n- `public boolean delete()` ：删除由此File表示的文件或目录。 （只能删除空目录）\\n- `public boolean mkdir()` ：创建由此File表示的目录。（只能创建一级目录）\\n- `public boolean mkdirs()` ：可以创建多级目录（建议使用的）\\n\\n```java\\nFile f = new File(\\\"Day09Demo/src/dlei02.txt\\\");\\n// a.创建新文件，创建成功返回true ,反之\\nSystem.out.println(f.createNewFile());\\n\\n// b.删除文件或者空文件夹\\nSystem.out.println(f.delete());\\n// 不能删除非空文件夹，只能删除空文件夹\\nFile f1 = new File(\\\"D:/itcast/aaaaa\\\");\\nSystem.out.println(f1.delete());\\n\\n// c.创建一级目录\\nFile f2 = new File(\\\"D:/itcast/bbbb\\\");\\nSystem.out.println(f2.mkdir());\\n\\n// d.创建多级目录\\nFile f3 = new File(\\\"D:/itcast/e/a/d/ds/fas/fas/fas/fas/fas/fas\\\");\\nSystem.out.println(f3.mkdirs());\\n```\\n\\n### File目录的遍历\\n\\n- `public String[] list()`\\n    获取当前目录下所有的\\\"一级文件名称\\\"到一个字符串数组中去返回。\\n- `public File[] listFiles()`==常用==\\n    获取当前目录下所有的\\\"一级文件对象\\\"到一个文件对象数组中去返回（重点）\\n\\n```java\\nFile dir = new File(\\\"day09/src/com/itheima\\\");\\n// a.获取当前目录对象下的全部一级文件名称到一个字符串数组返回。\\nString[] names = dir.list();\\nfor (String name : names) {\\n    System.out.println(name);\\n}\\n// b.获取当前目录对象下的全部一级文件对象到一个File类型的数组返回。\\nFile[] files = dir.listFiles();\\nfor (File file : files) {\\n    System.out.println(file.getAbsolutePath());\\n}\\n\\n// ---------拓展------------\\nFile f1 = new File(\\\"C:\\\\\\\\Users\\\\\\\\Administrator\\\\\\\\Documents\\\\\\\\codes\\\\\\\\notes\\\\\\\\java-notes\\\\\\\\java补充知识点\\\\\\\\codes\\\\\\\\seniorJava\\\\\\\\day09\\\\\\\\src\\\\\\\\com\\\\\\\\itheima\\\\\\\\_20File目录的遍历\\\\\\\\FileDemo.java\\\");\\nlong time = f1.lastModified(); // 最后修改时间！\\nSimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\");\\nSystem.out.println(sdf.format(time));\\n```\\n\\n## 第五章 递归\\n\\n### 递归的概述\\n\\n方法在方法中又调用了自己\\n\\n* 直接递归：自己的方法调用自己\\n* 间接递归：自己的方法调用别的方法，别的方法又调用自己\\n\\n> - 递归是自己调用自己。\\n> - 递归如果控制的不恰当，会形成递归的死循环，从而导致栈内存溢出错误！！\\n> - 递归应该防止进入递归的死循环！\\n\\n一个简单的例子，计算\\n$$\\nf(x) = f(x-1) + 1\\n$$\\n\\n```java\\npublic class RecursionDemo02 {\\n    public static void main(String[] args) {\\n        System.out.println(f(10));\\n    }\\n\\n    public static int f(int x){\\n        if(x == 1) {\\n            return 1;\\n        }else{\\n            return f(x - 1) + 1 ;\\n        }\\n    }\\n}\\n```\\n\\n### 递归的核心\\n\\n递归算法分为三个要素：\\n\\n* 递归公式\\n  $$\\n  f(x)=f(x)+1\\n  $$\\n\\n* 递归终结点\\n  $$\\n  f(1)=1\\n  $$\\n\\n* 递归方向\\n\\n  必须走向终结点\\n\\n必须满足三要素，否则递归会出现死亡\\n\\n### 递归实现文件搜索\\n\\n这是一个非规律递归，实现步骤是：\\n\\n* 定义一个方法用于做搜索\\n* 进入方法中进行业务搜索分析\\n\\n```java\\n/**\\n     * 去某个目录下搜索某个文件\\n     * @param dir 搜索文件的目录。\\n     * @param fileName 搜索文件的名称。\\n     */\\npublic static void searchFiles(File dir , String fileName){\\n    // 1.判断是否存在该路径，是否是文件夹\\n    if(dir.exists() && dir.isDirectory()){\\n        // 2.提取当前目录下的全部一级文件对象\\n        File[] files = dir.listFiles(); // null/[]\\n        // 3.判断是否存在一级文件对象（判断是否不为空目录）\\n        if(files!=null && files.length > 0){\\n            // 4.判断一级文件对象\\n            for (File f : files) {\\n                // 5.判断file是文件还是文件夹\\n                if(f.isFile()){\\n                    // 6.判断该文件是否为我要找的文件对象\\n                    if(f.getName().contains(fileName)){\\n                        System.out.println(f.getAbsolutePath());\\n                        try {\\n                            // 启动它（拓展）\\n                            Runtime r = Runtime.getRuntime();\\n                            r.exec(f.getAbsolutePath());\\n                        } catch (IOException e) {\\n                            e.printStackTrace();\\n                        }\\n                    }\\n                }else{\\n                    // 7.该文件是文件夹，文件夹要递归进入继续寻找\\n                    searchFiles(f ,fileName);\\n                }\\n            }\\n        }\\n    }\\n}\\n```\\n\\n## 第六章 字节流\\n\\n### 字符集\\n\\n字符集：各个国家为自己国家的字符取的一套编号规则。计算机的底层是不能直接存储字符的。计算机的底层只能存储二进制。010101二进制就是可以转成10进制的。10进制就是整数编号。101 = 1*2^0 + 0*2^1 + 1*2^2 = 5\\n\\n* 中国用的编码：GBK编码\\n* 美国用的编码：ACSII编码\\n\\n### IO流读写数据\\n\\nIO输入输出流：输入/输出流。\\n\\n* Input:输入。\\n* Output:输出。\\n\\n引入：\\nFile类只能操作文件对象本身，不能读写文件对象的内容。\\n读写数据内容，应该使用IO流。\\n\\nIO流是一个水流模型：IO理解成水管，把数据理解成水流。\\n\\nIO流的分类\\n\\n按照流的方向分为：输入流，输出流。\\n\\n* 输出流：以内存为基准，把内存中的数据写出到磁盘文件或者网络介质中去的流称为输出流。\\n  输出流的作用：写数据到文件，或者写数据发送给别人。\\n* 输入流：以内存为基准，把磁盘文件中的数据或者网络中的数据读入到内存中去的流称为输入流。\\n  输入流的作用：读取数据到内存。\\n\\n按照流的内容分为: 字节流，字符流。\\n\\n* 字节流：流中的数据的最小单位是一个一个的字节，这个流就是字节流。\\n* 字符流：流中的数据的最小单位是一个一个的字符，这个流就是字符流。(针对于文本内容)\\n\\n所以流大体分为四大类:\\n\\n* 字节输入流：以内存为基准，把磁盘文件中的数据或者网络中的数据以一个一个的字节的形式读入到内存中去的流称为字节输入流。\\n* 字节输出流：以内存为基准，把内存中的数据以一个一个的字节写出到磁盘文件或者网络介质中去的流称为字节输出流。\\n* 字符输入流：以内存为基准，把磁盘文件中的数据或者网络中的数据以一个一个的字符的形式读入到内存中去的流称为字符输入流。\\n* 字符输出流：以内存为基准，把内存中的数据以一个一个的字符写出到磁盘文件或者网络介质中去的流称为字符输出流。\\n\\n>  IO流是读写传输数据的，IO流有很多种，每种流有自己的功能特点。\\n\\n### 字节流的使用\\n\\nIO流的体系\\n\\n|     字节流      |      字节流      |   字符流   |         字符流         |\\n| :-------------: | :--------------: | :--------: | :--------------------: |\\n|   字节输入流    |    字节输出流    | 字符输入流 |       字符输出流       |\\n|   InputStream   |   OutputStream   |   Reader   |     Writer(抽象类)     |\\n| FileInputStream | FileOutputStream | FileReader | FileWriter(子类实现类) |\\n\\n#### 输入流\\n\\nFileInputStream文件字节输入流\\n\\n作用：以内存为基准，把磁盘文件中的数据按照字节的形式读入到内存中的流，简单的来说，就是按照字节读取文件数据到内存\\n\\n构造器\\n\\n* `public FileInputStream(File path)`:创建一个字节输入流管道与源文件对象接通\\n* `public FileInputStream(String pathName)`:创建一个字节输入流管道与文件路径对接\\n\\n方法\\n\\n* `public int read()` 每次读取一个直接返回，读取完毕会返回`-1`\\n* `public int read(byte[] buffer)` 从字节输入流中读取字节到字节数组中去，返回读取的字节数量，没有字节可读返回`-1`\\n\\n> - 一个一个字节读取英文和数字没有问题。\\n> - 但是一旦读取中文输出无法避免乱码，因为会截断中文的字节。\\n> - 一个一个字节的读取数据，性能也较差，所以禁止使用此方案！\\n\\n```java\\n// 1.创建文件对象定位dlei01.txt\\nFile file = new File(\\\"Day09Demo/src/dlei01.txt\\\");\\n// 2.创建一个字节输入流管道与源文件接通\\nInputStream is = new FileInputStream(file);\\n// 3.读取一个字节的编号返回，读取完毕返回-1\\n//        int code1 = is.read(); // 读取一滴水，一个字节\\n//        System.out.println((char)code1);\\n//\\n//        int code2 = is.read(); // 读取一滴水，一个字节\\n//        System.out.println((char)code2);\\n//\\n//        int code3 = is.read(); // 读取一滴水，一个字节\\n//        System.out.println((char)code3);\\n//\\n//        int code4 = is.read(); // 读取一滴水，一个字节 ,读取没有字节返回-1\\n//        System.out.println(code4);\\n\\n// 4.使用while读取字节数\\n// 定义一个整数变量存储字节\\nint ch = 0 ;\\nwhile((ch = is.read())!= -1){\\n    System.out.print((char) ch);\\n}\\n\\n// 读法优化，必须使用循环     // abc xyz i\\n// a.定义一个字节数组代表桶   // ooo ooo o\\nbyte[] buffer = new byte[3];\\nint len ; // 存储每次读取的字节数。\\nwhile((len = is.read(buffer)) != -1){\\n    // 读取了多少就倒出多少！\\n    String rs = new String(buffer , 0 , len);\\n    System.out.print(rs);\\n}\\n```\\n\\n解决中文乱码\\n\\n定义一个字节数组与文件的大小刚刚一样大，然后一桶水读取全部字节数据再输出\\n\\n```java\\n// 0.定位文件对象\\nFile f = new File(\\\"C:\\\\\\\\Users\\\\\\\\Administrator\\\\\\\\Documents\\\\\\\\codes\\\\\\\\notes\\\\\\\\java-notes\\\\\\\\java补充知识点\\\\\\\\codes\\\\\\\\seniorJava\\\\\\\\day09\\\\\\\\src\\\\\\\\com\\\\\\\\itheima\\\\\\\\_25字节流的使用\\\\\\\\FileInputStreamDemo03.java\\\");\\n// 1.定义一个字节输入流通向源文件路径，简化写法！\\nInputStream is = new FileInputStream(f);\\n\\n// 2.定义一个字节数组与文件的大小刚刚一样大\\n//        System.out.println(\\\"文件大小：\\\"+f.length());\\n//        byte[] buffer = new byte[(int) f.length()];\\n//        int len = is.read(buffer);\\n//        System.out.println(\\\"读取了：\\\"+len);\\n//        String rs = new String(buffer);\\n//        System.out.println(rs);\\n\\nbyte[] buffer = is.readAllBytes();\\nString rs = new String(buffer);\\nSystem.out.println(rs);\\n```\\n\\n#### 输出流\\n\\n`FileOutputStream`文件字节输出流\\n\\n作用：以内存为基准，把内存中的数据，按照字节的形式写出到磁盘文件中去。简单来说，把内存数据按照字节写出到磁盘文件中去。\\n\\n构造器：\\n\\n- `public FileOutputStream(File file)`:创建一个字节输出流管道通向目标文件对象。\\n- `public FileOutputStream(String file)`:创建一个字节输出流管道通向目标文件路径。\\n- `public FileOutputStream(File file , boolean append)`:创建一个追加数据的字节输出流管道通向目标文件对象。\\n- `public FileOutputStream(String file , boolean append)`:创建一个追加数据的字节输出流管道通向目标文件路径。\\n\\n方法：\\n\\n- `public void write(int a)`:写一个字节出去 。\\n\\n- `public void write(byte[] buffer)`:写一个字节数组出去。\\n\\n- `public void write(byte[] buffer , int pos , int len)`:写一个字节数组的一部分出去。\\n\\n  参数一，字节数组；参数二：起始字节索引位置，参数三：写多少个字节数出去。\\n\\n> * 字节输出流只能写字节出去\\n> * 字节输出流默认是覆盖数据管道\\n> * 换行用： `os.write(\\\"\\\\r\\\\n\\\".getBytes());`\\n> * 关闭和刷新：刷新流可以继续使用，关闭包含刷新数据但是流就不能使用了！\\n\\n`FileOutputStream`字节输出流每次启动写数据的时候都会先清空之前的全部数据\\n\\n### 字节流做文件复制\\n\\n字节是计算机中一切文件的组成，所以字节流适合做一切文件的复制。\\n\\n复制是把源文件的全部字节一字不漏的转移到目标文件，只要文件前后的格式一样，绝对不会有问题。\\n\\n复制步骤：\\n\\n- 创建一个字节输入流管道与源文件接通。\\n- 创建一个字节输出流与目标文件接通。\\n- 创建一个字节数组作为桶\\n- 从字节输入流管道中读取数据，写出到字节输出流管道即可。\\n- 关闭资源！\\n\\n```java\\nInputStream is = null ;\\nOutputStream os = null ;\\ntry{\\n    /** （1）创建一个字节输入流管道与源文件接通。 */\\n    is = new FileInputStream(\\\"D:\\\\\\\\itcast\\\\\\\\图片资源\\\\\\\\meinv.jpg\\\");\\n    /** （2）创建一个字节输出流与目标文件接通。*/\\n    os = new FileOutputStream(\\\"D:\\\\\\\\itcast\\\\\\\\meimei.jpg\\\");\\n    /** （3）创建一个字节数组作为桶*/\\n    byte[] buffer = new byte[1024];\\n    /** （4）从字节输入流管道中读取数据，写出到字节输出流管道即可。*/\\n    int len = 0;\\n    while((len = is.read(buffer)) != -1){\\n        // 读取多少就倒出多少\\n        os.write(buffer, 0 , len);\\n    }\\n    System.out.println(\\\"复制完成！\\\");\\n}catch (Exception e){\\n    e.printStackTrace();\\n} finally {\\n    /**（5）关闭资源！ */\\n    try{\\n        if(os!=null)os.close();\\n        if(is!=null)is.close();\\n    }catch (Exception e){\\n        e.printStackTrace();\\n    }\\n}\\n```\\n\\nJDK1.7 开始之后释放资源的新方式\\n\\ntry-with-resources:\\n\\n```java\\ntry(\\n    // 这里只能放置资源对象，用完会自动调用close()关闭\\n){\\n\\n}catch(Exception e){\\n    e.printStackTrace();\\n}\\n```\\n\\n什么是资源？\\n\\n* 资源类一定是实现了Closeable接口，实现这个接口的类就是资源\\n* 有close()方法，try-with-resources会自动调用它的close()关闭资源。\\n\\n```java\\ntry(\\n    /** （1）创建一个字节输入流管道与源文件接通。 */\\n    InputStream is  = new FileInputStream(\\\"D:\\\\\\\\itcast\\\\\\\\图片资源\\\\\\\\meinv.jpg\\\");\\n    /** （2）创建一个字节输出流与目标文件接通。*/\\n    OutputStream os = new FileOutputStream(\\\"D:\\\\\\\\itcast\\\\\\\\meimei.jpg\\\");\\n    /** （5）关闭资源！是自动进行的 */\\n){\\n    /** （3）创建一个字节数组作为桶*/\\n    byte[] buffer = new byte[1024];\\n    /** （4）从字节输入流管道中读取数据，写出到字节输出流管道即可。*/\\n    int len = 0;\\n    while((len = is.read(buffer)) != -1){\\n        // 读取多少就倒出多少\\n        os.write(buffer, 0 , len);\\n    }\\n    System.out.println(\\\"复制完成！\\\");\\n}catch (Exception e){\\n    e.printStackTrace();\\n}\\n```\\n\\n# day10-缓冲流、转换流、序列流\\n\\n## 第一章 字符流\\n\\n`FileReader`:文件字符输入流。\\n\\n作用：以内存为基准，把磁盘文件的数据以字符的形式读入到内存。简单来说，读取文本文件内容到内存中去。\\n\\n构造器：\\n\\n* `public FileReader(File file)`:创建一个字符输入流与源文件对象接通。\\n* `public FileReader(String filePath)`:创建一个字符输入流与源文件路径接通。\\n\\n方法：\\n\\n- `public int read()`: 读取一个字符的编号返回！ 读取完毕返回-1\\n- `public int read(char[] buffer)`:读取一个字符数组，读取多少个字符就返回多少个数量，读取完毕返回-1\\n\\n- \\n  字符流一个一个字符的读取文本内容输出，可以解决中文读取输出乱码的问题。\\n- 字符流很适合操作文本文件内容。\\n- 但是：一个一个字符的读取文本内容性能较差！！\\n\\n```java\\n// 1.创建一个文件对象定位源文件\\n// File f = new File(\\\"Day10Demo/src/dlei01.txt\\\");\\n// 2.创建一个字符输入流管道与源文件接通\\n// Reader fr = new FileReader(f);\\n// 3.简化写法：创建一个字符输入流管道与源文件路径接通\\nReader fr = new FileReader(\\\"Day10Demo/src/dlei01.txt\\\");\\n// 4.按照字符读取，每次读取一个字符的编号返回。\\n//        int code1 = fr.read();\\n//        System.out.print((char)code1);\\n//        int code2 = fr.read();\\n//        System.out.print((char)code2);\\n//        int code3 = fr.read();\\n//        System.out.print((char)code3);\\n//        int code4 = fr.read(); // 读取完毕返回-1\\n//        System.out.print(code4);\\n\\n// 5.while循环一个一个字符读取。\\n// 定义一个变量存储一个字符的编号\\nint ch ;\\nwhile ((ch = fr.read()) != -1){\\n    System.out.print((char)ch);\\n}\\n\\n// a.按照字符数组读取数据使用循环\\nchar[] buffer = new char[1024]; // 1K\\n// b.定义一个整数记录每次桶读取的字符数据量。\\nint len;\\nwhile((len = fr.read(buffer)) != -1 ) {\\n    // 读取多少倒出多少字符\\n    System.out.print(new String(buffer, 0 , len));\\n}\\n```\\n\\n`FileWriter`文件字符输出流的使用。\\n\\n作用：以内存为基准，把内存中的数据按照字符的形式写出到磁盘文件中去。简单来说，就是把内存的数据以字符写出到文件中去。\\n\\n构造器：\\n\\n- `public FileWriter(File file)`:创建一个字符输出流管道通向目标文件对象。\\n- `public FileWriter(String filePath)`:创建一个字符输出流管道通向目标文件路径。\\n- `public FileWriter(File file,boolean append`):创建一个追加数据的字符输出流管道通向目标文件对象。\\n- `public FileWriter(String filePath,boolean append)`:创建一个追加数据的字符输出流管道通向目标文件路径。\\n\\n方法：\\n\\n- `public void write(int c)`:写一个字符出去\\n- `public void write(String c)` 写一个字符串出去：\\n- `public void write(char[] buffer)`:写一个字符数组出去\\n- `public void write(String c ,int pos ,int len)`:写字符串的一部分出去\\n- `public void write(char[] buffer ,int pos ,int len)`:写字符数组的一部分出去\\n\\n小结：\\n\\n字符输出流可以写字符数据出去，总共有5个方法写字符。\\n\\n覆盖管道：\\n\\n`Writer fw = new FileWriter(\\\"Day10Demo/src/dlei03.txt\\\"); // 覆盖数据管道`\\n\\n追加数据管道：\\n\\n`Writer fw = new FileWriter(\\\"Day10Demo/src/dlei03.txt\\\",true); // 追加数据管道`\\n\\n换行：\\n\\n`fw.write(\\\"\\\\r\\\\n\\\"); // 换行` \\n\\n读写字符文件数据建议使用字符流。\\n\\n```java\\n// 1.创建一个字符输出流管道通向目标文件路径\\n//Writer fw = new FileWriter(\\\"Day10Demo/src/dlei03.txt\\\"); // 覆盖数据管道\\nWriter fw = new FileWriter(\\\"Day10Demo/src/dlei03.txt\\\",true); // 追加数据管道\\n\\n// 2.写一个字符出去：public void write(int c):写一个字符出去\\nfw.write(97);   // 字符a\\nfw.write(\'b\');  // 字符b\\nfw.write(\'磊\'); // 字符磊，此时没有任何问题。\\nfw.write(\\\"\\\\r\\\\n\\\"); // 换行\\n\\n// 3.写一个字符串出去：public void write(String c)写一个字符串出去：\\nfw.write(\\\"Java是最优美的语言！\\\");\\nfw.write(\\\"我们在黑马学习它！\\\");\\nfw.write(\\\"\\\\r\\\\n\\\"); // 换行\\n\\n// 4.写一个字符数组出去：public void write(char[] buffer):写一个字符数组出去\\nfw.write(\\\"我爱中国\\\".toCharArray());\\nfw.write(\\\"\\\\r\\\\n\\\"); // 换行\\n\\n// 5.写字符串的一部分出去: public void write(String c ,int pos ,int len):写字符串的一部分出去\\nfw.write(\\\"Java是最优美的语言！\\\",0,9);\\nfw.write(\\\"\\\\r\\\\n\\\"); // 换行\\n\\n// 6.写字符数组的一部分出去：public void write(char[] buffer ,int pos ,int len):写字符数组的一部分出去\\nfw.write(\\\"我爱中国\\\".toCharArray(),0 ,2);\\nfw.write(\\\"\\\\r\\\\n\\\"); // 换行\\n\\nfw.close();\\n```\\n\\n## 第二章 IO资源的处理\\n\\n...\\n\\n\\n\\n\\n\\n## 第三章 属性集\\n\\n`Properties`：属性集对象。\\n\\n其实就是一个Map集合。也就是一个键值对集合。但是我们一般不会当集合使用，\\n\\n因为有HashMap。\\n\\n`Properties`核心作用：\\n\\nProperties代表的是一个属性文件，可以把键值对的数据存入到一个属性文件中去。\\n\\n属性文件：后缀是.properties结尾的文件,里面的内容都是 key=value。\\n\\n大家在后期学的很多大型框架技术中，属性文件都是很重要的系统配置文件。\\n\\n```java\\nusers.properties\\nadmin=123456\\ndlei=dlei\\n```\\n\\n 需求：使用Properties对象生成一个属性文件，里面存入用户名和密码信息。\\n\\nProperties的方法：\\n\\n- `public Object setProperty(String key, String value)` ： 保存一对属性。\\n- `public String getProperty(String key)` ：使用此属性列表中指定的键搜索属性值\\n- `public Set<String> stringPropertyNames()` ：所有键的名称的集合\\n- `public void store(OutputStream out, String comments)`：保存数据到属性文件中去\\n- `public void store(Writer fw, String comments)`：保存数据到属性文件中去\\n- `public synchronized void load(InputStream inStream)`:加载属性文件的数据到属性集对象中去\\n- `public synchronized void load(Reader fr)`:加载属性文件的数据到属性集对象中去\\n\\n```java\\nProperties properties = new Properties();\\nproperties.setProperty(\\\"admin\\\" , \\\"123456\\\");\\nproperties.setProperty(\\\"dlei\\\" , \\\"101333\\\");\\nSystem.out.println(properties);\\n\\n// b.把属性集对象的数据存入到属性文件中去（重点）\\nOutputStream os = new FileOutputStream(\\\"Day10Demo/src/users.properties\\\");\\n/**\\n         * 参数一：被保存数据的输出管道\\n         * 参数二：保存心得。就是对象保存的数据进行解释说明！\\n         */\\nproperties.store(os , \\\"i am very happy!!我快乐的保存了用户数据!\\\");\\n```\\n\\n导入属性\\n\\n```java\\n// 1.创建一个属性集对象\\nProperties properties = new Properties();\\nSystem.out.println(properties);\\n\\n// 2.字节输入流加载属性文件的数据到属性集对象properties中去。\\nproperties.load(new FileInputStream(\\\"Day10Demo/src/users.properties\\\"));\\nSystem.out.println(properties);\\n\\nSystem.out.println(properties.getProperty(\\\"dlei\\\"));\\nSystem.out.println(properties.getProperty(\\\"admin\\\"));\\n```\\n\\n## 第四章 缓冲流\\n\\n### 缓冲流的概述和分类\\n\\n什么是缓冲流：缓冲流可以提高字节流和字符流的读写数据的性能\\n\\n缓冲流分为四类：\\n\\n- `BufferedInputStream`：字节缓冲输入流，可以提高字节输入流读数据的性能。\\n- `BufferedOutStream`：  字节缓冲输出流，可以提高字节输出流写数据的性能。\\n- `BufferedReader`：  字符缓冲输入流，可以提高字符输入流读数据的性能。\\n- `BufferedWriter`：  字符缓冲输出流，可以提高字符输出流写数据的性能。\\n\\n### 字节缓冲流\\n\\n字节缓冲输入流：`BufferedInputStream`\\n\\n作用：可以把低级的字节输入流包装成一个高级的缓冲字节输入流管道，从而提高字节输入流读数据的性能。\\n\\n构造器: `public BufferedInputStream(InputStream in)`\\n\\n原理：缓冲字节输入流管道自带了一个8KB的缓冲池，每次可以直接借用操作系统的功能最多提取8KB的数据到缓冲池中去，以后我们直接从缓冲池读取数据，所以性能较好！\\n\\n> * 字节缓冲输入流：`BufferedInputStream`\\n> * 可以把低级的字节输入流包装成一个高级的缓冲字节输入流管道,从而提高字节输入流读数据的性能。\\n> * 功能几乎无变化。\\n\\n```java\\n// 1.定义一个低级的字节输入流与源文件接通\\nInputStream is = new FileInputStream(\\\"Day10Demo/src/dlei04.txt\\\");\\n\\n// 3.把低级的字节输入流包装成一个高级的缓冲字节输入流。\\nBufferedInputStream bis = new BufferedInputStream(is);\\n\\n// 2.定义一个字节数组按照循环读取。\\nbyte[] buffer = new byte[3];\\nint len ;\\nwhile((len = is.read(buffer)) != -1){\\n    String rs = new String(buffer, 0 , len);\\n    System.out.print(rs);\\n}\\n```\\n\\n字节缓冲输出流：`BufferedOutputStream`\\n\\n作用：可以把低级的字节输出流包装成一个高级的缓冲字节输出流，从而提高写数据的性能。\\n\\n构造器：`public BufferedOutputStream(OutputStream os)`\\n\\n原理：缓冲字节输出流自带了8KB缓冲池,数据就直接写入到缓冲池中去，性能极高了！\\n\\n> * 字节缓冲输出流可以把低级的字节输出流包装成一个高级的缓冲字节输出流，从而提高写数据的性能。\\n> * 功能几乎不变。\\n\\n```java\\n// 1.写一个原始的字节输出流\\nOutputStream os = new FileOutputStream(\\\"Day10Demo/src/dlei05.txt\\\");\\n// 3.把低级的字节输出流包装成一个高级的缓冲字节输出流\\nBufferedOutputStream bos =  new BufferedOutputStream(os);\\n// 2.写数据出去\\nbos.write(\'a\');\\nbos.write(100);\\nbos.write(\'b\');\\nbos.write(\\\"我爱中国\\\".getBytes());\\nbos.close();\\n```\\n\\n> 高级的字节缓冲流按照一个一个字节数组的形式复制性能极高，建议以后使用\\n\\n### 字符缓冲流\\n\\n字符缓冲输入流：`BufferedReader`\\n\\n作用：字符缓冲输入流可以把字符输入流包装成一个高级的缓冲字符输入流，可以提高字符输入流读数据的性能。\\n\\n构造器：`public BufferedReader(Reader reader)`\\n\\n原理：缓冲字符输入流默认会有一个8K的字符缓冲池,可以提高读字符的性能。缓冲字符输入流除了提高了字符输入流的读数据性能，缓冲字符输入流还多了一个按照行读取数据的功能（重点）:`public String readLine()`: 读取一行数据返回，读取完毕返回`null`;\\n\\n字符缓冲输入流可以把字符输入流包装成一个高级的缓冲字符输入流，\\n\\n可以提高字符输入流读数据的性能。\\n\\n除此之外多了一个按照行读取数据的功能：\\n\\n`public String readLine()`: 读取一行数据返回，读取完毕返回`null`;\\n\\n```java\\n// 1.定义一个原始的字符输入流读取源文件\\nReader fr = new FileReader(\\\"Day10Demo/src/dlei06.txt\\\");\\n\\n// 3.把低级的字符输入流管道包装成一个高级的缓冲字符输入流管道\\nBufferedReader br = new BufferedReader(fr);\\n// 定义一个字符串变量存储每行数据\\nString line;\\n// 使用一个循环读取数据(经典代码)\\nwhile((line = br.readLine())!=null){\\n    System.out.println(line);\\n}\\n\\n//        // 2.定义一个字符数组循环读取\\n//        char[] buffer = new char[1024];\\n//        int len ;\\n//        while((len = br.read(buffer))!=-1){\\n//            System.out.println(new String(buffer , 0 , len));\\n//        }\\n\\nbr.close();\\n```\\n\\n字符缓冲输出流：`BufferedWriter`\\n\\n作用：把字符输出流包装成一个高级的缓冲字符输出流，提高写字符数据的性能。\\n\\n构造器：`public BufferedWriter(Writer writer)`:\\n\\n原理：高级的字符缓冲输出流多了一个8k的字符缓冲池，写数据性能极大提高了!\\n\\n字符缓冲输出流除了提高字符输出流写数据的性能，还多了一个换行的特有功能：`public void newLine()`：新建一行。\\n\\n缓冲字符输出流可以把低级的字符输出流进行包装。提高了写字符的性能。\\n\\n多了一个换行的功能：public void newLine()：新建一行。\\n\\n```java\\n// 1.定义一个低级的字符输出流写数据出去\\nWriter fw = new FileWriter(\\\"Day10Demo/src/dlei07.txt\\\",true);\\n\\n// 3.把低级的字符输出流包装成高级的缓冲字符输出流\\nBufferedWriter bw = new BufferedWriter(fw);\\n\\n// 2.写字符输出\\nbw.write(\\\"我在黑马学IO流~~~~\\\");\\nbw.newLine(); // 换行\\nbw.write(\\\"我在黑马学IO流~~~~\\\");\\nbw.newLine();// 换行\\n\\nbw.close();\\n```\\n\\n### 不同编码读取乱码问题\\n\\n- 如果代码编码和读取的文件编码一致。字符流读取的时候不会乱码。\\n- 如果代码编码和读取的文件编码不一致。字符流读取的时候会乱码。\\n\\n```java\\n// 1.定义一个原始的字符输入流读取源文件\\n//  代码UTF-8  文件UTF-8 不会出现乱码！\\n// Reader fr = new FileReader(\\\"Day10Demo/src/dlei06.txt\\\");\\n//  代码UTF-8  文件GBK   会出现乱码！\\nReader fr = new FileReader(\\\"D:\\\\\\\\itcast\\\\\\\\网络编程公开课\\\\\\\\Netty.txt\\\");\\n// 2.把低级的字符输入流管道包装成一个高级的缓冲字符输入流管道\\nBufferedReader br = new BufferedReader(fr);\\n// 3.定义一个字符串变量存储每行数据\\nString line;\\n// 使用一个循环读取数据(经典代码)\\nwhile((line = br.readLine())!=null){\\n    System.out.println(line);\\n}\\n```\\n\\n## 第五章 转换流\\n\\n字符输入转换流`InputStreamReader`\\n\\n作用\\n\\n- 可以解决字符流读取不同编码乱码的问题。\\n- 可以把原始的字节流按照当前默认的代码编码转换成字符输入流。\\n- 也可以把原始的字节流按照指定编码转换成字符输入流\\n\\n构造器：\\n\\n- public InputStreamReader(InputStream is)：可以使用当前代码默认编码转换成字符流，几乎不用！\\n- public InputStreamReader(InputStream is,String charset):可以指定编码把字节流转换成字符流\\n\\n\\n字符输入转换流可以把字节输入流按照默认编码转换成字符输入流。\\n\\nReader isr = new InputStreamReader(is); // 使用当前代码默认编码UTF-8转换成字符流，几乎不用！\\n\\n字符输入转换流也可以指定编码把字节输入流转换成字符输入流。\\n\\nReader isr = new InputStreamReader(is,\\\"GBK\\\"); // 指定编码把字节流转换成字符流\\n\\n字符输入转换流可以解决不同编码读取乱码的问题！\\n\\n```java\\n// 代码：UTF-8    文件：GBK(ab我爱你： o o [oo] [oo] [oo])\\n// 1.提取GBK文件的原始字节流\\nInputStream is = new FileInputStream(\\\"D:\\\\\\\\itcast\\\\\\\\网络编程公开课\\\\\\\\Netty.txt\\\");\\n// 2.把原始字节输入流通过转换流，转换成 字符输入转换流InputStreamReader\\n//Reader isr = new InputStreamReader(is); // 使用当前代码默认编码UTF-8转换成字符流，几乎不用！\\nReader isr = new InputStreamReader(is,\\\"GBK\\\"); // 指定编码把字节流转换成字符流\\n// 3.包装成缓冲流\\nBufferedReader br = new BufferedReader(isr);\\n// 4.定义一个字符串变量存储每行数据\\nString line;\\n// 使用一个循环读取数据(经典代码)\\nwhile((line = br.readLine())!=null){\\n    System.out.println(line);\\n}\\n```\\n\\n字符输出转换流：`OutputStreamWriter`\\n\\n作用：可以指定编码把字节输出流转换成字符输出流。可以指定写出去的字符的编码。\\n\\n构造器：\\n\\n- `public OutputStreamWriter(OutputStream os) `:   用当前默认编码UTF-8把字节输出流转换成字符输出流\\n- `public OutputStreamWriter(OutputStream os , String charset)`:指定编码把字节输出流转换成字符输出流\\n\\n```java\\n// 1.写一个字节输出流通向文件\\nOutputStream os = new FileOutputStream(\\\"Day10Demo/src/dlei07.txt\\\");\\n\\n// 2.把字节输出流转换成字符输出流。\\n// Writer fw = new OutputStreamWriter(os); // .把字节输出流按照默认编码UTF-8转换成字符输出流。\\nWriter fw = new OutputStreamWriter(os,\\\"GBK\\\"); // .  把字节输出流按照指定编码GBK转换成字符输出流。\\nfw.write(\\\"abc我是中国人\\\");\\nfw.close();\\n```\\n\\n## 第六章 序列流\\n\\n**对象序列化**：就是把Java对象数据直接存储到文件中去。           对象 => 文件中\\n\\n**对象反序列化**：就是把Java对象的文件数据恢复到Java对象中。     文件中 => 对象\\n\\n对象序列化流（对象字节输出流）：`ObjectOutputStream`\\n\\n**作用**：把内存中的Java对象数据保存到文件中去。\\n\\n构造器：   `public ObjectOutputStream(OutputStream out)`\\n\\n序列化方法：`public final void writeObject(Object obj)`\\n\\n> 对象如果想参与序列化，对象必须实现序列化接口 implements Serializable ，否则序列化失败！\\n\\n```java\\n// 1.创建User用户对象\\nUser user = new User(\\\"tsgz\\\",\\\"003197\\\",\\\"铁扇公主\\\");\\n// 2.创建低级的字节输出流通向目标文件\\nOutputStream os = new FileOutputStream(\\\"Day10Demo/src/obj.dat\\\");\\n// 3.把低级的字节输出流包装成高级的对象字节输出流ObjectOutputStream\\nObjectOutputStream oos = new ObjectOutputStream(os);\\n// 4.通过对象字节输出流序列化对象：\\noos.writeObject(user);\\n// 6.释放资源\\noos.close();\\nSystem.out.println(\\\"序列化对象成功~~~~\\\");\\n```\\n\\n对象反序列化（对象字节输入流）：`ObjectInputStream`\\n\\n作用：读取序列化的对象文件恢复到Java对象中。\\n\\n构造器：`public ObjectInputStream(InputStream is)`\\n\\n方法：`public final Object readObject()`\\n\\n如果一个字段不想参数序列化：`transient`修饰该成员变量，它将不参与序列化！\\n\\n序列化版本号：\\n\\nprivate static final long serialVersionUID = 2L;\\n\\n必须序列化使用的版本号和反序列化使用的版本号一致才可以正常反序列化！否则报错！\\n\\n```java\\n// 1.定义一个低级的字节输入流通向源文件\\nInputStream is = new FileInputStream(\\\"Day10Demo/src/obj.dat\\\");\\n// 2.把字节输入流包装成高的对象字节输入流\\nObjectInputStream ois = new ObjectInputStream(is);\\n// 3.反序列化\\nUser user = (User) ois.readObject();\\nSystem.out.println(user);\\nSystem.out.println(\\\"反序列化完成！\\\");\\n```\\n\\n## 第七章 打印流\\n\\n打印流 `PrintStream `/ `PrintWriter`\\n\\n打印流的作用：\\n\\n可以方便，快速的写数据出去。\\n\\n可以实现打印啥出去，就是啥出去。\\n\\n打印流的构造器：\\n\\n- `public PrintStream(OutputStream os)`\\n- `public PrintStream(String filepath)`\\n\\n```java\\n// 1.打印流PrintStream\\n//OutputStream os = new FileOutputStream(\\\"Day10Demo/src/dlei08.txt\\\");\\n//PrintStream ps = new PrintStream(os);\\nPrintStream ps = new  PrintStream(\\\"Day10Demo/src/dlei08.txt\\\");\\n//PrintWriter pw = new  PrintWriter(\\\"Day10Demo/src/dlei08.txt\\\");\\n\\nps.println(97); // 写97\\nps.println(110); // 写110\\nps.println(\\\"我在黑马快乐的调皮~~\\\");\\nps.println(99.8);\\nps.println(false);\\nps.println(\'徐\');\\n\\n// 写字节数据出去\\n// ps.write(\\\"我爱你\\\".getBytes());\\n\\nps.close();\\n```\\n\\n`public static void setOut(PrintStream out)` :让系统的输出流向打印流。\\n\\n```java\\nSystem.out.println(\\\"==itheima0==\\\");\\nPrintStream ps = new PrintStream(\\\"Day10Demo/src/log.txt\\\");\\nSystem.setOut(ps); // 让系统的输出流向打印流。\\n\\nSystem.out.println(\\\"==itheima1==\\\");\\nSystem.out.println(\\\"==itheima2==\\\");\\nSystem.out.println(\\\"==itheima3==\\\");\\nSystem.out.println(\\\"==itheima4==\\\");\\nSystem.out.println(\\\"==itheima5==\\\");\\n```\\n\\n# day11-网络编程和NIO\\n\\n## 第一章 网络编程\\n\\n通信一定是基于软件结构实现的\\n\\n* C/S结构 ：全称为Client/Server结构，是指客户端和服务器结构。常见程序有ＱＱ、迅雷，IDEA等软件\\n* B/S结构 ：全称为Browser/Server结构，是指浏览器和服务器结构。常见浏览器有谷歌、火狐等、软件：博学谷、京东、淘宝。（开发中的重点，基于网页设计界面，界面效果可以更丰富: Java Web开发）\\n\\n两种架构各有优势，但是无论哪种架构，都离不开网络的支持。网络编程，就是在一定的协议下，实现两台计算机的通信的技术\\n\\n### 网络通信的三要素\\n\\n1. 协议：计算机网络客户端与服务端通信必须事先约定和彼此遵守的通信规则。\\n   HTTP , FTP , TCP , UDP , SSH , SMTP。\\n\\n2. IP地址：指互联网协议地址（Internet Protocol Address），俗称IP。\\n\\n   IP地址用来给一个网络中的计算机设备做唯一的编号\\n\\n   IPv4: **4个字节，32位组成**。  192.168.70.70\\n\\n   局域网：公司内部用\\n\\n   城域网\\n\\n   广域网（公网）：可以在任何地方访问\\n\\n   IPv6: 可以实现为所有设备分配IP  **128位**\\n\\n   ipconfig：查看本机的IP\\n\\n   ping 检查本机与某个IP指定的机器是否联通，或者说是检测对方是否在线。\\n\\n   ping 空格 IP地址\\n\\n   ping 220.181.57.216\\n\\n   ping www.baidu.com\\n\\n   注意：特殊的IP地址： 本机IP地址.(不受环境的影响，任何时候都存在这两个ip,可以直接找本机！)\\n\\n   127.0.0.1 == localhost。\\n\\n3. 端口：端口号就可以唯一标识设备中的进程（应用程序）了\\n\\n   端口号：用两个字节表示的整数，它的取值范围是0~65535。\\n\\n   * 0~1023之间的端口号用于一些知名的网络服务和应用。\\n   * 普通的应用程序需要使用1024以上的端口号。\\n   * 如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败。报出端口被占用异常！！\\n\\n利用`协议`+`IP地址`+`端口号` 三元组合，就可以标识网络中的进程了，那么进程间的通信就可以利用这个标识与其它进程进行交互。\\n\\n### 网络通信的分层和协议\\n\\n网络通信协议：通信协议是对计算机必须遵守的规则，只有遵守这些规则，计算机之间才能进行通信\\n\\n```\\n-------------------------------------------------------------------------------\\n应用层  ：应用程序（QQ,微信,浏览器）,可能用到的协议（HTTP,FTP,SMTP）   通常程序员只需要关心这一层\\n------------------------------------------------------------------------------\\n传输层  ：TCP/IP协议 - UDP协议    计算机网络工程师需要精通的协议，有些技术我们也需要精通这一层协议，\\n-----------------------------------------------------------------\\n网络层  ：IP协议  封装自己的IP和对方的IP和端口\\n-----------------------------------------------------------------\\n数据链路层 ： 进入到硬件（网）\\n-----------------------------------------------------------------\\n```\\n\\n* TCP/IP协议：传输控制协议 (Transmission Control Protocol)。\\n\\n  TCP协议是**面向连接**的安全的可靠的传输通信协议。\\n\\n  1. 在通信之前必须确定对方在线并且连接成功才可以通信。\\n  2. 例如下载文件、浏览网页等(要求可靠传输)\\n\\n* UDP：用户数据报协议(User Datagram Protocol)。\\n\\n  UDP协议是一个**面向无连接**的不可靠传输的协议。\\n\\n  1. 直接发消息给对方，不管对方是否在线，发消息后也不需要确认。\\n  2. 无线（视频会议，通话），性能好，可能丢失一些数据！！\\n\\n### InetAddress类概述\\n\\n`InetAddress`类的对象就代表一个IP地址对象。\\n\\n`InetAddress`类成员方法：\\n\\n* 获得本地主机IP地址对象\\n\\n     `static InetAddress getLocalHost()`\\n\\n* 根据IP地址字符串或主机名获得对应的IP地址对象\\n\\n     `static InetAddress getByName(String host)`\\n\\n* 获得主机名\\n\\n     `String getHostName()`\\n\\n* 获得IP地址字符串\\n\\n     `String getHostAddress()`\\n\\n```java\\n// 1.获取本机地址对象。\\nInetAddress ip = InetAddress.getLocalHost();\\nSystem.out.println(ip.getHostName());\\nSystem.out.println(ip.getHostAddress());\\n// 2.获取域名ip对象\\nInetAddress ip2 = InetAddress.getByName(\\\"www.baidu.com\\\");\\nSystem.out.println(ip2.getHostName());\\nSystem.out.println(ip2.getHostAddress());\\n\\n// 3.获取公网IP对象。\\nInetAddress ip3 = InetAddress.getByName(\\\"182.61.200.6\\\");\\nSystem.out.println(ip3.getHostName());\\nSystem.out.println(ip3.getHostAddress());\\n\\n// 4.判断是否能通： ping  5s之前测试是否可通\\nSystem.out.println(ip2.isReachable(5000)); // ping\\n```\\n\\n## 第二章 UDP通信\\n\\nUDP协议的特点\\n\\n* **面向无连接**的协议\\n* 发送端只管发送，不确认对方是否能收到\\n* 基于数据包进行数据传输\\n* 发送数据的包的大小限制**64KB以内**\\n* **因为面向无连接，速度快，但是不可靠。会丢失数据！**\\n\\nUDP协议的使用场景\\n* 在线视频\\n* 网络语音电话\\n\\nUDP协议相关的两个类\\n* `DatagramPacket`\\n     * 数据包对象\\n     * 作用：用来封装要发送或要接收的数据，比如：集装箱\\n* `DatagramSocket`\\n     * 发送对象\\n     * 作用：用来发送或接收数据包，比如：码头\\n\\n`DatagramPacket`类构造器\\n\\n发送端用：`new DatagramPacket(byte[] buf, int length, InetAddress address, int port)` 创建发送端数据包对象\\n\\n* `buf`：要发送的内容，字节数组\\n* `length`：要发送内容的长度，单位是字节\\n* `address`：接收端的IP地址对象\\n* `port`：接收端的端口号\\n\\n接收端用：`new DatagramPacket(byte[] buf, int length)`\\n* 创建接收端的数据包对象\\n* `buf`：用来存储接收到内容\\n* `length`：能够接收内容的长度\\n\\n`DatagramPacket`类常用方法\\n\\n    * `int getLength()` 获得实际接收到的字节个数\\n\\n`DatagramSocket`类构造方法\\n\\n* `DatagramSocket()` 创建发送端的Socket对象，系统会随机分配一个端口号。\\n* `DatagramSocket(int port)` 创建接收端的Socket对象并指定端口号\\n\\n`DatagramSocket`类成员方法\\n\\n* `void send(DatagramPacket dp)` 发送数据包\\n* `void receive(DatagramPacket p)` 接收数据包\\n\\n需求：使用UDP实现客户端发，服务端收。(了解)\\n\\n客户端\\n\\n```java\\nSystem.out.println(\\\"===启动客户端===\\\");\\n// 1.创建一个集装箱对象，用于封装需要发送的数据包!\\n/**\\n         new DatagramPacket(byte[] buf, int length, InetAddress address, int port)\\n         参数一：封装数据的字节数组。\\n         参数二：发送数据的长度!\\n         参数三：服务端的IP地址\\n         参数四：服务端程序的端口号码。\\n         */\\nbyte[] buffer = \\\"今晚，约吗？\\\".getBytes();\\nDatagramPacket packet = new DatagramPacket(buffer, buffer.length,  InetAddress.getLocalHost(), 6666);\\n\\n// 2.创建一个码头对象\\n// 参数可以申明客户端端口，可以有可以没有，默认会给一个端口。\\nDatagramSocket socket = new DatagramSocket();\\n\\n// 3.开始发送数据包对象\\nsocket.send(packet);\\n\\nsocket.close();\\n```\\n\\n服务端\\n\\n```java\\nSystem.out.println(\\\"==启动服务端程序==\\\");\\n// 1.创建一个接收客户都端的数据包对象（集装箱）\\n/**\\n         * new DatagramPacket(byte[] buffer ,int lenght):\\n         * 参数一：接收数据的数组。\\n         * 参数二：接收数据的数组的长度！\\n         */\\nbyte[] buffer = new byte[1024*64];\\nDatagramPacket packet = new DatagramPacket(buffer, buffer.length);\\n\\n// 2.创建一个接收端的码头对象\\nDatagramSocket socket = new DatagramSocket(6666);\\n\\n// 3.开始接收\\nsocket.receive(packet);\\n\\n// 4.从集装箱中获取本次读取的数据量\\nint len = packet.getLength();\\n\\n// 5.输出数据\\nString rs = new String(buffer , 0 , len);\\nSystem.out.println(rs);\\n\\n// 6.服务端还可以获取发来信息的客户端的IP和端口。\\nString ip = packet.getAddress().getHostAddress();\\nint port = packet.getPort();\\nSystem.out.println(\\\"对方：\\\"+ip+\\\":\\\"+port);\\nsocket.close();\\n```\\n\\n## 第三章 TCP通信\\n\\nTCP/IP协议 ==> Transfer Control Protocol ==> 传输控制协议\\nTCP/IP协议的特点\\n\\n* **面向连接**的协议\\n* 只能由客户端主动发送数据给服务器端，服务器端接收到数据之后，可以给客户端响应数据。\\n* 通过**三次握手建立连接**，连接成功形成数据传输通道。\\n* 通过**四次挥手断开连接**\\n* 基于IO流进行数据传输\\n* 传输数据大小没有限制\\n* 因为**面向连接的协议，速度慢，但是是可靠的协议**。\\n\\nTCP协议的使用场景\\n* 文件上传和下载\\n* 邮件发送和接收\\n* 远程登录\\n\\nTCP协议相关的类\\n* `Socket`\\n\\n     一个该类的对象就代表一个客户端程序\\n\\n* `ServerSocket`\\n\\n     一个该类的对象就代表一个服务器端程序\\n\\nTCP通信也叫`Socket`网络编程，只要代码基于`Socket`开发，底层就是基于了可靠传输的TCP通信。\\n\\n`Socket`类构造方法\\n\\n    * `Socket(String host, int port)`\\n        \\n    根据ip地址字符串和端口号创建客户端Socket对象\\n          \\n          > 只要执行该方法，就会立即连接指定的服务器程序，如果连接不成功，则会抛出异常。如果连接成功，则表示三次握手通过。\\n\\n`Socket`类常用方法\\n\\n* `OutputStream getOutputStream()`; 获得字节输出流对象\\n* `InputStream getInputStream()`;获得字节输入流对象\\n\\n**客户端的开发流程**\\n\\n1. 客户端要请求于服务端的`socket`管道连接。\\n2. 从`socket`通信管道中得到一个字节输出流\\n3. 通过字节输出流给服务端写出数据。\\n\\n**服务端的开发流程**\\n\\n1. 注册端口。\\n2. 接收客户端的`Socket`管道连接。\\n3. 从`socket`通信管道中得到一个字节输入流。\\n4. 从字节输入流中读取客户端发来的数据。\\n\\n需求：客户端发送一行数据，服务端接收一行数据！！\\n\\n> 1. 客户端用`Socket`连接服务端。\\n> 2. 服务端用`ServerSocket`注册端口，接收客户端的`Socket`连接。\\n> 3. 通信是很严格的，对方怎么发，你就应该怎么收，对方发多少你就只能收多少。\\n> 4. 实现的面向连接的`socket`端到端的通信管道，一方如果出现对象，另一方会出现异常！\\n\\n### TCP通信的第一个入门案例\\n\\n简单的发送一条信息\\n\\n客户端\\n\\n```java\\n// 1.客户端要请求于服务端的socket管道连接。\\n// Socket(String host, int port)\\nSocket socket = new Socket(\\\"127.0.0.1\\\" , 9999);\\n// 2.从socket通信管道中得到一个字节输出流\\nOutputStream os = socket.getOutputStream();\\n// 3.把低级的字节输出流包装成高级的打印流。\\nPrintStream ps = new PrintStream(os);\\n// 4.开始发消息出去\\nps.println(\\\"我是客户端，喜欢你很久了，第一次给你发消息，只想说：约吗？\\\");\\nps.flush();\\nSystem.out.println(\\\"客户端发送完毕~~~~\\\");\\n```\\n\\n服务端\\n\\n```java\\nSystem.out.println(\\\"----服务端启动----\\\");\\n// 1.注册端口: public ServerSocket(int port)\\nServerSocket serverSocket = new ServerSocket(9999);\\n// 2.开始等待接收客户端的Socket管道连接。\\nSocket socket = serverSocket.accept();\\n// 3.从socket通信管道中得到一个字节输入流。\\nInputStream is = socket.getInputStream();\\n// 4.把字节输入流转换成字符输入流\\nReader isr = new InputStreamReader(is);\\n// 5.把字符输入流包装成缓冲字符输入流。\\nBufferedReader br = new BufferedReader(isr);\\n// 6.按照行读取消息 。\\nString line ;\\nif((line = br.readLine())!=null){\\n    System.out.println(line);\\n}\\n```\\n\\n### TCP通信的第二个案例-循环发送\\n\\n客户端可以反复发送数据，服务端可以反复接受数据\\n\\n客户端\\n\\n```java\\n// 1.客户端要请求于服务端的socket管道连接。\\n// Socket(String host, int port)\\nSocket socket = new Socket(\\\"127.0.0.1\\\" , 9999);\\n// 2.从socket通信管道中得到一个字节输出流\\nOutputStream os = socket.getOutputStream();\\n// 3.把低级的字节输出流包装成高级的打印流。\\nPrintStream ps = new PrintStream(os);\\n// 4.开始发消息出去\\nwhile(true){\\nScanner sc = new Scanner(System.in);\\nSystem.out.print(\\\"请说：\\\");\\nps.println(sc.nextLine());\\nps.flush();\\n}\\n```\\n\\n服务端\\n\\n```java\\nSystem.out.println(\\\"----服务端启动----\\\");\\n// 1.注册端口: public ServerSocket(int port)\\nServerSocket serverSocket = new ServerSocket(9999);\\n// 2.开始等待接收客户端的Socket管道连接。\\nSocket socket = serverSocket.accept();\\n// 3.从socket通信管道中得到一个字节输入流。\\nInputStream is = socket.getInputStream();\\n// 4.把字节输入流转换成字符输入流\\nReader isr = new InputStreamReader(is);\\n// 5.把字符输入流包装成缓冲字符输入流。\\nBufferedReader br = new BufferedReader(isr);\\n// 6.按照行读取消息 。\\nString line ;\\nwhile((line = br.readLine())!=null){\\n\\tSystem.out.println(line);\\n}\\n```\\n\\n### TCP通信的第三个案例-一个服务端同时接受多个客户端消息\\n\\n需要在服务端引入多线程。每接收一个客户端的Socket通道，就为它分配一个独立的线程来处理它的消息。如此便可实现：一个服务端可以同时接收多个客户端的消息。\\n\\n服务端\\n\\n```java\\npublic class ServerDemo02 {\\n    public static void main(String[] args) throws Exception {\\n        System.out.println(\\\"----服务端启动----\\\");\\n        // 1.注册端口: public ServerSocket(int port)\\n        ServerSocket serverSocket = new ServerSocket(9999);\\n        // 2.定义一个循环不断的接收客户端的连接请求\\n        while(true){\\n            // 3.开始等待接收客户端的Socket管道连接。\\n            Socket socket = serverSocket.accept();\\n            // 4.每接收到一个客户端必须为这个客户端管道分配一个独立的线程来处理与之通信。\\n            new ServerReaderThread(socket).start();\\n        }\\n    }\\n}\\n\\nclass ServerReaderThread extends Thread{\\n    private Socket socket ;\\n    public ServerReaderThread(Socket socket){\\n        this.socket = socket;\\n    }\\n\\n    @Override\\n    public void run() {\\n        try{\\n            // 3.从socket通信管道中得到一个字节输入流。\\n            InputStream is = socket.getInputStream();\\n            // 4.把字节输入流转换成字符输入流\\n            Reader isr = new InputStreamReader(is);\\n            // 5.把字符输入流包装成缓冲字符输入流。\\n            BufferedReader br = new BufferedReader(isr);\\n            // 6.按照行读取消息 。\\n            String line ;\\n            while((line = br.readLine())!=null){\\n                System.out.println(socket.getRemoteSocketAddress()+\\\"说：\\\"+line);\\n            }\\n        }catch (Exception e){\\n            System.out.println(socket.getRemoteSocketAddress()+\\\"下线了~~~~~~\\\");\\n        }\\n    }\\n}\\n```\\n\\n客户端\\n\\n```java\\n// 1.客户端要请求于服务端的socket管道连接。\\n// Socket(String host, int port)\\nSocket socket = new Socket(\\\"127.0.0.1\\\" , 9999);\\n// 2.从socket通信管道中得到一个字节输出流\\nOutputStream os = socket.getOutputStream();\\n// 3.把低级的字节输出流包装成高级的打印流。\\nPrintStream ps = new PrintStream(os);\\n// 4.开始发消息出去\\nwhile(true){\\n    Scanner sc = new Scanner(System.in);\\n    System.out.print(\\\"请说：\\\");\\n    ps.println(sc.nextLine());\\n    ps.flush();\\n}\\n```\\n\\n### TCP通信的第四个案例-线程池\\n\\n\\n\\n我们之前引入的线程解决一个服务端可以接收多个客户端消息。客户端与服务端的线程模型是： N-N的关系。 一个客户端要一个线程。这种模型是不行的，并发越高，系统瘫痪的越快\\n\\n我们可以在服务端引入**线程池**，使用线程池来处理与客户端的消息通信，线程池不会引起出现过多的线程而导致系统死机\\n\\n客户端\\n\\n```java\\ntry {\\n    // 1.客户端要请求于服务端的socket管道连接。\\n    // Socket(String host, int port)\\n    Socket socket = new Socket(\\\"127.0.0.1\\\" , 9999);\\n    // 2.从socket通信管道中得到一个字节输出流\\n    OutputStream os = socket.getOutputStream();\\n    // 3.把低级的字节输出流包装成高级的打印流。\\n    PrintStream ps = new PrintStream(os);\\n    Scanner sc = new Scanner(System.in);\\n    while(true){\\n        System.out.print(\\\"请说：\\\");\\n        String msg = sc.nextLine();\\n        ps.println(msg);\\n        ps.flush();\\n    }\\n} catch (Exception e) {\\n    e.printStackTrace();\\n}\\n```\\n\\n服务端主程序\\n\\n```java\\ntry {\\n    System.out.println(\\\"----------服务端启动成功------------\\\");\\n    ServerSocket ss = new ServerSocket(9999);\\n\\n    // 一个服务端只需要对应一个线程池\\n    HandlerSocketThreadPool handlerSocketThreadPool =\\n        new HandlerSocketThreadPool(3, 100);\\n\\n    // 客户端可能有很多个\\n    while(true){\\n        Socket socket = ss.accept() ;\\n        System.out.println(\\\"有人上线了！！\\\");\\n        // 每次收到一个客户端的socket请求，都需要为这个客户端分配一个\\n        // 独立的线程 专门负责对这个客户端的通信！！\\n        handlerSocketThreadPool.execute(new ReaderClientRunnable(socket));\\n    }\\n\\n} catch (Exception e) {\\n    e.printStackTrace();\\n}\\n```\\n\\n`HandlerSocketThreadPool`\\n\\n```java\\n// 线程池处理类\\npublic class HandlerSocketThreadPool {\\n\\t\\n\\t// 线程池 \\n\\tprivate ExecutorService executor;\\n\\t// 线程池：3个线程  100个\\n\\tpublic HandlerSocketThreadPool(int maxPoolSize, int queueSize){\\n\\t\\texecutor = new ThreadPoolExecutor(\\n\\t\\t\\t\\tmaxPoolSize,\\n\\t\\t\\t\\tmaxPoolSize,\\n\\t\\t\\t\\t120L, \\n\\t\\t\\t\\tTimeUnit.SECONDS,\\n\\t\\t\\t\\tnew ArrayBlockingQueue<Runnable>(queueSize) );\\n\\t}\\n\\t\\n\\tpublic void execute(Runnable task){\\n\\t\\tthis.executor.execute(task);\\n\\t}\\n}\\n```\\n\\n`ReaderClientRunnable`\\n\\n```java\\nclass ReaderClientRunnable implements Runnable {\\n\\tprivate Socket socket ;\\n\\n\\tpublic ReaderClientRunnable(Socket socket) {\\n\\t\\tthis.socket = socket;\\n\\t}\\n\\n\\t@Override\\n\\tpublic void run() {\\n\\t\\ttry {\\n\\t\\t\\t// 读取一行数据\\n\\t\\t\\tInputStream is = socket.getInputStream() ;\\n\\t\\t\\t// 转成一个缓冲字符流\\n\\t\\t\\tReader fr = new InputStreamReader(is);\\n\\t\\t\\tBufferedReader br = new BufferedReader(fr);\\n\\t\\t\\t// 一行一行的读取数据\\n\\t\\t\\tString line = null ;\\n\\t\\t\\twhile((line = br.readLine())!=null){ // 阻塞式的！！\\n\\t\\t\\t\\tSystem.out.println(\\\"服务端收到了数据：\\\"+line);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tSystem.out.println(\\\"有人下线了\\\");\\n\\t\\t}\\n\\t}\\n}\\n```\\n\\n### 即时通信\\n\\n`ClientChat`\\n\\n```java\\nimport javax.swing.*;\\nimport java.awt.*;\\nimport java.awt.event.ActionEvent;\\nimport java.awt.event.ActionListener;\\nimport java.io.DataInputStream;\\nimport java.io.DataOutputStream;\\nimport java.net.Socket;\\n\\n/**\\n * @Author xlei(徐磊)\\n * 客户端界面\\n */\\npublic class ClientChat implements ActionListener {\\n\\t/** 1.设计界面  */\\n\\tprivate JFrame win = new JFrame();\\n\\t/** 2.消息内容框架 */\\n\\tpublic JTextArea smsContent =new JTextArea(23 , 50);\\n\\t/** 3.发送消息的框  */\\n\\tprivate JTextArea smsSend = new JTextArea(4,40);\\n\\t/** 4.在线人数的区域  */\\n\\t/** 存放人的数据 */\\n\\t/** 展示在线人数的窗口 */\\n\\tpublic JList<String> onLineUsers = new JList<>();\\n\\n\\t// 是否私聊按钮\\n\\tprivate JCheckBox isPrivateBn = new JCheckBox(\\\"私聊\\\");\\n\\t// 消息按钮\\n\\tprivate JButton sendBn  = new JButton(\\\"发送\\\");\\n\\n\\t// 登录界面\\n\\tprivate JFrame loginView;\\n\\n\\tprivate JTextField ipEt , nameEt , idEt;\\n\\n\\tprivate Socket socket ;\\n\\n\\tpublic static void main(String[] args) {\\n\\t\\tnew ClientChat().initView();\\n\\n\\t}\\n\\n\\tprivate void initView() {\\n\\t\\t/** 初始化聊天窗口的界面 */\\n\\t\\twin.setSize(650, 600);\\n\\n\\t\\t/** 展示登录界面  */\\n\\t\\tdisplayLoginView();\\n\\n\\t\\t/** 展示聊天界面 */\\n\\t\\t//displayChatView();\\n\\n\\n\\t}\\n\\n\\tprivate void displayChatView() {\\n\\n\\t\\tJPanel bottomPanel = new JPanel(new BorderLayout());\\n\\t\\t//-----------------------------------------------\\n\\t\\t// 将消息框和按钮 添加到窗口的底端\\n\\t\\twin.add(bottomPanel, BorderLayout.SOUTH);\\n\\t\\tbottomPanel.add(smsSend);\\n\\t\\tJPanel btns = new JPanel(new FlowLayout(FlowLayout.LEFT));\\n\\t\\tbtns.add(sendBn);\\n\\t\\tbtns.add(isPrivateBn);\\n\\t\\tbottomPanel.add(btns, BorderLayout.EAST);\\n\\t\\t//-----------------------------------------------\\n\\t\\t// 给发送消息按钮绑定点击事件监听器\\n\\t\\t// 将展示消息区centerPanel添加到窗口的中间\\n\\t\\tsmsContent.setBackground(new Color(0xdd,0xdd,0xdd));\\n\\t\\t// 让展示消息区可以滚动。\\n\\t\\twin.add(new JScrollPane(smsContent), BorderLayout.CENTER);\\n\\t\\tsmsContent.setEditable(false);\\n\\t\\t//-----------------------------------------------\\n\\t\\t// 用户列表和是否私聊放到窗口的最右边\\n\\t\\tBox rightBox = new Box(BoxLayout.Y_AXIS);\\n\\t\\tonLineUsers.setFixedCellWidth(120);\\n\\t\\tonLineUsers.setVisibleRowCount(13);\\n\\t\\trightBox.add(new JScrollPane(onLineUsers));\\n\\t\\twin.add(rightBox, BorderLayout.EAST);\\n\\t\\t//-----------------------------------------------\\n\\t\\t// 关闭窗口退出当前程序\\n\\t\\twin.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\\n\\t\\twin.pack();  // swing 加上这句 就可以拥有关闭窗口的功能\\n\\t\\t/** 设置窗口居中,显示出来  */\\n\\t\\tsetWindowCenter(win,650,600,true);\\n\\t\\t// 发送按钮绑定点击事件\\n\\t\\tsendBn.addActionListener(this);\\n\\t}\\n\\n\\tprivate void displayLoginView(){\\n\\n\\t\\t/** 先让用户进行登录\\n\\t\\t *  服务端ip\\n\\t\\t *  用户名\\n\\t\\t *  id\\n\\t\\t *  */\\n\\t\\t/** 显示一个qq的登录框     */\\n\\t\\tloginView = new JFrame(\\\"登录\\\");\\n\\t\\tloginView.setLayout(new GridLayout(3, 1));\\n\\t\\tloginView.setSize(400, 230);\\n\\n\\t\\tJPanel ip = new JPanel();\\n\\t\\tJLabel label = new JLabel(\\\"   IP:\\\");\\n\\t\\tip.add(label);\\n\\t\\tipEt = new JTextField(20);\\n\\t\\tip.add(ipEt);\\n\\t\\tloginView.add(ip);\\n\\n\\t\\tJPanel name = new JPanel();\\n\\t\\tJLabel label1 = new JLabel(\\\"姓名:\\\");\\n\\t\\tname.add(label1);\\n\\t\\tnameEt = new JTextField(20);\\n\\t\\tname.add(nameEt);\\n\\t\\tloginView.add(name);\\n\\n\\t\\tJPanel btnView = new JPanel();\\n\\t\\tJButton login = new JButton(\\\"登陆\\\");\\n\\t\\tbtnView.add(login);\\n\\t\\tJButton cancle = new JButton(\\\"取消\\\");\\n\\t\\tbtnView.add(cancle);\\n\\t\\tloginView.add(btnView);\\n\\t\\t// 关闭窗口退出当前程序\\n\\t\\tloginView.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\\n\\t\\tsetWindowCenter(loginView,400,260,true);\\n\\n\\t\\t/** 给登录和取消绑定点击事件 */\\n\\t\\tlogin.addActionListener(this);\\n\\t\\tcancle.addActionListener(this);\\n\\n\\t}\\n\\n\\tprivate static void setWindowCenter(JFrame frame, int width , int height, boolean flag) {\\n\\t\\t/** 得到所在系统所在屏幕的宽高 */\\n\\t\\tDimension ds = frame.getToolkit().getScreenSize();\\n\\n\\t\\t/** 拿到电脑的宽 */\\n\\t\\tint width1 = ds.width;\\n\\t\\t/** 高 */\\n\\t\\tint height1 = ds.height ;\\n\\n\\t\\tSystem.out.println(width1 +\\\"*\\\" + height1);\\n\\t\\t/** 设置窗口的左上角坐标 */\\n\\t\\tframe.setLocation(width1/2 - width/2, height1/2 -height/2);\\n\\t\\tframe.setVisible(flag);\\n\\t}\\n\\n\\t@Override\\n\\tpublic void actionPerformed(ActionEvent e) {\\n\\t\\t/** 得到点击的事件源 */\\n\\t\\tJButton btn = (JButton) e.getSource();\\n\\t\\tswitch(btn.getText()){\\n\\t\\t\\tcase \\\"登陆\\\":\\n\\t\\t\\t\\tString ip = ipEt.getText().toString();\\n\\t\\t\\t\\tString name = nameEt.getText().toString();\\n\\t\\t\\t\\t// 校验参数是否为空\\n\\t\\t\\t\\t// 错误提示\\n\\t\\t\\t\\tString msg = \\\"\\\" ;\\n\\t\\t\\t\\t// 12.1.2.0\\n\\t\\t\\t\\t// \\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\\\n\\t\\t\\t\\tif(ip==null || !ip.matches(\\\"\\\\\\\\d{1,3}\\\\\\\\.\\\\\\\\d{1,3}\\\\\\\\.\\\\\\\\d{1,3}\\\\\\\\.\\\\\\\\d{1,3}\\\")){\\n\\t\\t\\t\\t\\tmsg = \\\"请输入合法的服务端ip地址\\\";\\n\\t\\t\\t\\t}else if(name==null || !name.matches(\\\"\\\\\\\\S{1,}\\\")){\\n\\t\\t\\t\\t\\tmsg = \\\"姓名必须1个字符以上\\\";\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif(!msg.equals(\\\"\\\")){\\n\\t\\t\\t\\t\\t/** msg有内容说明参数有为空 */\\n\\t\\t\\t\\t\\t// 参数一：弹出放到哪个窗口里面\\n\\t\\t\\t\\t\\tJOptionPane.showMessageDialog(loginView, msg);\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\t// 参数都合法了\\n\\t\\t\\t\\t\\t\\t// 当前登录的用户,去服务端登陆\\n\\t\\t\\t\\t\\t\\t/** 先把当前用户的名称展示到界面 */\\n\\t\\t\\t\\t\\t\\twin.setTitle(name);\\n\\t\\t\\t\\t\\t\\t// 去服务端登陆连接一个socket管道\\n\\t\\t\\t\\t\\t\\tsocket = new Socket(ip, Constants.PORT);\\n\\n\\t\\t\\t\\t\\t\\t//为客户端的socket分配一个线程 专门负责收消息\\n\\t\\t\\t\\t\\t\\tnew ClientReader(this,socket).start();\\n\\n\\t\\t\\t\\t\\t\\t// 带上用户信息过去\\n\\t\\t\\t\\t\\t\\tDataOutputStream dos = new DataOutputStream(socket.getOutputStream());\\n\\t\\t\\t\\t\\t\\tdos.writeInt(1); // 登录消息\\n\\t\\t\\t\\t\\t\\tdos.writeUTF(name.trim());\\n\\t\\t\\t\\t\\t\\tdos.flush();\\n\\n\\t\\t\\t\\t\\t\\t// 关系当前窗口 弹出聊天界面\\n\\t\\t\\t\\t\\t\\tloginView.dispose(); // 登录窗口销毁\\n\\t\\t\\t\\t\\t\\tdisplayChatView(); // 展示了聊天窗口了\\n\\n\\n\\t\\t\\t\\t\\t} catch (Exception e1) {\\n\\t\\t\\t\\t\\t\\te1.printStackTrace();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"取消\\\":\\n\\t\\t\\t\\t/** 退出系统 */\\n\\t\\t\\t\\tSystem.exit(0);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"发送\\\":\\n\\t\\t\\t\\t// 得到发送消息的内容\\n\\t\\t\\t\\tString msgSend = smsSend.getText().toString();\\n\\t\\t\\t\\tif(!msgSend.trim().equals(\\\"\\\")){\\n\\t\\t\\t\\t\\t/** 发消息给服务端 */\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\t// 判断是否对谁发消息\\n\\t\\t\\t\\t\\t\\tString selectName = onLineUsers.getSelectedValue();\\n\\t\\t\\t\\t\\t\\tint flag = 2 ;// 群发 @消息\\n\\t\\t\\t\\t\\t\\tif(selectName!=null&&!selectName.equals(\\\"\\\")){\\n\\t\\t\\t\\t\\t\\t\\tmsgSend =(\\\"@\\\"+selectName+\\\",\\\"+msgSend);\\n\\t\\t\\t\\t\\t\\t\\t/** 判断是否选中了私法 */\\n\\t\\t\\t\\t\\t\\t\\tif(isPrivateBn.isSelected()){\\n\\t\\t\\t\\t\\t\\t\\t\\t/** 私法 */\\n\\t\\t\\t\\t\\t\\t\\t\\tflag = 3 ;//私发消息\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tDataOutputStream dos = new DataOutputStream(socket.getOutputStream());\\n\\t\\t\\t\\t\\t\\tdos.writeInt(flag); // 群发消息  发送给所有人\\n\\t\\t\\t\\t\\t\\tdos.writeUTF(msgSend);\\n\\t\\t\\t\\t\\t\\tif(flag == 3){\\n\\t\\t\\t\\t\\t\\t\\t// 告诉服务端我对谁私发\\n\\t\\t\\t\\t\\t\\t\\tdos.writeUTF(selectName.trim());\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tdos.flush();\\n\\n\\t\\t\\t\\t\\t} catch (Exception e1) {\\n\\t\\t\\t\\t\\t\\te1.printStackTrace();\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tsmsSend.setText(null);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t}\\n\\n\\t}\\n}\\n\\nclass ClientReader extends Thread {\\n\\n\\tprivate Socket socket;\\n\\tprivate ClientChat clientChat ;\\n\\n\\tpublic ClientReader(ClientChat clientChat, Socket socket) {\\n\\t\\tthis.clientChat = clientChat;\\n\\t\\tthis.socket = socket;\\n\\t}\\n\\n\\t@Override\\n\\tpublic void run() {\\n\\t\\ttry {\\n\\t\\t\\tDataInputStream dis = new DataInputStream(socket.getInputStream());\\n\\t\\t\\t/** 循环一直等待客户端的消息 */\\n\\t\\t\\twhile(true){\\n\\t\\t\\t\\t/** 读取当前的消息类型 ：登录,群发,私聊 , @消息 */\\n\\t\\t\\t\\tint flag = dis.readInt();\\n\\t\\t\\t\\tif(flag == 1){\\n\\t\\t\\t\\t\\t// 在线人数消息回来了\\n\\t\\t\\t\\t\\tString nameDatas = dis.readUTF();\\n\\t\\t\\t\\t\\t// 展示到在线人数的界面\\n\\t\\t\\t\\t\\tString[] names = nameDatas.split(Constants.SPILIT);\\n\\n\\t\\t\\t\\t\\tclientChat.onLineUsers.setListData(names);\\n\\t\\t\\t\\t}else if(flag == 2){\\n\\t\\t\\t\\t\\t// 群发消息\\n\\t\\t\\t\\t\\tString msg = dis.readUTF() ;\\n\\t\\t\\t\\t\\tclientChat.smsContent.append(msg);\\n\\t\\t\\t\\t\\t//滾動到底端\\n\\t\\t\\t\\t\\tclientChat.smsContent.setCaretPosition(clientChat.smsContent.getText().length());\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\n\\t}\\n}\\n```\\n\\n`User`\\n\\n```java\\npublic class User {\\n\\tprivate Integer id ;\\n\\tprivate String name ;\\n\\t\\n\\tpublic User(Integer id, String name) {\\n\\t\\tthis.id = id;\\n\\t\\tthis.name = name;\\n\\t}\\n\\t\\n\\tpublic Integer getId() {\\n\\t\\treturn id;\\n\\t}\\n\\tpublic void setId(Integer id) {\\n\\t\\tthis.id = id;\\n\\t}\\n\\tpublic String getName() {\\n\\t\\treturn name;\\n\\t}\\n\\tpublic void setName(String name) {\\n\\t\\tthis.name = name;\\n\\t}\\n\\t@Override\\n\\tpublic String toString() {\\n\\t\\treturn \\\"User [id=\\\" + id + \\\", name=\\\" + name + \\\"]\\\";\\n\\t}\\n\\t\\n\\t\\n}\\n```\\n\\n`ServerChat`\\n\\n```java\\n/**\\n * @Author\\n * @Email dlei0009@163.com\\n */\\npublic class ServerChat {\\n\\n\\t/** 定义一个集合存放所有在线的socket  */\\n\\tpublic static Map<Socket, String> onLineSockets = new HashMap<>();\\n\\n\\tpublic static void main(String[] args) {\\n\\t\\ttry {\\n\\t\\t\\t/** 注册端口   */\\n\\t\\t\\tServerSocket serverSocket = new ServerSocket(Constants.PORT);\\n\\n\\t\\t\\t/** 循环一直等待所有可能的客户端连接 */\\n\\t\\t\\twhile(true){\\n\\t\\t\\t\\tSocket socket = serverSocket.accept();\\n\\t\\t\\t\\t/** 把客户端的socket管道单独配置一个线程来处理 */\\n\\t\\t\\t\\tnew ServerReader(socket).start();\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t}\\n}\\n\\nclass ServerReader extends Thread {\\n\\n\\tprivate Socket socket;\\n\\n\\tpublic ServerReader(Socket socket) {\\n\\t\\tthis.socket = socket;\\n\\t}\\n\\n\\t@Override\\n\\tpublic void run() {\\n\\t\\tDataInputStream dis = null;\\n\\t\\ttry {\\n\\t\\t\\tdis = new DataInputStream(socket.getInputStream());\\n\\t\\t\\t/** 循环一直等待客户端的消息 */\\n\\t\\t\\twhile(true){\\n\\t\\t\\t\\t/** 读取当前的消息类型 ：登录,群发,私聊 , @消息 */\\n\\t\\t\\t\\tint flag = dis.readInt();\\n\\t\\t\\t\\tif(flag == 1){\\n\\t\\t\\t\\t\\t/** 先将当前登录的客户端socket存到在线人数的socket集合中   */\\n\\t\\t\\t\\t\\tString name = dis.readUTF() ;\\n\\t\\t\\t\\t\\tSystem.out.println(name+\\\"---->\\\"+socket.getRemoteSocketAddress());\\n\\t\\t\\t\\t\\tServerChat.onLineSockets.put(socket, name);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\twriteMsg(flag,dis);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tSystem.out.println(\\\"--有人下线了--\\\");\\n\\t\\t\\t// 从在线人数中将当前socket移出去  \\n\\t\\t\\tServerChat.onLineSockets.remove(socket);\\n\\t\\t\\ttry {\\n\\t\\t\\t\\t// 从新更新在线人数并发给所有客户端 \\n\\t\\t\\t\\twriteMsg(1,dis);\\n\\t\\t\\t} catch (Exception e1) {\\n\\t\\t\\t\\te1.printStackTrace();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n\\n\\tprivate void writeMsg(int flag, DataInputStream dis) throws Exception {\\n//\\t\\tDataOutputStream dos = new DataOutputStream(socket.getOutputStream()); \\n\\t\\t// 定义一个变量存放最终的消息形式 \\n\\t\\tString msg = null ;\\n\\t\\tif(flag == 1){\\n\\t\\t\\t/** 读取所有在线人数发给所有客户端去更新自己的在线人数列表 */\\n\\t\\t\\t/** onlineNames = [徐磊,zhangsan,李刚]*/\\n\\t\\t\\tStringBuilder rs = new StringBuilder();\\n\\t\\t\\tCollection<String> onlineNames = ServerChat.onLineSockets.values();\\n\\t\\t\\t// 判断是否存在在线人数 \\n\\t\\t\\tif(onlineNames != null && onlineNames.size() > 0){\\n\\t\\t\\t\\tfor(String name : onlineNames){\\n\\t\\t\\t\\t\\trs.append(name+ Constants.SPILIT);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// 徐磊003197♣♣㏘♣④④♣zhangsan003197♣♣㏘♣④④♣李刚003197♣♣㏘♣④④♣\\n\\t\\t\\t\\t// 去掉最后的一个分隔符 \\n\\t\\t\\t\\tmsg = rs.substring(0, rs.lastIndexOf(Constants.SPILIT));\\n\\n\\t\\t\\t\\t/** 将消息发送给所有的客户端 */\\n\\t\\t\\t\\tsendMsgToAll(flag,msg);\\n\\t\\t\\t}\\n\\t\\t}else if(flag == 2 || flag == 3){\\n\\t\\t\\t// 读到消息  群发的 或者 @消息\\n\\t\\t\\tString newMsg = dis.readUTF() ; // 消息\\n\\t\\t\\t// 得到发件人 \\n\\t\\t\\tString sendName = ServerChat.onLineSockets.get(socket);\\n\\n\\t\\t\\t// 李刚 时间\\n\\t\\t\\t//    内容--\\n\\t\\t\\tStringBuilder msgFinal = new StringBuilder();\\n\\t\\t\\t// 时间  \\n\\t\\t\\tSimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss EEE\\\");\\n\\t\\t\\tif(flag == 2){\\n\\t\\t\\t\\tmsgFinal.append(sendName).append(\\\"  \\\").append(sdf.format(System.currentTimeMillis())).append(\\\"\\\\r\\\\n\\\");\\n\\t\\t\\t\\tmsgFinal.append(\\\"    \\\").append(newMsg).append(\\\"\\\\r\\\\n\\\");\\n\\t\\t\\t\\tsendMsgToAll(flag,msgFinal.toString());\\n\\t\\t\\t}else if(flag == 3){\\n\\t\\t\\t\\tmsgFinal.append(sendName).append(\\\"  \\\").append(sdf.format(System.currentTimeMillis())).append(\\\"对您私发\\\\r\\\\n\\\");\\n\\t\\t\\t\\tmsgFinal.append(\\\"    \\\").append(newMsg).append(\\\"\\\\r\\\\n\\\");\\n\\t\\t\\t\\t// 私发 \\n\\t\\t\\t\\t// 得到给谁私发 \\n\\t\\t\\t\\tString destName = dis.readUTF();\\n\\t\\t\\t\\tsendMsgToOne(destName,msgFinal.toString());\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t/**\\n\\t * @param destName 对谁私发 \\n\\t * @param msg 发的消息内容 \\n\\t * @throws Exception\\n\\t */\\n\\tprivate void sendMsgToOne(String destName, String msg) throws Exception {\\n\\t\\t// 拿到所有的在线socket管道 给这些管道写出消息\\n\\t\\tSet<Socket> allOnLineSockets = ServerChat.onLineSockets.keySet();\\n\\t\\tfor(Socket sk :  allOnLineSockets){\\n\\t\\t\\t// 得到当前需要私发的socket \\n\\t\\t\\t// 只对这个名字对应的socket私发消息\\n\\t\\t\\tif(ServerChat.onLineSockets.get(sk).trim().equals(destName)){\\n\\t\\t\\t\\tDataOutputStream dos = new DataOutputStream(sk.getOutputStream());\\n\\t\\t\\t\\tdos.writeInt(2); // 消息类型\\n\\t\\t\\t\\tdos.writeUTF(msg);\\n\\t\\t\\t\\tdos.flush();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n\\n\\tprivate void sendMsgToAll(int flag, String msg) throws Exception {\\n\\t\\t// 拿到所有的在线socket管道 给这些管道写出消息\\n\\t\\tSet<Socket> allOnLineSockets = ServerChat.onLineSockets.keySet();\\n\\t\\tfor(Socket sk :  allOnLineSockets){\\n\\t\\t\\tDataOutputStream dos = new DataOutputStream(sk.getOutputStream());\\n\\t\\t\\tdos.writeInt(flag); // 消息类型\\n\\t\\t\\tdos.writeUTF(msg);\\n\\t\\t\\tdos.flush();\\n\\t\\t}\\n\\t}\\n}\\n```\\n\\n`Constants`\\n\\n```java\\npublic class Constants {\\n\\t/** 常量 */\\n\\tpublic static final int PORT = 7778 ;\\n\\t\\n\\t/** 协议分隔符 */\\n\\tpublic static final String SPILIT = \\\"003197♣♣㏘♣④④♣\\\";\\n}\\n```\\n\\n### 文件上传\\n\\n实现客户端上传图片给服务端保存起来\\n\\n服务端实现：\\n\\n* 接受多个客户端传输来的图片数据存储到服务器路径\\n* 响应一个成功的消息给当前客户端\\n\\n`ClientDemo`\\n\\n```java\\npublic class ClientDemo {\\n    // 本地图片路径、\\n    public static void main(String[] args) throws Exception {\\n        // 1.请求于服务端的Socket管道连接。\\n        Socket socket = new Socket(Constants.SERVER_IP , Constants.SERVER_PORT);\\n        // 2.从socket管道中得到一个字节输出流包装成缓冲字节输出流\\n        BufferedOutputStream bos = new BufferedOutputStream(socket.getOutputStream());\\n        // 3.提取本机的图片上传给服务端\\n        // 4.得到一个缓冲字节输入流与本地图片接通\\n        BufferedInputStream bis =\\n                new BufferedInputStream(new FileInputStream(Constants.SRC_IMAGE));\\n        // 5.定义一个字节数组\\n        byte[] buffer = new byte[1024];\\n        int len ;\\n        while((len = bis.read(buffer)) != -1) {\\n            bos.write(buffer, 0 ,len);\\n        }\\n        bos.flush(); // 刷新图片数据到服务端！！\\n        socket.shutdownOutput(); // 告诉服务端我的数据已经发送完毕，请不要在等我了！\\n        bis.close(); // 可以关闭\\n\\n        // 6.等待着服务端的响应数据！！\\n        BufferedReader  br = new BufferedReader(new InputStreamReader(socket.getInputStream()));\\n        System.out.println(\\\"收到服务端响应：\\\"+br.readLine());\\n    }\\n}\\n```\\n\\n`Constants`\\n\\n```java\\n/**\\n * 客户端常量包\\n */\\npublic class Constants {\\n    public static final String SRC_IMAGE = \\\"D:\\\\\\\\itcast\\\\\\\\图片资源\\\\\\\\beautiful.jpg\\\";\\n    public static final String SERVER_DIR = \\\"D:\\\\\\\\itcast\\\\\\\\约吧图片服务器\\\\\\\\\\\";\\n    public static final String SERVER_IP = \\\"127.0.0.1\\\";\\n    public static final int SERVER_PORT = 8888;\\n\\n}\\n```\\n\\n`ServerDemo`\\n\\n```java\\n/**\\n      功能点：\\n      1.接收多个客户端传输来的图片数据存储到服务器路径：\\n      2.响应一个成功的消息给当前客户端。\\n */\\npublic class ServerDemo {\\n    public static void main(String[] args) throws Exception {\\n        System.out.println(\\\"----服务端启动----\\\");\\n        // 1.注册端口: public ServerSocket(int port)\\n        ServerSocket serverSocket = new ServerSocket(Constants.SERVER_PORT);\\n        // 2.定义一个循环不断的接收客户端的连接请求\\n        while(true){\\n            // 3.开始等待接收客户端的Socket管道连接。\\n            Socket socket = serverSocket.accept();\\n            // 4.每接收到一个客户端必须为这个客户端管道分配一个独立的线程来处理与之通信。\\n            new ServerReaderThread(socket).start();\\n        }\\n    }\\n}\\n\\nclass ServerReaderThread extends Thread{\\n    private Socket socket ;\\n    public ServerReaderThread(Socket socket){\\n        this.socket = socket;\\n    }\\n\\n    @Override\\n    public void run() {\\n        try{\\n            // 1.从socket通信管道中得到一个字节输入流读取客户端发来的图片数据！\\n            InputStream is = socket.getInputStream();\\n            // 2.包装成高级的缓冲字节输入流\\n            BufferedInputStream bis = new BufferedInputStream(is);\\n            // 3.定义一个缓冲字节输出流通向目标路径（服务端路径）\\n            BufferedOutputStream bos =\\n                    new BufferedOutputStream(new FileOutputStream(Constants.SERVER_DIR+ UUID.randomUUID().toString()+\\\".jpg\\\"));\\n            byte[] buffer = new byte[1024];\\n            int len ;\\n            while((len = bis.read(buffer)) != -1) {\\n                bos.write(buffer, 0 ,len);\\n            }\\n            bos.close();\\n            System.out.println(\\\"服务端接收完毕了！\\\");\\n\\n            // 4.响应数据给客户端\\n            PrintStream ps = new PrintStream(socket.getOutputStream());\\n            ps.println(\\\"您好，已成功接收您上传的图片！\\\");\\n            ps.flush();\\n\\n            Thread.sleep(100000); // 等消失发送完毕被客户端接收后死亡！\\n        }catch (Exception e){\\n            System.out.println(socket.getRemoteSocketAddress()+\\\"下线了~~~~~~\\\");\\n        }\\n    }\\n}\\n```\\n\\n## 第四章 BS架构 \\n\\n之前客户端和服务端都需要自己开发。也就是CS架构。接下来模拟一下BS架构。\\n\\n客户端：浏览器。（无需开发）\\n\\n服务端：自己开发。\\n\\n需求：在浏览器中请求本程序，响应一个网页文字给浏览器显示。\\n\\n```java\\nclass ServerReaderThread extends Thread{\\n    private Socket socket;\\n    public ServerReaderThread(Socket socket) {\\n        this.socket = socket;\\n    }\\n    @Override\\n    public void run() {\\n        try {\\n            // 响应消息数据给浏览器显示。\\n            // 浏览器是基于HTTP协议通信！响应格式必须满足HTTP协议数据格式的要求，浏览器\\n            // 才能够识别，否则响应消息浏览器根本不认识。\\n            PrintStream ps = new PrintStream(socket.getOutputStream());\\n            ps.println(\\\"HTTP/1.1 200 OK\\\"); // 响应数据的响应头数据！\\n            ps.println(\\\"Content-Type:text/html;charset=UTF-8\\\");//响应数据的类型。网页或者文本内容！\\n            ps.println(); // 必须换一行\\n            // 以下开始响应真实的数据！！\\n            ps.println(\\\"<span style=\'color:green;font-size:100px;\'>Hello, world<span>\\\");\\n\\n            Thread.sleep(4000);\\n            ps.close();\\n\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}\\n```\\n\\n## 第五章 基本通信模型\\n\\n1. BIO通信模式：同步阻塞式通信。（Socket网络编程也就是上面的通信架构）\\n\\n   同步：当前线程要自己进行数据的读写操作。（自己去银行取钱）\\n\\n   异步: 当前线程可以去做其他事情，（委托一小弟拿银行卡到银行取钱，然后给你）\\n\\n   阻塞： 在数据没有的情况下，还是要继续等待着读。（排队等待）\\n\\n   非阻塞：在数据没有的情况下，会去做其他事情，一旦有了数据再来获取。（柜台取款，取个号，然后坐在椅子上做其它事，等号广播会通知你办理）\\n\\n   > * BIO表示同步阻塞式IO，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，当然可以通过线程池机制改善。\\n   > * 同步阻塞式性能极差：大量线程，大量阻塞。\\n\\n2. 伪异步通信：引入了线程池。\\n\\n   不需要一个客户端一个线程，可以实现1个线程复用来处理很多个客户端！\\n\\n   这种架构，可以避免系统的死机，因为不会出现很多线程，线程可控。\\n\\n   但是高并发下性能还是很差：a.线程数量少，数据依然是阻塞的。数据没有来线程还是要等待！\\n\\n3. NIO表示同步非阻塞IO，服务器实现模式为请求对应一个线程，\\n\\n   即客户端发送的连接请求都会注册到多路复用器上，\\n\\n   多路复用器轮询到连接有I/O请求时才启动一个线程进行处理。\\n\\n   > 1个主线程专门负责接收客户端：\\n   >\\n   > 1个线程[c1 ,s2 ,c3,c4, ,s2 ,c3,c4,,c3,c4, ,s2 ,c3,c4]轮询所有的客户端，发来了数据才会开启线程处理\\n   >\\n   > 这种架构性能还可以！！\\n   >\\n   > **同步**：线程还是要不断的接收客户端连接，以及处理数据。\\n   >\\n   > **非阻塞**：如果一个管道没有数据，不需要等待，可以轮询下一个管道是否有数据！\\n\\n4. AIO表示异步非阻塞IO，服务器实现模式为一个有效请求一个线程，\\n\\n   客户端的I/O请求都是由操作系统先完成IO操作后再通知服务器应用来启动线程进行处理。\\n\\n   异步：服务端线程接收到了客户端管道以后就交给底层处理它的io通信。\\n\\n   自己可以做其他事情。\\n\\n   非阻塞：底层也是客户端有数据才会处理，有了数据以后处理好通知服务器应用来启动线程进行处理。\\n\\n各种模型应用场景：\\n\\nBIO适用于连接数目比较小且固定的架构，该方式对服务器资源要求比较高，JDK 1.4以前的唯一选择。\\n\\nNIO适用于连接数目多且连接比较短（轻操作）的架构，如聊天服务器，编程复杂，\\n\\nJDK 1.4开始支持。\\n\\nAIO适用于连接数目多且连接比较长（重操作）的架构，如相册服务器，充分调用操作系统参与并发操作，编程复杂，JDK 1.7开始支持。\\n\\n# day12-JUnit单元测试、反射、注解、动态代理\\n\\n## 第一章 单元测试\\n\\n单元测试是指程序员写的测试代码给自己的类中的方法进行预期正确性的验证。\\n\\n单元测试一旦写好了这些测试代码，就可以一直使用，可以实现一定程度上的自动化测试。\\n\\n单元测试一般要使用框架进行。\\n什么是框架？\\n框架是前人或者一些牛逼的技术公司在实战或者研发中设计的一些优良的设计方案或者成型的 代码功能，作为一个完整的技术体系发行出来称为框架。\\n\\n框架可以让程序员快速拥有一个强大的解决方案，可以快速的开发功能，提高效率并且直接就有了很好的性能。\\n\\n单元测试的经典框架：`Junit`\\n\\n`Junit`是什么\\n\\n*  `Junit`是Java语言编写的第三方单元测试框架\\n*  `Junit`框架的方案可以帮助我们方便且快速的测试我们的代码的正确性。\\n\\n单元测试概念\\n* 单元：在Java中，一个类就是一个单元\\n* 单元测试：程序猿用`Junit`编写的一小段代码，用来对某个类中的某个方法进行功能测试或业务逻辑测试。\\n\\n`Junit`单元测试框架的作用\\n\\n* 用来对类中的方法功能进行有目的的测试，以保证程序的正确性和稳定性。\\n* 能够独立的测试某个方法或者所有方法的预期正确性。\\n\\nJunit框架的使用步骤:\\n\\n1. 下载这个框架。（别人设计好的技术体系）\\n\\n   框架一般是jar包的形式，jar包里面都是class文件。（Java工程的最终形式）class文件就是我们调用的核心代码\\n\\n   现在不需要大家去官网下载，因为很多知名框架其实IDEA工具早就整合好了，程序员可以直接使用。\\n\\n   Junit已经被IDEA下载好了，可以直接导入到项目使用的。\\n\\n2. 直接用Junit测试代码即可\\n   * 先模拟业务代码\\n   * 写测试类\\n     * 测试类的命名规范：以Test开头，以业务类类名结尾，使用驼峰命名法\\n     * 业务名称是：UserService\\n     * 测试这个业务类的测试类：TestUserService/UserServiceTest\\n   * 在测试类中写测试方法\\n     * 测试方法的命名规则：以test开头，以业务方法名结尾\\n     * 比如被测试业务方法名为：login，那么测试方法名就应该叫：testLogin\\n   * 测试方法注意事项\\n     * 必须是`public`修饰的，没有返回值，没有参数\\n     * 必须使注解`@Test`修饰\\n\\n3. 如何运行测试方法\\n\\n   * 选中方法名 --> 右键 --> Run \'测试方法名\'  运行选中的测试方法\\n   * 选中测试类名 --> 右键 --> Run \'测试类类名\'  运行测试类中所有测试方法\\n\\n   * 选中模块名 --> 右键 --> Run \'All Tests\'  运行模块中的所有测试类的所有测试方法\\n\\n\\n​    如何查看测试结果\\n   * 绿色：表示测试通过\\n   * 红色：表示测试失败，有问题\\n\\n​    `Junit`常用注解(Junit 4.xxxx版本)\\n* `@Test` 测试方法！\\n* `@Before`：用来修饰实例方法，该方法会在每一个测试方法执行之前执行一次。\\n* `@After`：用来修饰实例方法，该方法会在每一个测试方法执行之后执行一次。\\n* `@BeforeClass`：用来静态修饰方法，该方法会在所有测试方法之前只执行一次。\\n* `@AfterClass`：用来静态修饰方法，该方法会在所有测试方法之后只执行一次。\\n\\n开始执行的方法:初始化资源。\\n\\n执行完之后的方法:释放资源。\\n\\nJunit常用注解(Junit5.xxxx版本)\\n* `@Test` 测试方法！\\n* `@BeforeEach`：用来修饰实例方法，该方法会在每一个测试方法执行之前执行一次。\\n* `@AfterEach`：用来修饰实例方法，该方法会在每一个测试方法执行之后执行一次。\\n* `@BeforeAll`：用来静态修饰方法，该方法会在所有测试方法之前只执行一次。\\n* `@AfterAll`：用来静态修饰方法，该方法会在所有测试方法之后只执行一次。\\n\\n```java\\npublic class UserServiceTest {\\n    // @Before：用来修饰实例方法，该方法会在每一个测试方法执行之前执行一次。\\n    @Before\\n    public void before(){\\n        System.out.println(\\\"===before===\\\");\\n    }\\n    // @After：用来修饰实例方法，该方法会在每一个测试方法执行之后执行一次。\\n    @After\\n    public void after(){\\n        System.out.println(\\\"===after===\\\");\\n    }\\n\\n    // @BeforeClass：用来静态修饰方法，该方法会在所有测试方法之前只执行一次。\\n    @BeforeClass\\n    public static void beforeClass(){\\n        System.out.println(\\\"===beforeClass===\\\");\\n    }\\n\\n    // @AfterClass：用来静态修饰方法，该方法会在所有测试方法之后只执行一次。\\n    @AfterClass\\n    public static void afterClass(){\\n        System.out.println(\\\"===afterClass===\\\");\\n    }\\n\\n\\n    /**\\n     * 测试方法的要求：\\n     *  1.必须public修饰\\n     *  2.没有返回值没有参数\\n     *  3. 必须使注解@Test修饰\\n     */\\n    @Test\\n    public void testLogin(){\\n        UserService userService = new UserService();\\n        String rs = userService.login(\\\"admin\\\",\\\"123456\\\");\\n        // 断言预期结果的正确性。\\n        /**\\n         * 参数一：测试失败的提示信息。\\n         * 参数二：期望值。\\n         * 参数三：实际值\\n         */\\n        // public static void assertEquals(String message, Object expected, Object actual)\\n        Assert.assertEquals(\\\"登录业务功能方法有错误，请检查！\\\",\\\"success\\\",rs);\\n    }\\n\\n    @Test\\n    public void testChu(){\\n        UserService userService = new UserService();\\n        userService.chu(10 , 2);\\n    }\\n}\\n```\\n\\n## 第二章 反射\\n\\n### 反射的概述\\n\\n反射，注解，代理，泛型是Java的高级技术，是以后框架的底层原理必须使用到的技术。\\n\\n反射：是Java独有的技术。是Java技术显著的特点。\\n\\n反射是指对于任何一个类，在\\\"运行的时候\\\"都可以直接得到这个类全部成分。\\n\\n- 在运行时,可以直接得到这个类的构造器对象。（Constructor）\\n- 在运行时,可以直接得到这个类的成员变量对象。（Field）\\n- 在运行时,可以直接得到这个类的成员方法对象。（Method）\\n\\n反射的核心思想和关键就是得到：编译以后的class文件对象。\\n\\n反射提供了一个Class类型，就是可以得到编译以后的class类对象。\\n\\n```java\\nHelloWorld.java -> javac -> HelloWorld.class\\n\\nClass c = HelloWorld.class;\\n```\\n\\n> 反射是工作在运行时的技术，因为只有运行之后才会有class类对象\\n>\\n> 反射的核心思想和关键就是得到：编译以后的class文件对象\\n>\\n> 反射是在运行时获取类的字节码文件对象：然后可以解析类中的全部成分\\n\\n### 获取Class类对象\\n\\n反射是通过先得到编译以后的Class类对象：字节码文件。然后才可以得到类中的全部成分，进行一些功能设计。\\n\\n反射为一个类的全部成分都设计了一个类型来代表这个对象：\\n\\n- `Class `: 字节码文件的类型\\n- `Constructor `: 构造器的类型\\n- `Field` : 成员变量的类型\\n- `Method `: 方法的类型\\n\\n反射技术的第一步永远是先得到Class类对象:有三种方式获取\\n\\n1. 类名.class\\n\\n2. 通过类的对象.getClass()方法\\n\\n3. Class.forName(\\\"类的全限名\\\")\\n\\n   ```java\\n   public static Class<?> forName(String className)\\n   ```\\n\\nClass类下的方法：\\n\\n- String getSimpleName(); 获得类名字符串：类名\\n- String getName();  获得类全名：包名+类名\\n- T newInstance() ;  创建Class对象关联类的对象,其实底层也是调用无参数构造器，已经被淘汰。\\n\\nClass类对象的获取有三种方式：\\n\\n1. 类名.class。\\n2. 通过类的对象.getClass()方法。\\n3. Class.forName(\\\"类的全限名\\\")。\\n4. Class类的方法：\\n   * `String getSimpleName();` 获得类名字符串：类名\\n   * `String getName(); ` 获得类全名：包名+类名\\n\\n```java\\n// 反射的第一步永远是先得到类的Class文件对象: 字节码文件。\\n// 1.类名.class\\nClass c1 = Student.class;\\nSystem.out.println(c1);\\n\\n// 2.对象.getClass()\\nStudent swk = new Student();\\nClass c2 = swk.getClass();\\nSystem.out.println(c2);\\n\\n// 3.Class.forName(\\\"类的全限名\\\")\\n// 直接去加载该类的class文件。\\nClass c3 = Class.forName(\\\"com.itheima._03反射_获取Class类对象.Student\\\");\\nSystem.out.println(c3);\\n\\nSystem.out.println(c1.getSimpleName()); // 获取类名本身（简名）\\nSystem.out.println(c1.getName()); // 获取类的全限名\\n// Student s1 = (Student) c1.newInstance(); // 调用无参数构造器得到对象，被淘汰了！\\n```\\n\\n### 获取Constructor构造器对象\\n\\n反射中Class类型获取构造器提供了很多的API:\\n     1. `Constructor getConstructor(Class... parameterTypes)`\\n        根据参数匹配获取某个构造器，只能拿public修饰的构造器，几乎不用！\\n     2. `Constructor getDeclaredConstructor(Class... parameterTypes)`\\n  根据参数匹配获取某个构造器，只要申明就可以定位，不关心权限修饰符，建议使用！\\n     3. `Constructor[] getConstructors()`\\n  获取所有的构造器，只能拿public修饰的构造器。几乎不用！！太弱了！\\n     4. `Constructor[] getDeclaredConstructors()`\\n  获取所有声明的构造器，只要你写我就能拿到，无所谓权限。建议使用！！\\n\\n\\n获取类的全部构造器对象：` Constructor[] getDeclaredConstructors()`\\n\\n获取所有申明的构造器，只要你写我就能拿到，无所谓权限。建议使用！！\\n\\n获取类的某个构造器对象：`Constructor getDeclaredConstructor(Class... parameterTypes)`\\n\\n根据参数匹配获取某个构造器，只要申明就可以定位，不关心权限修饰符，建议使用！\\n\\n对于类`Student`来说\\n\\n```java\\npublic class Student {\\n    private String name ;\\n    private int age ;\\n\\n    private Student(){\\n        System.out.println(\\\"无参数构造器被执行~~~~\\\");\\n    }\\n\\n    public Student(String name, int age) {\\n        System.out.println(\\\"有参数构造器被执行~~~~\\\");\\n        this.name = name;\\n        this.age = age;\\n    }\\n    //...\\n}\\n```\\n\\n获取该类运行时的构造器可以用一下代码实现\\n\\n```java\\npublic class TestStudent {\\n    // 1. getConstructors:\\n    // 获取全部的构造器：只能获取public修饰的构造器。\\n    // Constructor[] getConstructors()\\n    @Test\\n    public void getConstructors(){\\n        // a.反射第一步先得到Class类对象\\n        Class c = Student.class ;\\n        // b.getConstructors()：定位全部构造器，只能拿public修饰的！\\n        Constructor[] cons = c.getConstructors();\\n        // c.遍历这些构造器\\n        for (Constructor con : cons) {\\n            System.out.println(con.getName()+\\\"===>\\\"+con.getParameterCount());\\n        }\\n    }\\n\\n    // 2.getDeclaredConstructors():\\n    // 获取全部的构造器：只要你敢写，这里就能拿到，无所谓权限是否可及。\\n    @Test\\n    public void getDeclaredConstructors(){\\n        // a.反射第一步先得到Class类对象\\n        Class c = Student.class ;\\n        // b.getDeclaredConstructors()：定位全部构造器，只要申明了就可以拿到\\n        Constructor[] cons = c.getDeclaredConstructors();\\n        // c.遍历这些构造器\\n        for (Constructor con : cons) {\\n            System.out.println(con.getName()+\\\"===>\\\"+con.getParameterCount());\\n        }\\n    }\\n\\n    // 3.getConstructor(Class... parameterTypes)\\n    // 获取某个构造器：只能拿public修饰的某个构造器\\n    @Test\\n    public void getConstructor() throws Exception {\\n        // a.反射第一步先得到Class类对象\\n        Class c = Student.class ;\\n        // b.getConstructor()：定位某个构造器，根据参数匹配，只能拿public修饰的！\\n        // Constructor con = c.getConstructor(); // 报错!\\n        Constructor con = c.getConstructor(String.class  ,int.class); // 有参数的！!\\n        // c.构造器名称和参数\\n        System.out.println(con.getName()+\\\"===>\\\"+con.getParameterCount());\\n    }\\n\\n    // 4.getDeclaredConstructor\\n    // 获取某个构造器：只要你敢写，这里就能拿到，无所谓权限是否可及。\\n    @Test\\n    public void getDeclaredConstructor() throws Exception {\\n        // a.反射第一步先得到Class类对象\\n        Class c = Student.class ;\\n        // b.getDeclaredConstructor()：定位某个构造器，根据参数匹配，只要申明了就可以获取\\n        Constructor con = c.getDeclaredConstructor(); // 可以拿到！定位无参数构造器！\\n        //Constructor con = c.getDeclaredConstructor(String.class  , int.class); // 有参数的！!\\n        // c.构造器名称和参数\\n        System.out.println(con.getName()+\\\"===>\\\"+con.getParameterCount());\\n    }\\n}\\n```\\n\\n获取到构造器之后，可以通过该构造器初始化对象\\n\\n反射获取`Class`中构造器对象`Constructor`的作用，就是用来初始化并得到类的一个对象返回\\n\\n`Constructor`的API\\n\\n* `T newInstance(Object... initargs)`\\n\\n  创建对象，注入构造器需要的数据\\n\\n* `void setAccessible(true)`\\n\\n  修改访问权限，`true`代表暴力攻破权限，`false`表示保留不可访问权限\\n\\n```java\\npublic class TestStudent02 {\\n    // 1.调用无参数构造器得到一个类的对象返回。\\n    @Test\\n    public void createObj01() throws Exception {\\n        // a.反射第一步是先得到Class类对象\\n        Class c = Student.class ;\\n        // b.定位无参数构造器对象\\n        Constructor constructor = c.getDeclaredConstructor();\\n        // c.暴力打开私有构造器的访问权限\\n        constructor.setAccessible(true);\\n        // d.通过无参数构造器初始化对象返回\\n        Student swk = (Student) constructor.newInstance(); // 最终还是调用无参数构造器的！\\n        System.out.println(swk);\\n    }\\n\\n    // 2.调用有参数构造器得到一个类的对象返回。\\n    @Test\\n    public void createObj02() throws Exception {\\n        // a.反射第一步是先得到Class类对象\\n        Class c = Student.class ;\\n        // b.定位有参数构造器对象\\n        Constructor constructor = c.getDeclaredConstructor(String.class , int.class);\\n        // c.通过无参数构造器初始化对象返回\\n        Student swk = (Student) constructor.newInstance(\\\"孙悟空\\\",10000); // 最终还是调用有参数构造器的！\\n        System.out.println(swk);\\n    }\\n}\\n```\\n\\n### 获取Field成员变量对象\\n\\n* `Field getField(String name);`\\n  根据成员变量名获得对应Field对象，只能获得public修饰\\n* `Field getDeclaredField(String name);`\\n  根据成员变量名获得对应Field对象，只要申明了就可以得到\\n* `Field[] getFields();`\\n  获得所有的成员变量对应的Field对象，只能获得public的\\n* `Field[] getDeclaredFields();`\\n  获得所有的成员变量对应的Field对象，只要申明了就可以得到\\n\\n对于`Dog`类\\n\\n```java\\npublic class Dog {\\n    private String name;\\n    private int age ;\\n    private String color ;\\n    public static String school;\\n    public static final String SCHOOL_1 = \\\"宠物学校\\\";\\n\\n    public Dog() {\\n    }\\n    // ...\\n}\\n```\\n\\n获取其成员变量\\n\\n```java\\npublic class FieldDemo {\\n    /**\\n     * 1.获取全部的成员变量。\\n     */\\n    @Test\\n    public void getDeclaredFields(){\\n        // a.先获取class类对象\\n        Class c = Dog.class;\\n        // b.获取全部申明的成员变量对象\\n        Field[] fields = c.getDeclaredFields();\\n        for (Field field : fields) {\\n            System.out.println(field.getName()+\\\"===>\\\"+field.getType());\\n        }\\n    }\\n\\n    /**\\n        2.获取某个成员变量对象\\n     */\\n    @Test\\n    public void getDeclaredField() throws Exception {\\n        // a.先获取class类对象\\n        Class c = Dog.class;\\n        // b.定位某个成员变量对象 :根据名称定位！！\\n        Field ageF = c.getDeclaredField(\\\"age\\\");\\n        System.out.println(ageF.getName()+\\\"--->\\\"+ageF.getType());\\n    }\\n\\n}\\n```\\n\\n给成员变量取值和复制\\n\\n- `void set(Object obj, Object value)`：给对象注入某个成员变量数据\\n- `Object get(Object obj)` ：获取对象的成员变量的值。\\n- `void setAccessible(true)` ：暴力反射，设置为可以直接访问私有类型的属性。\\n- `Class getType()`：获取属性的类型，返回Class对象。\\n- `String getName()`：获取属性的名称。\\n\\n```java\\npublic class FieldDemo02 {\\n    @Test\\n    public void setField() throws Exception {\\n        // a.反射的第一步获取Class类对象\\n        Class c = Dog.class ;\\n        // b.定位name成员变量\\n        Field nameF = c.getDeclaredField(\\\"name\\\");\\n        // c.为这个成员变量赋值！\\n        Dog taiDi = new Dog();\\n        nameF.setAccessible(true); // 暴力反射！\\n        /**\\n         * 参数一：被赋值的对象。\\n         * 参数二：该成员变量的值。\\n         */\\n        nameF.set(taiDi , \\\"勇敢的泰迪\\\");\\n        System.out.println(taiDi);\\n\\n        // d.获取成员变量的值\\n        String value = nameF.get(taiDi)+\\\"\\\";\\n        System.out.println(value);\\n    }\\n}\\n```\\n\\n### 获取Method方法\\n\\n反射获取类的Method方法对象：\\n\\n* `Method getMethod(String name,Class...args)`：根据方法名和参数类型获得对应的方法对象，只能获得public的\\n* `Method getDeclaredMethod(String name,Class...args)`：根据方法名和参数类型获得对应的方法对象，包括private的\\n* `Method[] getMethods()`：获得类中的所有成员方法对象，返回数组，只能获得public修饰的且包含父类的\\n* `Method[] getDeclaredMethods()`：获得类中的所有成员方法对象，返回数组,只获得本类申明的方法\\n\\nMethod的方法执行：\\n`Object invoke(Object obj, Object... args)`\\n\\n* 参数一：触发的是哪个对象的方法执行\\n* 参数二： args：调用方法时传递的实际参数\\n\\n`Dog`类\\n\\n```java\\npublic class Dog {\\n\\n    private String name ;\\n\\n    public Dog(){\\n    }\\n\\n    public Dog(String name) {\\n        this.name = name;\\n    }\\n\\n    public void run(){\\n        System.out.println(\\\"狗跑的贼快~~\\\");\\n    }\\n\\n    private void eat(){\\n        System.out.println(\\\"狗吃骨头\\\");\\n    }\\n\\n    private void eat(String name){\\n        System.out.println(\\\"狗吃\\\"+name);\\n    }\\n\\n    public static void inAddr(){\\n        System.out.println(\\\"在吉山区有一只单身狗！\\\");\\n    }\\n\\n    public String getName() {\\n        return name;\\n    }\\n\\n    public void setName(String name) {\\n        this.name = name;\\n    }\\n}\\n```\\n\\n反射获取方法\\n\\n```java\\npublic class MethodDemo01 {\\n    /**\\n     * 1.获得类中的所有成员方法对象\\n     */\\n    @Test\\n    public void getDeclaredMethods(){\\n        // a.先获取class类对象\\n        Class c = Dog.class ;\\n        // b.获取全部申明的方法!\\n        Method[] methods = c.getDeclaredMethods();\\n        // c.遍历这些方法\\n        for (Method method : methods) {\\n            System.out.println(method.getName()+\\\"====>\\\"\\n                    + method.getParameterCount()+\\\"===>\\\" + method.getReturnType());\\n        }\\n\\n    }\\n    /**\\n     * 2. 获取某个方法对象\\n     */\\n    @Test\\n    public void getDeclardMethod() throws Exception {\\n        // a.先获取class类对象\\n        Class c = Dog.class;\\n        // b.定位它的某个方法\\n        Method run = c.getDeclaredMethod(\\\"run\\\");\\n        // c.触发方法执行!\\n        Dog jinMao = new Dog();\\n        Object rs = run.invoke(jinMao); // 触发jinMao对象的run()方法执行！\\n        System.out.println(rs);// 如果方法没有返回值，结果是null\\n\\n        /**\\n         * 参数一：方法名称\\n         * 参数二：方法的参数个数和类型(可变参数！)\\n         */\\n        Method eat = c.getDeclaredMethod(\\\"eat\\\",String.class);\\n        eat.setAccessible(true); // 暴力反射！\\n        /**\\n         * 参数一：被触发方法所在的对象\\n         * 参数二：方法需要的入参值\\n         */\\n        Object rs1 = eat.invoke(jinMao,\\\"肉\\\");\\n        System.out.println(rs1);// 如果方法没有返回值，结果是null\\n    }\\n}\\n```\\n\\n### 暴力攻击集合泛型\\n\\n* 反射可以破坏面向对象的封装性（暴力反射）\\n* 同时可以破坏泛型的约束性\\n\\n```java\\n// 泛型只能工作在编译阶段，运行阶段泛型就消失了，\\n// 反射工作在运行时阶段。\\nList<Double> scores = new ArrayList<>();\\nscores.add(99.3);\\nscores.add(199.3);\\nscores.add(89.5);\\n\\n// 拓展：通过反射暴力的注入一个其他类型的数据进去。\\n// a.先得到集合对象的Class文件对象\\nClass c = scores.getClass();\\n// b.从ArrayList的Class对象中定位add方法\\nMethod add = c.getDeclaredMethod(\\\"add\\\", Object.class);\\n// c.触发scores集合对象中的add执行（运行阶段，泛型不能约束了）\\nadd.invoke(scores,\\\"波仔\\\");\\n\\nSystem.out.println(scores);\\n```\\n\\n### 反射作用\\n\\n* 可以在运行时得到一个类的全部成分然后操作。\\n* 可以破坏封装性。\\n* 也可以破坏泛型的约束性。\\n\\n更重要的用途是适合：做Java高级框架，基本上主流框架都会基于反射设计一些通用技术功能。\\n\\nMybatis框架：\\n\\n你给任何一个对象数据我都可以直接帮你解析字段并且把对应数据保存起来。\\n\\nStudent (注册，把信息字段都存储起来)\\n\\nTeacher (注册，把信息字段都存储起来)\\n\\nManager (注册，把信息字段都存储起来)\\n\\n我现在用反射技术开发一个框架实现：\\n\\n任何对象只要给我，我就可以把信息和字段都解析并存储起来。\\n\\n> 反射适合做通用技术框架的底层实现，在框架的底层源码中我们经常看到反射的影子!!\\n\\n## 第三章 注解\\n\\n### 注解的概念\\n\\n- 用在类上，方法上，成员变量，构造器，...上对成分进行编译约束，标记等操作的。\\n- 注解是JDK1.5的新特性。\\n- 注解相当一种标记，是类的组成部分，可以给类携带一些额外的信息。\\n- 注解是给编译器或JVM看的，编译器或JVM可以根据注解来完成对应的功能。\\n\\n```java\\npublic class AnnotationDemo01 {\\n\\n}\\n\\n@FunctionalInterface\\ninterface A{\\n    void test();\\n}\\n```\\n\\n### 自定义注解\\n\\n自定义注解的格式：\\n\\n```java\\n修饰符 @interface 注解名{\\n// 注解属性\\n}\\n```\\n\\n> * 自定义注解用@interface关键字。\\n> * 使用注解的格式：@注解名称。\\n> * 注解默认可以标记很多地方。\\n\\n```java\\n@Book\\n@MyTest\\npublic class MyBook {\\n    @Book\\n    @MyTest\\n    private MyBook(){\\n\\n    }\\n    @Book\\n    @MyTest\\n    public static void main(@MyTest String[] args) {\\n        @MyTest\\n        @Book\\n        int age = 12;\\n    }\\n}\\n\\n@interface Book{\\n}\\n\\n@interface MyTest{\\n\\n}\\n```\\n\\n### 注解的属性\\n\\n属性的格式\\n   - 格式1：数据类型 属性名();\\n   - 格式2：数据类型 属性名() default 默认值;\\n\\n属性适用的数据类型:\\n\\n* 八种基本数据类型`(int, short, long, double, byte, char, boolean, float)`\\n* `String，Class`\\n* 以上类型的数组形式都支持\\n\\n> * 注解可以有属性，属性名必须带()\\n> * 在用注解的时候，属性必须赋值，除非这个属性有默认值\\n\\n```java\\n@MyBook(name=\\\"《精通Java基础》\\\",authors = {\\\"播仔\\\",\\\"Dlei\\\",\\\"播妞\\\"} , price = 99.9 )\\npublic class AnnotationDemo01 {\\n    @MyBook(name=\\\"《精通MySQL数据库入门到删库跑路》\\\",authors = {\\\"小白\\\",\\\"小黑\\\"} ,\\n            price = 19.9 , address = \\\"北京\\\")\\n    public static void main(String[] args) {\\n\\n    }\\n}\\n\\n// 自定义一个注解\\n@interface MyBook{\\n    String name();\\n    String[] authors(); // 数组\\n    double price();\\n    String address() default \\\"广州\\\";\\n}\\n```\\n\\n### 注解的特殊属性-value\\n\\n* 如果只有一个value属性的情况下，使用value属性的时候可以省略value名称不写\\n* 但是如果有多个属性,且多个属性没有默认值，那么value是不能省略的。\\n\\n```java\\n//@Book(value = \\\"/deleteBook.action\\\")\\n//@Book(\\\"/deleteBook.action\\\")\\n//@Book(value = \\\"/deleteBook.action\\\" , age = 12)\\n//@Book(\\\"/deleteBook.action\\\")\\n\\npublic class AnnotationDemo01{\\n}\\n\\n@interface Book{\\n    String value();\\n    int age() default 10;\\n}\\n```\\n\\n### 元注解\\n\\n- 元注解是sun公司提供的。\\n- 元注解是用在自定义注解上的注解。\\n- 元注解是用来注解自定义注解的。\\n\\n元注解有两个：\\n\\n* `@Target`:约束自定义注解只能在哪些地方使用，但是默认的注解可以在类，方法，构造器，成员变量，... 使用。\\n* `@Retention`：声明注解的生命周期\\n  申明注解的作用范围：编译时，运行时。\\n\\n`@Target`\\n\\n   * 作用：用来标识注解使用的位置，如果没有使用该注解标识，则自定义的注解可以使用在任意位置。\\n   * 可使用的值定义在ElementType枚举类中，常用值如下\\n        * TYPE，类，接口\\n        * FIELD, 成员变量\\n        * METHOD, 成员方法\\n        * PARAMETER, 方法参数\\n        * CONSTRUCTOR, 构造器\\n        * LOCAL_VARIABLE, 局部变量\\n\\n\\n`@Retention`\\n\\n* 作用：用来标识注解的生命周期(有效存活范围)\\n* 可使用的值定义在RetentionPolicy枚举类中，常用值如下\\n  * SOURCE：注解只作用在源码阶段，生成的字节码文件中不存在\\n  * CLASS：注解作用在源码阶段，字节码文件阶段，运行阶段不存在，默认值.\\n  * RUNTIME：注解作用在源码阶段，字节码文件阶段，运行阶段（开发常用）\\n\\n> * `@Target`约束自定义注解可以标记的范围。\\n> * `@Retention`用来约束自定义注解的存活范围。\\n\\n```java\\npublic class AnnotationDemo01{\\n    // @MyTest\\n    private String name;\\n\\n    @MyTest\\n    public static void main( String[] args) {\\n    }\\n\\n    @MyTest\\n    public void testRun(){\\n\\n    }\\n}\\n\\n//@Target({ElementType.METHOD , ElementType.FIELD}) // 申明只能注解方法和成员变量！\\n@Target(ElementType.METHOD ) // 申明只能注解方法\\n@Retention(RetentionPolicy.RUNTIME) // 申明注解从写代码一直到运行还在，永远存活！！\\n@interface MyTest{\\n}\\n```\\n\\n### 注解解析\\n\\n我们会使用注解注释一个类的成分，那么就设计到要解析出这些注解的数据。开发中经常要知道一个类的成分上面到底有哪些注解，注解有哪些属性数据，这都需要进行注解的解析。\\n\\n与注解解析相关的接口\\n        1. `Annotation`: 注解类型，该类是所有注解的父类。注解都是一个`Annotation`的对象\\n     1. `AnnotatedElement`:该接口定义了与注解解析相关的方法\\n          2所有的类成分Class, Method , Field , Constructor：都实现了`AnnotatedElement`接口，他们都拥有解析注解的能力：\\n       * `Annotation[] getDeclaredAnnotations()`\\n          获得当前对象上使用的所有注解，返回注解数组。\\n        * `T getDeclaredAnnotation(Class<T> annotationClass)`\\n          根据注解类型获得对应注解对象\\n        * `boolean isAnnotationPresent(Class<Annotation> annotationClass)`\\n          判断当前对象是否使用了指定的注解，如果使用了则返回true，否则false\\n\\n解析注解数据的原理\\n* 注解在哪个成分上，我们就先拿哪个成分对象。\\n* 比如注解作用成员方法，则要获得该成员方法对应的Method对象，再来拿上面的注解\\n* 比如注解作用在类上，则要该类的Class对象，再来拿上面的注解\\n* 比如注解作用在成员变量上，则要获得该成员变量对应的Field对象，再来拿上面的注解\\n\\n```java\\npublic class AnnotationDemo01 {\\n    @Test\\n    public void parseClass(){\\n        // 1.定位Class类对象\\n        Class c = BookStore.class ;\\n        // 2.判断这个类上是否使用了某个注解\\n        if(c.isAnnotationPresent(Book.class)){\\n            // 3.获取这个注解对象\\n            Book book = (Book) c.getDeclaredAnnotation(Book.class);\\n            System.out.println(book.value());\\n            System.out.println(book.price());\\n            System.out.println(Arrays.toString(book.authors()));\\n        }\\n    }\\n\\n    @Test\\n    public void parseMethod() throws Exception {\\n        // 1.定位Class类对象\\n        Class c = BookStore.class ;\\n        // 2.定位方法对象\\n        Method run = c.getDeclaredMethod(\\\"run\\\");\\n        // 3.判断这个方法上是否使用了某个注解\\n        if(run.isAnnotationPresent(Book.class)){\\n            // 3.获取这个注解对象\\n            Book book = (Book) run.getDeclaredAnnotation(Book.class);\\n            System.out.println(book.value());\\n            System.out.println(book.price());\\n            System.out.println(Arrays.toString(book.authors()));\\n        }\\n    }\\n}\\n\\n@Book(value = \\\"《Java基础到精通》\\\" , price = 99.5 , authors = {\\\"波仔\\\",\\\"波妞\\\"})\\nclass BookStore{\\n    @Book(value = \\\"《Mybatis持久层框架》\\\" , price = 199.5 , authors = {\\\"dlei\\\",\\\"播客\\\"})\\n    public void run(){\\n    }\\n}\\n\\n@Target({ElementType.TYPE,ElementType.METHOD}) // 类和成员方法上使用\\n@Retention(RetentionPolicy.RUNTIME) // 注解永久存活\\n@interface Book{\\n    String value();\\n    double price() default 100;\\n    String[] authors();\\n}\\n\\n```\\n\\n### 注解模拟Junit框架\\n\\n需求：定义若干个方法，只要加了MyTest注解，就可以被自动触发执行。\\n\\n分析：\\n\\n1. 定义一个自定义注解MyTest.\\n   只能注解方法。\\n   存活范围一直都在。\\n2. 定义若干个方法，只要有`@MyTest`注解的方法就能被触发执行！！\\n   没有这个注解的方法不能执行\\n\\n> * 注解和反射可以配合解决一些框架思想\\n> * 注解可以实现标记的成分做特殊处理!!\\n\\n```java\\npublic class TestDemo{\\n    @MyTest\\n    public void test01(){\\n        System.out.println(\\\"===test01===\\\");\\n    }\\n\\n    public void test02(){\\n        System.out.println(\\\"===test02===\\\");\\n    }\\n\\n    @MyTest\\n    public void test03(){\\n        System.out.println(\\\"===test03===\\\");\\n    }\\n\\n    @MyTest\\n    public void test04(){\\n        System.out.println(\\\"===test04===\\\");\\n    }\\n    public static void main(String[] args) throws Exception {\\n        TestDemo t = new TestDemo();\\n        // 模拟测试类的启动按钮，实现有注解标记的方法就要触发执行。\\n        // 1.得到类对象\\n        Class c = TestDemo.class;\\n        // 2.获取类中全部方法对象\\n        Method[] methods = c.getDeclaredMethods();\\n        // 3.遍历全部方法，有注解就触发执行\\n        for (Method method : methods) {\\n            if(method.isAnnotationPresent(MyTest.class)){\\n                // 触发此方法执行。\\n                method.invoke(t);\\n            }\\n        }\\n    }\\n}\\n\\n@Target(ElementType.METHOD) // 只能注解方法！\\n@Retention(RetentionPolicy.RUNTIME) // 一直都活着\\n@interface MyTest{\\n}\\n```\\n\\n## 第四章 动态代理\\n\\n* 代理就是被代理者没有能力或者不愿意去完成某件事情，需要找个人代替自己去完成这件事。\\n* 动态代理只能为实现接口的实现类对象做代理(也可以只为接口做代理对象)\\n\\n引入：\\n\\n* 在业务开发中经常存在很多重复的方法代码，他们前后的代码形式是一样的\\n* 只有中间部分代码有差别！！这种时候代码冗余读很高\\n* 有没有一种方法可以直接省略前后重复的代码就可以完成功能，这时候用动态代理。\\n\\n开发步骤：\\n\\n* 必须有接口。\\n* 实现类要实现接口，定义自己的业务功能代码。\\n* 为业务功能做代理对象（动态代理，难点）\\n\\n> * 动态代理非常的灵活，可以为任意的接口实现类对象做代理\\n> * 动态代理可以为被代理对象的所有接口的所有方法做代理，\\n> * 动态代理可以在不改变方法源码的情况下，实现对方法功能的增强，\\n> * 动态代理类不仅简化了编程工作，而且提高了软件系统的可扩展性，因为Java 反射机制可以生成任意类型的动态代理类。\\n> * 动态代理同时也提高了开发效率。\\n> * 缺点：只能针对接口或者接口的实现类对象做代理对象，普通类是不能做代理对象的。\\n\\n```java\\npublic class ProxyUtil {\\n    /**\\n     * 做一个被代理的业务对象返回!\\n     * @param obj\\n     * @return\\n     */\\n    public static <T> T getProxy(Object obj) {\\n        /**\\n         参数一：类加载器:负责加载到时候做好的业务代理对象！\\n         参数二：被代理业务对象的全部实现的接口，以便代理对象可以知道要为哪些方法做代理。\\n         参数三：代理真正的执行方法，也就是代理的处理逻辑！\\n         */\\n        return (T) Proxy.newProxyInstance(obj.getClass().getClassLoader(),\\n                obj.getClass().getInterfaces(), new InvocationHandler() {\\n                    @Override\\n                    public Object invoke(Object proxy, Method method, Object[] params) throws Throwable {\\n                        // proxy : 业务代理对象本身。用不到\\n                        // method: 代表当前正在被代理执行的方法！！\\n                        // params: 代表的是执行方法的参数，数组的形式!\\n                        long startTime = System.currentTimeMillis();\\n\\n                        // 真正触发真实的方法执行\\n                        Object rs = method.invoke(obj,params);\\n\\n                        long endTime = System.currentTimeMillis();\\n                        System.out.println(method.getName()+\\\"方法耗时：\\\"+(endTime - startTime)/1000.0+\\\"s\\\");\\n                        return rs; // 返回方法执行的结果！！\\n                    }\\n                });\\n    }\\n}\\n```\\n\\n# day13-XML和Dom4j、装饰模式、工厂模式、commons-io工具包\\n\\n## 第一章 Dom4j\\n\\n### Dom4j获取Document对象和根元素\\n\\ndom4j属于第三方技术，必须导入该框架！！\\n\\ndom4j安装步骤：\\n\\n- 去dom4j官网下载dom4j的框架：都是一些jar包。\\n- 把dom4j的核心jar包导入到当前项目中去。\\n- 在项目中创建一个文件夹：lib\\n- 将dom4j-2.1.1.jar文件复制到 lib 文件夹\\n- 在jar文件上点右键，选择 Add as Library -> 点击OK\\n- 在类中导包使用\\n\\nJava提供了Class下的一个方法：\\n\\n`public InputStream getResourceAsStream(String path)`\\n\\n 用于加载文件成为一个字节输入流返回！！\\n\\nDocument文档：\\n`Element getRootElement()`：获取根元素。\\n\\n> * 先导入dom4j框架\\n> * 创建一个dom4j的解析对象：SAXReader\\n> * 通过解析对象把xml文件解析成Document文档对象。\\n> * 从Document文档对象中获取我们想要的xml信息。\\n\\n```java\\n// 需求：解析books.xml文件成为一个Document文档树对象，得到根元素对象。\\n// 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\nSAXReader saxReader = new SAXReader();\\n\\n// 2.第一种方式（简单）：通过解析器对象去加载xml文件数据，成为一个Document文档树对象。\\n//Document document = saxReader.read(new File(\\\"Day13Demo/src/books.xml\\\"));\\n\\n// 3.第二种方式（代码多点）先把xml文件读成一个字节输入流\\n// 这里的“/”是直接去src类路径下寻找文件。\\nInputStream is = Dom4JDemo01.class.getResourceAsStream(\\\"/books.xml\\\");\\nDocument document = saxReader.read(is);\\n\\nSystem.out.println(document);\\n\\n// 4.从document文档树对象中提取根元素对象\\nElement root = document.getRootElement();\\nSystem.out.println(root.getName());\\n```\\n\\nElement元素的API:\\n\\n- `String getName()`:取元素的名称。\\n- `List<Element> elements()`:获取当前元素下的全部子元素（一级）\\n- `List<Element> elements(String name)`:获取当前元素下的指定名称的全部子元素（一级）\\n- `Element element(String name)`:获取当前元素下的指定名称的某个子元素，默认取第一个（一级）\\n\\n```java\\n// 需求：解析books.xml文件成为一个Document文档树对象，得到根元素对象。\\n// 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\nSAXReader saxReader = new SAXReader();\\n\\n// 2.第一种方式（简单）：通过解析器对象去加载xml文件数据，成为一个Document文档树对象。\\nDocument document = saxReader.read(new File(\\\"Day13Demo/src/books.xml\\\"));\\n\\n// 3.获取根元素对象\\nElement root = document.getRootElement();\\nSystem.out.println(root.getName());\\n\\n// 4.获取根元素下的全部子元素\\nList<Element> sonElements = root.elements();\\nfor (Element sonElement : sonElements) {\\n    System.out.println(sonElement.getName());\\n}\\n\\nSystem.out.println(\\\"-------------------\\\");\\n// 5.获取根源下的全部book子元素\\nList<Element> sonElements1 = root.elements(\\\"book\\\");\\nfor (Element sonElement : sonElements1) {\\n    System.out.println(sonElement.getName());\\n}\\nSystem.out.println(\\\"-------------------\\\");\\n// 6.获取根源下的指定的某个元素\\nElement son = root.element(\\\"user\\\");\\nSystem.out.println(son.getName());\\n\\n// 默认会提取第一个名称一样的子元素对象返回！\\nElement son1 = root.element(\\\"book\\\");\\nSystem.out.println(son1.attributeValue(\\\"id\\\"));\\n```\\n\\n### Dom4j获取属性信息\\n\\nElement元素的API:\\n\\n- `List<Attribute> attributes()`: 获取元素的全部属性对象。\\n- `Attribute attribute(String name)`:根据名称获取某个元素的属性对象。\\n- `String attributeValue(String var1)`:直接获取某个元素的某个属性名称的值。\\n\\nAttribute对象的API:\\n\\n- `String getName()`:  获取属性名称。\\n- `String getValue()`: 获取属性值。\\n\\n```java\\n// 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\nSAXReader saxReader = new SAXReader();\\n\\n// 2.第一种方式（简单）：通过解析器对象去加载xml文件数据，成为一个Document文档树对象。\\nDocument document = saxReader.read(new File(\\\"day13/src/books.xml\\\"));\\n\\n// 3.获取根元素对象。\\nElement root = document.getRootElement();\\n\\n// 4.获取book子元素\\nElement bookEle = root.element(\\\"book\\\");\\n\\n// 5.获取book元素的全部属性对象\\nList<Attribute> attributes = bookEle.attributes();\\nfor (Attribute attribute : attributes) {\\n    System.out.println(attribute.getName()+\\\"=>\\\"+attribute.getValue());\\n}\\n\\n// 6.获取Book元素的某个属性对象\\nAttribute descAttr = bookEle.attribute(\\\"desc\\\");\\nSystem.out.println(descAttr.getName()+\\\"--->\\\"+descAttr.getValue());\\n\\n// 7.可以直接获取元素的属性值\\nSystem.out.println(bookEle.attributeValue(\\\"id\\\"));\\nSystem.out.println(bookEle.attributeValue(\\\"desc\\\"));\\n```\\n\\n### Dom4j获取XML文本\\n\\n- `String elementText(String name)`: 可以直接获取当前元素的子元素的文本内容\\n- `String elementTextTrim(String name)`: 去前后空格,直接获取当前元素的子元素的文本内容\\n- `String getText()`:直接获取当前元素的文本内容。\\n- `String getTextTrim()`:去前后空格,直接获取当前元素的文本内容。\\n\\n```java\\n// 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\nSAXReader saxReader = new SAXReader();\\n\\n// 2.第一种方式（简单）：通过解析器对象去加载xml文件数据，成为一个Document文档树对象。\\nDocument document = saxReader.read(new File(\\\"Day13Demo/src/books.xml\\\"));\\n\\n// 3.获取根元素对象。\\nElement root = document.getRootElement();\\n\\n// 4.得到第一个子元素book\\nElement bookEle = root.element(\\\"book\\\");\\n\\n// 5.直接拿到当前book元素下的子元素文本值\\nSystem.out.println(bookEle.elementText(\\\"name\\\"));\\nSystem.out.println(bookEle.elementTextTrim(\\\"name\\\")); // 去前后空格\\nSystem.out.println(bookEle.elementText(\\\"author\\\"));\\nSystem.out.println(bookEle.elementTextTrim(\\\"author\\\")); // 去前后空格\\nSystem.out.println(bookEle.elementText(\\\"sale\\\"));\\nSystem.out.println(bookEle.elementTextTrim(\\\"sale\\\")); // 去前后空格\\n\\n// 6.先获取到子元素对象，再获取该文本值\\nElement bookNameEle = bookEle.element(\\\"name\\\");\\nSystem.out.println(bookNameEle.getText());\\nSystem.out.println(bookNameEle.getTextTrim());// 去前后空格\\n```\\n\\n### Dom4j解析案例\\n\\nContacts.xml 解析成===>` List<Contact>`\\n\\n首先定义一个`Contact`类\\n\\n```java\\n/**\\n <contact id=\\\"1\\\" vip=\\\"true\\\">\\n     <name>潘金莲</name>\\n     <gender>女</gender>\\n     <email>panpan@itcast.cn</email>\\n </contact>\\n */\\npublic class Contact {\\n    private int id ;\\n    private boolean vip;\\n    private String name ;\\n    private char sex ;\\n    private String email ;\\n\\n    public Contact() {\\n    }\\n\\n    public Contact(int id, boolean vip, String name, char sex, String email) {\\n        this.id = id;\\n        this.vip = vip;\\n        this.name = name;\\n        this.sex = sex;\\n        this.email = email;\\n    }\\n\\n    /**\\n     * 获取\\n     * @return id\\n     */\\n    public int getId() {\\n        return id;\\n    }\\n\\n    /**\\n     * 设置\\n     * @param id\\n     */\\n    public void setId(int id) {\\n        this.id = id;\\n    }\\n\\n    /**\\n     * 获取\\n     * @return vip\\n     */\\n    public boolean isVip() {\\n        return vip;\\n    }\\n\\n    /**\\n     * 设置\\n     * @param vip\\n     */\\n    public void setVip(boolean vip) {\\n        this.vip = vip;\\n    }\\n\\n    /**\\n     * 获取\\n     * @return name\\n     */\\n    public String getName() {\\n        return name;\\n    }\\n\\n    /**\\n     * 设置\\n     * @param name\\n     */\\n    public void setName(String name) {\\n        this.name = name;\\n    }\\n\\n    /**\\n     * 获取\\n     * @return sex\\n     */\\n    public char getSex() {\\n        return sex;\\n    }\\n\\n    /**\\n     * 设置\\n     * @param sex\\n     */\\n    public void setSex(char sex) {\\n        this.sex = sex;\\n    }\\n\\n    /**\\n     * 获取\\n     * @return email\\n     */\\n    public String getEmail() {\\n        return email;\\n    }\\n\\n    /**\\n     * 设置\\n     * @param email\\n     */\\n    public void setEmail(String email) {\\n        this.email = email;\\n    }\\n\\n    public String toString() {\\n        return \\\"Contact{id = \\\" + id + \\\", vip = \\\" + vip + \\\", name = \\\" + name + \\\", sex = \\\" + sex + \\\", email = \\\" + email + \\\"}\\\";\\n    }\\n}\\n```\\n\\n解析代码\\n\\n```java\\n// 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\nSAXReader saxReader = new SAXReader();\\n\\n// 2.第一种方式（简单）：通过解析器对象去加载xml文件数据，成为一个Document文档树对象。\\nDocument document = saxReader.read(new File(\\\"day13/src/Contacts.xml\\\"));\\n\\n// 3.获取根元素对象。\\nElement root = document.getRootElement();\\n\\n// 4.获取根元素下的全部子元素\\nList<Element> sonElements = root.elements();\\n\\n// 5.遍历子元素 封装成List集合对象\\nList<Contact> contactList = new ArrayList<>();\\nif(sonElements != null && sonElements.size() > 0) {\\n    for (Element sonElement : sonElements) {\\n        Contact contact = new Contact();\\n        contact.setId(Integer.valueOf(sonElement.attributeValue(\\\"id\\\")));\\n        contact.setVip(Boolean.valueOf(sonElement.attributeValue(\\\"vip\\\")));\\n        contact.setName(sonElement.elementText(\\\"name\\\"));\\n        contact.setSex(sonElement.elementText(\\\"gender\\\").charAt(0));\\n        contact.setEmail(sonElement.elementText(\\\"email\\\"));\\n        contactList.add(contact);\\n    }\\n}\\nSystem.out.println(contactList);\\n```\\n\\n### Xpath表达式\\n\\n用于检索XML中的某些信息\\n\\nXPath使用步骤：\\n\\n1. 导入dom4j框架。（XPath依赖于Dom4j技术,必须先倒入dom4j框架！）\\n1. 导入XPath独有的框架包。jaxen-1.1.2.jar\\n\\nXPath常用API:\\n\\n- `List<Node> selectNodes(String var1)`：检索出一批节点集合。\\n- `Node selectSingleNode(String var1)`：检索出一个节点返回。\\n\\nXPath提供的四种检索数据的写法：\\n\\n1. 绝对路径\\n2. 相对路径\\n3. 全文搜索\\n4. 属性查找\\n\\n> 1. 绝对路径： /根元素/子元素/子元素。\\n> 2. 相对路径： ./子元素/子元素。 (.代表了当前元素)\\n> 3. 全文搜索：\\n>    `//元素`  在全文找这个元素\\n>    `//元素1/元素2`  在全文找元素1下面的一级元素2\\n>    `//元素1//元素2  `在全文找元素1下面的全部元素2\\n> 4. 属性查找。\\n>    `//@属性名称`  在全文检索属性对象。\\n>    `//元素[@属性名称]`  在全文检索包含该属性的元素对象。\\n>    `//元素[@属性名称=值]`  在全文检索包含该属性的元素且属性值为该值的元素对象。\\n\\n```java\\npublic class XPathDemo {\\n\\n    //  1.绝对路径： /根元素/子元素/子元素。\\n    @Test\\n    public void path01() throws Exception {\\n        // 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\n        SAXReader saxReader = new SAXReader();\\n\\n        // 2.第二种方式（代码多点）先把xml文件读成一个字节输入流\\n        // 这里的“/”是直接去src类路径下寻找文件。\\n        InputStream is = Dom4JDemo01.class.getResourceAsStream(\\\"/Contact.xml\\\");\\n        Document document = saxReader.read(is);\\n        // 3.使用绝对路径定位全部的name名称\\n        List<Node> nameNodes = document.selectNodes(\\\"/contactList/contact/name\\\");\\n        for (Node nameNode : nameNodes) {\\n            System.out.println(nameNode.getText());\\n        }\\n    }\\n\\n    // 2.相对路径： ./子元素/子元素。 (.代表了当前元素)\\n    @Test\\n    public void path02() throws Exception {\\n        // 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\n        SAXReader saxReader = new SAXReader();\\n\\n        // 2.第二种方式（代码多点）先把xml文件读成一个字节输入流\\n        // 这里的“/”是直接去src类路径下寻找文件。\\n        InputStream is = Dom4JDemo01.class.getResourceAsStream(\\\"/Contact.xml\\\");\\n        Document document = saxReader.read(is);\\n\\n        // 3.得到根元素对象\\n        Element root = document.getRootElement();\\n\\n        // 4.从根元素开始检索\\n        // .代表当前根元素对象路径！直接找其下的contact下的name\\n        List<Node> nameNodes = root.selectNodes(\\\"./contact/name\\\");\\n        for (Node nameNode : nameNodes) {\\n            System.out.println(nameNode.getText());\\n        }\\n    }\\n\\n    // 3.全文搜索：\\n    //                \\\"//元素\\\"  在全文找这个元素\\n    //                \\\"//元素1/元素2\\\"  在全文找元素1下面的一级元素2\\n    //                \\\"//元素1//元素2\\\"  在全文找元素1下面的全部元素2\\n    @Test\\n    public void path03() throws Exception {\\n        // 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\n        SAXReader saxReader = new SAXReader();\\n\\n        // 2.第二种方式（代码多点）先把xml文件读成一个字节输入流\\n        // 这里的“/”是直接去src类路径下寻找文件。\\n        InputStream is = Dom4JDemo01.class.getResourceAsStream(\\\"/Contact.xml\\\");\\n        Document document = saxReader.read(is);\\n\\n        // 3.//name是指在整个xml文件中检索name节点！\\n        List<Node> nameNodes = document.selectNodes(\\\"//name\\\");\\n        for (Node nameNode : nameNodes) {\\n            System.out.println(nameNode.getText());\\n        }\\n        System.out.println(\\\"-----------------\\\");\\n        // 4.在全文中检索所有contact下的直接name节点\\n        List<Node> nameNodes1 = document.selectNodes(\\\"//contact/name\\\");\\n        for (Node nameNode : nameNodes1) {\\n            System.out.println(nameNode.getText());\\n        }\\n        System.out.println(\\\"-----------------\\\");\\n        // 5.在全文中检索所有contact下的所有name节点\\n        List<Node> nameNodes2 = document.selectNodes(\\\"//contact//name\\\");\\n        for (Node nameNode : nameNodes2) {\\n            System.out.println(nameNode.getText());\\n        }\\n    }\\n\\n    //   4.属性查找。\\n    //         //@属性名称  在全文检索属性对象。\\n    //          //元素[@属性名称]  在全文检索包含该属性的元素对象。\\n    //          //元素[@属性名称=值]  在全文检索包含该属性的元素且属性值为该值的元素对象。\\n    @Test\\n    public void path04() throws Exception {\\n        // 1.创建一个dom4j的解析器对象：代表整个dom4j框架。\\n        SAXReader saxReader = new SAXReader();\\n\\n        // 2.第二种方式（代码多点）先把xml文件读成一个字节输入流\\n        // 这里的“/”是直接去src类路径下寻找文件。\\n        InputStream is = Dom4JDemo01.class.getResourceAsStream(\\\"/Contact.xml\\\");\\n        Document document = saxReader.read(is);\\n\\n        // 3.检索全部属性对象\\n        List<Node> attributs = document.selectNodes(\\\"//@id\\\");\\n        for (Node attribut : attributs) {\\n            Attribute attr = (Attribute) attribut;\\n            System.out.println(attr.getName() + \\\"--->\\\"+attr.getValue());\\n        }\\n        System.out.println(\\\"---------------\\\");\\n        // 4.//元素[@属性名称]  在全文检索包含该属性的元素对象\\n        List<Node> nodeEles = document.selectNodes(\\\"//contact[@id]\\\");\\n        for (Node nodeEle : nodeEles) {\\n            System.out.println(nodeEle.getName());\\n        }\\n\\n        System.out.println(\\\"---------------\\\");\\n        // 5. //元素[@属性名称=值]  在全文检索包含该属性的元素且属性值为该值的元素对象。\\n        Node nodeEle = document.selectSingleNode(\\\"//contact[@id=2]\\\");\\n        Element ele = (Element) nodeEle;\\n        System.out.println(ele.elementTextTrim(\\\"name\\\"));\\n    }\\n}\\n```\\n\\n### 解析Mybatis的核心配置文件信息\\n\\n```java\\npublic class ParseXMLConfig {\\n    @Test\\n    public void parseXML() throws Exception {\\n        // 1.创建一个解析器对象\\n        SAXReader saxReader = new SAXReader();\\n        // 2.加载类路径下的xml文件成为一个document文档对象。\\n        Document document = saxReader.read(ParseXMLConfig.class.getResourceAsStream(\\\"/sqlMapConfig.xml\\\"));\\n        // 3.得到根元素对象\\n        Element root = document.getRootElement();\\n        // 4.获取子元素environments\\n        Element environments = root.element(\\\"environments\\\");\\n        // 5.获取子元素environment\\n        Element environment = environments.element(\\\"environment\\\");\\n        // 6.获取子元素dataSource\\n        Element dataSource = environment.element(\\\"dataSource\\\");\\n        // 7.获取 dataSource下的全部子元素\\n        List<Element>  properties = dataSource.elements();\\n        // 8.遍历他们\\n        for (Element property : properties) {\\n            System.out.println(property.attributeValue(\\\"name\\\")\\n                    +\\\"==>\\\"+property.attributeValue(\\\"value\\\"));\\n        }\\n    }\\n}\\n```\\n\\n## 第二章 设计模式\\n\\n### 工厂设计模型\\n\\n什么是工厂设计模式？\\n\\n- 工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一\\n- 这种类型的设计模式属于创建型模式，它提供了一种创建对象的方式\\n- 之前我们创建类对象时, 都是使用`new`对象的形式创建, 除`new`对象方式以外，工厂模式也可以创建对象\\n\\n工厂设计模式的作用：\\n\\n* 对象通过工厂的方法创建返回，工厂的方法可以为该对象进行加工和数据注入。\\n* 可以实现类与类之间的**解耦操作**\\n\\n> * 优点：工厂模式的存在可以改变创建对象的方式,解决类与类之间的耦合\\n> * 缺点：工厂设计模式多了一个工厂类\\n\\n`FactoryPattern`\\n\\n```java\\npublic class FactoryPattern {\\n    // 生产对象的方法：工厂方法\\n    public static Animal createAniaml(){\\n//        Dog dog = new Dog();\\n//        return dog;\\n        return new Cat();\\n    }\\n}\\n```\\n\\n创建对象可以使用\\n\\n```java\\nAnimal a = FactoryPattern.createAniaml();\\na.run();\\n```\\n\\n之后如果需要修改创建的对象，可以直接在`FactoryPattern`中修改对象创建\\n\\n### 装饰设计模式\\n\\n装饰模式指的是在不改变原类, 动态地扩展一个类的功能。\\n\\n思想：是创建一个新类，包装原始类，从而在新类中提升原来类的功能！！\\n\\n> 装饰模式可以在不改变原类的基础上对类中的方法进行扩展增强,实现原则为:\\n>\\n> 1. 定义父类\\n> 2. 定义原始类，继承父类，定义功能。\\n> 3. 定义装饰类，继承父类，包装原始类，增强功能！！\\n\\n`InputStream`\\n\\n```java\\npublic abstract class InputStream {\\n    public abstract void read();\\n    public abstract void close();\\n}\\n```\\n\\n`FileInputStream`\\n\\n```java\\npublic class FileInputStream extends InputStream {\\n    @Override\\n    public void read() {\\n        System.out.println(\\\"读取数据~~~\\\");\\n    }\\n\\n    @Override\\n    public void close() {\\n        System.out.println(\\\"关闭流~~~\\\");\\n    }\\n}\\n\\n```\\n\\n`BufferedInputStream`\\n\\n```java\\npublic class BufferedInputStream extends InputStream {\\n    private InputStream is ;\\n    public BufferedInputStrem(InputStream is){\\n        this.is = is;\\n    }\\n    @Override\\n    public void read() {\\n        System.out.println(\\\"开启高效缓冲读取~\\\");\\n        is.read();\\n    }\\n\\n    @Override\\n    public void close() {\\n        is.close();\\n    }\\n}\\n```\\n\\n`Demo`\\n\\n```java\\nInputStream is = new BufferedInputStrem(new FileInputStream());\\nis.read();\\nis.close();\\n```\\n\\n## 第三章 Commons-io包\\n\\n什么是`Commons-io`包？\\n\\ncommons-io是apache开源基金组织提供的一组有关IO操作的类库，可以挺提高IO功能开发的效率。commons-io工具包提供了很多有关io操作的类，见下表：\\n\\n| 包   | 功能描述 |\\n| ----------------------------------- | ------------------------------------------- |\\n| org.apache.commons.io | 有关Streams、Readers、Writers、Files的工具类 |\\n| org.apache.commons.io.input | 输入流相关的实现类，包含Reader和InputStream |\\n| org.apache.commons.io.output | 输出流相关的实现类，包含Writer和OutputStream |\\n| org.apache.commons.io.serialization | 序列化相关的类 |\\n\\n步骤：\\n\\n 1. 下载commons-io相关jar包；http://commons.apache.org/proper/commons-io/\\n 2. 把commons-io-2.6.jar包复制到指定的Module的lib目录中\\n 3. 将commons-io-2.6.jar加入到classpath中\\n\\n> `IOUtils`和`FileUtils`可以方便的复制文件和文件夹\\n\\n```java\\n// 1.完成文件复制！\\nIOUtils.copy(new FileInputStream(\\\"Day13Demo/src/books.xml\\\"), new FileOutputStream(\\\"Day13Demo/new.xml\\\"));\\n// 2.完成文件复制到某个文件夹下！\\nFileUtils.copyFileToDirectory(new File(\\\"Day13Demo/src/books.xml\\\"), new File(\\\"D:/itcast\\\"));\\n// 3.完成文件夹复制到某个文件夹下！\\nFileUtils.copyDirectoryToDirectory(new File(\\\"D:\\\\\\\\itcast\\\\\\\\约吧图片服务器\\\") , new File(\\\"D:\\\\\\\\\\\"));\\n\\n//  Java从1.7开始提供了一些nio, 自己也有一行代码完成复制的技术。\\nFiles.copy(Paths.get(\\\"Day13Demo/src/books.xml\\\")\\n        , new FileOutputStream(\\\"Day13Demo/new11.txt\\\"));\\n```\\n\\n## 第四章 Base64\\n\\nBase64是网络上最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法。\\n\\n在Java 8中，Base64编码已经成为Java类库的标准。\\n\\nJava 8 内置了 Base64 编码的编码器和解码器。\\n\\nBase64工具类提供了一套静态方法获取下面三种BASE64编解码器：\\n\\n- **基本：**输出被映射到一组字符A-Za-z0-9+/，编码不添加任何行标，输出的解码仅支持A-Za-z0-9+/。\\n- **URL：**输出映射到一组字符A-Za-z0-9+_，输出是URL和文件。\\n- **MIME：**输出隐射到MIME友好格式。输出每行不超过76字符，并且使用\'\\\\r\'并跟随\'\\\\n\'作为分割。编码输出最后没有行分割。\\n\\n**内嵌类**\\n\\n| 序号 | 内嵌类 & 描述                                                |\\n| :--- | :----------------------------------------------------------- |\\n| 1    | **static class Base64.Decoder**该类实现一个解码器用于，使用 Base64 编码来解码字节数据。 |\\n| 2    | **static class Base64.Encoder**该类实现一个编码器，使用 Base64 编码来编码字节数据 |\\n\\n**方法**\\n\\n| 序号 | 方法名 & 描述                                                |\\n| :--- | :----------------------------------------------------------- |\\n| 1    | **static Base64.Decoder getDecoder()**返回一个 Base64.Decoder ，解码使用基本型 base64 编码方案。 |\\n| 2    | **static Base64.Encoder getEncoder()**返回一个 Base64.Encoder ，编码使用基本型 base64 编码方案。 |\\n| 3    | **static Base64.Decoder getMimeDecoder()**返回一个 Base64.Decoder ，解码使用 MIME 型 base64 编码方案。 |\\n| 4    | **static Base64.Encoder getMimeEncoder()**返回一个 Base64.Encoder ，编码使用 MIME 型 base64 编码方案。 |\\n| 5    | **static Base64.Encoder getMimeEncoder(int lineLength, byte[] lineSeparator)**返回一个 Base64.Encoder ，编码使用 MIME 型 base64 编码方案，可以通过参数指定每行的长度及行的分隔符。 |\\n| 6    | **static Base64.Decoder getUrlDecoder()**返回一个 Base64.Decoder ，解码使用 URL 和文件名安全型 base64 编码方案。 |\\n| 7    | **static Base64.Encoder getUrlEncoder()**返回一个 Base64.Encoder ，编码使用 URL 和文件名安全型 base64 编码方案。 |\\n\\n> **注意：**Base64 类的很多方法从 **java.lang.Object** 类继承\\n\\n```java\\ntry {\\n    // 1-1.基本编码后结果。普通文本的编码\\n    String rs1 = Base64.getEncoder().encodeToString(\\\"黑马程序员\\\".getBytes());\\n    System.out.println(rs1); // 6buR6ams56iL5bqP5ZGY\\n\\n    // 1-2.基本解码后结果。普通文本的解码\\n    byte[] buffer = Base64.getDecoder().decode(rs1);\\n    System.out.println(new String(buffer));\\n\\n    // 2-1.URL编码\\n    String rs2 = Base64.getUrlEncoder().encodeToString(\\\"?loginName=黑马&passWord=123456\\\".getBytes());\\n    System.out.println(rs2);\\n    // 2-2 URL解码\\n    byte[] buffer2 = Base64.getUrlDecoder().decode(rs2);\\n    System.out.println(new String(buffer2));\\n\\n    // 3-1 MIME编码\\n    StringBuilder sb = new StringBuilder();\\n    for (int i = 0; i < 10; ++i) {\\n        sb.append(UUID.randomUUID().toString());\\n    }\\n\\n    String rs3 = Base64.getMimeEncoder().encodeToString(sb.toString().getBytes());\\n    System.out.println(rs3);\\n\\n    // 3-2 MIME解码\\n    byte[] buffer3 = Base64.getMimeDecoder().decode(rs3);\\n    System.out.println(new String(buffer3));\\n}catch(Exception e){\\n    System.out.println(\\\"Error :\\\" + e.getMessage());\\n}\\n```\\n\\n\",\"articleCover\":\"http://47.108.219.199:81/articles/a2fc5f9fc3d6c835e4e123757f282664.jpg\",\"articleTitle\":\"Java进阶知识精华汇总\",\"categoryName\":\"Java基础\",\"id\":58,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',2,'madao','127.0.0.1','','2022-07-15 13:18:56',NULL),(1119,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"\\n鉴于原论文中使用的数据集过于庞大，分类过多，目前手头的设备运行是在过于缓慢，折中考虑尝试使用MNIST的数据集实现AlexNet\\n\\n\\n```python\\nimport torch, torchvision\\nimport torchvision.transforms as transforms\\nimport torch.nn as nn\\nfrom torch import optim\\nimport matplotlib.pyplot as plt\\n%matplotlib inline\\nimport copy\\n```\\n\\n\\n```python\\n# 超参数设置\\nEPOCH = 10\\nBATCH_SIZE = 64\\nLR = 0.01\\n```\\n\\n\\n```python\\ntransform = transforms.ToTensor()\\n```\\n\\n## 数据集\\n\\n通过torchvision下载数据集\\n\\n\\n```python\\ntrainset = torchvision.datasets.MNIST(root=\'../data\', train=True, download=True, transform=transform)\\n\\ntestset = torchvision.datasets.MNIST(root=\'../data\', train=True, transform=transform)\\n```\\n\\n    C:\\\\Users\\\\Administrator\\\\AppData\\\\Roaming\\\\Python\\\\Python36\\\\site-packages\\\\torchvision\\\\datasets\\\\mnist.py:498: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ..\\\\torch\\\\csrc\\\\utils\\\\tensor_numpy.cpp:180.)\\n      return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)\\n\\n```python\\ntrainloader = torch.utils.data.DataLoader(trainset, batch_size=BATCH_SIZE, shuffle=True)\\n\\ntestloader = torch.utils.data.DataLoader(testset, batch_size=BATCH_SIZE, shuffle=False)\\n```\\n\\n绘图查看\\n\\n\\n```python\\nplt.imshow(trainset[4][0][0], cmap=\'gray\')\\n```\\n\\n\\n    <matplotlib.image.AxesImage at 0x1a3c510cc18>\\n\\n\\n![png](https://www.madao33.com/media/AlexNet基于MNIST数据集的代码实现/AlexNet_MNIST_7_1.png)\\n 查看数据格式\\n\\n```python\\ntrainset[0][0].shape\\n```\\n\\n\\n    torch.Size([1, 28, 28])\\n\\n为了通用，设置一个device，如果有显卡并配置好了cuda环境，那么就选择为`cuda`，否则为`cpu`\\n\\n\\n```python\\ndevice = torch.device(\'cuda\' if torch.cuda.is_available() else \'cpu\')\\ndevice\\n```\\n\\n\\n    device(type=\'cpu\')\\n\\n\\n\\n## AlexNet\\n\\n同样地，仿照AlexNet，设置了五个卷积层和三个全连接层构建一个深度卷积神经网络，网络的定义是重写`nn.Module`实现的，卷积层和全连接层之间将数据通过view拉平[<sup>[1]</sup>](#ref-1)\\n\\n\\n```python\\nclass AlexNet(nn.Module):\\n\\n    def __init__(self,width_mult=1):\\n\\n        super(AlexNet, self).__init__()\\n\\n        self.layer1 = nn.Sequential(\\n            nn.Conv2d(1, 32, kernel_size=3, padding=1), # 32*28*28\\n            nn.MaxPool2d(kernel_size=2, stride=2), # 32*14*14\\n            nn.ReLU(inplace=True),\\n            )\\n\\n        self.layer2 = nn.Sequential(\\n            nn.Conv2d(32, 64, kernel_size=3, padding=1), # 64*14*14\\n            nn.MaxPool2d(kernel_size=2, stride=2), # 64*7*7\\n            nn.ReLU(inplace=True),\\n            )\\n\\n        self.layer3 = nn.Sequential(\\n            nn.Conv2d(64, 128, kernel_size=3, padding=1), # 128*7*7\\n            )\\n\\n        self.layer4 = nn.Sequential(\\n            nn.Conv2d(128, 256, kernel_size=3, padding=1), # 256*7*7\\n            )\\n\\n \\n\\t\\tself.layer5 = nn.Sequential(\\n\\n            nn.Conv2d(256, 256, kernel_size=3, padding=1), # 256*7*7\\n            nn.MaxPool2d(kernel_size=3, stride=2), # 256*3*3\\n            nn.ReLU(inplace=True),\\n            )\\n    \\n        self.fc1 = nn.Linear(256*3*3, 1024)\\n        self.fc2 = nn.Linear(1024, 512)\\n        self.fc3 = nn.Linear(512, 10)\\n\\n\\n\\n    def forward(self, x):\\n\\n        x = self.layer1(x)\\n        x = self.layer2(x)\\n        x = self.layer3(x)\\n        x = self.layer4(x)\\n        x = self.layer5(x)\\n        x = x.view(-1, 256*3*3)\\n        x = self.fc1(x)\\n        x = self.fc2(x)\\n        x = self.fc3(x)\\n        return x\\n```\\n\\n设置超参数\\n\\n\\n```python\\nEPOCH = 5\\nBATCH_SIZE = 128\\nLR = 0.01\\n```\\n\\n\\n```python\\ndef validate(model, data):\\n    total = 0\\n    correct = 0\\n    for i, (images, labels) in enumerate(data):\\n        images = images.to(device)\\n        x = net(images)\\n        value, pred = torch.max(x,1)\\n        pred = pred.data.cpu()\\n        total += x.size(0)\\n        correct += torch.sum(pred == labels)\\n\\n    return correct*100./total\\n```\\n\\n初始化模型并将模型放到device上，如果有显卡就在`cuda`上，如果没有，那么在`cpu`\\n\\n如果是纯`cpu`训练，速度十分感人\\n\\n\\n```python\\nnet = AlexNet().to(device)\\n```\\n\\n\\n```python\\n# alexnet训练\\ndef train():\\n    # 定义损失函数为交叉熵损失，优化方法为SGD\\n    criterion = nn.CrossEntropyLoss() \\n    optimizer = optim.SGD(net.parameters(), lr=LR, momentum=0.9)\\n    max_accuracy=0\\n    accuracies=[]\\n    for epoch in range(EPOCH):\\n        for i, (images,labels) in enumerate(trainloader):\\n            images = images.to(device)\\n            labels = labels.to(device)\\n            optimizer.zero_grad()\\n            outputs = net(images)\\n            loss = criterion(outputs, labels)\\n            loss_item = loss.item()\\n            loss.backward()\\n            optimizer.step()\\n\\n        accuracy = float(validate(criterion, testloader))\\n        accuracies.append(accuracy)\\n        print(\\\"Epoch %d accuracy: %f loss: %f\\\" % (epoch, accuracy, loss_item))\\n        if accuracy > max_accuracy:\\n            best_model = copy.deepcopy(criterion)\\n            max_accuracy = accuracy\\n            print(\\\"Saving Best Model with Accuracy: \\\", accuracy)\\n        print(\'Epoch:\', epoch+1, \\\"Accuracy :\\\", accuracy, \'%\')\\n    plt.plot(accuracies)\\n    return best_model\\n```\\n\\n这一行代码是调用之前的train函数训练神经网络，初始化设置的epoch是5，大概也可以训练一个准确度较高的模型\\n\\n\\n```python\\nalexnet = train()\\n```\\n\\n为了防止断点或者bug导致jupyter重启之后重新训练模型，这一点经常遇到，本代码是在google的colab上训练的，为了保存训练的结果，还是将模型保存为pkl文件，这样本地就不用训练，直接调用训练之后的模型，之前尝试直接保存整个模型，但是会有莫名其妙的bug，暂时没有解决。这里尝试了另一种保存模型的方式[<sup>[2]</sup>](#ref-2)，直接保存模型的参数，然后将参数传递到初始化的模型架构中，如下所示：\\n\\n\\n```python\\n# 保存模型参数\\ntorch.save(alexnet, \'../models/alexnet.pkl\')\\n```\\n\\n\\n```python\\n# 加载模型\\nalexnet = AlexNet()\\nalexnet.load_state_dict(torch.load(\'../models/alexnet.pkl\'))\\n```\\n\\n\\n    AlexNet(\\n      (layer1): Sequential(\\n        (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\\n        (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\\n        (2): ReLU(inplace=True)\\n      )\\n      (layer2): Sequential(\\n        (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\\n        (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\\n        (2): ReLU(inplace=True)\\n      )\\n      (layer3): Sequential(\\n        (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\\n      )\\n      (layer4): Sequential(\\n        (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\\n      )\\n      (layer5): Sequential(\\n        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\\n        (1): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)\\n        (2): ReLU(inplace=True)\\n      )\\n      (fc1): Linear(in_features=2304, out_features=1024, bias=True)\\n      (fc2): Linear(in_features=1024, out_features=512, bias=True)\\n      (fc3): Linear(in_features=512, out_features=10, bias=True)\\n    )\\n\\n为直观的查看效果，选择一组测试集图片查看分类效果\\n\\n\\n```python\\nplt.figure(figsize=(14, 14))\\nfor i, (image, label) in enumerate(testloader):\\n    predict = torch.argmax(alexnet(image), axis=1)\\n    print((predict == label).sum()/label.shape[0])\\n    for j in range(image.shape[0]):\\n        plt.subplot(8, 8, j+1)\\n        plt.imshow(image[j, 0], cmap=\'gray\')\\n        plt.title(predict[j].item())\\n        plt.axis(\'off\')\\n    if i==1:\\n        break\\n```\\n\\n```shell\\ntensor(1.)\\n```\\n\\n![](http://www.madao33.com/media/AlexNet基于MNIST数据集的代码实现/AlexNet_MNIST_25_1.png)\\n\\n## 参考文献\\n\\n<div id=\\\"ref-1\\\"></div>\\n\\n- [1] [Sowndharya206/alexnet](https://github.com/Sowndharya206/alexnet)\\n\\n<div id=\\\"ref-2\\\"></div>\\n\\n- [2] [SAVE AND LOAD THE MODEL](https://pytorch.org/tutorials/beginner/basics/saveloadrun_tutorial.html)\",\"articleCover\":\"http://47.108.219.199:81/articles/7cac4683d77feefeb8285f6af47baeb9.png\",\"articleTitle\":\"AlexNet基于MNIST数据集的代码实现\",\"categoryName\":\"机器视觉\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[\"python\"],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',2,'madao','127.0.0.1','','2022-07-15 13:32:52',NULL),(1120,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"行内公式：$a=\\\\frac{1}{2}$\\n\\n跨行公式\\n\\n$$\\na=\\\\frac{1}{2}\\\\sum_{i=1}^n x_i\\n$$\",\"articleCover\":\"http://47.108.219.199:81/articles/7443853ef88159148435496c56b747c8.png\",\"articleTitle\":\"test-latex\",\"categoryName\":\"test\",\"id\":59,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',2,'madao','127.0.0.1','','2022-07-15 19:05:18',NULL),(1121,'页面模块','新增或修改','/admin/pages','com.minzheng.blog.controller.PageController.saveOrUpdatePage','保存或更新页面','[{\"pageCover\":\"http://47.108.219.199:81/config/0b57db789d41153c67d0436c64f38615.jpg\",\"pageLabel\":\"tools\",\"pageName\":\"工具\"}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',2,'madao','127.0.0.1','','2022-07-15 21:06:08',NULL),(1122,'页面模块','删除','/admin/pages/11','com.minzheng.blog.controller.PageController.deletePage','删除页面','[11]','DELETE','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',2,'madao','127.0.0.1','','2022-07-15 21:06:19',NULL);
/*!40000 ALTER TABLE `tb_operation_log` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tb_page`
--

DROP TABLE IF EXISTS `tb_page`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tb_page` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '页面id',
  `page_name` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '页面名',
  `page_label` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '页面标签',
  `page_cover` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '页面封面',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=906 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC COMMENT='页面';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tb_page`
--

LOCK TABLES `tb_page` WRITE;
/*!40000 ALTER TABLE `tb_page` DISABLE KEYS */;
INSERT INTO `tb_page` VALUES (1,'首页','home','http://47.108.219.199:81/config/22c22f495544829ba6c84f7a09f462ad.png','2021-08-07 10:32:36','2022-07-13 17:28:17'),(2,'归档','archive','http://47.108.219.199:81/config/9eadc16aef3ba2768f14224484d21970.jpg','2021-08-07 10:32:36','2022-07-13 17:28:51'),(3,'分类','category','http://47.108.219.199:81/config/80324cf7430a62008c470689bfe027ed.png','2021-08-07 10:32:36','2022-07-13 17:29:00'),(4,'标签','tag','http://47.108.219.199:81/config/aa8aac375cc5e3c8291e98c5d54f9b6b.jpg','2021-08-07 10:32:36','2022-07-13 17:29:12'),(5,'相册','album','http://47.108.219.199:81/config/04bd838cf287a62f6773fedd0b1cb9aa.png','2021-08-07 10:32:36','2022-07-13 17:28:39'),(6,'友链','link','http://47.108.219.199:81/config/b6b705b3cddde30b078b1aad11dbe74d.png','2021-08-07 10:32:36','2022-07-13 17:30:30'),(7,'关于','about','http://47.108.219.199:81/config/22c22f495544829ba6c84f7a09f462ad.png','2021-08-07 10:32:36','2022-07-13 17:29:20'),(8,'留言','message','http://47.108.219.199:81/config/2f2f6e06dec5233d504bcca88ac4d372.png','2021-08-07 10:32:36','2022-07-13 17:29:39'),(9,'个人中心','user','http://47.108.219.199:81/config/f17c5347dc8e2d26312663a6707dfd6b.png','2021-08-07 10:32:36','2022-07-13 17:29:49'),(10,'文章列表','articleList','http://47.108.219.199:81/config/ad81b05dbe5ee177434555b6890b813a.jpg','2021-08-10 15:36:19','2022-07-13 17:29:57'),(904,'说说','talk','http://47.108.219.199:81/config/1a4521086b3effba26d12c04916aca3d.jpg','2022-01-23 00:51:24','2022-07-13 17:30:15'),(905,'工具','tools','http://47.108.219.199:81/config/0b57db789d41153c67d0436c64f38615.jpg','2022-07-15 21:06:08',NULL);
/*!40000 ALTER TABLE `tb_page` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tb_photo`
--

DROP TABLE IF EXISTS `tb_photo`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tb_photo` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `album_id` int NOT NULL COMMENT '相册id',
  `photo_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '照片名',
  `photo_desc` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '照片描述',
  `photo_src` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '照片地址',
  `is_delete` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否删除',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=34 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC COMMENT='照片';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tb_photo`
--

LOCK TABLES `tb_photo` WRITE;
/*!40000 ALTER TABLE `tb_photo` DISABLE KEYS */;
INSERT INTO `tb_photo` VALUES (29,8,'1547223832335425538',NULL,'http://47.108.219.199:81/photos/38f824b33a076ce0f642d48d4d6aab6b.png',0,'2022-07-13 22:18:02',NULL),(30,8,'1547223832335425539',NULL,'http://47.108.219.199:81/photos/0b57db789d41153c67d0436c64f38615.jpg',0,'2022-07-13 22:18:02',NULL),(31,8,'1547223832335425540',NULL,'http://47.108.219.199:81/photos/22c22f495544829ba6c84f7a09f462ad.png',0,'2022-07-13 22:18:02',NULL),(32,8,'1547223832335425541',NULL,'http://47.108.219.199:81/photos/47c0efaea0bf3f8b82210ed4bd3451e0.jpg',0,'2022-07-13 22:18:02',NULL),(33,8,'1547223832335425542',NULL,'http://47.108.219.199:81/photos/9eadc16aef3ba2768f14224484d21970.jpg',0,'2022-07-13 22:18:02',NULL);
/*!40000 ALTER TABLE `tb_photo` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tb_photo_album`
--

DROP TABLE IF EXISTS `tb_photo_album`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tb_photo_album` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `album_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '相册名',
  `album_desc` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '相册描述',
  `album_cover` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '相册封面',
  `is_delete` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否删除',
  `status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '状态值 1公开 2私密',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC COMMENT='相册';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tb_photo_album`
--

LOCK TABLES `tb_photo_album` WRITE;
/*!40000 ALTER TABLE `tb_photo_album` DISABLE KEYS */;
INSERT INTO `tb_photo_album` VALUES (8,'wallpaper','壁纸分享','http://47.108.219.199:81/photos/38f824b33a076ce0f642d48d4d6aab6b.png',0,1,'2022-07-13 22:17:23',NULL);
/*!40000 ALTER TABLE `tb_photo_album` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tb_resource`
--

DROP TABLE IF EXISTS `tb_resource`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tb_resource` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `resource_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '资源名',
  `url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '权限路径',
  `request_method` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '请求方式',
  `parent_id` int DEFAULT NULL COMMENT '父权限id',
  `is_anonymous` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否匿名访问 0否 1是',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=288 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tb_resource`
--

LOCK TABLES `tb_resource` WRITE;
/*!40000 ALTER TABLE `tb_resource` DISABLE KEYS */;
INSERT INTO `tb_resource` VALUES (165,'分类模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),(166,'博客信息模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),(167,'友链模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),(168,'文章模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),(169,'日志模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),(170,'标签模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),(171,'照片模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),(172,'用户信息模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),(173,'用户账号模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),(174,'留言模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),(175,'相册模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),(176,'菜单模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),(177,'角色模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),(178,'评论模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),(179,'资源模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),(180,'页面模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),(181,'查看博客信息','/','GET',166,1,'2021-08-11 21:04:22','2021-08-11 21:05:29'),(182,'查看关于我信息','/about','GET',166,1,'2021-08-11 21:04:22','2021-08-11 21:05:29'),(183,'查看后台信息','/admin','GET',166,0,'2021-08-11 21:04:22',NULL),(184,'修改关于我信息','/admin/about','PUT',166,0,'2021-08-11 21:04:22',NULL),(185,'查看后台文章','/admin/articles','GET',168,0,'2021-08-11 21:04:22',NULL),(186,'添加或修改文章','/admin/articles','POST',168,0,'2021-08-11 21:04:22',NULL),(187,'恢复或删除文章','/admin/articles','PUT',168,0,'2021-08-11 21:04:22',NULL),(188,'物理删除文章','/admin/articles','DELETE',168,0,'2021-08-11 21:04:22',NULL),(189,'上传文章图片','/admin/articles/images','POST',168,0,'2021-08-11 21:04:22',NULL),(190,'修改文章置顶','/admin/articles/top','PUT',168,0,'2021-08-11 21:04:22',NULL),(191,'根据id查看后台文章','/admin/articles/*','GET',168,0,'2021-08-11 21:04:22',NULL),(192,'查看后台分类列表','/admin/categories','GET',165,0,'2021-08-11 21:04:22',NULL),(193,'添加或修改分类','/admin/categories','POST',165,0,'2021-08-11 21:04:22',NULL),(194,'删除分类','/admin/categories','DELETE',165,0,'2021-08-11 21:04:22',NULL),(195,'搜索文章分类','/admin/categories/search','GET',165,0,'2021-08-11 21:04:22',NULL),(196,'查询后台评论','/admin/comments','GET',178,0,'2021-08-11 21:04:22',NULL),(197,'删除评论','/admin/comments','DELETE',178,0,'2021-08-11 21:04:22',NULL),(198,'审核评论','/admin/comments/review','PUT',178,0,'2021-08-11 21:04:22',NULL),(199,'查看后台友链列表','/admin/links','GET',167,0,'2021-08-11 21:04:22',NULL),(200,'保存或修改友链','/admin/links','POST',167,0,'2021-08-11 21:04:22',NULL),(201,'删除友链','/admin/links','DELETE',167,0,'2021-08-11 21:04:22',NULL),(202,'查看菜单列表','/admin/menus','GET',176,0,'2021-08-11 21:04:22',NULL),(203,'新增或修改菜单','/admin/menus','POST',176,0,'2021-08-11 21:04:22',NULL),(204,'删除菜单','/admin/menus/*','DELETE',176,0,'2021-08-11 21:04:22',NULL),(205,'查看后台留言列表','/admin/messages','GET',174,0,'2021-08-11 21:04:22',NULL),(206,'删除留言','/admin/messages','DELETE',174,0,'2021-08-11 21:04:22',NULL),(207,'审核留言','/admin/messages/review','PUT',174,0,'2021-08-11 21:04:22',NULL),(208,'查看操作日志','/admin/operation/logs','GET',169,0,'2021-08-11 21:04:22',NULL),(209,'删除操作日志','/admin/operation/logs','DELETE',169,0,'2021-08-11 21:04:22',NULL),(210,'获取页面列表','/admin/pages','GET',180,0,'2021-08-11 21:04:22',NULL),(211,'保存或更新页面','/admin/pages','POST',180,0,'2021-08-11 21:04:22',NULL),(212,'删除页面','/admin/pages/*','DELETE',180,0,'2021-08-11 21:04:22',NULL),(213,'根据相册id获取照片列表','/admin/photos','GET',171,0,'2021-08-11 21:04:22',NULL),(214,'保存照片','/admin/photos','POST',171,0,'2021-08-11 21:04:22',NULL),(215,'更新照片信息','/admin/photos','PUT',171,0,'2021-08-11 21:04:22',NULL),(216,'删除照片','/admin/photos','DELETE',171,0,'2021-08-11 21:04:22',NULL),(217,'移动照片相册','/admin/photos/album','PUT',171,0,'2021-08-11 21:04:22',NULL),(218,'查看后台相册列表','/admin/photos/albums','GET',175,0,'2021-08-11 21:04:22',NULL),(219,'保存或更新相册','/admin/photos/albums','POST',175,0,'2021-08-11 21:04:22',NULL),(220,'上传相册封面','/admin/photos/albums/cover','POST',175,0,'2021-08-11 21:04:22',NULL),(221,'获取后台相册列表信息','/admin/photos/albums/info','GET',175,0,'2021-08-11 21:04:22',NULL),(222,'根据id删除相册','/admin/photos/albums/*','DELETE',175,0,'2021-08-11 21:04:22',NULL),(223,'根据id获取后台相册信息','/admin/photos/albums/*/info','GET',175,0,'2021-08-11 21:04:22',NULL),(224,'更新照片删除状态','/admin/photos/delete','PUT',171,0,'2021-08-11 21:04:22',NULL),(225,'查看资源列表','/admin/resources','GET',179,0,'2021-08-11 21:04:22',NULL),(226,'新增或修改资源','/admin/resources','POST',179,0,'2021-08-11 21:04:22',NULL),(227,'导入swagger接口','/admin/resources/import/swagger','GET',179,0,'2021-08-11 21:04:22',NULL),(228,'删除资源','/admin/resources/*','DELETE',179,0,'2021-08-11 21:04:22',NULL),(229,'保存或更新角色','/admin/role','POST',177,0,'2021-08-11 21:04:22',NULL),(230,'查看角色菜单选项','/admin/role/menus','GET',176,0,'2021-08-11 21:04:22',NULL),(231,'查看角色资源选项','/admin/role/resources','GET',179,0,'2021-08-11 21:04:22',NULL),(232,'查询角色列表','/admin/roles','GET',177,0,'2021-08-11 21:04:22',NULL),(233,'删除角色','/admin/roles','DELETE',177,0,'2021-08-11 21:04:22',NULL),(234,'查询后台标签列表','/admin/tags','GET',170,0,'2021-08-11 21:04:22',NULL),(235,'添加或修改标签','/admin/tags','POST',170,0,'2021-08-11 21:04:22',NULL),(236,'删除标签','/admin/tags','DELETE',170,0,'2021-08-11 21:04:22',NULL),(237,'搜索文章标签','/admin/tags/search','GET',170,0,'2021-08-11 21:04:22',NULL),(238,'查看当前用户菜单','/admin/user/menus','GET',176,0,'2021-08-11 21:04:22',NULL),(239,'查询后台用户列表','/admin/users','GET',173,0,'2021-08-11 21:04:22',NULL),(240,'修改用户禁用状态','/admin/users/disable','PUT',172,0,'2021-08-11 21:04:22',NULL),(241,'查看在线用户','/admin/users/online','GET',172,0,'2021-08-11 21:04:22',NULL),(242,'修改管理员密码','/admin/users/password','PUT',173,0,'2021-08-11 21:04:22',NULL),(243,'查询用户角色选项','/admin/users/role','GET',177,0,'2021-08-11 21:04:22',NULL),(244,'修改用户角色','/admin/users/role','PUT',172,0,'2021-08-11 21:04:22',NULL),(245,'下线用户','/admin/users/*/online','DELETE',172,0,'2021-08-11 21:04:22',NULL),(246,'获取网站配置','/admin/website/config','GET',166,0,'2021-08-11 21:04:22',NULL),(247,'更新网站配置','/admin/website/config','PUT',166,0,'2021-08-11 21:04:22',NULL),(248,'根据相册id查看照片列表','/albums/*/photos','GET',171,1,'2021-08-11 21:04:22','2021-08-11 21:06:35'),(249,'查看首页文章','/articles','GET',168,1,'2021-08-11 21:04:22','2021-08-11 21:05:45'),(250,'查看文章归档','/articles/archives','GET',168,1,'2021-08-11 21:04:22','2021-08-11 21:05:47'),(251,'根据条件查询文章','/articles/condition','GET',168,1,'2021-08-11 21:04:22','2021-08-11 21:05:47'),(252,'搜索文章','/articles/search','GET',168,1,'2021-08-11 21:04:22','2021-08-11 21:05:48'),(253,'根据id查看文章','/articles/*','GET',168,1,'2021-08-11 21:04:22','2021-08-11 21:05:49'),(254,'点赞文章','/articles/*/like','POST',168,0,'2021-08-11 21:04:22',NULL),(255,'查看分类列表','/categories','GET',165,1,'2021-08-11 21:04:22','2021-08-11 21:05:26'),(256,'查询评论','/comments','GET',178,1,'2021-08-11 21:04:22','2021-08-11 21:07:33'),(257,'添加评论','/comments','POST',178,0,'2021-08-11 21:04:22','2021-08-11 21:10:05'),(258,'评论点赞','/comments/*/like','POST',178,0,'2021-08-11 21:04:22',NULL),(259,'查询评论下的回复','/comments/*/replies','GET',178,1,'2021-08-11 21:04:22','2021-08-11 21:07:30'),(260,'查看友链列表','/links','GET',167,1,'2021-08-11 21:04:22','2021-08-11 21:05:41'),(261,'查看留言列表','/messages','GET',174,1,'2021-08-11 21:04:22','2021-08-11 21:07:14'),(262,'添加留言','/messages','POST',174,1,'2021-08-11 21:04:22','2021-08-11 21:07:15'),(263,'获取相册列表','/photos/albums','GET',175,1,'2021-08-11 21:04:22','2021-08-11 21:07:20'),(264,'用户注册','/register','POST',173,1,'2021-08-11 21:04:22','2021-08-11 21:07:01'),(265,'查询标签列表','/tags','GET',170,1,'2021-08-11 21:04:22','2021-08-11 21:06:30'),(267,'更新用户头像','/users/avatar','POST',172,0,'2021-08-11 21:04:22',NULL),(268,'发送邮箱验证码','/users/code','GET',173,1,'2021-08-11 21:04:22','2021-08-11 21:07:02'),(269,'绑定用户邮箱','/users/email','POST',172,0,'2021-08-11 21:04:22',NULL),(270,'更新用户信息','/users/info','PUT',172,0,'2021-08-11 21:04:22',NULL),(271,'qq登录','/users/oauth/qq','POST',173,0,'2021-08-11 21:04:22','2022-07-15 19:41:31'),(272,'微博登录','/users/oauth/weibo','POST',173,0,'2021-08-11 21:04:22','2022-07-15 19:41:31'),(273,'修改密码','/users/password','PUT',173,1,'2021-08-11 21:04:22','2021-08-11 21:07:09'),(274,'上传语音','/voice','POST',166,1,'2021-08-11 21:04:22','2021-08-11 21:05:33'),(275,'上传访客信息','/report','POST',166,1,'2021-08-24 00:32:05','2021-08-24 00:32:07'),(276,'获取用户区域分布','/admin/users/area','GET',173,1,'2021-08-24 00:32:35','2022-07-15 19:41:32'),(278,'说说模块',NULL,NULL,NULL,0,'2022-01-24 01:29:13',NULL),(279,'查看首页说说','/home/talks','GET',278,1,'2022-01-24 01:29:29','2022-01-24 01:31:56'),(280,'查看说说列表','/talks','GET',278,1,'2022-01-24 01:29:52','2022-01-24 01:31:56'),(281,'根据id查看说说','/talks/*','GET',278,1,'2022-01-24 01:30:10','2022-01-24 01:31:57'),(282,'点赞说说','/talks/*/like','POST',278,0,'2022-01-24 01:30:30',NULL),(283,'上传说说图片','/admin/talks/images','POST',278,0,'2022-01-24 01:30:46',NULL),(284,'保存或修改说说','/admin/talks','POST',278,0,'2022-01-24 01:31:04',NULL),(285,'删除说说','/admin/talks','DELETE',278,0,'2022-01-24 01:31:22',NULL),(286,'查看后台说说','/admin/talks','GET',278,0,'2022-01-24 01:31:38',NULL),(287,'根据id查看后台说说','/admin/talks/*','GET',278,0,'2022-01-24 01:31:53','2022-01-24 01:33:14');
/*!40000 ALTER TABLE `tb_resource` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tb_role`
--

DROP TABLE IF EXISTS `tb_role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tb_role` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键id',
  `role_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '角色名',
  `role_label` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '角色描述',
  `is_disable` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否禁用  0否 1是',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tb_role`
--

LOCK TABLES `tb_role` WRITE;
/*!40000 ALTER TABLE `tb_role` DISABLE KEYS */;
INSERT INTO `tb_role` VALUES (1,'管理员','admin',0,'2021-03-22 14:10:21','2022-01-24 01:32:26'),(2,'用户','user',0,'2021-03-22 14:25:25','2022-01-24 01:32:21'),(3,'测试','test',0,'2021-03-22 14:42:23','2022-01-24 01:32:59');
/*!40000 ALTER TABLE `tb_role` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tb_role_menu`
--

DROP TABLE IF EXISTS `tb_role_menu`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tb_role_menu` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `role_id` int DEFAULT NULL COMMENT '角色id',
  `menu_id` int DEFAULT NULL COMMENT '菜单id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2527 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tb_role_menu`
--

LOCK TABLES `tb_role_menu` WRITE;
/*!40000 ALTER TABLE `tb_role_menu` DISABLE KEYS */;
INSERT INTO `tb_role_menu` VALUES (1397,8,1),(1398,8,2),(1399,8,6),(1400,8,7),(1401,8,8),(1402,8,9),(1403,8,10),(1404,8,3),(1405,8,11),(1406,8,12),(1407,8,202),(1408,8,13),(1409,8,14),(1410,8,201),(1411,8,4),(1412,8,16),(1413,8,15),(1414,8,17),(1415,8,18),(1416,8,19),(1417,8,20),(1418,8,5),(1595,9,1),(1596,9,2),(1597,9,6),(1598,9,7),(1599,9,8),(1600,9,9),(1601,9,10),(1602,9,3),(1603,9,11),(1604,9,12),(1605,9,202),(1606,9,13),(1607,9,14),(1608,9,201),(1609,9,4),(1610,9,16),(1611,9,15),(1612,9,17),(1613,9,18),(1614,9,19),(1615,9,20),(1616,9,5),(1639,13,2),(1640,13,6),(1641,13,7),(1642,13,8),(1643,13,9),(1644,13,10),(1645,13,3),(1646,13,11),(1647,13,12),(2366,14,1),(2367,14,2),(2461,1,1),(2462,1,2),(2463,1,6),(2464,1,7),(2465,1,8),(2466,1,9),(2467,1,10),(2468,1,3),(2469,1,11),(2470,1,12),(2471,1,202),(2472,1,13),(2473,1,201),(2474,1,213),(2475,1,14),(2476,1,15),(2477,1,16),(2478,1,4),(2479,1,214),(2480,1,209),(2481,1,17),(2482,1,18),(2483,1,205),(2484,1,206),(2485,1,208),(2486,1,210),(2487,1,215),(2488,1,216),(2489,1,217),(2490,1,218),(2491,1,19),(2492,1,20),(2493,1,5),(2494,3,1),(2495,3,2),(2496,3,6),(2497,3,7),(2498,3,8),(2499,3,9),(2500,3,10),(2501,3,3),(2502,3,11),(2503,3,12),(2504,3,202),(2505,3,13),(2506,3,201),(2507,3,213),(2508,3,14),(2509,3,15),(2510,3,16),(2511,3,4),(2512,3,214),(2513,3,209),(2514,3,17),(2515,3,18),(2516,3,205),(2517,3,206),(2518,3,208),(2519,3,210),(2520,3,215),(2521,3,216),(2522,3,217),(2523,3,218),(2524,3,19),(2525,3,20),(2526,3,5);
/*!40000 ALTER TABLE `tb_role_menu` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tb_role_resource`
--

DROP TABLE IF EXISTS `tb_role_resource`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tb_role_resource` (
  `id` int NOT NULL AUTO_INCREMENT,
  `role_id` int DEFAULT NULL COMMENT '角色id',
  `resource_id` int DEFAULT NULL COMMENT '权限id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=4886 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tb_role_resource`
--

LOCK TABLES `tb_role_resource` WRITE;
/*!40000 ALTER TABLE `tb_role_resource` DISABLE KEYS */;
INSERT INTO `tb_role_resource` VALUES (4750,14,238),(4751,2,254),(4752,2,267),(4753,2,269),(4754,2,270),(4755,2,257),(4756,2,258),(4757,2,282),(4758,1,165),(4759,1,192),(4760,1,193),(4761,1,194),(4762,1,195),(4763,1,166),(4764,1,183),(4765,1,184),(4766,1,246),(4767,1,247),(4768,1,167),(4769,1,199),(4770,1,200),(4771,1,201),(4772,1,168),(4773,1,185),(4774,1,186),(4775,1,187),(4776,1,188),(4777,1,189),(4778,1,190),(4779,1,191),(4780,1,254),(4781,1,169),(4782,1,208),(4783,1,209),(4784,1,170),(4785,1,234),(4786,1,235),(4787,1,236),(4788,1,237),(4789,1,171),(4790,1,213),(4791,1,214),(4792,1,215),(4793,1,216),(4794,1,217),(4795,1,224),(4796,1,172),(4797,1,240),(4798,1,241),(4799,1,244),(4800,1,245),(4801,1,267),(4802,1,269),(4803,1,270),(4804,1,173),(4805,1,239),(4806,1,242),(4807,1,276),(4808,1,174),(4809,1,205),(4810,1,206),(4811,1,207),(4812,1,175),(4813,1,218),(4814,1,219),(4815,1,220),(4816,1,221),(4817,1,222),(4818,1,223),(4819,1,176),(4820,1,202),(4821,1,203),(4822,1,204),(4823,1,230),(4824,1,238),(4825,1,177),(4826,1,229),(4827,1,232),(4828,1,233),(4829,1,243),(4830,1,178),(4831,1,196),(4832,1,197),(4833,1,198),(4834,1,257),(4835,1,258),(4836,1,179),(4837,1,225),(4838,1,226),(4839,1,227),(4840,1,228),(4841,1,231),(4842,1,180),(4843,1,210),(4844,1,211),(4845,1,212),(4846,1,278),(4847,1,282),(4848,1,283),(4849,1,284),(4850,1,285),(4851,1,286),(4852,1,287),(4853,3,192),(4854,3,195),(4855,3,183),(4856,3,246),(4857,3,199),(4858,3,185),(4859,3,191),(4860,3,254),(4861,3,208),(4862,3,234),(4863,3,237),(4864,3,213),(4865,3,241),(4866,3,239),(4867,3,276),(4868,3,205),(4869,3,218),(4870,3,221),(4871,3,223),(4872,3,202),(4873,3,230),(4874,3,238),(4875,3,232),(4876,3,243),(4877,3,196),(4878,3,257),(4879,3,258),(4880,3,225),(4881,3,231),(4882,3,210),(4883,3,282),(4884,3,286),(4885,3,287);
/*!40000 ALTER TABLE `tb_role_resource` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tb_tag`
--

DROP TABLE IF EXISTS `tb_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tb_tag` (
  `id` int NOT NULL AUTO_INCREMENT,
  `tag_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '标签名',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=40 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tb_tag`
--

LOCK TABLES `tb_tag` WRITE;
/*!40000 ALTER TABLE `tb_tag` DISABLE KEYS */;
INSERT INTO `tb_tag` VALUES (29,'测试标签','2022-01-24 23:33:57',NULL),(32,'强化学习','2022-07-13 17:00:33',NULL),(33,'交叉熵方法','2022-07-13 17:00:33',NULL),(34,'深度学习','2022-07-13 22:43:33',NULL),(35,'机器视觉','2022-07-13 22:43:33',NULL),(36,'图像识别','2022-07-13 22:43:33',NULL),(37,'Java','2022-07-14 20:52:14',NULL),(38,'test','2022-07-15 12:17:47',NULL),(39,'python','2022-07-15 13:32:52',NULL);
/*!40000 ALTER TABLE `tb_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tb_talk`
--

DROP TABLE IF EXISTS `tb_talk`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tb_talk` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '说说id',
  `user_id` int NOT NULL COMMENT '用户id',
  `content` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '说说内容',
  `images` varchar(2500) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '图片',
  `is_top` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否置顶',
  `status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '状态 1.公开 2.私密',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=51 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tb_talk`
--

LOCK TABLES `tb_talk` WRITE;
/*!40000 ALTER TABLE `tb_talk` DISABLE KEYS */;
INSERT INTO `tb_talk` VALUES (50,2,'网站基本功能修改完毕',NULL,0,1,'2022-07-15 19:42:13',NULL);
/*!40000 ALTER TABLE `tb_talk` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tb_unique_view`
--

DROP TABLE IF EXISTS `tb_unique_view`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tb_unique_view` (
  `id` int NOT NULL AUTO_INCREMENT,
  `views_count` int NOT NULL COMMENT '访问量',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=537 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tb_unique_view`
--

LOCK TABLES `tb_unique_view` WRITE;
/*!40000 ALTER TABLE `tb_unique_view` DISABLE KEYS */;
INSERT INTO `tb_unique_view` VALUES (534,1,'2022-07-13 00:00:00',NULL),(535,1,'2022-07-14 00:00:00',NULL),(536,1,'2022-07-15 00:00:00',NULL);
/*!40000 ALTER TABLE `tb_unique_view` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tb_user_auth`
--

DROP TABLE IF EXISTS `tb_user_auth`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tb_user_auth` (
  `id` int NOT NULL AUTO_INCREMENT,
  `user_info_id` int NOT NULL COMMENT '用户信息id',
  `username` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '用户名',
  `password` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '密码',
  `login_type` tinyint(1) NOT NULL COMMENT '登录类型',
  `ip_address` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '用户登录ip',
  `ip_source` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT 'ip来源',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `last_login_time` datetime DEFAULT NULL COMMENT '上次登录时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `username` (`username`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=997 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tb_user_auth`
--

LOCK TABLES `tb_user_auth` WRITE;
/*!40000 ALTER TABLE `tb_user_auth` DISABLE KEYS */;
INSERT INTO `tb_user_auth` VALUES (1,1,'madao33_com@qq.com','$2a$10$AkxkZaqcxEXdiNE1nrgW1.ms3aS9C5ImXMf8swkWUJuFGMqDl.TPW',1,'127.0.0.1','','2021-08-12 15:43:18','2022-07-14 21:26:44','2022-07-14 21:26:44'),(2,2,'1434530160@qq.com','$2a$10$ygF2WtBWiaKWfxyQViO0mesoSOKXN4lhPiI/d.k0Cwz44nWlfhDy.',1,'0:0:0:0:0:0:0:1','','2022-07-13 22:05:40','2022-07-18 20:24:19','2022-07-18 20:24:19');
/*!40000 ALTER TABLE `tb_user_auth` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tb_user_info`
--

DROP TABLE IF EXISTS `tb_user_info`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tb_user_info` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '用户ID',
  `email` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '邮箱号',
  `nickname` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '用户昵称',
  `avatar` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT '' COMMENT '用户头像',
  `intro` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '用户简介',
  `web_site` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '个人网站',
  `is_disable` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否禁用',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1007 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tb_user_info`
--

LOCK TABLES `tb_user_info` WRITE;
/*!40000 ALTER TABLE `tb_user_info` DISABLE KEYS */;
INSERT INTO `tb_user_info` VALUES (1,'madao33_com@qq.com','madao33','http://47.108.219.199:81/avatar/9a69d33771a766acba9ccf5a668166af.jpg','madao33_com@163.com','madao33.com',0,'2022-07-13 22:05:40','2022-07-14 21:27:37'),(2,'1434530160@qq.com','madao','http://47.108.219.199:81/avatar/10d5fb60938d9351d46ba85fa2e2832a.jpg','1434530160@qq.com','madao33.com',0,'2022-07-13 22:05:40','2022-07-14 21:28:09');
/*!40000 ALTER TABLE `tb_user_info` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tb_user_role`
--

DROP TABLE IF EXISTS `tb_user_role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tb_user_role` (
  `id` int NOT NULL AUTO_INCREMENT,
  `user_id` int DEFAULT NULL COMMENT '用户id',
  `role_id` int DEFAULT NULL COMMENT '角色id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1008 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tb_user_role`
--

LOCK TABLES `tb_user_role` WRITE;
/*!40000 ALTER TABLE `tb_user_role` DISABLE KEYS */;
INSERT INTO `tb_user_role` VALUES (1,1,1),(2,2,1);
/*!40000 ALTER TABLE `tb_user_role` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tb_website_config`
--

DROP TABLE IF EXISTS `tb_website_config`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tb_website_config` (
  `id` int NOT NULL AUTO_INCREMENT,
  `config` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '配置信息',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tb_website_config`
--

LOCK TABLES `tb_website_config` WRITE;
/*!40000 ALTER TABLE `tb_website_config` DISABLE KEYS */;
INSERT INTO `tb_website_config` VALUES (1,'{\"alipayQRCode\":\"https://static.talkxj.com/photos/13d83d77cc1f7e4e0437d7feaf56879f.png\",\"gitee\":\"https://gitee.com/madao33\",\"github\":\"https://github.com/madao33\",\"isChatRoom\":1,\"isCommentReview\":0,\"isEmailNotice\":1,\"isMessageReview\":0,\"isMusicPlayer\":1,\"isReward\":1,\"qq\":\"3282389858\",\"socialLoginList\":[\"qq\",\"weibo\"],\"socialUrlList\":[\"qq\",\"github\",\"gitee\"],\"touristAvatar\":\"https://static.talkxj.com/photos/0bca52afdb2b9998132355d716390c9f.png\",\"userAvatar\":\"https://static.talkxj.com/config/2cd793c8744199053323546875655f32.jpg\",\"websiteAuthor\":\"madao33\",\"websiteAvatar\":\"http://47.108.219.199:81/config/9a69d33771a766acba9ccf5a668166af.jpg\",\"websiteCreateTime\":\"2022-07-13\",\"websiteIntro\":\"Nothing is more pratical than a good theory.\",\"websiteName\":\"madao33 blog\",\"websiteNotice\":\"一个分享个人笔记的网站，同时也有一些关于机器学习的小demo，有问题的可以联系本人微信:madao33_com,或者发送邮件：madao33_com@163.com\",\"websiteRecordNo\":\"\",\"websocketUrl\":\"ws://127.0.0.1:8080/websocket\",\"weiXinQRCode\":\"https://static.talkxj.com/photos/4f767ef84e55ab9ad42b2d20e51deca1.png\"}','2021-08-09 19:37:30','2022-07-15 09:52:04');
/*!40000 ALTER TABLE `tb_website_config` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2022-07-18 20:55:56
